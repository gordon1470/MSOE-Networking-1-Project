ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.global	rxMessageLength
  43              		.align	2
  44              		.type	rxMessageLength, %object
  45              		.size	rxMessageLength, 4
  46              	rxMessageLength:
  47 000c 00000000 		.space	4
  48              		.global	TX_DESTINATION_ADDRESS
  49              		.align	2
  50              		.type	TX_DESTINATION_ADDRESS, %object
  51              		.size	TX_DESTINATION_ADDRESS, 4
  52              	TX_DESTINATION_ADDRESS:
  53 0010 00000000 		.space	4
  54              		.comm	timerExpired,1,1
  55              		.comm	dataTransmissionComplete,1,1
  56              		.comm	powerOnEdge,1,1
  57              		.comm	networkState,1,1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 2


  58              		.comm	crcState,1,1
  59              		.comm	receivedHexValue,1,1
  60              		.section	.text.Idle_Collision_ISR,"ax",%progbits
  61              		.align	2
  62              		.global	Idle_Collision_ISR
  63              		.thumb
  64              		.thumb_func
  65              		.type	Idle_Collision_ISR, %function
  66              	Idle_Collision_ISR:
  67              	.LFB63:
  68              		.file 1 ".\\main.c"
   1:.\main.c      **** #define START_OF_HEADER 0x71
   2:.\main.c      **** #define HEADER_CRC 0x75
   3:.\main.c      **** #define SOURCE_ADDRESS_0 0x40 
   4:.\main.c      **** #define SOURCE_ADDRESS_1 0x41
   5:.\main.c      **** #define SOURCE_ADDRESS_2 0x42
   6:.\main.c      **** #define INDEX_OF_MSB_ASCII 6
   7:.\main.c      **** #define INDEX_OF_MSB_HEX 7
   8:.\main.c      **** #define LENGTH_OF_HEADER 7
   9:.\main.c      **** #define HIGH 1
  10:.\main.c      **** #define LENGTH_OF_BYTE 8
  11:.\main.c      **** #define START_BIT 2
  12:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
  13:.\main.c      **** #define VERSION_NUMBER 1
  14:.\main.c      **** 
  15:.\main.c      **** 
  16:.\main.c      **** #include <device.h>
  17:.\main.c      **** #include <stdbool.h>
  18:.\main.c      **** #include <stdlib.h> //For random number generator
  19:.\main.c      **** #include <time.h>
  20:.\main.c      **** #include "stdio.h"
  21:.\main.c      **** 
  22:.\main.c      **** 
  23:.\main.c      **** int getRandomNumber();
  24:.\main.c      **** void initDiffManEncodedArray();
  25:.\main.c      **** void headerToDiffMan(uint8 *);
  26:.\main.c      **** void hexToDiffMan(uint8);
  27:.\main.c      **** void stringToDiffMan(char*, int);
  28:.\main.c      **** void asciiToDiffMan(char);
  29:.\main.c      **** void transmitData();
  30:.\main.c      **** void setNetworkStateOnLEDs();
  31:.\main.c      **** void diffManToHex();
  32:.\main.c      **** void printChar();
  33:.\main.c      **** bool headerCheck(uint8 *);
  34:.\main.c      **** 
  35:.\main.c      **** int diffManEncodedData[864];
  36:.\main.c      **** uint8 diffManReceivedData[108];
  37:.\main.c      **** char rxChar[108];
  38:.\main.c      **** int receivedDataIndex, receivedDataCount;
  39:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, rxMessageLength=0, TX_DESTINAT
  40:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge;
  41:.\main.c      **** enum state {idle, busy, collision} networkState;
  42:.\main.c      **** enum crc {none, header, message, both} crcState;
  43:.\main.c      **** 
  44:.\main.c      **** char receivedHexValue;
  45:.\main.c      **** 
  46:.\main.c      **** CY_ISR(Idle_Collision_ISR){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 3


  69              		.loc 1 46 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 00AF     		add	r7, sp, #0
  78              		.cfi_def_cfa_register 7
  47:.\main.c      ****     networkState = idle;
  79              		.loc 1 47 0
  80 0004 074B     		ldr	r3, .L4
  81 0006 0022     		movs	r2, #0
  82 0008 1A70     		strb	r2, [r3]
  48:.\main.c      ****     if(Receive_Read() == HIGH){
  83              		.loc 1 48 0
  84 000a FFF7FEFF 		bl	Receive_Read
  85 000e 0346     		mov	r3, r0
  86 0010 012B     		cmp	r3, #1
  87 0012 03D1     		bne	.L2
  49:.\main.c      ****         networkState = idle;
  88              		.loc 1 49 0
  89 0014 034B     		ldr	r3, .L4
  90 0016 0022     		movs	r2, #0
  91 0018 1A70     		strb	r2, [r3]
  92 001a 02E0     		b	.L1
  93              	.L2:
  50:.\main.c      ****     }
  51:.\main.c      ****     else{
  52:.\main.c      ****         networkState = collision;
  94              		.loc 1 52 0
  95 001c 014B     		ldr	r3, .L4
  96 001e 0222     		movs	r2, #2
  97 0020 1A70     		strb	r2, [r3]
  98              	.L1:
  53:.\main.c      ****     }
  54:.\main.c      **** }
  99              		.loc 1 54 0
 100 0022 80BD     		pop	{r7, pc}
 101              	.L5:
 102              		.align	2
 103              	.L4:
 104 0024 00000000 		.word	networkState
 105              		.cfi_endproc
 106              	.LFE63:
 107              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 108              		.section	.text.Edge_detect_ISR,"ax",%progbits
 109              		.align	2
 110              		.global	Edge_detect_ISR
 111              		.thumb
 112              		.thumb_func
 113              		.type	Edge_detect_ISR, %function
 114              	Edge_detect_ISR:
 115              	.LFB64:
  55:.\main.c      **** 
  56:.\main.c      **** CY_ISR(Edge_detect_ISR){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 4


 116              		.loc 1 56 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120 0000 98B5     		push	{r3, r4, r7, lr}
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 3, -16
 123              		.cfi_offset 4, -12
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  57:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  58:.\main.c      ****     Idle_Collision_Timer_Start();
 128              		.loc 1 58 0
 129 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  59:.\main.c      **** 
  60:.\main.c      ****     //Ignore power on edge
  61:.\main.c      ****     if(!powerOnEdge){
 130              		.loc 1 61 0
 131 0008 0F4B     		ldr	r3, .L9
 132 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 133 000c 83F00103 		eor	r3, r3, #1
 134 0010 DBB2     		uxtb	r3, r3
 135 0012 002B     		cmp	r3, #0
 136 0014 0FD0     		beq	.L7
  62:.\main.c      ****         Receive_Timer_Start();
 137              		.loc 1 62 0
 138 0016 FFF7FEFF 		bl	Receive_Timer_Start
  63:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 139              		.loc 1 63 0
 140 001a 0C4B     		ldr	r3, .L9+4
 141 001c 1C68     		ldr	r4, [r3]
 142 001e FFF7FEFF 		bl	Receive_Read
 143 0022 0346     		mov	r3, r0
 144 0024 1A46     		mov	r2, r3
 145 0026 0A4B     		ldr	r3, .L9+8
 146 0028 1A55     		strb	r2, [r3, r4]
  64:.\main.c      ****         receivedDataCount++;
 147              		.loc 1 64 0
 148 002a 084B     		ldr	r3, .L9+4
 149 002c 1B68     		ldr	r3, [r3]
 150 002e 0133     		adds	r3, r3, #1
 151 0030 064A     		ldr	r2, .L9+4
 152 0032 1360     		str	r3, [r2]
 153 0034 02E0     		b	.L8
 154              	.L7:
  65:.\main.c      ****     }
  66:.\main.c      ****     else{
  67:.\main.c      ****         powerOnEdge = false;
 155              		.loc 1 67 0
 156 0036 044B     		ldr	r3, .L9
 157 0038 0022     		movs	r2, #0
 158 003a 1A70     		strb	r2, [r3]
 159              	.L8:
  68:.\main.c      ****     }
  69:.\main.c      ****     networkState = busy;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 5


 160              		.loc 1 69 0
 161 003c 054B     		ldr	r3, .L9+12
 162 003e 0122     		movs	r2, #1
 163 0040 1A70     		strb	r2, [r3]
  70:.\main.c      ****     Receive_ClearInterrupt();
 164              		.loc 1 70 0
 165 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  71:.\main.c      **** }
 166              		.loc 1 71 0
 167 0046 98BD     		pop	{r3, r4, r7, pc}
 168              	.L10:
 169              		.align	2
 170              	.L9:
 171 0048 00000000 		.word	powerOnEdge
 172 004c 00000000 		.word	receivedDataCount
 173 0050 00000000 		.word	diffManReceivedData
 174 0054 00000000 		.word	networkState
 175              		.cfi_endproc
 176              	.LFE64:
 177              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 178              		.section	.text.TimerHandler,"ax",%progbits
 179              		.align	2
 180              		.global	TimerHandler
 181              		.thumb
 182              		.thumb_func
 183              		.type	TimerHandler, %function
 184              	TimerHandler:
 185              	.LFB65:
  72:.\main.c      **** 
  73:.\main.c      **** CY_ISR(TimerHandler){
 186              		.loc 1 73 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
  74:.\main.c      ****     Timer_Stop();
 196              		.loc 1 74 0
 197 0004 FFF7FEFF 		bl	Timer_Stop
  75:.\main.c      ****     timerExpired = true;
 198              		.loc 1 75 0
 199 0008 024B     		ldr	r3, .L12
 200 000a 0122     		movs	r2, #1
 201 000c 1A70     		strb	r2, [r3]
  76:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 202              		.loc 1 76 0
 203 000e 024B     		ldr	r3, .L12+4
 204 0010 1B78     		ldrb	r3, [r3]
  77:.\main.c      **** }
 205              		.loc 1 77 0
 206 0012 80BD     		pop	{r7, pc}
 207              	.L13:
 208              		.align	2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 6


 209              	.L12:
 210 0014 00000000 		.word	timerExpired
 211 0018 6B640040 		.word	1073767531
 212              		.cfi_endproc
 213              	.LFE65:
 214              		.size	TimerHandler, .-TimerHandler
 215              		.section	.text.ReceiveTimerISR,"ax",%progbits
 216              		.align	2
 217              		.global	ReceiveTimerISR
 218              		.thumb
 219              		.thumb_func
 220              		.type	ReceiveTimerISR, %function
 221              	ReceiveTimerISR:
 222              	.LFB66:
  78:.\main.c      **** 
  79:.\main.c      **** //TODO changing from reading to just repeting last data
  80:.\main.c      **** CY_ISR(ReceiveTimerISR){
 223              		.loc 1 80 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 0000 80B4     		push	{r7}
 229              		.cfi_def_cfa_offset 4
 230              		.cfi_offset 7, -4
 231 0002 00AF     		add	r7, sp, #0
 232              		.cfi_def_cfa_register 7
  81:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 233              		.loc 1 81 0
 234 0004 094B     		ldr	r3, .L15
 235 0006 1B68     		ldr	r3, [r3]
 236 0008 084A     		ldr	r2, .L15
 237 000a 1268     		ldr	r2, [r2]
 238 000c 013A     		subs	r2, r2, #1
 239 000e 0849     		ldr	r1, .L15+4
 240 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 241 0012 074A     		ldr	r2, .L15+4
 242 0014 D154     		strb	r1, [r2, r3]
  82:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  83:.\main.c      ****     receivedDataCount++;
 243              		.loc 1 83 0
 244 0016 054B     		ldr	r3, .L15
 245 0018 1B68     		ldr	r3, [r3]
 246 001a 0133     		adds	r3, r3, #1
 247 001c 034A     		ldr	r2, .L15
 248 001e 1360     		str	r3, [r2]
  84:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 249              		.loc 1 84 0
 250 0020 044B     		ldr	r3, .L15+8
 251 0022 1B78     		ldrb	r3, [r3]
  85:.\main.c      **** }
 252              		.loc 1 85 0
 253 0024 BD46     		mov	sp, r7
 254              		.cfi_def_cfa_register 13
 255              		@ sp needed
 256 0026 5DF8047B 		ldr	r7, [sp], #4
 257              		.cfi_restore 7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 7


 258              		.cfi_def_cfa_offset 0
 259 002a 7047     		bx	lr
 260              	.L16:
 261              		.align	2
 262              	.L15:
 263 002c 00000000 		.word	receivedDataCount
 264 0030 00000000 		.word	diffManReceivedData
 265 0034 6F640040 		.word	1073767535
 266              		.cfi_endproc
 267              	.LFE66:
 268              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 269              		.section	.text.main,"ax",%progbits
 270              		.align	2
 271              		.global	main
 272              		.thumb
 273              		.thumb_func
 274              		.type	main, %function
 275              	main:
 276              	.LFB67:
  86:.\main.c      **** 
  87:.\main.c      **** int main()
  88:.\main.c      **** {
 277              		.loc 1 88 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 144
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 A4B0     		sub	sp, sp, #144
 286              		.cfi_def_cfa_offset 152
 287 0004 00AF     		add	r7, sp, #0
 288              		.cfi_def_cfa_register 7
  89:.\main.c      ****     char rx;
  90:.\main.c      ****     char lineString[108];
  91:.\main.c      ****     uint8 headerBytes[8];
  92:.\main.c      ****     int stringPosition = 0;//after header
 289              		.loc 1 92 0
 290 0006 0023     		movs	r3, #0
 291 0008 C7F88C30 		str	r3, [r7, #140]
  93:.\main.c      ****     timerExpired = false;
 292              		.loc 1 93 0
 293 000c 984B     		ldr	r3, .L40
 294 000e 0022     		movs	r2, #0
 295 0010 1A70     		strb	r2, [r3]
  94:.\main.c      ****     dataTransmissionComplete = false;
 296              		.loc 1 94 0
 297 0012 984B     		ldr	r3, .L40+4
 298 0014 0022     		movs	r2, #0
 299 0016 1A70     		strb	r2, [r3]
  95:.\main.c      **** 
  96:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge.
 300              		.loc 1 96 0
 301 0018 974B     		ldr	r3, .L40+8
 302 001a 0122     		movs	r2, #1
 303 001c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 8


  97:.\main.c      ****     //We want to ignore this edge on the rising edge.
  98:.\main.c      **** 
  99:.\main.c      ****     /*
 100:.\main.c      ****     Get value from system clock and
 101:.\main.c      ****     place in seconds variable.
 102:.\main.c      ****     */
 103:.\main.c      ****     time_t seconds;
 104:.\main.c      ****     time(&seconds);
 304              		.loc 1 104 0
 305 001e 07F10C03 		add	r3, r7, #12
 306 0022 1846     		mov	r0, r3
 307 0024 FFF7FEFF 		bl	time
 105:.\main.c      ****     /*
 106:.\main.c      ****     Convert seconds to a unsigned
 107:.\main.c      ****     integer for seed for random number generator
 108:.\main.c      ****     */
 109:.\main.c      ****     srand((unsigned int) seconds);
 308              		.loc 1 109 0
 309 0028 FB68     		ldr	r3, [r7, #12]
 310 002a 1846     		mov	r0, r3
 311 002c FFF7FEFF 		bl	srand
 110:.\main.c      **** 
 111:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 312              		.loc 1 111 0
 313 0030 0120     		movs	r0, #1
 314 0032 FFF7FEFF 		bl	TX_pin_Write
 112:.\main.c      **** 
 113:.\main.c      ****     /* Enable Global Interrupts */
 114:.\main.c      ****     CyGlobalIntEnable;
 315              		.loc 1 114 0
 316              	@ 114 ".\main.c" 1
 317 0036 62B6     		CPSIE   i
 318              	@ 0 "" 2
 115:.\main.c      **** 
 116:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 319              		.loc 1 116 0
 320              		.thumb
 321 0038 FFF7FEFF 		bl	Receive_ClearInterrupt
 117:.\main.c      **** 
 118:.\main.c      ****     LCD_Start();
 322              		.loc 1 118 0
 323 003c FFF7FEFF 		bl	LCD_Start
 119:.\main.c      **** 
 120:.\main.c      ****     //enable collision detection
 121:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 324              		.loc 1 121 0
 325 0040 8E48     		ldr	r0, .L40+12
 326 0042 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 122:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 327              		.loc 1 122 0
 328 0046 8E48     		ldr	r0, .L40+16
 329 0048 FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 123:.\main.c      ****     Idle_Collision_Timer_Start();
 330              		.loc 1 123 0
 331 004c FFF7FEFF 		bl	Idle_Collision_Timer_Start
 124:.\main.c      **** 
 125:.\main.c      ****     /* Start USBFS Operation with 3V operation */
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 9


 126:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 332              		.loc 1 126 0
 333 0050 0020     		movs	r0, #0
 334 0052 0021     		movs	r1, #0
 335 0054 FFF7FEFF 		bl	USBUART_1_Start
 127:.\main.c      **** 
 128:.\main.c      ****     //start transmission timer
 129:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 336              		.loc 1 129 0
 337 0058 8A48     		ldr	r0, .L40+20
 338 005a FFF7FEFF 		bl	TimerISR_StartEx
 130:.\main.c      **** 
 131:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
 339              		.loc 1 131 0
 340 005e 8A48     		ldr	r0, .L40+24
 341 0060 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 132:.\main.c      **** 
 133:.\main.c      ****     receivedDataCount = 0;
 342              		.loc 1 133 0
 343 0064 894B     		ldr	r3, .L40+28
 344 0066 0022     		movs	r2, #0
 345 0068 1A60     		str	r2, [r3]
 134:.\main.c      ****     receivedDataIndex = 0;
 346              		.loc 1 134 0
 347 006a 894B     		ldr	r3, .L40+32
 348 006c 0022     		movs	r2, #0
 349 006e 1A60     		str	r2, [r3]
 135:.\main.c      **** 
 136:.\main.c      ****     headerBytes[0] = START_OF_HEADER;  //Start of header, always 0x71
 350              		.loc 1 136 0
 351 0070 7123     		movs	r3, #113
 352 0072 3B74     		strb	r3, [r7, #16]
 137:.\main.c      **** 	headerBytes[1] = VERSION_NUMBER;    //Always 1
 353              		.loc 1 137 0
 354 0074 0123     		movs	r3, #1
 355 0076 7B74     		strb	r3, [r7, #17]
 138:.\main.c      **** 	headerBytes[2] = SOURCE_ADDRESS_0; //Tells receiver that message is sent from this device
 356              		.loc 1 138 0
 357 0078 4023     		movs	r3, #64
 358 007a BB74     		strb	r3, [r7, #18]
 139:.\main.c      **** 	headerBytes[3] = TX_DESTINATION_ADDRESS;  //set by user, tells where message is to be sent
 359              		.loc 1 139 0
 360 007c 854B     		ldr	r3, .L40+36
 361 007e 1B68     		ldr	r3, [r3]
 362 0080 DBB2     		uxtb	r3, r3
 363 0082 FB74     		strb	r3, [r7, #19]
 140:.\main.c      ****     headerBytes[4] = 0; //message length, will be set after message is entered
 364              		.loc 1 140 0
 365 0084 0023     		movs	r3, #0
 366 0086 3B75     		strb	r3, [r7, #20]
 141:.\main.c      **** 	headerBytes[5] = 0; //CRC usage: 0 = CRC not being used
 367              		.loc 1 141 0
 368 0088 0023     		movs	r3, #0
 369 008a 7B75     		strb	r3, [r7, #21]
 142:.\main.c      **** 	headerBytes[6] = HEADER_CRC;  //Header CRC
 370              		.loc 1 142 0
 371 008c 7523     		movs	r3, #117
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 10


 372 008e BB75     		strb	r3, [r7, #22]
 373              	.L37:
 143:.\main.c      **** 
 144:.\main.c      ****     /* Main Loop: */
 145:.\main.c      ****     for(;;)
 146:.\main.c      ****     {
 147:.\main.c      ****         setNetworkStateOnLEDs();
 374              		.loc 1 147 0
 375 0090 FFF7FEFF 		bl	setNetworkStateOnLEDs
 148:.\main.c      **** 
 149:.\main.c      ****         /*Receive*/
 150:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 151:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 376              		.loc 1 151 0
 377 0094 804B     		ldr	r3, .L40+40
 378 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 379 0098 002B     		cmp	r3, #0
 380 009a 52D1     		bne	.L18
 381              		.loc 1 151 0 is_stmt 0 discriminator 1
 382 009c 7B4B     		ldr	r3, .L40+28
 383 009e 1B68     		ldr	r3, [r3]
 384 00a0 212B     		cmp	r3, #33
 385 00a2 4EDD     		ble	.L18
 152:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 153:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 386              		.loc 1 153 0 is_stmt 1
 387 00a4 7D4B     		ldr	r3, .L40+44
 388 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 389 00a8 002B     		cmp	r3, #0
 390 00aa 41D1     		bne	.L19
 391              		.loc 1 153 0 is_stmt 0 discriminator 1
 392 00ac 7B4B     		ldr	r3, .L40+44
 393 00ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 394 00b0 012B     		cmp	r3, #1
 395 00b2 3DD1     		bne	.L19
 396              	.LBB2:
 154:.\main.c      ****                 //Decodes only the header of the received differential manchester encoded message
 155:.\main.c      ****                 //Each of the 7 bytes of the header are stored in receivedHeaderBytes array
 156:.\main.c      ****                 uint8 receivedHeaderBytes[LENGTH_OF_HEADER];
 157:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 397              		.loc 1 157 0 is_stmt 1
 398 00b4 764B     		ldr	r3, .L40+32
 399 00b6 0222     		movs	r2, #2
 400 00b8 1A60     		str	r2, [r3]
 158:.\main.c      ****                 int i;
 159:.\main.c      ****                 for(i = 0; i < LENGTH_OF_HEADER; i++){
 401              		.loc 1 159 0
 402 00ba 0023     		movs	r3, #0
 403 00bc C7F88830 		str	r3, [r7, #136]
 404 00c0 11E0     		b	.L20
 405              	.L21:
 160:.\main.c      ****                     diffManToHex();
 406              		.loc 1 160 0 discriminator 3
 407 00c2 FFF7FEFF 		bl	diffManToHex
 161:.\main.c      ****                     receivedHeaderBytes[i] = receivedHexValue;
 408              		.loc 1 161 0 discriminator 3
 409 00c6 764B     		ldr	r3, .L40+48
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 11


 410 00c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 411 00ca 3A1D     		adds	r2, r7, #4
 412 00cc D7F88830 		ldr	r3, [r7, #136]
 413 00d0 1344     		add	r3, r3, r2
 414 00d2 0A46     		mov	r2, r1
 415 00d4 1A70     		strb	r2, [r3]
 162:.\main.c      ****                     receivedHexValue = 0;   //Clears temp variable which was stored 
 416              		.loc 1 162 0 discriminator 3
 417 00d6 724B     		ldr	r3, .L40+48
 418 00d8 0022     		movs	r2, #0
 419 00da 1A70     		strb	r2, [r3]
 159:.\main.c      ****                     diffManToHex();
 420              		.loc 1 159 0 discriminator 3
 421 00dc D7F88830 		ldr	r3, [r7, #136]
 422 00e0 0133     		adds	r3, r3, #1
 423 00e2 C7F88830 		str	r3, [r7, #136]
 424              	.L20:
 159:.\main.c      ****                     diffManToHex();
 425              		.loc 1 159 0 is_stmt 0 discriminator 1
 426 00e6 D7F88830 		ldr	r3, [r7, #136]
 427 00ea 062B     		cmp	r3, #6
 428 00ec E9DD     		ble	.L21
 163:.\main.c      ****                 }
 164:.\main.c      ****                 
 165:.\main.c      ****                 //The received header must be check before continuing with the rest of the received
 166:.\main.c      ****                 bool headerValid = headerCheck(receivedHeaderBytes);
 429              		.loc 1 166 0 is_stmt 1
 430 00ee 3B1D     		adds	r3, r7, #4
 431 00f0 1846     		mov	r0, r3
 432 00f2 FFF7FEFF 		bl	headerCheck
 433 00f6 0346     		mov	r3, r0
 434 00f8 87F88630 		strb	r3, [r7, #134]
 167:.\main.c      ****                 if(headerValid){
 435              		.loc 1 167 0
 436 00fc 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 437 0100 002B     		cmp	r3, #0
 438 0102 15D0     		beq	.L19
 168:.\main.c      ****                     //If header valid, decoded received message
 169:.\main.c      ****                     for(i=0; i < rxMessageLength; i++){
 439              		.loc 1 169 0
 440 0104 0023     		movs	r3, #0
 441 0106 C7F88830 		str	r3, [r7, #136]
 442 010a 0BE0     		b	.L23
 443              	.L24:
 170:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
 444              		.loc 1 170 0 discriminator 3
 445 010c FFF7FEFF 		bl	diffManToHex
 171:.\main.c      ****     					printChar();
 446              		.loc 1 171 0 discriminator 3
 447 0110 FFF7FEFF 		bl	printChar
 172:.\main.c      ****                         receivedHexValue = 0;   //Clears temp variable which was stored 
 448              		.loc 1 172 0 discriminator 3
 449 0114 624B     		ldr	r3, .L40+48
 450 0116 0022     		movs	r2, #0
 451 0118 1A70     		strb	r2, [r3]
 169:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
 452              		.loc 1 169 0 discriminator 3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 12


 453 011a D7F88830 		ldr	r3, [r7, #136]
 454 011e 0133     		adds	r3, r3, #1
 455 0120 C7F88830 		str	r3, [r7, #136]
 456              	.L23:
 169:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
 457              		.loc 1 169 0 is_stmt 0 discriminator 1
 458 0124 5F4B     		ldr	r3, .L40+52
 459 0126 1B68     		ldr	r3, [r3]
 460 0128 D7F88820 		ldr	r2, [r7, #136]
 461 012c 9A42     		cmp	r2, r3
 462 012e EDDB     		blt	.L24
 463              	.L19:
 464              	.LBE2:
 173:.\main.c      ****                     }
 174:.\main.c      ****                     
 175:.\main.c      ****                 }
 176:.\main.c      ****                 else{
 177:.\main.c      ****                     //If header not valid, disregard received message 
 178:.\main.c      ****                 }
 179:.\main.c      ****             }//end start bit check
 180:.\main.c      ****             receivedDataCount = 0;  //Reset count
 465              		.loc 1 180 0 is_stmt 1
 466 0130 564B     		ldr	r3, .L40+28
 467 0132 0022     		movs	r2, #0
 468 0134 1A60     		str	r2, [r3]
 181:.\main.c      ****             receivedDataIndex = 0;  //Reset index
 469              		.loc 1 181 0
 470 0136 564B     		ldr	r3, .L40+32
 471 0138 0022     		movs	r2, #0
 472 013a 1A60     		str	r2, [r3]
 182:.\main.c      ****             currentRXCharPosition = 0;
 473              		.loc 1 182 0
 474 013c 5A4B     		ldr	r3, .L40+56
 475 013e 0022     		movs	r2, #0
 476 0140 1A60     		str	r2, [r3]
 477              	.L18:
 183:.\main.c      ****         }
 184:.\main.c      ****         /*End Receive*/
 185:.\main.c      **** 
 186:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 478              		.loc 1 186 0
 479 0142 FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 480 0146 0346     		mov	r3, r0
 481 0148 002B     		cmp	r3, #0
 482 014a 06D0     		beq	.L25
 187:.\main.c      ****         {
 188:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 483              		.loc 1 188 0
 484 014c FFF7FEFF 		bl	USBUART_1_GetConfiguration
 485 0150 0346     		mov	r3, r0
 486 0152 002B     		cmp	r3, #0
 487 0154 01D0     		beq	.L25
 189:.\main.c      ****             {
 190:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 191:.\main.c      ****                 USBUART_1_CDC_Init();
 488              		.loc 1 191 0
 489 0156 FFF7FEFF 		bl	USBUART_1_CDC_Init
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 13


 490              	.L25:
 192:.\main.c      ****             }
 193:.\main.c      ****         }
 194:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 491              		.loc 1 194 0
 492 015a FFF7FEFF 		bl	USBUART_1_GetConfiguration
 493 015e 0346     		mov	r3, r0
 494 0160 002B     		cmp	r3, #0
 495 0162 00F08380 		beq	.L26
 195:.\main.c      ****         {
 196:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 496              		.loc 1 196 0
 497 0166 FFF7FEFF 		bl	USBUART_1_DataIsReady
 498 016a 0346     		mov	r3, r0
 499 016c 002B     		cmp	r3, #0
 500 016e 7DD0     		beq	.L26
 197:.\main.c      ****             {
 198:.\main.c      ****                 rx = USBUART_1_GetChar();
 501              		.loc 1 198 0
 502 0170 FFF7FEFF 		bl	USBUART_1_GetChar
 503 0174 0346     		mov	r3, r0
 504 0176 87F88730 		strb	r3, [r7, #135]
 199:.\main.c      ****                 switch(rx){
 505              		.loc 1 199 0
 506 017a 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 507 017e 0D2B     		cmp	r3, #13
 508 0180 24D0     		beq	.L28
 509 0182 1B2B     		cmp	r3, #27
 510 0184 71D0     		beq	.L39
 511 0186 082B     		cmp	r3, #8
 512 0188 56D1     		bne	.L38
 200:.\main.c      ****                     case 8://backspace
 201:.\main.c      ****                         if(stringPosition>0){
 513              		.loc 1 201 0
 514 018a D7F88C30 		ldr	r3, [r7, #140]
 515 018e 002B     		cmp	r3, #0
 516 0190 1BDD     		ble	.L31
 202:.\main.c      ****                             lineString[stringPosition] = '\0';
 517              		.loc 1 202 0
 518 0192 07F11802 		add	r2, r7, #24
 519 0196 D7F88C30 		ldr	r3, [r7, #140]
 520 019a 1344     		add	r3, r3, r2
 521 019c 0022     		movs	r2, #0
 522 019e 1A70     		strb	r2, [r3]
 203:.\main.c      ****                             stringPosition--;
 523              		.loc 1 203 0
 524 01a0 D7F88C30 		ldr	r3, [r7, #140]
 525 01a4 013B     		subs	r3, r3, #1
 526 01a6 C7F88C30 		str	r3, [r7, #140]
 204:.\main.c      ****                             //backspace space backspace
 205:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u);
 527              		.loc 1 205 0
 528 01aa 00BF     		nop
 529              	.L32:
 530              		.loc 1 205 0 is_stmt 0 discriminator 1
 531 01ac FFF7FEFF 		bl	USBUART_1_CDCIsReady
 532 01b0 0346     		mov	r3, r0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 14


 533 01b2 002B     		cmp	r3, #0
 534 01b4 FAD0     		beq	.L32
 206:.\main.c      ****                             USBUART_1_PutChar(8);
 535              		.loc 1 206 0 is_stmt 1
 536 01b6 0820     		movs	r0, #8
 537 01b8 FFF7FEFF 		bl	USBUART_1_PutChar
 207:.\main.c      ****                             USBUART_1_PutChar(32);
 538              		.loc 1 207 0
 539 01bc 2020     		movs	r0, #32
 540 01be FFF7FEFF 		bl	USBUART_1_PutChar
 208:.\main.c      ****                             USBUART_1_PutChar(8);
 541              		.loc 1 208 0
 542 01c2 0820     		movs	r0, #8
 543 01c4 FFF7FEFF 		bl	USBUART_1_PutChar
 209:.\main.c      ****                         }
 210:.\main.c      ****                         break;
 544              		.loc 1 210 0
 545 01c8 50E0     		b	.L26
 546              	.L31:
 547 01ca 4FE0     		b	.L26
 548              	.L28:
 211:.\main.c      ****                     case 13://enter (carriage return)
 212:.\main.c      ****                         initDiffManEncodedArray();
 549              		.loc 1 212 0
 550 01cc FFF7FEFF 		bl	initDiffManEncodedArray
 213:.\main.c      **** 						headerBytes[4] = stringPosition;//set message length TODO maybe -1?
 551              		.loc 1 213 0
 552 01d0 D7F88C30 		ldr	r3, [r7, #140]
 553 01d4 DBB2     		uxtb	r3, r3
 554 01d6 3B75     		strb	r3, [r7, #20]
 214:.\main.c      ****                         headerToDiffMan(headerBytes);
 555              		.loc 1 214 0
 556 01d8 07F11003 		add	r3, r7, #16
 557 01dc 1846     		mov	r0, r3
 558 01de FFF7FEFF 		bl	headerToDiffMan
 215:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 559              		.loc 1 215 0
 560 01e2 07F11803 		add	r3, r7, #24
 561 01e6 1846     		mov	r0, r3
 562 01e8 D7F88C10 		ldr	r1, [r7, #140]
 563 01ec FFF7FEFF 		bl	stringToDiffMan
 216:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 564              		.loc 1 216 0
 565 01f0 00BF     		nop
 566              	.L33:
 567              		.loc 1 216 0 is_stmt 0 discriminator 1
 568 01f2 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 569 01f6 0346     		mov	r3, r0
 570 01f8 002B     		cmp	r3, #0
 571 01fa FAD0     		beq	.L33
 217:.\main.c      ****                         USBUART_1_PutCRLF();
 572              		.loc 1 217 0 is_stmt 1
 573 01fc FFF7FEFF 		bl	USBUART_1_PutCRLF
 218:.\main.c      **** 
 219:.\main.c      ****                         //keep looping until data is transmitted
 220:.\main.c      **** 
 221:.\main.c      ****                         while(!dataTransmissionComplete){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 15


 574              		.loc 1 221 0
 575 0200 06E0     		b	.L34
 576              	.L35:
 222:.\main.c      **** 
 223:.\main.c      ****                             hexToDiffMan(HEADER_CRC); //Add trailer
 577              		.loc 1 223 0
 578 0202 7520     		movs	r0, #117
 579 0204 FFF7FEFF 		bl	hexToDiffMan
 224:.\main.c      ****                             transmitData();
 580              		.loc 1 224 0
 581 0208 FFF7FEFF 		bl	transmitData
 225:.\main.c      ****                             setNetworkStateOnLEDs();
 582              		.loc 1 225 0
 583 020c FFF7FEFF 		bl	setNetworkStateOnLEDs
 584              	.L34:
 221:.\main.c      **** 
 585              		.loc 1 221 0
 586 0210 184B     		ldr	r3, .L40+4
 587 0212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 0214 83F00103 		eor	r3, r3, #1
 589 0218 DBB2     		uxtb	r3, r3
 590 021a 002B     		cmp	r3, #0
 591 021c F1D1     		bne	.L35
 226:.\main.c      ****                         }
 227:.\main.c      ****                         dataTransmissionComplete = false;
 592              		.loc 1 227 0
 593 021e 154B     		ldr	r3, .L40+4
 594 0220 0022     		movs	r2, #0
 595 0222 1A70     		strb	r2, [r3]
 228:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 596              		.loc 1 228 0
 597 0224 0120     		movs	r0, #1
 598 0226 FFF7FEFF 		bl	TX_pin_Write
 229:.\main.c      ****                         //reset index
 230:.\main.c      ****                         halfBitIndex = 0;
 599              		.loc 1 230 0
 600 022a 204B     		ldr	r3, .L40+60
 601 022c 0022     		movs	r2, #0
 602 022e 1A60     		str	r2, [r3]
 231:.\main.c      ****                         stringPosition = 0;
 603              		.loc 1 231 0
 604 0230 0023     		movs	r3, #0
 605 0232 C7F88C30 		str	r3, [r7, #140]
 232:.\main.c      ****                         break;
 606              		.loc 1 232 0
 607 0236 19E0     		b	.L26
 608              	.L38:
 233:.\main.c      ****                     case 27://escape
 234:.\main.c      ****                         break;
 235:.\main.c      ****                     default://everything else
 236:.\main.c      ****                         lineString[stringPosition] = rx;
 609              		.loc 1 236 0
 610 0238 07F11802 		add	r2, r7, #24
 611 023c D7F88C30 		ldr	r3, [r7, #140]
 612 0240 1344     		add	r3, r3, r2
 613 0242 97F88720 		ldrb	r2, [r7, #135]
 614 0246 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 16


 237:.\main.c      ****                         stringPosition++;
 615              		.loc 1 237 0
 616 0248 D7F88C30 		ldr	r3, [r7, #140]
 617 024c 0133     		adds	r3, r3, #1
 618 024e C7F88C30 		str	r3, [r7, #140]
 238:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 619              		.loc 1 238 0
 620 0252 00BF     		nop
 621              	.L36:
 622              		.loc 1 238 0 is_stmt 0 discriminator 1
 623 0254 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 624 0258 0346     		mov	r3, r0
 625 025a 002B     		cmp	r3, #0
 626 025c FAD0     		beq	.L36
 239:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 627              		.loc 1 239 0 is_stmt 1
 628 025e 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 629 0262 1846     		mov	r0, r3
 630 0264 FFF7FEFF 		bl	USBUART_1_PutChar
 240:.\main.c      ****                         break;
 631              		.loc 1 240 0
 632 0268 00E0     		b	.L26
 633              	.L39:
 234:.\main.c      ****                     default://everything else
 634              		.loc 1 234 0
 635 026a 00BF     		nop
 636              	.L26:
 241:.\main.c      ****                 }
 242:.\main.c      ****             }
 243:.\main.c      ****         }
 244:.\main.c      ****     }
 637              		.loc 1 244 0 discriminator 2
 638 026c 10E7     		b	.L37
 639              	.L41:
 640 026e 00BF     		.align	2
 641              	.L40:
 642 0270 00000000 		.word	timerExpired
 643 0274 00000000 		.word	dataTransmissionComplete
 644 0278 00000000 		.word	powerOnEdge
 645 027c 00000000 		.word	Idle_Collision_ISR
 646 0280 00000000 		.word	Edge_detect_ISR
 647 0284 00000000 		.word	TimerHandler
 648 0288 00000000 		.word	ReceiveTimerISR
 649 028c 00000000 		.word	receivedDataCount
 650 0290 00000000 		.word	receivedDataIndex
 651 0294 00000000 		.word	TX_DESTINATION_ADDRESS
 652 0298 00000000 		.word	networkState
 653 029c 00000000 		.word	diffManReceivedData
 654 02a0 00000000 		.word	receivedHexValue
 655 02a4 00000000 		.word	rxMessageLength
 656 02a8 00000000 		.word	currentRXCharPosition
 657 02ac 00000000 		.word	halfBitIndex
 658              		.cfi_endproc
 659              	.LFE67:
 660              		.size	main, .-main
 661              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 662              		.align	2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 17


 663              		.global	initDiffManEncodedArray
 664              		.thumb
 665              		.thumb_func
 666              		.type	initDiffManEncodedArray, %function
 667              	initDiffManEncodedArray:
 668              	.LFB68:
 245:.\main.c      **** }
 246:.\main.c      **** 
 247:.\main.c      **** /*
 248:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the
 249:.\main.c      **** half bits 01.
 250:.\main.c      **** Only call when starting to transfer a new string
 251:.\main.c      **** */
 252:.\main.c      **** void initDiffManEncodedArray(){
 669              		.loc 1 252 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 1, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674 0000 80B4     		push	{r7}
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 0002 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 253:.\main.c      ****     halfBitIndex = 0;
 679              		.loc 1 253 0
 680 0004 0E4B     		ldr	r3, .L43
 681 0006 0022     		movs	r2, #0
 682 0008 1A60     		str	r2, [r3]
 254:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 683              		.loc 1 254 0
 684 000a 0D4B     		ldr	r3, .L43
 685 000c 1B68     		ldr	r3, [r3]
 686 000e 0D4A     		ldr	r2, .L43+4
 687 0010 0021     		movs	r1, #0
 688 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 255:.\main.c      ****     halfBitIndex++;
 689              		.loc 1 255 0
 690 0016 0A4B     		ldr	r3, .L43
 691 0018 1B68     		ldr	r3, [r3]
 692 001a 0133     		adds	r3, r3, #1
 693 001c 084A     		ldr	r2, .L43
 694 001e 1360     		str	r3, [r2]
 256:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 695              		.loc 1 256 0
 696 0020 074B     		ldr	r3, .L43
 697 0022 1B68     		ldr	r3, [r3]
 698 0024 074A     		ldr	r2, .L43+4
 699 0026 0121     		movs	r1, #1
 700 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 257:.\main.c      ****     halfBitIndex++;
 701              		.loc 1 257 0
 702 002c 044B     		ldr	r3, .L43
 703 002e 1B68     		ldr	r3, [r3]
 704 0030 0133     		adds	r3, r3, #1
 705 0032 034A     		ldr	r2, .L43
 706 0034 1360     		str	r3, [r2]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 18


 258:.\main.c      **** }
 707              		.loc 1 258 0
 708 0036 BD46     		mov	sp, r7
 709              		.cfi_def_cfa_register 13
 710              		@ sp needed
 711 0038 5DF8047B 		ldr	r7, [sp], #4
 712              		.cfi_restore 7
 713              		.cfi_def_cfa_offset 0
 714 003c 7047     		bx	lr
 715              	.L44:
 716 003e 00BF     		.align	2
 717              	.L43:
 718 0040 00000000 		.word	halfBitIndex
 719 0044 00000000 		.word	diffManEncodedData
 720              		.cfi_endproc
 721              	.LFE68:
 722              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 723              		.section	.text.headerToDiffMan,"ax",%progbits
 724              		.align	2
 725              		.global	headerToDiffMan
 726              		.thumb
 727              		.thumb_func
 728              		.type	headerToDiffMan, %function
 729              	headerToDiffMan:
 730              	.LFB69:
 259:.\main.c      **** /*
 260:.\main.c      **** Enter key has been pressed, change the 7 header bytes into diff man data.
 261:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 262:.\main.c      **** */
 263:.\main.c      **** void headerToDiffMan(uint8 *headerBytes){
 731              		.loc 1 263 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 16
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 84B0     		sub	sp, sp, #16
 740              		.cfi_def_cfa_offset 24
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 7860     		str	r0, [r7, #4]
 264:.\main.c      **** 
 265:.\main.c      ****     unsigned int i = 0;
 744              		.loc 1 265 0
 745 0008 0023     		movs	r3, #0
 746 000a FB60     		str	r3, [r7, #12]
 266:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 747              		.loc 1 266 0
 748 000c 0023     		movs	r3, #0
 749 000e FB60     		str	r3, [r7, #12]
 750 0010 09E0     		b	.L46
 751              	.L47:
 267:.\main.c      ****         hexToDiffMan(headerBytes[i]);
 752              		.loc 1 267 0 discriminator 3
 753 0012 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 19


 754 0014 FB68     		ldr	r3, [r7, #12]
 755 0016 1344     		add	r3, r3, r2
 756 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 757 001a 1846     		mov	r0, r3
 758 001c FFF7FEFF 		bl	hexToDiffMan
 266:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 759              		.loc 1 266 0 discriminator 3
 760 0020 FB68     		ldr	r3, [r7, #12]
 761 0022 0133     		adds	r3, r3, #1
 762 0024 FB60     		str	r3, [r7, #12]
 763              	.L46:
 266:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 764              		.loc 1 266 0 is_stmt 0 discriminator 1
 765 0026 FB68     		ldr	r3, [r7, #12]
 766 0028 062B     		cmp	r3, #6
 767 002a F2D9     		bls	.L47
 268:.\main.c      ****     }
 269:.\main.c      **** }
 768              		.loc 1 269 0 is_stmt 1
 769 002c 1037     		adds	r7, r7, #16
 770              		.cfi_def_cfa_offset 8
 771 002e BD46     		mov	sp, r7
 772              		.cfi_def_cfa_register 13
 773              		@ sp needed
 774 0030 80BD     		pop	{r7, pc}
 775              		.cfi_endproc
 776              	.LFE69:
 777              		.size	headerToDiffMan, .-headerToDiffMan
 778 0032 00BF     		.section	.text.hexToDiffMan,"ax",%progbits
 779              		.align	2
 780              		.global	hexToDiffMan
 781              		.thumb
 782              		.thumb_func
 783              		.type	hexToDiffMan, %function
 784              	hexToDiffMan:
 785              	.LFB70:
 270:.\main.c      **** 
 271:.\main.c      **** /*
 272:.\main.c      **** Helper method. Call only from headerToDiffMan
 273:.\main.c      **** Converts a hexadecimal value to a differental manchester line encoded version. 
 274:.\main.c      **** Used for the header b/c does not added a leading 1 like asciiToDiffMan() method.
 275:.\main.c      **** */
 276:.\main.c      **** void hexToDiffMan(uint8 hexValue){
 786              		.loc 1 276 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 56
 789              		@ frame_needed = 1, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791 0000 80B4     		push	{r7}
 792              		.cfi_def_cfa_offset 4
 793              		.cfi_offset 7, -4
 794 0002 8FB0     		sub	sp, sp, #60
 795              		.cfi_def_cfa_offset 64
 796 0004 00AF     		add	r7, sp, #0
 797              		.cfi_def_cfa_register 7
 798 0006 0346     		mov	r3, r0
 799 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 20


 277:.\main.c      ****     unsigned int binaryValueOfHex[8];//index zero is LSB
 278:.\main.c      ****     
 279:.\main.c      ****     //Coverts the hexadecimal value into binary
 280:.\main.c      ****     int i;
 281:.\main.c      ****     for (i = 0; i < 8; ++i){
 800              		.loc 1 281 0
 801 000a 0023     		movs	r3, #0
 802 000c 7B63     		str	r3, [r7, #52]
 803 000e 0FE0     		b	.L49
 804              	.L50:
 282:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 805              		.loc 1 282 0 discriminator 3
 806 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 807 0012 7B6B     		ldr	r3, [r7, #52]
 808 0014 42FA03F3 		asr	r3, r2, r3
 809 0018 03F00102 		and	r2, r3, #1
 810 001c 7B6B     		ldr	r3, [r7, #52]
 811 001e 9B00     		lsls	r3, r3, #2
 812 0020 07F13801 		add	r1, r7, #56
 813 0024 0B44     		add	r3, r3, r1
 814 0026 43F82C2C 		str	r2, [r3, #-44]
 281:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 815              		.loc 1 281 0 discriminator 3
 816 002a 7B6B     		ldr	r3, [r7, #52]
 817 002c 0133     		adds	r3, r3, #1
 818 002e 7B63     		str	r3, [r7, #52]
 819              	.L49:
 281:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 820              		.loc 1 281 0 is_stmt 0 discriminator 1
 821 0030 7B6B     		ldr	r3, [r7, #52]
 822 0032 072B     		cmp	r3, #7
 823 0034 ECDD     		ble	.L50
 283:.\main.c      ****     }
 284:.\main.c      ****     
 285:.\main.c      ****     //Differential manchester encodes the 8 bits (the binary version of the hexadecimal value).
 286:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 287:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 824              		.loc 1 287 0 is_stmt 1
 825 0036 454B     		ldr	r3, .L58
 826 0038 1B68     		ldr	r3, [r3]
 827 003a 013B     		subs	r3, r3, #1
 828 003c 444A     		ldr	r2, .L58+4
 829 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 830 0042 87F83330 		strb	r3, [r7, #51]
 288:.\main.c      ****     int j;
 289:.\main.c      ****     for(j=INDEX_OF_MSB_HEX;j>=0;j--)
 831              		.loc 1 289 0
 832 0046 0723     		movs	r3, #7
 833 0048 FB62     		str	r3, [r7, #44]
 834 004a 76E0     		b	.L51
 835              	.L57:
 290:.\main.c      ****     {
 291:.\main.c      ****         if(binaryValueOfHex[j] == 1)
 836              		.loc 1 291 0
 837 004c FB6A     		ldr	r3, [r7, #44]
 838 004e 9B00     		lsls	r3, r3, #2
 839 0050 07F13802 		add	r2, r7, #56
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 21


 840 0054 1344     		add	r3, r3, r2
 841 0056 53F82C3C 		ldr	r3, [r3, #-44]
 842 005a 012B     		cmp	r3, #1
 843 005c 31D1     		bne	.L52
 292:.\main.c      ****         {
 293:.\main.c      ****             //bit == 1
 294:.\main.c      ****             if(previousHalfBit == 1)
 844              		.loc 1 294 0
 845 005e 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 846 0062 012B     		cmp	r3, #1
 847 0064 16D1     		bne	.L53
 295:.\main.c      ****             {
 296:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 848              		.loc 1 296 0
 849 0066 394B     		ldr	r3, .L58
 850 0068 1B68     		ldr	r3, [r3]
 851 006a 394A     		ldr	r2, .L58+4
 852 006c 0121     		movs	r1, #1
 853 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 297:.\main.c      ****                 halfBitIndex++;
 854              		.loc 1 297 0
 855 0072 364B     		ldr	r3, .L58
 856 0074 1B68     		ldr	r3, [r3]
 857 0076 0133     		adds	r3, r3, #1
 858 0078 344A     		ldr	r2, .L58
 859 007a 1360     		str	r3, [r2]
 298:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 860              		.loc 1 298 0
 861 007c 334B     		ldr	r3, .L58
 862 007e 1B68     		ldr	r3, [r3]
 863 0080 334A     		ldr	r2, .L58+4
 864 0082 0021     		movs	r1, #0
 865 0084 42F82310 		str	r1, [r2, r3, lsl #2]
 299:.\main.c      ****                 halfBitIndex++;
 866              		.loc 1 299 0
 867 0088 304B     		ldr	r3, .L58
 868 008a 1B68     		ldr	r3, [r3]
 869 008c 0133     		adds	r3, r3, #1
 870 008e 2F4A     		ldr	r2, .L58
 871 0090 1360     		str	r3, [r2]
 872 0092 47E0     		b	.L55
 873              	.L53:
 300:.\main.c      ****             }
 301:.\main.c      ****             else
 302:.\main.c      ****             {
 303:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 874              		.loc 1 303 0
 875 0094 2D4B     		ldr	r3, .L58
 876 0096 1B68     		ldr	r3, [r3]
 877 0098 2D4A     		ldr	r2, .L58+4
 878 009a 0021     		movs	r1, #0
 879 009c 42F82310 		str	r1, [r2, r3, lsl #2]
 304:.\main.c      ****                 halfBitIndex++;
 880              		.loc 1 304 0
 881 00a0 2A4B     		ldr	r3, .L58
 882 00a2 1B68     		ldr	r3, [r3]
 883 00a4 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 22


 884 00a6 294A     		ldr	r2, .L58
 885 00a8 1360     		str	r3, [r2]
 305:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 886              		.loc 1 305 0
 887 00aa 284B     		ldr	r3, .L58
 888 00ac 1B68     		ldr	r3, [r3]
 889 00ae 284A     		ldr	r2, .L58+4
 890 00b0 0121     		movs	r1, #1
 891 00b2 42F82310 		str	r1, [r2, r3, lsl #2]
 306:.\main.c      ****                 halfBitIndex++;
 892              		.loc 1 306 0
 893 00b6 254B     		ldr	r3, .L58
 894 00b8 1B68     		ldr	r3, [r3]
 895 00ba 0133     		adds	r3, r3, #1
 896 00bc 234A     		ldr	r2, .L58
 897 00be 1360     		str	r3, [r2]
 898 00c0 30E0     		b	.L55
 899              	.L52:
 307:.\main.c      ****             }
 308:.\main.c      **** 
 309:.\main.c      ****         }
 310:.\main.c      ****         else
 311:.\main.c      ****         {
 312:.\main.c      ****             //bit == 0
 313:.\main.c      ****             if(previousHalfBit == 1)
 900              		.loc 1 313 0
 901 00c2 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 902 00c6 012B     		cmp	r3, #1
 903 00c8 16D1     		bne	.L56
 314:.\main.c      ****             {
 315:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 904              		.loc 1 315 0
 905 00ca 204B     		ldr	r3, .L58
 906 00cc 1B68     		ldr	r3, [r3]
 907 00ce 204A     		ldr	r2, .L58+4
 908 00d0 0021     		movs	r1, #0
 909 00d2 42F82310 		str	r1, [r2, r3, lsl #2]
 316:.\main.c      ****                 halfBitIndex++;
 910              		.loc 1 316 0
 911 00d6 1D4B     		ldr	r3, .L58
 912 00d8 1B68     		ldr	r3, [r3]
 913 00da 0133     		adds	r3, r3, #1
 914 00dc 1B4A     		ldr	r2, .L58
 915 00de 1360     		str	r3, [r2]
 317:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 916              		.loc 1 317 0
 917 00e0 1A4B     		ldr	r3, .L58
 918 00e2 1B68     		ldr	r3, [r3]
 919 00e4 1A4A     		ldr	r2, .L58+4
 920 00e6 0121     		movs	r1, #1
 921 00e8 42F82310 		str	r1, [r2, r3, lsl #2]
 318:.\main.c      ****                 halfBitIndex++;
 922              		.loc 1 318 0
 923 00ec 174B     		ldr	r3, .L58
 924 00ee 1B68     		ldr	r3, [r3]
 925 00f0 0133     		adds	r3, r3, #1
 926 00f2 164A     		ldr	r2, .L58
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 23


 927 00f4 1360     		str	r3, [r2]
 928 00f6 15E0     		b	.L55
 929              	.L56:
 319:.\main.c      ****             }
 320:.\main.c      ****             else
 321:.\main.c      ****             {
 322:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 930              		.loc 1 322 0
 931 00f8 144B     		ldr	r3, .L58
 932 00fa 1B68     		ldr	r3, [r3]
 933 00fc 144A     		ldr	r2, .L58+4
 934 00fe 0121     		movs	r1, #1
 935 0100 42F82310 		str	r1, [r2, r3, lsl #2]
 323:.\main.c      ****                 halfBitIndex++;
 936              		.loc 1 323 0
 937 0104 114B     		ldr	r3, .L58
 938 0106 1B68     		ldr	r3, [r3]
 939 0108 0133     		adds	r3, r3, #1
 940 010a 104A     		ldr	r2, .L58
 941 010c 1360     		str	r3, [r2]
 324:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 942              		.loc 1 324 0
 943 010e 0F4B     		ldr	r3, .L58
 944 0110 1B68     		ldr	r3, [r3]
 945 0112 0F4A     		ldr	r2, .L58+4
 946 0114 0021     		movs	r1, #0
 947 0116 42F82310 		str	r1, [r2, r3, lsl #2]
 325:.\main.c      ****                 halfBitIndex++;
 948              		.loc 1 325 0
 949 011a 0C4B     		ldr	r3, .L58
 950 011c 1B68     		ldr	r3, [r3]
 951 011e 0133     		adds	r3, r3, #1
 952 0120 0A4A     		ldr	r2, .L58
 953 0122 1360     		str	r3, [r2]
 954              	.L55:
 326:.\main.c      ****             }
 327:.\main.c      ****         }
 328:.\main.c      **** 
 329:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 955              		.loc 1 329 0 discriminator 2
 956 0124 094B     		ldr	r3, .L58
 957 0126 1B68     		ldr	r3, [r3]
 958 0128 013B     		subs	r3, r3, #1
 959 012a 094A     		ldr	r2, .L58+4
 960 012c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 961 0130 87F83330 		strb	r3, [r7, #51]
 289:.\main.c      ****     {
 962              		.loc 1 289 0 discriminator 2
 963 0134 FB6A     		ldr	r3, [r7, #44]
 964 0136 013B     		subs	r3, r3, #1
 965 0138 FB62     		str	r3, [r7, #44]
 966              	.L51:
 289:.\main.c      ****     {
 967              		.loc 1 289 0 is_stmt 0 discriminator 1
 968 013a FB6A     		ldr	r3, [r7, #44]
 969 013c 002B     		cmp	r3, #0
 970 013e 85DA     		bge	.L57
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 24


 330:.\main.c      ****     }//end for
 331:.\main.c      **** }//end hexToDiffMan function
 971              		.loc 1 331 0 is_stmt 1
 972 0140 3C37     		adds	r7, r7, #60
 973              		.cfi_def_cfa_offset 4
 974 0142 BD46     		mov	sp, r7
 975              		.cfi_def_cfa_register 13
 976              		@ sp needed
 977 0144 5DF8047B 		ldr	r7, [sp], #4
 978              		.cfi_restore 7
 979              		.cfi_def_cfa_offset 0
 980 0148 7047     		bx	lr
 981              	.L59:
 982 014a 00BF     		.align	2
 983              	.L58:
 984 014c 00000000 		.word	halfBitIndex
 985 0150 00000000 		.word	diffManEncodedData
 986              		.cfi_endproc
 987              	.LFE70:
 988              		.size	hexToDiffMan, .-hexToDiffMan
 989              		.section	.text.stringToDiffMan,"ax",%progbits
 990              		.align	2
 991              		.global	stringToDiffMan
 992              		.thumb
 993              		.thumb_func
 994              		.type	stringToDiffMan, %function
 995              	stringToDiffMan:
 996              	.LFB71:
 332:.\main.c      **** 
 333:.\main.c      **** /*
 334:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 335:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 336:.\main.c      **** */
 337:.\main.c      **** void stringToDiffMan(char *lineString, int stringPosition){
 997              		.loc 1 337 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 84B0     		sub	sp, sp, #16
 1006              		.cfi_def_cfa_offset 24
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
 1010 0008 3960     		str	r1, [r7]
 338:.\main.c      **** 
 339:.\main.c      ****     int i;
 340:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1011              		.loc 1 340 0
 1012 000a 0023     		movs	r3, #0
 1013 000c FB60     		str	r3, [r7, #12]
 1014 000e 09E0     		b	.L61
 1015              	.L62:
 341:.\main.c      ****         asciiToDiffMan(lineString[i]);
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 25


 1016              		.loc 1 341 0 discriminator 3
 1017 0010 FB68     		ldr	r3, [r7, #12]
 1018 0012 7A68     		ldr	r2, [r7, #4]
 1019 0014 1344     		add	r3, r3, r2
 1020 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 0018 1846     		mov	r0, r3
 1022 001a FFF7FEFF 		bl	asciiToDiffMan
 340:.\main.c      ****         asciiToDiffMan(lineString[i]);
 1023              		.loc 1 340 0 discriminator 3
 1024 001e FB68     		ldr	r3, [r7, #12]
 1025 0020 0133     		adds	r3, r3, #1
 1026 0022 FB60     		str	r3, [r7, #12]
 1027              	.L61:
 340:.\main.c      ****         asciiToDiffMan(lineString[i]);
 1028              		.loc 1 340 0 is_stmt 0 discriminator 1
 1029 0024 FA68     		ldr	r2, [r7, #12]
 1030 0026 3B68     		ldr	r3, [r7]
 1031 0028 9A42     		cmp	r2, r3
 1032 002a F1DB     		blt	.L62
 342:.\main.c      ****     }
 343:.\main.c      **** }
 1033              		.loc 1 343 0 is_stmt 1
 1034 002c 1037     		adds	r7, r7, #16
 1035              		.cfi_def_cfa_offset 8
 1036 002e BD46     		mov	sp, r7
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 0030 80BD     		pop	{r7, pc}
 1040              		.cfi_endproc
 1041              	.LFE71:
 1042              		.size	stringToDiffMan, .-stringToDiffMan
 1043 0032 00BF     		.section	.text.asciiToDiffMan,"ax",%progbits
 1044              		.align	2
 1045              		.global	asciiToDiffMan
 1046              		.thumb
 1047              		.thumb_func
 1048              		.type	asciiToDiffMan, %function
 1049              	asciiToDiffMan:
 1050              	.LFB72:
 344:.\main.c      **** 
 345:.\main.c      **** /*
 346:.\main.c      **** Helper method. Call only from stringToDiffMan.
 347:.\main.c      **** Converts a ascii char to a differental manchester line encoded version. 
 348:.\main.c      **** Will add leading 1, so only use for characters, not the header.
 349:.\main.c      **** */
 350:.\main.c      **** void asciiToDiffMan(char asciiChar)
 351:.\main.c      **** {
 1051              		.loc 1 351 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 104
 1054              		@ frame_needed = 1, uses_anonymous_args = 0
 1055              		@ link register save eliminated.
 1056 0000 80B4     		push	{r7}
 1057              		.cfi_def_cfa_offset 4
 1058              		.cfi_offset 7, -4
 1059 0002 9BB0     		sub	sp, sp, #108
 1060              		.cfi_def_cfa_offset 112
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 26


 1061 0004 00AF     		add	r7, sp, #0
 1062              		.cfi_def_cfa_register 7
 1063 0006 0346     		mov	r3, r0
 1064 0008 FB71     		strb	r3, [r7, #7]
 352:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1065              		.loc 1 352 0
 1066 000a 6C4B     		ldr	r3, .L75
 1067 000c 1B68     		ldr	r3, [r3]
 1068 000e 013B     		subs	r3, r3, #1
 1069 0010 6B4A     		ldr	r2, .L75+4
 1070 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1071 0016 87F86730 		strb	r3, [r7, #103]
 353:.\main.c      ****     //send starting 1 bit (encoded)
 354:.\main.c      ****     if(previousHalfBit == 1){
 1072              		.loc 1 354 0
 1073 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1074 001e 012B     		cmp	r3, #1
 1075 0020 16D1     		bne	.L64
 355:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1076              		.loc 1 355 0
 1077 0022 664B     		ldr	r3, .L75
 1078 0024 1B68     		ldr	r3, [r3]
 1079 0026 664A     		ldr	r2, .L75+4
 1080 0028 0121     		movs	r1, #1
 1081 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 356:.\main.c      ****         halfBitIndex++;
 1082              		.loc 1 356 0
 1083 002e 634B     		ldr	r3, .L75
 1084 0030 1B68     		ldr	r3, [r3]
 1085 0032 0133     		adds	r3, r3, #1
 1086 0034 614A     		ldr	r2, .L75
 1087 0036 1360     		str	r3, [r2]
 357:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1088              		.loc 1 357 0
 1089 0038 604B     		ldr	r3, .L75
 1090 003a 1B68     		ldr	r3, [r3]
 1091 003c 604A     		ldr	r2, .L75+4
 1092 003e 0021     		movs	r1, #0
 1093 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 358:.\main.c      ****         halfBitIndex++;
 1094              		.loc 1 358 0
 1095 0044 5D4B     		ldr	r3, .L75
 1096 0046 1B68     		ldr	r3, [r3]
 1097 0048 0133     		adds	r3, r3, #1
 1098 004a 5C4A     		ldr	r2, .L75
 1099 004c 1360     		str	r3, [r2]
 1100 004e 15E0     		b	.L65
 1101              	.L64:
 359:.\main.c      ****     }else{
 360:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1102              		.loc 1 360 0
 1103 0050 5A4B     		ldr	r3, .L75
 1104 0052 1B68     		ldr	r3, [r3]
 1105 0054 5A4A     		ldr	r2, .L75+4
 1106 0056 0021     		movs	r1, #0
 1107 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 361:.\main.c      ****         halfBitIndex++;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 27


 1108              		.loc 1 361 0
 1109 005c 574B     		ldr	r3, .L75
 1110 005e 1B68     		ldr	r3, [r3]
 1111 0060 0133     		adds	r3, r3, #1
 1112 0062 564A     		ldr	r2, .L75
 1113 0064 1360     		str	r3, [r2]
 362:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1114              		.loc 1 362 0
 1115 0066 554B     		ldr	r3, .L75
 1116 0068 1B68     		ldr	r3, [r3]
 1117 006a 554A     		ldr	r2, .L75+4
 1118 006c 0121     		movs	r1, #1
 1119 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 363:.\main.c      ****         halfBitIndex++;
 1120              		.loc 1 363 0
 1121 0072 524B     		ldr	r3, .L75
 1122 0074 1B68     		ldr	r3, [r3]
 1123 0076 0133     		adds	r3, r3, #1
 1124 0078 504A     		ldr	r2, .L75
 1125 007a 1360     		str	r3, [r2]
 1126              	.L65:
 364:.\main.c      ****     }
 365:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1127              		.loc 1 365 0
 1128 007c 4F4B     		ldr	r3, .L75
 1129 007e 1B68     		ldr	r3, [r3]
 1130 0080 013B     		subs	r3, r3, #1
 1131 0082 4F4A     		ldr	r2, .L75+4
 1132 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1133 0088 87F86730 		strb	r3, [r7, #103]
 366:.\main.c      **** 
 367:.\main.c      **** 
 368:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 369:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 370:.\main.c      ****     int i;
 371:.\main.c      ****     for(i=0; asciiChar>0; i++)
 1134              		.loc 1 371 0
 1135 008c 0023     		movs	r3, #0
 1136 008e 3B66     		str	r3, [r7, #96]
 1137 0090 0FE0     		b	.L66
 1138              	.L67:
 372:.\main.c      ****     {
 373:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2;
 1139              		.loc 1 373 0 discriminator 3
 1140 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1141 0094 03F00102 		and	r2, r3, #1
 1142 0098 3B6E     		ldr	r3, [r7, #96]
 1143 009a 9B00     		lsls	r3, r3, #2
 1144 009c 07F16801 		add	r1, r7, #104
 1145 00a0 0B44     		add	r3, r3, r1
 1146 00a2 43F85C2C 		str	r2, [r3, #-92]
 374:.\main.c      ****         asciiChar=asciiChar/2;
 1147              		.loc 1 374 0 discriminator 3
 1148 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1149 00a8 5B08     		lsrs	r3, r3, #1
 1150 00aa FB71     		strb	r3, [r7, #7]
 371:.\main.c      ****     {
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 28


 1151              		.loc 1 371 0 discriminator 3
 1152 00ac 3B6E     		ldr	r3, [r7, #96]
 1153 00ae 0133     		adds	r3, r3, #1
 1154 00b0 3B66     		str	r3, [r7, #96]
 1155              	.L66:
 371:.\main.c      ****     {
 1156              		.loc 1 371 0 is_stmt 0 discriminator 1
 1157 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1158 00b4 002B     		cmp	r3, #0
 1159 00b6 ECD1     		bne	.L67
 375:.\main.c      ****     }
 376:.\main.c      ****     
 377:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 378:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 379:.\main.c      ****     int j;
 380:.\main.c      ****     for(j=INDEX_OF_MSB_ASCII;j>=0;j--)
 1160              		.loc 1 380 0 is_stmt 1
 1161 00b8 0623     		movs	r3, #6
 1162 00ba FB65     		str	r3, [r7, #92]
 1163 00bc 76E0     		b	.L68
 1164              	.L74:
 381:.\main.c      ****     {
 382:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 1165              		.loc 1 382 0
 1166 00be FB6D     		ldr	r3, [r7, #92]
 1167 00c0 9B00     		lsls	r3, r3, #2
 1168 00c2 07F16802 		add	r2, r7, #104
 1169 00c6 1344     		add	r3, r3, r2
 1170 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 1171 00cc 012B     		cmp	r3, #1
 1172 00ce 31D1     		bne	.L69
 383:.\main.c      ****         {
 384:.\main.c      ****             //bit == 1
 385:.\main.c      ****             if(previousHalfBit == 1)
 1173              		.loc 1 385 0
 1174 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1175 00d4 012B     		cmp	r3, #1
 1176 00d6 16D1     		bne	.L70
 386:.\main.c      ****             {
 387:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1177              		.loc 1 387 0
 1178 00d8 384B     		ldr	r3, .L75
 1179 00da 1B68     		ldr	r3, [r3]
 1180 00dc 384A     		ldr	r2, .L75+4
 1181 00de 0121     		movs	r1, #1
 1182 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 388:.\main.c      ****                 halfBitIndex++;
 1183              		.loc 1 388 0
 1184 00e4 354B     		ldr	r3, .L75
 1185 00e6 1B68     		ldr	r3, [r3]
 1186 00e8 0133     		adds	r3, r3, #1
 1187 00ea 344A     		ldr	r2, .L75
 1188 00ec 1360     		str	r3, [r2]
 389:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1189              		.loc 1 389 0
 1190 00ee 334B     		ldr	r3, .L75
 1191 00f0 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 29


 1192 00f2 334A     		ldr	r2, .L75+4
 1193 00f4 0021     		movs	r1, #0
 1194 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 390:.\main.c      ****                 halfBitIndex++;
 1195              		.loc 1 390 0
 1196 00fa 304B     		ldr	r3, .L75
 1197 00fc 1B68     		ldr	r3, [r3]
 1198 00fe 0133     		adds	r3, r3, #1
 1199 0100 2E4A     		ldr	r2, .L75
 1200 0102 1360     		str	r3, [r2]
 1201 0104 47E0     		b	.L72
 1202              	.L70:
 391:.\main.c      ****             }
 392:.\main.c      ****             else
 393:.\main.c      ****             {
 394:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1203              		.loc 1 394 0
 1204 0106 2D4B     		ldr	r3, .L75
 1205 0108 1B68     		ldr	r3, [r3]
 1206 010a 2D4A     		ldr	r2, .L75+4
 1207 010c 0021     		movs	r1, #0
 1208 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 395:.\main.c      ****                 halfBitIndex++;
 1209              		.loc 1 395 0
 1210 0112 2A4B     		ldr	r3, .L75
 1211 0114 1B68     		ldr	r3, [r3]
 1212 0116 0133     		adds	r3, r3, #1
 1213 0118 284A     		ldr	r2, .L75
 1214 011a 1360     		str	r3, [r2]
 396:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1215              		.loc 1 396 0
 1216 011c 274B     		ldr	r3, .L75
 1217 011e 1B68     		ldr	r3, [r3]
 1218 0120 274A     		ldr	r2, .L75+4
 1219 0122 0121     		movs	r1, #1
 1220 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 397:.\main.c      ****                 halfBitIndex++;
 1221              		.loc 1 397 0
 1222 0128 244B     		ldr	r3, .L75
 1223 012a 1B68     		ldr	r3, [r3]
 1224 012c 0133     		adds	r3, r3, #1
 1225 012e 234A     		ldr	r2, .L75
 1226 0130 1360     		str	r3, [r2]
 1227 0132 30E0     		b	.L72
 1228              	.L69:
 398:.\main.c      ****             }
 399:.\main.c      **** 
 400:.\main.c      ****         }
 401:.\main.c      ****         else
 402:.\main.c      ****         {
 403:.\main.c      ****             //bit == 0
 404:.\main.c      ****             if(previousHalfBit == 1)
 1229              		.loc 1 404 0
 1230 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1231 0138 012B     		cmp	r3, #1
 1232 013a 16D1     		bne	.L73
 405:.\main.c      ****             {
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 30


 406:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1233              		.loc 1 406 0
 1234 013c 1F4B     		ldr	r3, .L75
 1235 013e 1B68     		ldr	r3, [r3]
 1236 0140 1F4A     		ldr	r2, .L75+4
 1237 0142 0021     		movs	r1, #0
 1238 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 407:.\main.c      ****                 halfBitIndex++;
 1239              		.loc 1 407 0
 1240 0148 1C4B     		ldr	r3, .L75
 1241 014a 1B68     		ldr	r3, [r3]
 1242 014c 0133     		adds	r3, r3, #1
 1243 014e 1B4A     		ldr	r2, .L75
 1244 0150 1360     		str	r3, [r2]
 408:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1245              		.loc 1 408 0
 1246 0152 1A4B     		ldr	r3, .L75
 1247 0154 1B68     		ldr	r3, [r3]
 1248 0156 1A4A     		ldr	r2, .L75+4
 1249 0158 0121     		movs	r1, #1
 1250 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 409:.\main.c      ****                 halfBitIndex++;
 1251              		.loc 1 409 0
 1252 015e 174B     		ldr	r3, .L75
 1253 0160 1B68     		ldr	r3, [r3]
 1254 0162 0133     		adds	r3, r3, #1
 1255 0164 154A     		ldr	r2, .L75
 1256 0166 1360     		str	r3, [r2]
 1257 0168 15E0     		b	.L72
 1258              	.L73:
 410:.\main.c      ****             }
 411:.\main.c      ****             else
 412:.\main.c      ****             {
 413:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1259              		.loc 1 413 0
 1260 016a 144B     		ldr	r3, .L75
 1261 016c 1B68     		ldr	r3, [r3]
 1262 016e 144A     		ldr	r2, .L75+4
 1263 0170 0121     		movs	r1, #1
 1264 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 414:.\main.c      ****                 halfBitIndex++;
 1265              		.loc 1 414 0
 1266 0176 114B     		ldr	r3, .L75
 1267 0178 1B68     		ldr	r3, [r3]
 1268 017a 0133     		adds	r3, r3, #1
 1269 017c 0F4A     		ldr	r2, .L75
 1270 017e 1360     		str	r3, [r2]
 415:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1271              		.loc 1 415 0
 1272 0180 0E4B     		ldr	r3, .L75
 1273 0182 1B68     		ldr	r3, [r3]
 1274 0184 0E4A     		ldr	r2, .L75+4
 1275 0186 0021     		movs	r1, #0
 1276 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 416:.\main.c      ****                 halfBitIndex++;
 1277              		.loc 1 416 0
 1278 018c 0B4B     		ldr	r3, .L75
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 31


 1279 018e 1B68     		ldr	r3, [r3]
 1280 0190 0133     		adds	r3, r3, #1
 1281 0192 0A4A     		ldr	r2, .L75
 1282 0194 1360     		str	r3, [r2]
 1283              	.L72:
 417:.\main.c      ****             }
 418:.\main.c      ****         }
 419:.\main.c      **** 
 420:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1284              		.loc 1 420 0 discriminator 2
 1285 0196 094B     		ldr	r3, .L75
 1286 0198 1B68     		ldr	r3, [r3]
 1287 019a 013B     		subs	r3, r3, #1
 1288 019c 084A     		ldr	r2, .L75+4
 1289 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1290 01a2 87F86730 		strb	r3, [r7, #103]
 380:.\main.c      ****     {
 1291              		.loc 1 380 0 discriminator 2
 1292 01a6 FB6D     		ldr	r3, [r7, #92]
 1293 01a8 013B     		subs	r3, r3, #1
 1294 01aa FB65     		str	r3, [r7, #92]
 1295              	.L68:
 380:.\main.c      ****     {
 1296              		.loc 1 380 0 is_stmt 0 discriminator 1
 1297 01ac FB6D     		ldr	r3, [r7, #92]
 1298 01ae 002B     		cmp	r3, #0
 1299 01b0 85DA     		bge	.L74
 421:.\main.c      ****     }//end for
 422:.\main.c      **** 
 423:.\main.c      **** }//end function
 1300              		.loc 1 423 0 is_stmt 1
 1301 01b2 6C37     		adds	r7, r7, #108
 1302              		.cfi_def_cfa_offset 4
 1303 01b4 BD46     		mov	sp, r7
 1304              		.cfi_def_cfa_register 13
 1305              		@ sp needed
 1306 01b6 5DF8047B 		ldr	r7, [sp], #4
 1307              		.cfi_restore 7
 1308              		.cfi_def_cfa_offset 0
 1309 01ba 7047     		bx	lr
 1310              	.L76:
 1311              		.align	2
 1312              	.L75:
 1313 01bc 00000000 		.word	halfBitIndex
 1314 01c0 00000000 		.word	diffManEncodedData
 1315              		.cfi_endproc
 1316              	.LFE72:
 1317              		.size	asciiToDiffMan, .-asciiToDiffMan
 1318              		.global	__aeabi_i2d
 1319              		.global	__aeabi_ddiv
 1320              		.global	__aeabi_dmul
 1321              		.global	__aeabi_d2iz
 1322              		.section	.text.transmitData,"ax",%progbits
 1323              		.align	2
 1324              		.global	transmitData
 1325              		.thumb
 1326              		.thumb_func
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 32


 1327              		.type	transmitData, %function
 1328              	transmitData:
 1329              	.LFB73:
 424:.\main.c      **** 
 425:.\main.c      **** /*
 426:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 427:.\main.c      **** Checks network state before transmitting.
 428:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 429:.\main.c      **** */
 430:.\main.c      **** void transmitData(){
 1330              		.loc 1 430 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 8
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334 0000 80B5     		push	{r7, lr}
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 7, -8
 1337              		.cfi_offset 14, -4
 1338 0002 82B0     		sub	sp, sp, #8
 1339              		.cfi_def_cfa_offset 16
 1340 0004 00AF     		add	r7, sp, #0
 1341              		.cfi_def_cfa_register 7
 431:.\main.c      ****     int i;
 432:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1342              		.loc 1 432 0
 1343 0006 0023     		movs	r3, #0
 1344 0008 7B60     		str	r3, [r7, #4]
 1345 000a 47E0     		b	.L78
 1346              	.L82:
 433:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 434:.\main.c      ****         //Else break out of transmition and wait random time
 435:.\main.c      ****         if(networkState != idle){
 1347              		.loc 1 435 0
 1348 000c 2B4B     		ldr	r3, .L84
 1349 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1350 0010 002B     		cmp	r3, #0
 1351 0012 2BD0     		beq	.L79
 436:.\main.c      ****             if(networkState == collision){
 1352              		.loc 1 436 0
 1353 0014 294B     		ldr	r3, .L84
 1354 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1355 0018 022B     		cmp	r3, #2
 1356 001a 27D1     		bne	.L79
 1357              	.LBB3:
 437:.\main.c      ****                 TX_pin_Write(1);
 1358              		.loc 1 437 0
 1359 001c 0120     		movs	r0, #1
 1360 001e FFF7FEFF 		bl	TX_pin_Write
 438:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1361              		.loc 1 438 0
 1362 0022 FFF7FEFF 		bl	getRandomNumber
 1363 0026 0346     		mov	r3, r0
 1364 0028 1846     		mov	r0, r3
 1365 002a FFF7FEFF 		bl	__aeabi_i2d
 1366 002e 0246     		mov	r2, r0
 1367 0030 0B46     		mov	r3, r1
 1368 0032 1046     		mov	r0, r2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 33


 1369 0034 1946     		mov	r1, r3
 1370 0036 4FF00002 		mov	r2, #0
 1371 003a 214B     		ldr	r3, .L84+4
 1372 003c FFF7FEFF 		bl	__aeabi_ddiv
 1373 0040 0246     		mov	r2, r0
 1374 0042 0B46     		mov	r3, r1
 1375 0044 1046     		mov	r0, r2
 1376 0046 1946     		mov	r1, r3
 1377 0048 4FF00002 		mov	r2, #0
 1378 004c 1D4B     		ldr	r3, .L84+8
 1379 004e FFF7FEFF 		bl	__aeabi_dmul
 1380 0052 0246     		mov	r2, r0
 1381 0054 0B46     		mov	r3, r1
 1382 0056 1046     		mov	r0, r2
 1383 0058 1946     		mov	r1, r3
 1384 005a FFF7FEFF 		bl	__aeabi_d2iz
 1385 005e 0346     		mov	r3, r0
 1386 0060 3B60     		str	r3, [r7]
 439:.\main.c      **** 
 440:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 441:.\main.c      ****                 CyDelay(value);
 1387              		.loc 1 441 0
 1388 0062 3B68     		ldr	r3, [r7]
 1389 0064 1846     		mov	r0, r3
 1390 0066 FFF7FEFF 		bl	CyDelay
 442:.\main.c      ****                 break;
 1391              		.loc 1 442 0
 1392 006a 1CE0     		b	.L80
 1393              	.L79:
 1394              	.LBE3:
 443:.\main.c      ****             }
 444:.\main.c      ****         }
 445:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1395              		.loc 1 445 0
 1396 006c 164A     		ldr	r2, .L84+12
 1397 006e 7B68     		ldr	r3, [r7, #4]
 1398 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1399 0074 DBB2     		uxtb	r3, r3
 1400 0076 1846     		mov	r0, r3
 1401 0078 FFF7FEFF 		bl	TX_pin_Write
 446:.\main.c      ****         Timer_Start();
 1402              		.loc 1 446 0
 1403 007c FFF7FEFF 		bl	Timer_Start
 447:.\main.c      ****         while(!timerExpired);
 1404              		.loc 1 447 0
 1405 0080 00BF     		nop
 1406              	.L81:
 1407              		.loc 1 447 0 is_stmt 0 discriminator 1
 1408 0082 124B     		ldr	r3, .L84+16
 1409 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1410 0086 83F00103 		eor	r3, r3, #1
 1411 008a DBB2     		uxtb	r3, r3
 1412 008c 002B     		cmp	r3, #0
 1413 008e F8D1     		bne	.L81
 448:.\main.c      ****         timerExpired = false;
 1414              		.loc 1 448 0 is_stmt 1 discriminator 2
 1415 0090 0E4B     		ldr	r3, .L84+16
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 34


 1416 0092 0022     		movs	r2, #0
 1417 0094 1A70     		strb	r2, [r3]
 432:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1418              		.loc 1 432 0 discriminator 2
 1419 0096 7B68     		ldr	r3, [r7, #4]
 1420 0098 0133     		adds	r3, r3, #1
 1421 009a 7B60     		str	r3, [r7, #4]
 1422              	.L78:
 432:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1423              		.loc 1 432 0 is_stmt 0 discriminator 1
 1424 009c 0C4B     		ldr	r3, .L84+20
 1425 009e 1B68     		ldr	r3, [r3]
 1426 00a0 7A68     		ldr	r2, [r7, #4]
 1427 00a2 9A42     		cmp	r2, r3
 1428 00a4 B2DB     		blt	.L82
 1429              	.L80:
 449:.\main.c      ****     }
 450:.\main.c      ****     
 451:.\main.c      ****     
 452:.\main.c      ****     
 453:.\main.c      **** 
 454:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag
 455:.\main.c      ****     if(i == halfBitIndex){
 1430              		.loc 1 455 0 is_stmt 1
 1431 00a6 0A4B     		ldr	r3, .L84+20
 1432 00a8 1B68     		ldr	r3, [r3]
 1433 00aa 7A68     		ldr	r2, [r7, #4]
 1434 00ac 9A42     		cmp	r2, r3
 1435 00ae 02D1     		bne	.L77
 456:.\main.c      ****         dataTransmissionComplete = true;
 1436              		.loc 1 456 0
 1437 00b0 084B     		ldr	r3, .L84+24
 1438 00b2 0122     		movs	r2, #1
 1439 00b4 1A70     		strb	r2, [r3]
 1440              	.L77:
 457:.\main.c      ****     }
 458:.\main.c      **** }
 1441              		.loc 1 458 0
 1442 00b6 0837     		adds	r7, r7, #8
 1443              		.cfi_def_cfa_offset 8
 1444 00b8 BD46     		mov	sp, r7
 1445              		.cfi_def_cfa_register 13
 1446              		@ sp needed
 1447 00ba 80BD     		pop	{r7, pc}
 1448              	.L85:
 1449              		.align	2
 1450              	.L84:
 1451 00bc 00000000 		.word	networkState
 1452 00c0 00006040 		.word	1080033280
 1453 00c4 00008940 		.word	1082720256
 1454 00c8 00000000 		.word	diffManEncodedData
 1455 00cc 00000000 		.word	timerExpired
 1456 00d0 00000000 		.word	halfBitIndex
 1457 00d4 00000000 		.word	dataTransmissionComplete
 1458              		.cfi_endproc
 1459              	.LFE73:
 1460              		.size	transmitData, .-transmitData
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 35


 1461              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1462              		.align	2
 1463              		.global	setNetworkStateOnLEDs
 1464              		.thumb
 1465              		.thumb_func
 1466              		.type	setNetworkStateOnLEDs, %function
 1467              	setNetworkStateOnLEDs:
 1468              	.LFB74:
 459:.\main.c      **** 
 460:.\main.c      **** void setNetworkStateOnLEDs(){
 1469              		.loc 1 460 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 1, uses_anonymous_args = 0
 1473 0000 80B5     		push	{r7, lr}
 1474              		.cfi_def_cfa_offset 8
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 00AF     		add	r7, sp, #0
 1478              		.cfi_def_cfa_register 7
 461:.\main.c      **** 	 switch(networkState){
 1479              		.loc 1 461 0
 1480 0004 134B     		ldr	r3, .L92
 1481 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1482 0008 012B     		cmp	r3, #1
 1483 000a 04D0     		beq	.L88
 1484 000c 022B     		cmp	r3, #2
 1485 000e 16D0     		beq	.L89
 1486 0010 002B     		cmp	r3, #0
 1487 0012 0AD0     		beq	.L90
 462:.\main.c      ****         case busy:
 463:.\main.c      ****         {
 464:.\main.c      ****             LED4_Write(1);
 465:.\main.c      ****             LED3_Write(0);
 466:.\main.c      ****             LED2_Write(0);
 467:.\main.c      ****             break;
 468:.\main.c      ****         }
 469:.\main.c      ****         case idle:
 470:.\main.c      ****         {
 471:.\main.c      ****             LED3_Write(1);
 472:.\main.c      ****             LED4_Write(0);
 473:.\main.c      ****             LED2_Write(0);
 474:.\main.c      ****             break;
 475:.\main.c      ****         }
 476:.\main.c      ****         case collision:
 477:.\main.c      ****         {
 478:.\main.c      ****             LED2_Write(1);
 479:.\main.c      ****             LED4_Write(0);
 480:.\main.c      ****             LED3_Write(0);
 481:.\main.c      ****             break;
 482:.\main.c      ****         }
 483:.\main.c      ****         default:
 484:.\main.c      ****         {
 485:.\main.c      ****            //error
 486:.\main.c      ****             break;
 1488              		.loc 1 486 0
 1489 0014 1DE0     		b	.L86
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 36


 1490              	.L88:
 464:.\main.c      ****             LED3_Write(0);
 1491              		.loc 1 464 0
 1492 0016 0120     		movs	r0, #1
 1493 0018 FFF7FEFF 		bl	LED4_Write
 465:.\main.c      ****             LED2_Write(0);
 1494              		.loc 1 465 0
 1495 001c 0020     		movs	r0, #0
 1496 001e FFF7FEFF 		bl	LED3_Write
 466:.\main.c      ****             break;
 1497              		.loc 1 466 0
 1498 0022 0020     		movs	r0, #0
 1499 0024 FFF7FEFF 		bl	LED2_Write
 467:.\main.c      ****         }
 1500              		.loc 1 467 0
 1501 0028 13E0     		b	.L86
 1502              	.L90:
 471:.\main.c      ****             LED4_Write(0);
 1503              		.loc 1 471 0
 1504 002a 0120     		movs	r0, #1
 1505 002c FFF7FEFF 		bl	LED3_Write
 472:.\main.c      ****             LED2_Write(0);
 1506              		.loc 1 472 0
 1507 0030 0020     		movs	r0, #0
 1508 0032 FFF7FEFF 		bl	LED4_Write
 473:.\main.c      ****             break;
 1509              		.loc 1 473 0
 1510 0036 0020     		movs	r0, #0
 1511 0038 FFF7FEFF 		bl	LED2_Write
 474:.\main.c      ****         }
 1512              		.loc 1 474 0
 1513 003c 09E0     		b	.L86
 1514              	.L89:
 478:.\main.c      ****             LED4_Write(0);
 1515              		.loc 1 478 0
 1516 003e 0120     		movs	r0, #1
 1517 0040 FFF7FEFF 		bl	LED2_Write
 479:.\main.c      ****             LED3_Write(0);
 1518              		.loc 1 479 0
 1519 0044 0020     		movs	r0, #0
 1520 0046 FFF7FEFF 		bl	LED4_Write
 480:.\main.c      ****             break;
 1521              		.loc 1 480 0
 1522 004a 0020     		movs	r0, #0
 1523 004c FFF7FEFF 		bl	LED3_Write
 481:.\main.c      ****         }
 1524              		.loc 1 481 0
 1525 0050 00BF     		nop
 1526              	.L86:
 487:.\main.c      ****         }
 488:.\main.c      **** 	}
 489:.\main.c      **** }
 1527              		.loc 1 489 0
 1528 0052 80BD     		pop	{r7, pc}
 1529              	.L93:
 1530              		.align	2
 1531              	.L92:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 37


 1532 0054 00000000 		.word	networkState
 1533              		.cfi_endproc
 1534              	.LFE74:
 1535              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1536              		.section	.text.getRandomNumber,"ax",%progbits
 1537              		.align	2
 1538              		.global	getRandomNumber
 1539              		.thumb
 1540              		.thumb_func
 1541              		.type	getRandomNumber, %function
 1542              	getRandomNumber:
 1543              	.LFB75:
 490:.\main.c      **** 
 491:.\main.c      **** /*
 492:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 493:.\main.c      **** */
 494:.\main.c      **** int getRandomNumber()
 495:.\main.c      **** {
 1544              		.loc 1 495 0
 1545              		.cfi_startproc
 1546              		@ args = 0, pretend = 0, frame = 16
 1547              		@ frame_needed = 1, uses_anonymous_args = 0
 1548 0000 80B5     		push	{r7, lr}
 1549              		.cfi_def_cfa_offset 8
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 84B0     		sub	sp, sp, #16
 1553              		.cfi_def_cfa_offset 24
 1554 0004 00AF     		add	r7, sp, #0
 1555              		.cfi_def_cfa_register 7
 496:.\main.c      ****     const int MIN_N = 1;
 1556              		.loc 1 496 0
 1557 0006 0123     		movs	r3, #1
 1558 0008 FB60     		str	r3, [r7, #12]
 497:.\main.c      ****     const int MAX_N = 128;
 1559              		.loc 1 497 0
 1560 000a 8023     		movs	r3, #128
 1561 000c BB60     		str	r3, [r7, #8]
 498:.\main.c      **** 
 499:.\main.c      ****     int n;
 500:.\main.c      **** /*
 501:.\main.c      ****     Get first and second random numbers.
 502:.\main.c      ****     */
 503:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1562              		.loc 1 503 0
 1563 000e FFF7FEFF 		bl	rand
 1564 0012 0246     		mov	r2, r0
 1565 0014 B968     		ldr	r1, [r7, #8]
 1566 0016 FB68     		ldr	r3, [r7, #12]
 1567 0018 CB1A     		subs	r3, r1, r3
 1568 001a 0133     		adds	r3, r3, #1
 1569 001c 92FBF3F1 		sdiv	r1, r2, r3
 1570 0020 03FB01F3 		mul	r3, r3, r1
 1571 0024 D21A     		subs	r2, r2, r3
 1572 0026 FB68     		ldr	r3, [r7, #12]
 1573 0028 1344     		add	r3, r3, r2
 1574 002a 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 38


 504:.\main.c      ****     return n;
 1575              		.loc 1 504 0
 1576 002c 7B68     		ldr	r3, [r7, #4]
 505:.\main.c      **** }
 1577              		.loc 1 505 0
 1578 002e 1846     		mov	r0, r3
 1579 0030 1037     		adds	r7, r7, #16
 1580              		.cfi_def_cfa_offset 8
 1581 0032 BD46     		mov	sp, r7
 1582              		.cfi_def_cfa_register 13
 1583              		@ sp needed
 1584 0034 80BD     		pop	{r7, pc}
 1585              		.cfi_endproc
 1586              	.LFE75:
 1587              		.size	getRandomNumber, .-getRandomNumber
 1588 0036 00BF     		.section	.text.diffManToHex,"ax",%progbits
 1589              		.align	2
 1590              		.global	diffManToHex
 1591              		.thumb
 1592              		.thumb_func
 1593              		.type	diffManToHex, %function
 1594              	diffManToHex:
 1595              	.LFB76:
 506:.\main.c      **** 
 507:.\main.c      **** /*
 508:.\main.c      **** Helper method.
 509:.\main.c      **** Convert differental manchester line encoded byte to hexadecimal value (which 
 510:.\main.c      **** includes header and ACSII chars)
 511:.\main.c      **** */
 512:.\main.c      **** void diffManToHex()
 513:.\main.c      **** {
 1596              		.loc 1 513 0
 1597              		.cfi_startproc
 1598              		@ args = 0, pretend = 0, frame = 8
 1599              		@ frame_needed = 1, uses_anonymous_args = 0
 1600              		@ link register save eliminated.
 1601 0000 80B4     		push	{r7}
 1602              		.cfi_def_cfa_offset 4
 1603              		.cfi_offset 7, -4
 1604 0002 83B0     		sub	sp, sp, #12
 1605              		.cfi_def_cfa_offset 16
 1606 0004 00AF     		add	r7, sp, #0
 1607              		.cfi_def_cfa_register 7
 514:.\main.c      ****     int i;
 515:.\main.c      ****     for(i = 0; i < LENGTH_OF_BYTE; i++){
 1608              		.loc 1 515 0
 1609 0006 0023     		movs	r3, #0
 1610 0008 7B60     		str	r3, [r7, #4]
 1611 000a 42E0     		b	.L97
 1612              	.L103:
 1613              	.LBB4:
 516:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1614              		.loc 1 516 0
 1615 000c 254B     		ldr	r3, .L104
 1616 000e 1B68     		ldr	r3, [r3]
 1617 0010 013B     		subs	r3, r3, #1
 1618 0012 254A     		ldr	r2, .L104+4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 39


 1619 0014 D35C     		ldrb	r3, [r2, r3]
 1620 0016 FB70     		strb	r3, [r7, #3]
 517:.\main.c      ****         //send starting 1 bit (encoded)
 518:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1621              		.loc 1 518 0
 1622 0018 224B     		ldr	r3, .L104
 1623 001a 1B68     		ldr	r3, [r3]
 1624 001c 224A     		ldr	r2, .L104+4
 1625 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1626 0020 012B     		cmp	r3, #1
 1627 0022 17D1     		bne	.L98
 519:.\main.c      ****             //current half bit is 1
 520:.\main.c      ****             if(previousHalfBit == 1)
 1628              		.loc 1 520 0
 1629 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1630 0026 012B     		cmp	r3, #1
 1631 0028 0FD1     		bne	.L99
 521:.\main.c      ****             {
 522:.\main.c      ****                 receivedHexValue |= (1 << (7 - i));
 1632              		.loc 1 522 0
 1633 002a 7B68     		ldr	r3, [r7, #4]
 1634 002c C3F10703 		rsb	r3, r3, #7
 1635 0030 0122     		movs	r2, #1
 1636 0032 02FA03F3 		lsl	r3, r2, r3
 1637 0036 DAB2     		uxtb	r2, r3
 1638 0038 1C4B     		ldr	r3, .L104+8
 1639 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1640 003c DBB2     		uxtb	r3, r3
 1641 003e 1343     		orrs	r3, r3, r2
 1642 0040 DBB2     		uxtb	r3, r3
 1643 0042 DAB2     		uxtb	r2, r3
 1644 0044 194B     		ldr	r3, .L104+8
 1645 0046 1A70     		strb	r2, [r3]
 1646 0048 1BE0     		b	.L101
 1647              	.L99:
 523:.\main.c      ****             }
 524:.\main.c      ****             else
 525:.\main.c      ****             {
 526:.\main.c      ****                 receivedHexValue |= (0 << (7 - i));
 1648              		.loc 1 526 0
 1649 004a 184B     		ldr	r3, .L104+8
 1650 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1651 004e 174B     		ldr	r3, .L104+8
 1652 0050 1A70     		strb	r2, [r3]
 1653 0052 16E0     		b	.L101
 1654              	.L98:
 527:.\main.c      ****             }
 528:.\main.c      ****         }
 529:.\main.c      ****         else{
 530:.\main.c      ****             //current half bit is 0
 531:.\main.c      ****             if(previousHalfBit == 1)
 1655              		.loc 1 531 0
 1656 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1657 0056 012B     		cmp	r3, #1
 1658 0058 04D1     		bne	.L102
 532:.\main.c      ****             {
 533:.\main.c      ****                 receivedHexValue |= (0 << (7 - i));
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 40


 1659              		.loc 1 533 0
 1660 005a 144B     		ldr	r3, .L104+8
 1661 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1662 005e 134B     		ldr	r3, .L104+8
 1663 0060 1A70     		strb	r2, [r3]
 1664 0062 0EE0     		b	.L101
 1665              	.L102:
 534:.\main.c      ****             }
 535:.\main.c      ****             else
 536:.\main.c      ****             {
 537:.\main.c      ****                 receivedHexValue |= (1 << (7 - i));
 1666              		.loc 1 537 0
 1667 0064 7B68     		ldr	r3, [r7, #4]
 1668 0066 C3F10703 		rsb	r3, r3, #7
 1669 006a 0122     		movs	r2, #1
 1670 006c 02FA03F3 		lsl	r3, r2, r3
 1671 0070 DAB2     		uxtb	r2, r3
 1672 0072 0E4B     		ldr	r3, .L104+8
 1673 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1674 0076 DBB2     		uxtb	r3, r3
 1675 0078 1343     		orrs	r3, r3, r2
 1676 007a DBB2     		uxtb	r3, r3
 1677 007c DAB2     		uxtb	r2, r3
 1678 007e 0B4B     		ldr	r3, .L104+8
 1679 0080 1A70     		strb	r2, [r3]
 1680              	.L101:
 538:.\main.c      ****             }
 539:.\main.c      ****         }
 540:.\main.c      ****         receivedDataIndex += 2;
 1681              		.loc 1 540 0 discriminator 2
 1682 0082 084B     		ldr	r3, .L104
 1683 0084 1B68     		ldr	r3, [r3]
 1684 0086 0233     		adds	r3, r3, #2
 1685 0088 064A     		ldr	r2, .L104
 1686 008a 1360     		str	r3, [r2]
 1687              	.LBE4:
 515:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1688              		.loc 1 515 0 discriminator 2
 1689 008c 7B68     		ldr	r3, [r7, #4]
 1690 008e 0133     		adds	r3, r3, #1
 1691 0090 7B60     		str	r3, [r7, #4]
 1692              	.L97:
 515:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1693              		.loc 1 515 0 is_stmt 0 discriminator 1
 1694 0092 7B68     		ldr	r3, [r7, #4]
 1695 0094 072B     		cmp	r3, #7
 1696 0096 B9DD     		ble	.L103
 541:.\main.c      ****     }//end for loop
 542:.\main.c      **** }
 1697              		.loc 1 542 0 is_stmt 1
 1698 0098 0C37     		adds	r7, r7, #12
 1699              		.cfi_def_cfa_offset 4
 1700 009a BD46     		mov	sp, r7
 1701              		.cfi_def_cfa_register 13
 1702              		@ sp needed
 1703 009c 5DF8047B 		ldr	r7, [sp], #4
 1704              		.cfi_restore 7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 41


 1705              		.cfi_def_cfa_offset 0
 1706 00a0 7047     		bx	lr
 1707              	.L105:
 1708 00a2 00BF     		.align	2
 1709              	.L104:
 1710 00a4 00000000 		.word	receivedDataIndex
 1711 00a8 00000000 		.word	diffManReceivedData
 1712 00ac 00000000 		.word	receivedHexValue
 1713              		.cfi_endproc
 1714              	.LFE76:
 1715              		.size	diffManToHex, .-diffManToHex
 1716              		.section	.text.printChar,"ax",%progbits
 1717              		.align	2
 1718              		.global	printChar
 1719              		.thumb
 1720              		.thumb_func
 1721              		.type	printChar, %function
 1722              	printChar:
 1723              	.LFB77:
 543:.\main.c      **** 
 544:.\main.c      **** //Prints char to LCD
 545:.\main.c      **** void printChar(){
 1724              		.loc 1 545 0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 0
 1727              		@ frame_needed = 1, uses_anonymous_args = 0
 1728 0000 80B5     		push	{r7, lr}
 1729              		.cfi_def_cfa_offset 8
 1730              		.cfi_offset 7, -8
 1731              		.cfi_offset 14, -4
 1732 0002 00AF     		add	r7, sp, #0
 1733              		.cfi_def_cfa_register 7
 546:.\main.c      ****     ///Remove leading 1 bit of char
 547:.\main.c      ****     receivedHexValue &= ASCII_CHAR_MASK; 
 1734              		.loc 1 547 0
 1735 0004 064B     		ldr	r3, .L107
 1736 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1737 0008 03F07F03 		and	r3, r3, #127
 1738 000c DAB2     		uxtb	r2, r3
 1739 000e 044B     		ldr	r3, .L107
 1740 0010 1A70     		strb	r2, [r3]
 548:.\main.c      ****     LCD_PutChar(receivedHexValue); 
 1741              		.loc 1 548 0
 1742 0012 034B     		ldr	r3, .L107
 1743 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1744 0016 1846     		mov	r0, r3
 1745 0018 FFF7FEFF 		bl	LCD_PutChar
 549:.\main.c      **** }
 1746              		.loc 1 549 0
 1747 001c 80BD     		pop	{r7, pc}
 1748              	.L108:
 1749 001e 00BF     		.align	2
 1750              	.L107:
 1751 0020 00000000 		.word	receivedHexValue
 1752              		.cfi_endproc
 1753              	.LFE77:
 1754              		.size	printChar, .-printChar
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 42


 1755              		.section	.text.headerCheck,"ax",%progbits
 1756              		.align	2
 1757              		.global	headerCheck
 1758              		.thumb
 1759              		.thumb_func
 1760              		.type	headerCheck, %function
 1761              	headerCheck:
 1762              	.LFB78:
 550:.\main.c      **** 
 551:.\main.c      **** /*
 552:.\main.c      **** Checks received header
 553:.\main.c      **** Header must contain the following 7 bytes:
 554:.\main.c      **** receivedHeaderBytes[0] = START_OF_HEADER -- Start of header, always 0x71
 555:.\main.c      **** receivedHeaderBytes[1] = VERSION_NUMBER -- Always 1
 556:.\main.c      **** receivedHeaderBytes[3] = Destination address of this device (SOURCE_ADDRESS 0 to 2) OR a value of 0
 557:.\main.c      ****                             This value can be 0 (which mean the recieve message goes to all nodes),
 558:.\main.c      ****                             or must be one of the 3 node addresses this deivce owns (SOURCE_ADDRESS
 559:.\main.c      ****                             See Table A.I.1 of CE4950 Interoperability Standards.
 560:.\main.c      **** 
 561:.\main.c      **** Note:
 562:.\main.c      **** receivedHeaderBytes[2] is the receive source address. Tells where messege is from.
 563:.\main.c      **** receivedHeaderBytes[4] is message length 
 564:.\main.c      **** receivedHeaderBytes[5] Tells that CRC in used, since optional, do not check
 565:.\main.c      **** receivedHeaderBytes[6] is HEADER_CRC, since CRC optional, do not check
 566:.\main.c      **** */
 567:.\main.c      **** bool headerCheck(uint8 *receivedHeaderBytes)
 568:.\main.c      **** {
 1763              		.loc 1 568 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 16
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768 0000 80B4     		push	{r7}
 1769              		.cfi_def_cfa_offset 4
 1770              		.cfi_offset 7, -4
 1771 0002 85B0     		sub	sp, sp, #20
 1772              		.cfi_def_cfa_offset 24
 1773 0004 00AF     		add	r7, sp, #0
 1774              		.cfi_def_cfa_register 7
 1775 0006 7860     		str	r0, [r7, #4]
 569:.\main.c      ****     bool validHeader = false;
 1776              		.loc 1 569 0
 1777 0008 0023     		movs	r3, #0
 1778 000a FB73     		strb	r3, [r7, #15]
 570:.\main.c      ****     //Check START_OF_HEADER and VERSION_NUMBER
 571:.\main.c      **** 	if(receivedHeaderBytes[0]==START_OF_HEADER &&  receivedHeaderBytes[1]==VERSION_NUMBER)
 1779              		.loc 1 571 0
 1780 000c 7B68     		ldr	r3, [r7, #4]
 1781 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1782 0010 712B     		cmp	r3, #113
 1783 0012 20D1     		bne	.L110
 1784              		.loc 1 571 0 is_stmt 0 discriminator 1
 1785 0014 7B68     		ldr	r3, [r7, #4]
 1786 0016 0133     		adds	r3, r3, #1
 1787 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1788 001a 012B     		cmp	r3, #1
 1789 001c 1BD1     		bne	.L110
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 43


 572:.\main.c      ****     {
 573:.\main.c      ****         //If valid, check that the destination address of the received message is valid
 574:.\main.c      ****         if(receivedHeaderBytes[3]==0 || receivedHeaderBytes[3]==SOURCE_ADDRESS_0
 1790              		.loc 1 574 0 is_stmt 1
 1791 001e 7B68     		ldr	r3, [r7, #4]
 1792 0020 0333     		adds	r3, r3, #3
 1793 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1794 0024 002B     		cmp	r3, #0
 1795 0026 0ED0     		beq	.L111
 1796              		.loc 1 574 0 is_stmt 0 discriminator 1
 1797 0028 7B68     		ldr	r3, [r7, #4]
 1798 002a 0333     		adds	r3, r3, #3
 1799 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1800 002e 402B     		cmp	r3, #64
 1801 0030 09D0     		beq	.L111
 575:.\main.c      ****           || receivedHeaderBytes[3]==SOURCE_ADDRESS_1 || receivedHeaderBytes[3]==SOURCE_ADDRESS_2)
 1802              		.loc 1 575 0 is_stmt 1
 1803 0032 7B68     		ldr	r3, [r7, #4]
 1804 0034 0333     		adds	r3, r3, #3
 1805 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1806 0038 412B     		cmp	r3, #65
 1807 003a 04D0     		beq	.L111
 1808              		.loc 1 575 0 is_stmt 0 discriminator 1
 1809 003c 7B68     		ldr	r3, [r7, #4]
 1810 003e 0333     		adds	r3, r3, #3
 1811 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1812 0042 422B     		cmp	r3, #66
 1813 0044 07D1     		bne	.L110
 1814              	.L111:
 576:.\main.c      ****         {
 577:.\main.c      ****             rxMessageLength = receivedHeaderBytes[4]; //saves message length from header
 1815              		.loc 1 577 0 is_stmt 1
 1816 0046 7B68     		ldr	r3, [r7, #4]
 1817 0048 0433     		adds	r3, r3, #4
 1818 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1819 004c 1A46     		mov	r2, r3
 1820 004e 054B     		ldr	r3, .L113
 1821 0050 1A60     		str	r2, [r3]
 578:.\main.c      **** 			validHeader = true;
 1822              		.loc 1 578 0
 1823 0052 0123     		movs	r3, #1
 1824 0054 FB73     		strb	r3, [r7, #15]
 1825              	.L110:
 579:.\main.c      **** 		}
 580:.\main.c      **** 	}
 581:.\main.c      **** 	return validHeader;
 1826              		.loc 1 581 0
 1827 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 582:.\main.c      **** }
 1828              		.loc 1 582 0
 1829 0058 1846     		mov	r0, r3
 1830 005a 1437     		adds	r7, r7, #20
 1831              		.cfi_def_cfa_offset 4
 1832 005c BD46     		mov	sp, r7
 1833              		.cfi_def_cfa_register 13
 1834              		@ sp needed
 1835 005e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 44


 1836              		.cfi_restore 7
 1837              		.cfi_def_cfa_offset 0
 1838 0062 7047     		bx	lr
 1839              	.L114:
 1840              		.align	2
 1841              	.L113:
 1842 0064 00000000 		.word	rxMessageLength
 1843              		.cfi_endproc
 1844              	.LFE78:
 1845              		.size	headerCheck, .-headerCheck
 1846              		.text
 1847              	.Letext0:
 1848              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1849              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1850              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1851              		.file 5 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1852              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1853              		.section	.debug_info,"",%progbits
 1854              	.Ldebug_info0:
 1855 0000 E9050000 		.4byte	0x5e9
 1856 0004 0400     		.2byte	0x4
 1857 0006 00000000 		.4byte	.Ldebug_abbrev0
 1858 000a 04       		.byte	0x4
 1859 000b 01       		.uleb128 0x1
 1860 000c 7B010000 		.4byte	.LASF74
 1861 0010 01       		.byte	0x1
 1862 0011 D0030000 		.4byte	.LASF75
 1863 0015 F9000000 		.4byte	.LASF76
 1864 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1865 001d 00000000 		.4byte	0
 1866 0021 00000000 		.4byte	.Ldebug_line0
 1867 0025 02       		.uleb128 0x2
 1868 0026 01       		.byte	0x1
 1869 0027 06       		.byte	0x6
 1870 0028 A4020000 		.4byte	.LASF0
 1871 002c 02       		.uleb128 0x2
 1872 002d 01       		.byte	0x1
 1873 002e 08       		.byte	0x8
 1874 002f 49020000 		.4byte	.LASF1
 1875 0033 02       		.uleb128 0x2
 1876 0034 02       		.byte	0x2
 1877 0035 05       		.byte	0x5
 1878 0036 89000000 		.4byte	.LASF2
 1879 003a 02       		.uleb128 0x2
 1880 003b 02       		.byte	0x2
 1881 003c 07       		.byte	0x7
 1882 003d 2F030000 		.4byte	.LASF3
 1883 0041 03       		.uleb128 0x3
 1884 0042 D9030000 		.4byte	.LASF9
 1885 0046 02       		.byte	0x2
 1886 0047 3F       		.byte	0x3f
 1887 0048 4C000000 		.4byte	0x4c
 1888 004c 02       		.uleb128 0x2
 1889 004d 04       		.byte	0x4
 1890 004e 05       		.byte	0x5
 1891 004f 0F030000 		.4byte	.LASF4
 1892 0053 02       		.uleb128 0x2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 45


 1893 0054 04       		.byte	0x4
 1894 0055 07       		.byte	0x7
 1895 0056 E3020000 		.4byte	.LASF5
 1896 005a 02       		.uleb128 0x2
 1897 005b 08       		.byte	0x8
 1898 005c 05       		.byte	0x5
 1899 005d 3F010000 		.4byte	.LASF6
 1900 0061 02       		.uleb128 0x2
 1901 0062 08       		.byte	0x8
 1902 0063 07       		.byte	0x7
 1903 0064 4D010000 		.4byte	.LASF7
 1904 0068 04       		.uleb128 0x4
 1905 0069 04       		.byte	0x4
 1906 006a 05       		.byte	0x5
 1907 006b 696E7400 		.ascii	"int\000"
 1908 006f 02       		.uleb128 0x2
 1909 0070 04       		.byte	0x4
 1910 0071 07       		.byte	0x7
 1911 0072 C4020000 		.4byte	.LASF8
 1912 0076 03       		.uleb128 0x3
 1913 0077 27030000 		.4byte	.LASF10
 1914 007b 03       		.byte	0x3
 1915 007c 2C       		.byte	0x2c
 1916 007d 41000000 		.4byte	0x41
 1917 0081 03       		.uleb128 0x3
 1918 0082 D8000000 		.4byte	.LASF11
 1919 0086 04       		.byte	0x4
 1920 0087 C2       		.byte	0xc2
 1921 0088 2C000000 		.4byte	0x2c
 1922 008c 02       		.uleb128 0x2
 1923 008d 04       		.byte	0x4
 1924 008e 04       		.byte	0x4
 1925 008f 30010000 		.4byte	.LASF12
 1926 0093 02       		.uleb128 0x2
 1927 0094 08       		.byte	0x8
 1928 0095 04       		.byte	0x4
 1929 0096 80030000 		.4byte	.LASF13
 1930 009a 02       		.uleb128 0x2
 1931 009b 01       		.byte	0x1
 1932 009c 08       		.byte	0x8
 1933 009d 0A030000 		.4byte	.LASF14
 1934 00a1 05       		.uleb128 0x5
 1935 00a2 73030000 		.4byte	.LASF15
 1936 00a6 04       		.byte	0x4
 1937 00a7 6C01     		.2byte	0x16c
 1938 00a9 AD000000 		.4byte	0xad
 1939 00ad 06       		.uleb128 0x6
 1940 00ae 81000000 		.4byte	0x81
 1941 00b2 02       		.uleb128 0x2
 1942 00b3 04       		.byte	0x4
 1943 00b4 07       		.byte	0x7
 1944 00b5 49000000 		.4byte	.LASF16
 1945 00b9 07       		.uleb128 0x7
 1946 00ba 04       		.byte	0x4
 1947 00bb 9A000000 		.4byte	0x9a
 1948 00bf 03       		.uleb128 0x3
 1949 00c0 A3000000 		.4byte	.LASF17
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 46


 1950 00c4 05       		.byte	0x5
 1951 00c5 7A       		.byte	0x7a
 1952 00c6 4C000000 		.4byte	0x4c
 1953 00ca 08       		.uleb128 0x8
 1954 00cb 33000000 		.4byte	.LASF21
 1955 00cf 01       		.byte	0x1
 1956 00d0 01       		.byte	0x1
 1957 00d1 29       		.byte	0x29
 1958 00d2 E9000000 		.4byte	0xe9
 1959 00d6 09       		.uleb128 0x9
 1960 00d7 BF020000 		.4byte	.LASF18
 1961 00db 00       		.sleb128 0
 1962 00dc 09       		.uleb128 0x9
 1963 00dd 50030000 		.4byte	.LASF19
 1964 00e1 01       		.sleb128 1
 1965 00e2 09       		.uleb128 0x9
 1966 00e3 99000000 		.4byte	.LASF20
 1967 00e7 02       		.sleb128 2
 1968 00e8 00       		.byte	0
 1969 00e9 0A       		.uleb128 0xa
 1970 00ea 63726300 		.ascii	"crc\000"
 1971 00ee 01       		.byte	0x1
 1972 00ef 01       		.byte	0x1
 1973 00f0 2A       		.byte	0x2a
 1974 00f1 0E010000 		.4byte	0x10e
 1975 00f5 09       		.uleb128 0x9
 1976 00f6 84000000 		.4byte	.LASF22
 1977 00fa 00       		.sleb128 0
 1978 00fb 09       		.uleb128 0x9
 1979 00fc 00000000 		.4byte	.LASF23
 1980 0100 01       		.sleb128 1
 1981 0101 09       		.uleb128 0x9
 1982 0102 78030000 		.4byte	.LASF24
 1983 0106 02       		.sleb128 2
 1984 0107 09       		.uleb128 0x9
 1985 0108 F5020000 		.4byte	.LASF25
 1986 010c 03       		.sleb128 3
 1987 010d 00       		.byte	0
 1988 010e 0B       		.uleb128 0xb
 1989 010f 20000000 		.4byte	.LASF26
 1990 0113 01       		.byte	0x1
 1991 0114 2E       		.byte	0x2e
 1992 0115 00000000 		.4byte	.LFB63
 1993 0119 28000000 		.4byte	.LFE63-.LFB63
 1994 011d 01       		.uleb128 0x1
 1995 011e 9C       		.byte	0x9c
 1996 011f 0B       		.uleb128 0xb
 1997 0120 E9000000 		.4byte	.LASF27
 1998 0124 01       		.byte	0x1
 1999 0125 38       		.byte	0x38
 2000 0126 00000000 		.4byte	.LFB64
 2001 012a 58000000 		.4byte	.LFE64-.LFB64
 2002 012e 01       		.uleb128 0x1
 2003 012f 9C       		.byte	0x9c
 2004 0130 0B       		.uleb128 0xb
 2005 0131 28040000 		.4byte	.LASF28
 2006 0135 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 47


 2007 0136 49       		.byte	0x49
 2008 0137 00000000 		.4byte	.LFB65
 2009 013b 1C000000 		.4byte	.LFE65-.LFB65
 2010 013f 01       		.uleb128 0x1
 2011 0140 9C       		.byte	0x9c
 2012 0141 0C       		.uleb128 0xc
 2013 0142 AE030000 		.4byte	.LASF29
 2014 0146 01       		.byte	0x1
 2015 0147 50       		.byte	0x50
 2016 0148 00000000 		.4byte	.LFB66
 2017 014c 38000000 		.4byte	.LFE66-.LFB66
 2018 0150 01       		.uleb128 0x1
 2019 0151 9C       		.byte	0x9c
 2020 0152 0D       		.uleb128 0xd
 2021 0153 65000000 		.4byte	.LASF37
 2022 0157 01       		.byte	0x1
 2023 0158 57       		.byte	0x57
 2024 0159 68000000 		.4byte	0x68
 2025 015d 00000000 		.4byte	.LFB67
 2026 0161 B0020000 		.4byte	.LFE67-.LFB67
 2027 0165 01       		.uleb128 0x1
 2028 0166 9C       		.byte	0x9c
 2029 0167 E7010000 		.4byte	0x1e7
 2030 016b 0E       		.uleb128 0xe
 2031 016c 727800   		.ascii	"rx\000"
 2032 016f 01       		.byte	0x1
 2033 0170 59       		.byte	0x59
 2034 0171 9A000000 		.4byte	0x9a
 2035 0175 02       		.uleb128 0x2
 2036 0176 91       		.byte	0x91
 2037 0177 6F       		.sleb128 -17
 2038 0178 0F       		.uleb128 0xf
 2039 0179 DE000000 		.4byte	.LASF30
 2040 017d 01       		.byte	0x1
 2041 017e 5A       		.byte	0x5a
 2042 017f E7010000 		.4byte	0x1e7
 2043 0183 03       		.uleb128 0x3
 2044 0184 91       		.byte	0x91
 2045 0185 807F     		.sleb128 -128
 2046 0187 0F       		.uleb128 0xf
 2047 0188 14000000 		.4byte	.LASF31
 2048 018c 01       		.byte	0x1
 2049 018d 5B       		.byte	0x5b
 2050 018e F7010000 		.4byte	0x1f7
 2051 0192 03       		.uleb128 0x3
 2052 0193 91       		.byte	0x91
 2053 0194 F87E     		.sleb128 -136
 2054 0196 0F       		.uleb128 0xf
 2055 0197 18030000 		.4byte	.LASF32
 2056 019b 01       		.byte	0x1
 2057 019c 5C       		.byte	0x5c
 2058 019d 68000000 		.4byte	0x68
 2059 01a1 02       		.uleb128 0x2
 2060 01a2 91       		.byte	0x91
 2061 01a3 74       		.sleb128 -12
 2062 01a4 0F       		.uleb128 0xf
 2063 01a5 42030000 		.4byte	.LASF33
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 48


 2064 01a9 01       		.byte	0x1
 2065 01aa 67       		.byte	0x67
 2066 01ab BF000000 		.4byte	0xbf
 2067 01af 03       		.uleb128 0x3
 2068 01b0 91       		.byte	0x91
 2069 01b1 F47E     		.sleb128 -140
 2070 01b3 10       		.uleb128 0x10
 2071 01b4 B4000000 		.4byte	.LBB2
 2072 01b8 7C000000 		.4byte	.LBE2-.LBB2
 2073 01bc 0F       		.uleb128 0xf
 2074 01bd B7000000 		.4byte	.LASF34
 2075 01c1 01       		.byte	0x1
 2076 01c2 9C       		.byte	0x9c
 2077 01c3 07020000 		.4byte	0x207
 2078 01c7 03       		.uleb128 0x3
 2079 01c8 91       		.byte	0x91
 2080 01c9 EC7E     		.sleb128 -148
 2081 01cb 0E       		.uleb128 0xe
 2082 01cc 6900     		.ascii	"i\000"
 2083 01ce 01       		.byte	0x1
 2084 01cf 9E       		.byte	0x9e
 2085 01d0 68000000 		.4byte	0x68
 2086 01d4 02       		.uleb128 0x2
 2087 01d5 91       		.byte	0x91
 2088 01d6 70       		.sleb128 -16
 2089 01d7 0F       		.uleb128 0xf
 2090 01d8 87030000 		.4byte	.LASF35
 2091 01dc 01       		.byte	0x1
 2092 01dd A6       		.byte	0xa6
 2093 01de 17020000 		.4byte	0x217
 2094 01e2 02       		.uleb128 0x2
 2095 01e3 91       		.byte	0x91
 2096 01e4 6E       		.sleb128 -18
 2097 01e5 00       		.byte	0
 2098 01e6 00       		.byte	0
 2099 01e7 11       		.uleb128 0x11
 2100 01e8 9A000000 		.4byte	0x9a
 2101 01ec F7010000 		.4byte	0x1f7
 2102 01f0 12       		.uleb128 0x12
 2103 01f1 B2000000 		.4byte	0xb2
 2104 01f5 6B       		.byte	0x6b
 2105 01f6 00       		.byte	0
 2106 01f7 11       		.uleb128 0x11
 2107 01f8 81000000 		.4byte	0x81
 2108 01fc 07020000 		.4byte	0x207
 2109 0200 12       		.uleb128 0x12
 2110 0201 B2000000 		.4byte	0xb2
 2111 0205 07       		.byte	0x7
 2112 0206 00       		.byte	0
 2113 0207 11       		.uleb128 0x11
 2114 0208 81000000 		.4byte	0x81
 2115 020c 17020000 		.4byte	0x217
 2116 0210 12       		.uleb128 0x12
 2117 0211 B2000000 		.4byte	0xb2
 2118 0215 06       		.byte	0x6
 2119 0216 00       		.byte	0
 2120 0217 02       		.uleb128 0x2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 49


 2121 0218 01       		.byte	0x1
 2122 0219 02       		.byte	0x2
 2123 021a 4A030000 		.4byte	.LASF36
 2124 021e 13       		.uleb128 0x13
 2125 021f 8C020000 		.4byte	.LASF48
 2126 0223 01       		.byte	0x1
 2127 0224 FC       		.byte	0xfc
 2128 0225 00000000 		.4byte	.LFB68
 2129 0229 48000000 		.4byte	.LFE68-.LFB68
 2130 022d 01       		.uleb128 0x1
 2131 022e 9C       		.byte	0x9c
 2132 022f 14       		.uleb128 0x14
 2133 0230 1F020000 		.4byte	.LASF38
 2134 0234 01       		.byte	0x1
 2135 0235 0701     		.2byte	0x107
 2136 0237 00000000 		.4byte	.LFB69
 2137 023b 32000000 		.4byte	.LFE69-.LFB69
 2138 023f 01       		.uleb128 0x1
 2139 0240 9C       		.byte	0x9c
 2140 0241 62020000 		.4byte	0x262
 2141 0245 15       		.uleb128 0x15
 2142 0246 14000000 		.4byte	.LASF31
 2143 024a 01       		.byte	0x1
 2144 024b 0701     		.2byte	0x107
 2145 024d 62020000 		.4byte	0x262
 2146 0251 02       		.uleb128 0x2
 2147 0252 91       		.byte	0x91
 2148 0253 6C       		.sleb128 -20
 2149 0254 16       		.uleb128 0x16
 2150 0255 6900     		.ascii	"i\000"
 2151 0257 01       		.byte	0x1
 2152 0258 0901     		.2byte	0x109
 2153 025a 6F000000 		.4byte	0x6f
 2154 025e 02       		.uleb128 0x2
 2155 025f 91       		.byte	0x91
 2156 0260 74       		.sleb128 -12
 2157 0261 00       		.byte	0
 2158 0262 07       		.uleb128 0x7
 2159 0263 04       		.byte	0x4
 2160 0264 81000000 		.4byte	0x81
 2161 0268 17       		.uleb128 0x17
 2162 0269 CB000000 		.4byte	.LASF39
 2163 026d 01       		.byte	0x1
 2164 026e 1401     		.2byte	0x114
 2165 0270 00000000 		.4byte	.LFB70
 2166 0274 54010000 		.4byte	.LFE70-.LFB70
 2167 0278 01       		.uleb128 0x1
 2168 0279 9C       		.byte	0x9c
 2169 027a C6020000 		.4byte	0x2c6
 2170 027e 15       		.uleb128 0x15
 2171 027f 36010000 		.4byte	.LASF40
 2172 0283 01       		.byte	0x1
 2173 0284 1401     		.2byte	0x114
 2174 0286 81000000 		.4byte	0x81
 2175 028a 02       		.uleb128 0x2
 2176 028b 91       		.byte	0x91
 2177 028c 47       		.sleb128 -57
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 50


 2178 028d 18       		.uleb128 0x18
 2179 028e 52040000 		.4byte	.LASF41
 2180 0292 01       		.byte	0x1
 2181 0293 1501     		.2byte	0x115
 2182 0295 C6020000 		.4byte	0x2c6
 2183 0299 02       		.uleb128 0x2
 2184 029a 91       		.byte	0x91
 2185 029b 4C       		.sleb128 -52
 2186 029c 16       		.uleb128 0x16
 2187 029d 6900     		.ascii	"i\000"
 2188 029f 01       		.byte	0x1
 2189 02a0 1801     		.2byte	0x118
 2190 02a2 68000000 		.4byte	0x68
 2191 02a6 02       		.uleb128 0x2
 2192 02a7 91       		.byte	0x91
 2193 02a8 74       		.sleb128 -12
 2194 02a9 18       		.uleb128 0x18
 2195 02aa 42040000 		.4byte	.LASF42
 2196 02ae 01       		.byte	0x1
 2197 02af 1F01     		.2byte	0x11f
 2198 02b1 81000000 		.4byte	0x81
 2199 02b5 02       		.uleb128 0x2
 2200 02b6 91       		.byte	0x91
 2201 02b7 73       		.sleb128 -13
 2202 02b8 16       		.uleb128 0x16
 2203 02b9 6A00     		.ascii	"j\000"
 2204 02bb 01       		.byte	0x1
 2205 02bc 2001     		.2byte	0x120
 2206 02be 68000000 		.4byte	0x68
 2207 02c2 02       		.uleb128 0x2
 2208 02c3 91       		.byte	0x91
 2209 02c4 6C       		.sleb128 -20
 2210 02c5 00       		.byte	0
 2211 02c6 11       		.uleb128 0x11
 2212 02c7 6F000000 		.4byte	0x6f
 2213 02cb D6020000 		.4byte	0x2d6
 2214 02cf 12       		.uleb128 0x12
 2215 02d0 B2000000 		.4byte	0xb2
 2216 02d4 07       		.byte	0x7
 2217 02d5 00       		.byte	0
 2218 02d6 14       		.uleb128 0x14
 2219 02d7 39020000 		.4byte	.LASF43
 2220 02db 01       		.byte	0x1
 2221 02dc 5101     		.2byte	0x151
 2222 02de 00000000 		.4byte	.LFB71
 2223 02e2 32000000 		.4byte	.LFE71-.LFB71
 2224 02e6 01       		.uleb128 0x1
 2225 02e7 9C       		.byte	0x9c
 2226 02e8 18030000 		.4byte	0x318
 2227 02ec 15       		.uleb128 0x15
 2228 02ed DE000000 		.4byte	.LASF30
 2229 02f1 01       		.byte	0x1
 2230 02f2 5101     		.2byte	0x151
 2231 02f4 B9000000 		.4byte	0xb9
 2232 02f8 02       		.uleb128 0x2
 2233 02f9 91       		.byte	0x91
 2234 02fa 6C       		.sleb128 -20
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 51


 2235 02fb 15       		.uleb128 0x15
 2236 02fc 18030000 		.4byte	.LASF32
 2237 0300 01       		.byte	0x1
 2238 0301 5101     		.2byte	0x151
 2239 0303 68000000 		.4byte	0x68
 2240 0307 02       		.uleb128 0x2
 2241 0308 91       		.byte	0x91
 2242 0309 68       		.sleb128 -24
 2243 030a 16       		.uleb128 0x16
 2244 030b 6900     		.ascii	"i\000"
 2245 030d 01       		.byte	0x1
 2246 030e 5301     		.2byte	0x153
 2247 0310 68000000 		.4byte	0x68
 2248 0314 02       		.uleb128 0x2
 2249 0315 91       		.byte	0x91
 2250 0316 74       		.sleb128 -12
 2251 0317 00       		.byte	0
 2252 0318 17       		.uleb128 0x17
 2253 0319 B0020000 		.4byte	.LASF44
 2254 031d 01       		.byte	0x1
 2255 031e 5E01     		.2byte	0x15e
 2256 0320 00000000 		.4byte	.LFB72
 2257 0324 C4010000 		.4byte	.LFE72-.LFB72
 2258 0328 01       		.uleb128 0x1
 2259 0329 9C       		.byte	0x9c
 2260 032a 78030000 		.4byte	0x378
 2261 032e 15       		.uleb128 0x15
 2262 032f 00030000 		.4byte	.LASF45
 2263 0333 01       		.byte	0x1
 2264 0334 5E01     		.2byte	0x15e
 2265 0336 9A000000 		.4byte	0x9a
 2266 033a 03       		.uleb128 0x3
 2267 033b 91       		.byte	0x91
 2268 033c 977F     		.sleb128 -105
 2269 033e 18       		.uleb128 0x18
 2270 033f 42040000 		.4byte	.LASF42
 2271 0343 01       		.byte	0x1
 2272 0344 6001     		.2byte	0x160
 2273 0346 81000000 		.4byte	0x81
 2274 034a 02       		.uleb128 0x2
 2275 034b 91       		.byte	0x91
 2276 034c 77       		.sleb128 -9
 2277 034d 18       		.uleb128 0x18
 2278 034e BE030000 		.4byte	.LASF46
 2279 0352 01       		.byte	0x1
 2280 0353 7101     		.2byte	0x171
 2281 0355 78030000 		.4byte	0x378
 2282 0359 03       		.uleb128 0x3
 2283 035a 91       		.byte	0x91
 2284 035b 9C7F     		.sleb128 -100
 2285 035d 16       		.uleb128 0x16
 2286 035e 6900     		.ascii	"i\000"
 2287 0360 01       		.byte	0x1
 2288 0361 7201     		.2byte	0x172
 2289 0363 68000000 		.4byte	0x68
 2290 0367 02       		.uleb128 0x2
 2291 0368 91       		.byte	0x91
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 52


 2292 0369 70       		.sleb128 -16
 2293 036a 16       		.uleb128 0x16
 2294 036b 6A00     		.ascii	"j\000"
 2295 036d 01       		.byte	0x1
 2296 036e 7B01     		.2byte	0x17b
 2297 0370 68000000 		.4byte	0x68
 2298 0374 02       		.uleb128 0x2
 2299 0375 91       		.byte	0x91
 2300 0376 6C       		.sleb128 -20
 2301 0377 00       		.byte	0
 2302 0378 11       		.uleb128 0x11
 2303 0379 6F000000 		.4byte	0x6f
 2304 037d 88030000 		.4byte	0x388
 2305 0381 12       		.uleb128 0x12
 2306 0382 B2000000 		.4byte	0xb2
 2307 0386 13       		.byte	0x13
 2308 0387 00       		.byte	0
 2309 0388 19       		.uleb128 0x19
 2310 0389 07000000 		.4byte	.LASF53
 2311 038d 01       		.byte	0x1
 2312 038e AE01     		.2byte	0x1ae
 2313 0390 00000000 		.4byte	.LFB73
 2314 0394 D8000000 		.4byte	.LFE73-.LFB73
 2315 0398 01       		.uleb128 0x1
 2316 0399 9C       		.byte	0x9c
 2317 039a C5030000 		.4byte	0x3c5
 2318 039e 16       		.uleb128 0x16
 2319 039f 6900     		.ascii	"i\000"
 2320 03a1 01       		.byte	0x1
 2321 03a2 AF01     		.2byte	0x1af
 2322 03a4 68000000 		.4byte	0x68
 2323 03a8 02       		.uleb128 0x2
 2324 03a9 91       		.byte	0x91
 2325 03aa 74       		.sleb128 -12
 2326 03ab 10       		.uleb128 0x10
 2327 03ac 1C000000 		.4byte	.LBB3
 2328 03b0 50000000 		.4byte	.LBE3-.LBB3
 2329 03b4 18       		.uleb128 0x18
 2330 03b5 93000000 		.4byte	.LASF47
 2331 03b9 01       		.byte	0x1
 2332 03ba B601     		.2byte	0x1b6
 2333 03bc 68000000 		.4byte	0x68
 2334 03c0 02       		.uleb128 0x2
 2335 03c1 91       		.byte	0x91
 2336 03c2 70       		.sleb128 -16
 2337 03c3 00       		.byte	0
 2338 03c4 00       		.byte	0
 2339 03c5 1A       		.uleb128 0x1a
 2340 03c6 09020000 		.4byte	.LASF49
 2341 03ca 01       		.byte	0x1
 2342 03cb CC01     		.2byte	0x1cc
 2343 03cd 00000000 		.4byte	.LFB74
 2344 03d1 58000000 		.4byte	.LFE74-.LFB74
 2345 03d5 01       		.uleb128 0x1
 2346 03d6 9C       		.byte	0x9c
 2347 03d7 1B       		.uleb128 0x1b
 2348 03d8 39000000 		.4byte	.LASF50
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 53


 2349 03dc 01       		.byte	0x1
 2350 03dd EE01     		.2byte	0x1ee
 2351 03df 68000000 		.4byte	0x68
 2352 03e3 00000000 		.4byte	.LFB75
 2353 03e7 36000000 		.4byte	.LFE75-.LFB75
 2354 03eb 01       		.uleb128 0x1
 2355 03ec 9C       		.byte	0x9c
 2356 03ed 1D040000 		.4byte	0x41d
 2357 03f1 18       		.uleb128 0x18
 2358 03f2 FA020000 		.4byte	.LASF51
 2359 03f6 01       		.byte	0x1
 2360 03f7 F001     		.2byte	0x1f0
 2361 03f9 1D040000 		.4byte	0x41d
 2362 03fd 02       		.uleb128 0x2
 2363 03fe 91       		.byte	0x91
 2364 03ff 74       		.sleb128 -12
 2365 0400 18       		.uleb128 0x18
 2366 0401 FC030000 		.4byte	.LASF52
 2367 0405 01       		.byte	0x1
 2368 0406 F101     		.2byte	0x1f1
 2369 0408 1D040000 		.4byte	0x41d
 2370 040c 02       		.uleb128 0x2
 2371 040d 91       		.byte	0x91
 2372 040e 70       		.sleb128 -16
 2373 040f 16       		.uleb128 0x16
 2374 0410 6E00     		.ascii	"n\000"
 2375 0412 01       		.byte	0x1
 2376 0413 F301     		.2byte	0x1f3
 2377 0415 68000000 		.4byte	0x68
 2378 0419 02       		.uleb128 0x2
 2379 041a 91       		.byte	0x91
 2380 041b 6C       		.sleb128 -20
 2381 041c 00       		.byte	0
 2382 041d 1C       		.uleb128 0x1c
 2383 041e 68000000 		.4byte	0x68
 2384 0422 1D       		.uleb128 0x1d
 2385 0423 02040000 		.4byte	.LASF54
 2386 0427 01       		.byte	0x1
 2387 0428 0002     		.2byte	0x200
 2388 042a 00000000 		.4byte	.LFB76
 2389 042e B0000000 		.4byte	.LFE76-.LFB76
 2390 0432 01       		.uleb128 0x1
 2391 0433 9C       		.byte	0x9c
 2392 0434 5F040000 		.4byte	0x45f
 2393 0438 16       		.uleb128 0x16
 2394 0439 6900     		.ascii	"i\000"
 2395 043b 01       		.byte	0x1
 2396 043c 0202     		.2byte	0x202
 2397 043e 68000000 		.4byte	0x68
 2398 0442 02       		.uleb128 0x2
 2399 0443 91       		.byte	0x91
 2400 0444 74       		.sleb128 -12
 2401 0445 10       		.uleb128 0x10
 2402 0446 0C000000 		.4byte	.LBB4
 2403 044a 80000000 		.4byte	.LBE4-.LBB4
 2404 044e 18       		.uleb128 0x18
 2405 044f 42040000 		.4byte	.LASF42
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 54


 2406 0453 01       		.byte	0x1
 2407 0454 0402     		.2byte	0x204
 2408 0456 81000000 		.4byte	0x81
 2409 045a 02       		.uleb128 0x2
 2410 045b 91       		.byte	0x91
 2411 045c 73       		.sleb128 -13
 2412 045d 00       		.byte	0
 2413 045e 00       		.byte	0
 2414 045f 1A       		.uleb128 0x1a
 2415 0460 2F020000 		.4byte	.LASF55
 2416 0464 01       		.byte	0x1
 2417 0465 2102     		.2byte	0x221
 2418 0467 00000000 		.4byte	.LFB77
 2419 046b 24000000 		.4byte	.LFE77-.LFB77
 2420 046f 01       		.uleb128 0x1
 2421 0470 9C       		.byte	0x9c
 2422 0471 1E       		.uleb128 0x1e
 2423 0472 55030000 		.4byte	.LASF77
 2424 0476 01       		.byte	0x1
 2425 0477 3702     		.2byte	0x237
 2426 0479 17020000 		.4byte	0x217
 2427 047d 00000000 		.4byte	.LFB78
 2428 0481 68000000 		.4byte	.LFE78-.LFB78
 2429 0485 01       		.uleb128 0x1
 2430 0486 9C       		.byte	0x9c
 2431 0487 AA040000 		.4byte	0x4aa
 2432 048b 15       		.uleb128 0x15
 2433 048c B7000000 		.4byte	.LASF34
 2434 0490 01       		.byte	0x1
 2435 0491 3702     		.2byte	0x237
 2436 0493 62020000 		.4byte	0x262
 2437 0497 02       		.uleb128 0x2
 2438 0498 91       		.byte	0x91
 2439 0499 6C       		.sleb128 -20
 2440 049a 18       		.uleb128 0x18
 2441 049b F0030000 		.4byte	.LASF56
 2442 049f 01       		.byte	0x1
 2443 04a0 3902     		.2byte	0x239
 2444 04a2 17020000 		.4byte	0x217
 2445 04a6 02       		.uleb128 0x2
 2446 04a7 91       		.byte	0x91
 2447 04a8 77       		.sleb128 -9
 2448 04a9 00       		.byte	0
 2449 04aa 1F       		.uleb128 0x1f
 2450 04ab 35040000 		.4byte	.LASF57
 2451 04af 06       		.byte	0x6
 2452 04b0 2A06     		.2byte	0x62a
 2453 04b2 B6040000 		.4byte	0x4b6
 2454 04b6 06       		.uleb128 0x6
 2455 04b7 76000000 		.4byte	0x76
 2456 04bb 11       		.uleb128 0x11
 2457 04bc 68000000 		.4byte	0x68
 2458 04c0 CC040000 		.4byte	0x4cc
 2459 04c4 20       		.uleb128 0x20
 2460 04c5 B2000000 		.4byte	0xb2
 2461 04c9 5F03     		.2byte	0x35f
 2462 04cb 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 55


 2463 04cc 21       		.uleb128 0x21
 2464 04cd 52000000 		.4byte	.LASF58
 2465 04d1 01       		.byte	0x1
 2466 04d2 23       		.byte	0x23
 2467 04d3 BB040000 		.4byte	0x4bb
 2468 04d7 05       		.uleb128 0x5
 2469 04d8 03       		.byte	0x3
 2470 04d9 00000000 		.4byte	diffManEncodedData
 2471 04dd 11       		.uleb128 0x11
 2472 04de 81000000 		.4byte	0x81
 2473 04e2 ED040000 		.4byte	0x4ed
 2474 04e6 12       		.uleb128 0x12
 2475 04e7 B2000000 		.4byte	0xb2
 2476 04eb 6B       		.byte	0x6b
 2477 04ec 00       		.byte	0
 2478 04ed 21       		.uleb128 0x21
 2479 04ee 93030000 		.4byte	.LASF59
 2480 04f2 01       		.byte	0x1
 2481 04f3 24       		.byte	0x24
 2482 04f4 DD040000 		.4byte	0x4dd
 2483 04f8 05       		.uleb128 0x5
 2484 04f9 03       		.byte	0x3
 2485 04fa 00000000 		.4byte	diffManReceivedData
 2486 04fe 21       		.uleb128 0x21
 2487 04ff A7030000 		.4byte	.LASF60
 2488 0503 01       		.byte	0x1
 2489 0504 25       		.byte	0x25
 2490 0505 E7010000 		.4byte	0x1e7
 2491 0509 05       		.uleb128 0x5
 2492 050a 03       		.byte	0x3
 2493 050b 00000000 		.4byte	rxChar
 2494 050f 21       		.uleb128 0x21
 2495 0510 D1020000 		.4byte	.LASF61
 2496 0514 01       		.byte	0x1
 2497 0515 26       		.byte	0x26
 2498 0516 68000000 		.4byte	0x68
 2499 051a 05       		.uleb128 0x5
 2500 051b 03       		.byte	0x3
 2501 051c 00000000 		.4byte	receivedDataIndex
 2502 0520 21       		.uleb128 0x21
 2503 0521 61030000 		.4byte	.LASF62
 2504 0525 01       		.byte	0x1
 2505 0526 26       		.byte	0x26
 2506 0527 68000000 		.4byte	0x68
 2507 052b 05       		.uleb128 0x5
 2508 052c 03       		.byte	0x3
 2509 052d 00000000 		.4byte	receivedDataCount
 2510 0531 21       		.uleb128 0x21
 2511 0532 E3030000 		.4byte	.LASF63
 2512 0536 01       		.byte	0x1
 2513 0537 27       		.byte	0x27
 2514 0538 68000000 		.4byte	0x68
 2515 053c 05       		.uleb128 0x5
 2516 053d 03       		.byte	0x3
 2517 053e 00000000 		.4byte	halfBitIndex
 2518 0542 21       		.uleb128 0x21
 2519 0543 57020000 		.4byte	.LASF64
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 56


 2520 0547 01       		.byte	0x1
 2521 0548 27       		.byte	0x27
 2522 0549 68000000 		.4byte	0x68
 2523 054d 05       		.uleb128 0x5
 2524 054e 03       		.byte	0x3
 2525 054f 00000000 		.4byte	currentDataPos
 2526 0553 21       		.uleb128 0x21
 2527 0554 66020000 		.4byte	.LASF65
 2528 0558 01       		.byte	0x1
 2529 0559 27       		.byte	0x27
 2530 055a 68000000 		.4byte	0x68
 2531 055e 05       		.uleb128 0x5
 2532 055f 03       		.byte	0x3
 2533 0560 00000000 		.4byte	currentRXCharPosition
 2534 0564 21       		.uleb128 0x21
 2535 0565 7C020000 		.4byte	.LASF66
 2536 0569 01       		.byte	0x1
 2537 056a 27       		.byte	0x27
 2538 056b 68000000 		.4byte	0x68
 2539 056f 05       		.uleb128 0x5
 2540 0570 03       		.byte	0x3
 2541 0571 00000000 		.4byte	rxMessageLength
 2542 0575 21       		.uleb128 0x21
 2543 0576 64010000 		.4byte	.LASF67
 2544 057a 01       		.byte	0x1
 2545 057b 27       		.byte	0x27
 2546 057c 68000000 		.4byte	0x68
 2547 0580 05       		.uleb128 0x5
 2548 0581 03       		.byte	0x3
 2549 0582 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2550 0586 21       		.uleb128 0x21
 2551 0587 63040000 		.4byte	.LASF68
 2552 058b 01       		.byte	0x1
 2553 058c 28       		.byte	0x28
 2554 058d 17020000 		.4byte	0x217
 2555 0591 05       		.uleb128 0x5
 2556 0592 03       		.byte	0x3
 2557 0593 00000000 		.4byte	timerExpired
 2558 0597 21       		.uleb128 0x21
 2559 0598 0F040000 		.4byte	.LASF69
 2560 059c 01       		.byte	0x1
 2561 059d 28       		.byte	0x28
 2562 059e 17020000 		.4byte	0x217
 2563 05a2 05       		.uleb128 0x5
 2564 05a3 03       		.byte	0x3
 2565 05a4 00000000 		.4byte	dataTransmissionComplete
 2566 05a8 21       		.uleb128 0x21
 2567 05a9 70040000 		.4byte	.LASF70
 2568 05ad 01       		.byte	0x1
 2569 05ae 28       		.byte	0x28
 2570 05af 17020000 		.4byte	0x217
 2571 05b3 05       		.uleb128 0x5
 2572 05b4 03       		.byte	0x3
 2573 05b5 00000000 		.4byte	powerOnEdge
 2574 05b9 21       		.uleb128 0x21
 2575 05ba AA000000 		.4byte	.LASF71
 2576 05be 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 57


 2577 05bf 29       		.byte	0x29
 2578 05c0 CA000000 		.4byte	0xca
 2579 05c4 05       		.uleb128 0x5
 2580 05c5 03       		.byte	0x3
 2581 05c6 00000000 		.4byte	networkState
 2582 05ca 21       		.uleb128 0x21
 2583 05cb 7B000000 		.4byte	.LASF72
 2584 05cf 01       		.byte	0x1
 2585 05d0 2A       		.byte	0x2a
 2586 05d1 E9000000 		.4byte	0xe9
 2587 05d5 05       		.uleb128 0x5
 2588 05d6 03       		.byte	0x3
 2589 05d7 00000000 		.4byte	crcState
 2590 05db 21       		.uleb128 0x21
 2591 05dc 6A000000 		.4byte	.LASF73
 2592 05e0 01       		.byte	0x1
 2593 05e1 2C       		.byte	0x2c
 2594 05e2 9A000000 		.4byte	0x9a
 2595 05e6 05       		.uleb128 0x5
 2596 05e7 03       		.byte	0x3
 2597 05e8 00000000 		.4byte	receivedHexValue
 2598 05ec 00       		.byte	0
 2599              		.section	.debug_abbrev,"",%progbits
 2600              	.Ldebug_abbrev0:
 2601 0000 01       		.uleb128 0x1
 2602 0001 11       		.uleb128 0x11
 2603 0002 01       		.byte	0x1
 2604 0003 25       		.uleb128 0x25
 2605 0004 0E       		.uleb128 0xe
 2606 0005 13       		.uleb128 0x13
 2607 0006 0B       		.uleb128 0xb
 2608 0007 03       		.uleb128 0x3
 2609 0008 0E       		.uleb128 0xe
 2610 0009 1B       		.uleb128 0x1b
 2611 000a 0E       		.uleb128 0xe
 2612 000b 55       		.uleb128 0x55
 2613 000c 17       		.uleb128 0x17
 2614 000d 11       		.uleb128 0x11
 2615 000e 01       		.uleb128 0x1
 2616 000f 10       		.uleb128 0x10
 2617 0010 17       		.uleb128 0x17
 2618 0011 00       		.byte	0
 2619 0012 00       		.byte	0
 2620 0013 02       		.uleb128 0x2
 2621 0014 24       		.uleb128 0x24
 2622 0015 00       		.byte	0
 2623 0016 0B       		.uleb128 0xb
 2624 0017 0B       		.uleb128 0xb
 2625 0018 3E       		.uleb128 0x3e
 2626 0019 0B       		.uleb128 0xb
 2627 001a 03       		.uleb128 0x3
 2628 001b 0E       		.uleb128 0xe
 2629 001c 00       		.byte	0
 2630 001d 00       		.byte	0
 2631 001e 03       		.uleb128 0x3
 2632 001f 16       		.uleb128 0x16
 2633 0020 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 58


 2634 0021 03       		.uleb128 0x3
 2635 0022 0E       		.uleb128 0xe
 2636 0023 3A       		.uleb128 0x3a
 2637 0024 0B       		.uleb128 0xb
 2638 0025 3B       		.uleb128 0x3b
 2639 0026 0B       		.uleb128 0xb
 2640 0027 49       		.uleb128 0x49
 2641 0028 13       		.uleb128 0x13
 2642 0029 00       		.byte	0
 2643 002a 00       		.byte	0
 2644 002b 04       		.uleb128 0x4
 2645 002c 24       		.uleb128 0x24
 2646 002d 00       		.byte	0
 2647 002e 0B       		.uleb128 0xb
 2648 002f 0B       		.uleb128 0xb
 2649 0030 3E       		.uleb128 0x3e
 2650 0031 0B       		.uleb128 0xb
 2651 0032 03       		.uleb128 0x3
 2652 0033 08       		.uleb128 0x8
 2653 0034 00       		.byte	0
 2654 0035 00       		.byte	0
 2655 0036 05       		.uleb128 0x5
 2656 0037 16       		.uleb128 0x16
 2657 0038 00       		.byte	0
 2658 0039 03       		.uleb128 0x3
 2659 003a 0E       		.uleb128 0xe
 2660 003b 3A       		.uleb128 0x3a
 2661 003c 0B       		.uleb128 0xb
 2662 003d 3B       		.uleb128 0x3b
 2663 003e 05       		.uleb128 0x5
 2664 003f 49       		.uleb128 0x49
 2665 0040 13       		.uleb128 0x13
 2666 0041 00       		.byte	0
 2667 0042 00       		.byte	0
 2668 0043 06       		.uleb128 0x6
 2669 0044 35       		.uleb128 0x35
 2670 0045 00       		.byte	0
 2671 0046 49       		.uleb128 0x49
 2672 0047 13       		.uleb128 0x13
 2673 0048 00       		.byte	0
 2674 0049 00       		.byte	0
 2675 004a 07       		.uleb128 0x7
 2676 004b 0F       		.uleb128 0xf
 2677 004c 00       		.byte	0
 2678 004d 0B       		.uleb128 0xb
 2679 004e 0B       		.uleb128 0xb
 2680 004f 49       		.uleb128 0x49
 2681 0050 13       		.uleb128 0x13
 2682 0051 00       		.byte	0
 2683 0052 00       		.byte	0
 2684 0053 08       		.uleb128 0x8
 2685 0054 04       		.uleb128 0x4
 2686 0055 01       		.byte	0x1
 2687 0056 03       		.uleb128 0x3
 2688 0057 0E       		.uleb128 0xe
 2689 0058 0B       		.uleb128 0xb
 2690 0059 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 59


 2691 005a 3A       		.uleb128 0x3a
 2692 005b 0B       		.uleb128 0xb
 2693 005c 3B       		.uleb128 0x3b
 2694 005d 0B       		.uleb128 0xb
 2695 005e 01       		.uleb128 0x1
 2696 005f 13       		.uleb128 0x13
 2697 0060 00       		.byte	0
 2698 0061 00       		.byte	0
 2699 0062 09       		.uleb128 0x9
 2700 0063 28       		.uleb128 0x28
 2701 0064 00       		.byte	0
 2702 0065 03       		.uleb128 0x3
 2703 0066 0E       		.uleb128 0xe
 2704 0067 1C       		.uleb128 0x1c
 2705 0068 0D       		.uleb128 0xd
 2706 0069 00       		.byte	0
 2707 006a 00       		.byte	0
 2708 006b 0A       		.uleb128 0xa
 2709 006c 04       		.uleb128 0x4
 2710 006d 01       		.byte	0x1
 2711 006e 03       		.uleb128 0x3
 2712 006f 08       		.uleb128 0x8
 2713 0070 0B       		.uleb128 0xb
 2714 0071 0B       		.uleb128 0xb
 2715 0072 3A       		.uleb128 0x3a
 2716 0073 0B       		.uleb128 0xb
 2717 0074 3B       		.uleb128 0x3b
 2718 0075 0B       		.uleb128 0xb
 2719 0076 01       		.uleb128 0x1
 2720 0077 13       		.uleb128 0x13
 2721 0078 00       		.byte	0
 2722 0079 00       		.byte	0
 2723 007a 0B       		.uleb128 0xb
 2724 007b 2E       		.uleb128 0x2e
 2725 007c 00       		.byte	0
 2726 007d 3F       		.uleb128 0x3f
 2727 007e 19       		.uleb128 0x19
 2728 007f 03       		.uleb128 0x3
 2729 0080 0E       		.uleb128 0xe
 2730 0081 3A       		.uleb128 0x3a
 2731 0082 0B       		.uleb128 0xb
 2732 0083 3B       		.uleb128 0x3b
 2733 0084 0B       		.uleb128 0xb
 2734 0085 27       		.uleb128 0x27
 2735 0086 19       		.uleb128 0x19
 2736 0087 11       		.uleb128 0x11
 2737 0088 01       		.uleb128 0x1
 2738 0089 12       		.uleb128 0x12
 2739 008a 06       		.uleb128 0x6
 2740 008b 40       		.uleb128 0x40
 2741 008c 18       		.uleb128 0x18
 2742 008d 9642     		.uleb128 0x2116
 2743 008f 19       		.uleb128 0x19
 2744 0090 00       		.byte	0
 2745 0091 00       		.byte	0
 2746 0092 0C       		.uleb128 0xc
 2747 0093 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 60


 2748 0094 00       		.byte	0
 2749 0095 3F       		.uleb128 0x3f
 2750 0096 19       		.uleb128 0x19
 2751 0097 03       		.uleb128 0x3
 2752 0098 0E       		.uleb128 0xe
 2753 0099 3A       		.uleb128 0x3a
 2754 009a 0B       		.uleb128 0xb
 2755 009b 3B       		.uleb128 0x3b
 2756 009c 0B       		.uleb128 0xb
 2757 009d 27       		.uleb128 0x27
 2758 009e 19       		.uleb128 0x19
 2759 009f 11       		.uleb128 0x11
 2760 00a0 01       		.uleb128 0x1
 2761 00a1 12       		.uleb128 0x12
 2762 00a2 06       		.uleb128 0x6
 2763 00a3 40       		.uleb128 0x40
 2764 00a4 18       		.uleb128 0x18
 2765 00a5 9742     		.uleb128 0x2117
 2766 00a7 19       		.uleb128 0x19
 2767 00a8 00       		.byte	0
 2768 00a9 00       		.byte	0
 2769 00aa 0D       		.uleb128 0xd
 2770 00ab 2E       		.uleb128 0x2e
 2771 00ac 01       		.byte	0x1
 2772 00ad 3F       		.uleb128 0x3f
 2773 00ae 19       		.uleb128 0x19
 2774 00af 03       		.uleb128 0x3
 2775 00b0 0E       		.uleb128 0xe
 2776 00b1 3A       		.uleb128 0x3a
 2777 00b2 0B       		.uleb128 0xb
 2778 00b3 3B       		.uleb128 0x3b
 2779 00b4 0B       		.uleb128 0xb
 2780 00b5 49       		.uleb128 0x49
 2781 00b6 13       		.uleb128 0x13
 2782 00b7 11       		.uleb128 0x11
 2783 00b8 01       		.uleb128 0x1
 2784 00b9 12       		.uleb128 0x12
 2785 00ba 06       		.uleb128 0x6
 2786 00bb 40       		.uleb128 0x40
 2787 00bc 18       		.uleb128 0x18
 2788 00bd 9642     		.uleb128 0x2116
 2789 00bf 19       		.uleb128 0x19
 2790 00c0 01       		.uleb128 0x1
 2791 00c1 13       		.uleb128 0x13
 2792 00c2 00       		.byte	0
 2793 00c3 00       		.byte	0
 2794 00c4 0E       		.uleb128 0xe
 2795 00c5 34       		.uleb128 0x34
 2796 00c6 00       		.byte	0
 2797 00c7 03       		.uleb128 0x3
 2798 00c8 08       		.uleb128 0x8
 2799 00c9 3A       		.uleb128 0x3a
 2800 00ca 0B       		.uleb128 0xb
 2801 00cb 3B       		.uleb128 0x3b
 2802 00cc 0B       		.uleb128 0xb
 2803 00cd 49       		.uleb128 0x49
 2804 00ce 13       		.uleb128 0x13
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 61


 2805 00cf 02       		.uleb128 0x2
 2806 00d0 18       		.uleb128 0x18
 2807 00d1 00       		.byte	0
 2808 00d2 00       		.byte	0
 2809 00d3 0F       		.uleb128 0xf
 2810 00d4 34       		.uleb128 0x34
 2811 00d5 00       		.byte	0
 2812 00d6 03       		.uleb128 0x3
 2813 00d7 0E       		.uleb128 0xe
 2814 00d8 3A       		.uleb128 0x3a
 2815 00d9 0B       		.uleb128 0xb
 2816 00da 3B       		.uleb128 0x3b
 2817 00db 0B       		.uleb128 0xb
 2818 00dc 49       		.uleb128 0x49
 2819 00dd 13       		.uleb128 0x13
 2820 00de 02       		.uleb128 0x2
 2821 00df 18       		.uleb128 0x18
 2822 00e0 00       		.byte	0
 2823 00e1 00       		.byte	0
 2824 00e2 10       		.uleb128 0x10
 2825 00e3 0B       		.uleb128 0xb
 2826 00e4 01       		.byte	0x1
 2827 00e5 11       		.uleb128 0x11
 2828 00e6 01       		.uleb128 0x1
 2829 00e7 12       		.uleb128 0x12
 2830 00e8 06       		.uleb128 0x6
 2831 00e9 00       		.byte	0
 2832 00ea 00       		.byte	0
 2833 00eb 11       		.uleb128 0x11
 2834 00ec 01       		.uleb128 0x1
 2835 00ed 01       		.byte	0x1
 2836 00ee 49       		.uleb128 0x49
 2837 00ef 13       		.uleb128 0x13
 2838 00f0 01       		.uleb128 0x1
 2839 00f1 13       		.uleb128 0x13
 2840 00f2 00       		.byte	0
 2841 00f3 00       		.byte	0
 2842 00f4 12       		.uleb128 0x12
 2843 00f5 21       		.uleb128 0x21
 2844 00f6 00       		.byte	0
 2845 00f7 49       		.uleb128 0x49
 2846 00f8 13       		.uleb128 0x13
 2847 00f9 2F       		.uleb128 0x2f
 2848 00fa 0B       		.uleb128 0xb
 2849 00fb 00       		.byte	0
 2850 00fc 00       		.byte	0
 2851 00fd 13       		.uleb128 0x13
 2852 00fe 2E       		.uleb128 0x2e
 2853 00ff 00       		.byte	0
 2854 0100 3F       		.uleb128 0x3f
 2855 0101 19       		.uleb128 0x19
 2856 0102 03       		.uleb128 0x3
 2857 0103 0E       		.uleb128 0xe
 2858 0104 3A       		.uleb128 0x3a
 2859 0105 0B       		.uleb128 0xb
 2860 0106 3B       		.uleb128 0x3b
 2861 0107 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 62


 2862 0108 11       		.uleb128 0x11
 2863 0109 01       		.uleb128 0x1
 2864 010a 12       		.uleb128 0x12
 2865 010b 06       		.uleb128 0x6
 2866 010c 40       		.uleb128 0x40
 2867 010d 18       		.uleb128 0x18
 2868 010e 9742     		.uleb128 0x2117
 2869 0110 19       		.uleb128 0x19
 2870 0111 00       		.byte	0
 2871 0112 00       		.byte	0
 2872 0113 14       		.uleb128 0x14
 2873 0114 2E       		.uleb128 0x2e
 2874 0115 01       		.byte	0x1
 2875 0116 3F       		.uleb128 0x3f
 2876 0117 19       		.uleb128 0x19
 2877 0118 03       		.uleb128 0x3
 2878 0119 0E       		.uleb128 0xe
 2879 011a 3A       		.uleb128 0x3a
 2880 011b 0B       		.uleb128 0xb
 2881 011c 3B       		.uleb128 0x3b
 2882 011d 05       		.uleb128 0x5
 2883 011e 27       		.uleb128 0x27
 2884 011f 19       		.uleb128 0x19
 2885 0120 11       		.uleb128 0x11
 2886 0121 01       		.uleb128 0x1
 2887 0122 12       		.uleb128 0x12
 2888 0123 06       		.uleb128 0x6
 2889 0124 40       		.uleb128 0x40
 2890 0125 18       		.uleb128 0x18
 2891 0126 9642     		.uleb128 0x2116
 2892 0128 19       		.uleb128 0x19
 2893 0129 01       		.uleb128 0x1
 2894 012a 13       		.uleb128 0x13
 2895 012b 00       		.byte	0
 2896 012c 00       		.byte	0
 2897 012d 15       		.uleb128 0x15
 2898 012e 05       		.uleb128 0x5
 2899 012f 00       		.byte	0
 2900 0130 03       		.uleb128 0x3
 2901 0131 0E       		.uleb128 0xe
 2902 0132 3A       		.uleb128 0x3a
 2903 0133 0B       		.uleb128 0xb
 2904 0134 3B       		.uleb128 0x3b
 2905 0135 05       		.uleb128 0x5
 2906 0136 49       		.uleb128 0x49
 2907 0137 13       		.uleb128 0x13
 2908 0138 02       		.uleb128 0x2
 2909 0139 18       		.uleb128 0x18
 2910 013a 00       		.byte	0
 2911 013b 00       		.byte	0
 2912 013c 16       		.uleb128 0x16
 2913 013d 34       		.uleb128 0x34
 2914 013e 00       		.byte	0
 2915 013f 03       		.uleb128 0x3
 2916 0140 08       		.uleb128 0x8
 2917 0141 3A       		.uleb128 0x3a
 2918 0142 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 63


 2919 0143 3B       		.uleb128 0x3b
 2920 0144 05       		.uleb128 0x5
 2921 0145 49       		.uleb128 0x49
 2922 0146 13       		.uleb128 0x13
 2923 0147 02       		.uleb128 0x2
 2924 0148 18       		.uleb128 0x18
 2925 0149 00       		.byte	0
 2926 014a 00       		.byte	0
 2927 014b 17       		.uleb128 0x17
 2928 014c 2E       		.uleb128 0x2e
 2929 014d 01       		.byte	0x1
 2930 014e 3F       		.uleb128 0x3f
 2931 014f 19       		.uleb128 0x19
 2932 0150 03       		.uleb128 0x3
 2933 0151 0E       		.uleb128 0xe
 2934 0152 3A       		.uleb128 0x3a
 2935 0153 0B       		.uleb128 0xb
 2936 0154 3B       		.uleb128 0x3b
 2937 0155 05       		.uleb128 0x5
 2938 0156 27       		.uleb128 0x27
 2939 0157 19       		.uleb128 0x19
 2940 0158 11       		.uleb128 0x11
 2941 0159 01       		.uleb128 0x1
 2942 015a 12       		.uleb128 0x12
 2943 015b 06       		.uleb128 0x6
 2944 015c 40       		.uleb128 0x40
 2945 015d 18       		.uleb128 0x18
 2946 015e 9742     		.uleb128 0x2117
 2947 0160 19       		.uleb128 0x19
 2948 0161 01       		.uleb128 0x1
 2949 0162 13       		.uleb128 0x13
 2950 0163 00       		.byte	0
 2951 0164 00       		.byte	0
 2952 0165 18       		.uleb128 0x18
 2953 0166 34       		.uleb128 0x34
 2954 0167 00       		.byte	0
 2955 0168 03       		.uleb128 0x3
 2956 0169 0E       		.uleb128 0xe
 2957 016a 3A       		.uleb128 0x3a
 2958 016b 0B       		.uleb128 0xb
 2959 016c 3B       		.uleb128 0x3b
 2960 016d 05       		.uleb128 0x5
 2961 016e 49       		.uleb128 0x49
 2962 016f 13       		.uleb128 0x13
 2963 0170 02       		.uleb128 0x2
 2964 0171 18       		.uleb128 0x18
 2965 0172 00       		.byte	0
 2966 0173 00       		.byte	0
 2967 0174 19       		.uleb128 0x19
 2968 0175 2E       		.uleb128 0x2e
 2969 0176 01       		.byte	0x1
 2970 0177 3F       		.uleb128 0x3f
 2971 0178 19       		.uleb128 0x19
 2972 0179 03       		.uleb128 0x3
 2973 017a 0E       		.uleb128 0xe
 2974 017b 3A       		.uleb128 0x3a
 2975 017c 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 64


 2976 017d 3B       		.uleb128 0x3b
 2977 017e 05       		.uleb128 0x5
 2978 017f 11       		.uleb128 0x11
 2979 0180 01       		.uleb128 0x1
 2980 0181 12       		.uleb128 0x12
 2981 0182 06       		.uleb128 0x6
 2982 0183 40       		.uleb128 0x40
 2983 0184 18       		.uleb128 0x18
 2984 0185 9642     		.uleb128 0x2116
 2985 0187 19       		.uleb128 0x19
 2986 0188 01       		.uleb128 0x1
 2987 0189 13       		.uleb128 0x13
 2988 018a 00       		.byte	0
 2989 018b 00       		.byte	0
 2990 018c 1A       		.uleb128 0x1a
 2991 018d 2E       		.uleb128 0x2e
 2992 018e 00       		.byte	0
 2993 018f 3F       		.uleb128 0x3f
 2994 0190 19       		.uleb128 0x19
 2995 0191 03       		.uleb128 0x3
 2996 0192 0E       		.uleb128 0xe
 2997 0193 3A       		.uleb128 0x3a
 2998 0194 0B       		.uleb128 0xb
 2999 0195 3B       		.uleb128 0x3b
 3000 0196 05       		.uleb128 0x5
 3001 0197 11       		.uleb128 0x11
 3002 0198 01       		.uleb128 0x1
 3003 0199 12       		.uleb128 0x12
 3004 019a 06       		.uleb128 0x6
 3005 019b 40       		.uleb128 0x40
 3006 019c 18       		.uleb128 0x18
 3007 019d 9642     		.uleb128 0x2116
 3008 019f 19       		.uleb128 0x19
 3009 01a0 00       		.byte	0
 3010 01a1 00       		.byte	0
 3011 01a2 1B       		.uleb128 0x1b
 3012 01a3 2E       		.uleb128 0x2e
 3013 01a4 01       		.byte	0x1
 3014 01a5 3F       		.uleb128 0x3f
 3015 01a6 19       		.uleb128 0x19
 3016 01a7 03       		.uleb128 0x3
 3017 01a8 0E       		.uleb128 0xe
 3018 01a9 3A       		.uleb128 0x3a
 3019 01aa 0B       		.uleb128 0xb
 3020 01ab 3B       		.uleb128 0x3b
 3021 01ac 05       		.uleb128 0x5
 3022 01ad 49       		.uleb128 0x49
 3023 01ae 13       		.uleb128 0x13
 3024 01af 11       		.uleb128 0x11
 3025 01b0 01       		.uleb128 0x1
 3026 01b1 12       		.uleb128 0x12
 3027 01b2 06       		.uleb128 0x6
 3028 01b3 40       		.uleb128 0x40
 3029 01b4 18       		.uleb128 0x18
 3030 01b5 9642     		.uleb128 0x2116
 3031 01b7 19       		.uleb128 0x19
 3032 01b8 01       		.uleb128 0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 65


 3033 01b9 13       		.uleb128 0x13
 3034 01ba 00       		.byte	0
 3035 01bb 00       		.byte	0
 3036 01bc 1C       		.uleb128 0x1c
 3037 01bd 26       		.uleb128 0x26
 3038 01be 00       		.byte	0
 3039 01bf 49       		.uleb128 0x49
 3040 01c0 13       		.uleb128 0x13
 3041 01c1 00       		.byte	0
 3042 01c2 00       		.byte	0
 3043 01c3 1D       		.uleb128 0x1d
 3044 01c4 2E       		.uleb128 0x2e
 3045 01c5 01       		.byte	0x1
 3046 01c6 3F       		.uleb128 0x3f
 3047 01c7 19       		.uleb128 0x19
 3048 01c8 03       		.uleb128 0x3
 3049 01c9 0E       		.uleb128 0xe
 3050 01ca 3A       		.uleb128 0x3a
 3051 01cb 0B       		.uleb128 0xb
 3052 01cc 3B       		.uleb128 0x3b
 3053 01cd 05       		.uleb128 0x5
 3054 01ce 11       		.uleb128 0x11
 3055 01cf 01       		.uleb128 0x1
 3056 01d0 12       		.uleb128 0x12
 3057 01d1 06       		.uleb128 0x6
 3058 01d2 40       		.uleb128 0x40
 3059 01d3 18       		.uleb128 0x18
 3060 01d4 9742     		.uleb128 0x2117
 3061 01d6 19       		.uleb128 0x19
 3062 01d7 01       		.uleb128 0x1
 3063 01d8 13       		.uleb128 0x13
 3064 01d9 00       		.byte	0
 3065 01da 00       		.byte	0
 3066 01db 1E       		.uleb128 0x1e
 3067 01dc 2E       		.uleb128 0x2e
 3068 01dd 01       		.byte	0x1
 3069 01de 3F       		.uleb128 0x3f
 3070 01df 19       		.uleb128 0x19
 3071 01e0 03       		.uleb128 0x3
 3072 01e1 0E       		.uleb128 0xe
 3073 01e2 3A       		.uleb128 0x3a
 3074 01e3 0B       		.uleb128 0xb
 3075 01e4 3B       		.uleb128 0x3b
 3076 01e5 05       		.uleb128 0x5
 3077 01e6 27       		.uleb128 0x27
 3078 01e7 19       		.uleb128 0x19
 3079 01e8 49       		.uleb128 0x49
 3080 01e9 13       		.uleb128 0x13
 3081 01ea 11       		.uleb128 0x11
 3082 01eb 01       		.uleb128 0x1
 3083 01ec 12       		.uleb128 0x12
 3084 01ed 06       		.uleb128 0x6
 3085 01ee 40       		.uleb128 0x40
 3086 01ef 18       		.uleb128 0x18
 3087 01f0 9742     		.uleb128 0x2117
 3088 01f2 19       		.uleb128 0x19
 3089 01f3 01       		.uleb128 0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 66


 3090 01f4 13       		.uleb128 0x13
 3091 01f5 00       		.byte	0
 3092 01f6 00       		.byte	0
 3093 01f7 1F       		.uleb128 0x1f
 3094 01f8 34       		.uleb128 0x34
 3095 01f9 00       		.byte	0
 3096 01fa 03       		.uleb128 0x3
 3097 01fb 0E       		.uleb128 0xe
 3098 01fc 3A       		.uleb128 0x3a
 3099 01fd 0B       		.uleb128 0xb
 3100 01fe 3B       		.uleb128 0x3b
 3101 01ff 05       		.uleb128 0x5
 3102 0200 49       		.uleb128 0x49
 3103 0201 13       		.uleb128 0x13
 3104 0202 3F       		.uleb128 0x3f
 3105 0203 19       		.uleb128 0x19
 3106 0204 3C       		.uleb128 0x3c
 3107 0205 19       		.uleb128 0x19
 3108 0206 00       		.byte	0
 3109 0207 00       		.byte	0
 3110 0208 20       		.uleb128 0x20
 3111 0209 21       		.uleb128 0x21
 3112 020a 00       		.byte	0
 3113 020b 49       		.uleb128 0x49
 3114 020c 13       		.uleb128 0x13
 3115 020d 2F       		.uleb128 0x2f
 3116 020e 05       		.uleb128 0x5
 3117 020f 00       		.byte	0
 3118 0210 00       		.byte	0
 3119 0211 21       		.uleb128 0x21
 3120 0212 34       		.uleb128 0x34
 3121 0213 00       		.byte	0
 3122 0214 03       		.uleb128 0x3
 3123 0215 0E       		.uleb128 0xe
 3124 0216 3A       		.uleb128 0x3a
 3125 0217 0B       		.uleb128 0xb
 3126 0218 3B       		.uleb128 0x3b
 3127 0219 0B       		.uleb128 0xb
 3128 021a 49       		.uleb128 0x49
 3129 021b 13       		.uleb128 0x13
 3130 021c 3F       		.uleb128 0x3f
 3131 021d 19       		.uleb128 0x19
 3132 021e 02       		.uleb128 0x2
 3133 021f 18       		.uleb128 0x18
 3134 0220 00       		.byte	0
 3135 0221 00       		.byte	0
 3136 0222 00       		.byte	0
 3137              		.section	.debug_aranges,"",%progbits
 3138 0000 94000000 		.4byte	0x94
 3139 0004 0200     		.2byte	0x2
 3140 0006 00000000 		.4byte	.Ldebug_info0
 3141 000a 04       		.byte	0x4
 3142 000b 00       		.byte	0
 3143 000c 0000     		.2byte	0
 3144 000e 0000     		.2byte	0
 3145 0010 00000000 		.4byte	.LFB63
 3146 0014 28000000 		.4byte	.LFE63-.LFB63
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 67


 3147 0018 00000000 		.4byte	.LFB64
 3148 001c 58000000 		.4byte	.LFE64-.LFB64
 3149 0020 00000000 		.4byte	.LFB65
 3150 0024 1C000000 		.4byte	.LFE65-.LFB65
 3151 0028 00000000 		.4byte	.LFB66
 3152 002c 38000000 		.4byte	.LFE66-.LFB66
 3153 0030 00000000 		.4byte	.LFB67
 3154 0034 B0020000 		.4byte	.LFE67-.LFB67
 3155 0038 00000000 		.4byte	.LFB68
 3156 003c 48000000 		.4byte	.LFE68-.LFB68
 3157 0040 00000000 		.4byte	.LFB69
 3158 0044 32000000 		.4byte	.LFE69-.LFB69
 3159 0048 00000000 		.4byte	.LFB70
 3160 004c 54010000 		.4byte	.LFE70-.LFB70
 3161 0050 00000000 		.4byte	.LFB71
 3162 0054 32000000 		.4byte	.LFE71-.LFB71
 3163 0058 00000000 		.4byte	.LFB72
 3164 005c C4010000 		.4byte	.LFE72-.LFB72
 3165 0060 00000000 		.4byte	.LFB73
 3166 0064 D8000000 		.4byte	.LFE73-.LFB73
 3167 0068 00000000 		.4byte	.LFB74
 3168 006c 58000000 		.4byte	.LFE74-.LFB74
 3169 0070 00000000 		.4byte	.LFB75
 3170 0074 36000000 		.4byte	.LFE75-.LFB75
 3171 0078 00000000 		.4byte	.LFB76
 3172 007c B0000000 		.4byte	.LFE76-.LFB76
 3173 0080 00000000 		.4byte	.LFB77
 3174 0084 24000000 		.4byte	.LFE77-.LFB77
 3175 0088 00000000 		.4byte	.LFB78
 3176 008c 68000000 		.4byte	.LFE78-.LFB78
 3177 0090 00000000 		.4byte	0
 3178 0094 00000000 		.4byte	0
 3179              		.section	.debug_ranges,"",%progbits
 3180              	.Ldebug_ranges0:
 3181 0000 00000000 		.4byte	.LFB63
 3182 0004 28000000 		.4byte	.LFE63
 3183 0008 00000000 		.4byte	.LFB64
 3184 000c 58000000 		.4byte	.LFE64
 3185 0010 00000000 		.4byte	.LFB65
 3186 0014 1C000000 		.4byte	.LFE65
 3187 0018 00000000 		.4byte	.LFB66
 3188 001c 38000000 		.4byte	.LFE66
 3189 0020 00000000 		.4byte	.LFB67
 3190 0024 B0020000 		.4byte	.LFE67
 3191 0028 00000000 		.4byte	.LFB68
 3192 002c 48000000 		.4byte	.LFE68
 3193 0030 00000000 		.4byte	.LFB69
 3194 0034 32000000 		.4byte	.LFE69
 3195 0038 00000000 		.4byte	.LFB70
 3196 003c 54010000 		.4byte	.LFE70
 3197 0040 00000000 		.4byte	.LFB71
 3198 0044 32000000 		.4byte	.LFE71
 3199 0048 00000000 		.4byte	.LFB72
 3200 004c C4010000 		.4byte	.LFE72
 3201 0050 00000000 		.4byte	.LFB73
 3202 0054 D8000000 		.4byte	.LFE73
 3203 0058 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 68


 3204 005c 58000000 		.4byte	.LFE74
 3205 0060 00000000 		.4byte	.LFB75
 3206 0064 36000000 		.4byte	.LFE75
 3207 0068 00000000 		.4byte	.LFB76
 3208 006c B0000000 		.4byte	.LFE76
 3209 0070 00000000 		.4byte	.LFB77
 3210 0074 24000000 		.4byte	.LFE77
 3211 0078 00000000 		.4byte	.LFB78
 3212 007c 68000000 		.4byte	.LFE78
 3213 0080 00000000 		.4byte	0
 3214 0084 00000000 		.4byte	0
 3215              		.section	.debug_line,"",%progbits
 3216              	.Ldebug_line0:
 3217 0000 AD040000 		.section	.debug_str,"MS",%progbits,1
 3217      0200AE01 
 3217      00000201 
 3217      FB0E0D00 
 3217      01010101 
 3218              	.LASF23:
 3219 0000 68656164 		.ascii	"header\000"
 3219      657200
 3220              	.LASF53:
 3221 0007 7472616E 		.ascii	"transmitData\000"
 3221      736D6974 
 3221      44617461 
 3221      00
 3222              	.LASF31:
 3223 0014 68656164 		.ascii	"headerBytes\000"
 3223      65724279 
 3223      74657300 
 3224              	.LASF26:
 3225 0020 49646C65 		.ascii	"Idle_Collision_ISR\000"
 3225      5F436F6C 
 3225      6C697369 
 3225      6F6E5F49 
 3225      535200
 3226              	.LASF21:
 3227 0033 73746174 		.ascii	"state\000"
 3227      6500
 3228              	.LASF50:
 3229 0039 67657452 		.ascii	"getRandomNumber\000"
 3229      616E646F 
 3229      6D4E756D 
 3229      62657200 
 3230              	.LASF16:
 3231 0049 73697A65 		.ascii	"sizetype\000"
 3231      74797065 
 3231      00
 3232              	.LASF58:
 3233 0052 64696666 		.ascii	"diffManEncodedData\000"
 3233      4D616E45 
 3233      6E636F64 
 3233      65644461 
 3233      746100
 3234              	.LASF37:
 3235 0065 6D61696E 		.ascii	"main\000"
 3235      00
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 69


 3236              	.LASF73:
 3237 006a 72656365 		.ascii	"receivedHexValue\000"
 3237      69766564 
 3237      48657856 
 3237      616C7565 
 3237      00
 3238              	.LASF72:
 3239 007b 63726353 		.ascii	"crcState\000"
 3239      74617465 
 3239      00
 3240              	.LASF22:
 3241 0084 6E6F6E65 		.ascii	"none\000"
 3241      00
 3242              	.LASF2:
 3243 0089 73686F72 		.ascii	"short int\000"
 3243      7420696E 
 3243      7400
 3244              	.LASF47:
 3245 0093 76616C75 		.ascii	"value\000"
 3245      6500
 3246              	.LASF20:
 3247 0099 636F6C6C 		.ascii	"collision\000"
 3247      6973696F 
 3247      6E00
 3248              	.LASF17:
 3249 00a3 74696D65 		.ascii	"time_t\000"
 3249      5F7400
 3250              	.LASF71:
 3251 00aa 6E657477 		.ascii	"networkState\000"
 3251      6F726B53 
 3251      74617465 
 3251      00
 3252              	.LASF34:
 3253 00b7 72656365 		.ascii	"receivedHeaderBytes\000"
 3253      69766564 
 3253      48656164 
 3253      65724279 
 3253      74657300 
 3254              	.LASF39:
 3255 00cb 68657854 		.ascii	"hexToDiffMan\000"
 3255      6F446966 
 3255      664D616E 
 3255      00
 3256              	.LASF11:
 3257 00d8 75696E74 		.ascii	"uint8\000"
 3257      3800
 3258              	.LASF30:
 3259 00de 6C696E65 		.ascii	"lineString\000"
 3259      53747269 
 3259      6E6700
 3260              	.LASF27:
 3261 00e9 45646765 		.ascii	"Edge_detect_ISR\000"
 3261      5F646574 
 3261      6563745F 
 3261      49535200 
 3262              	.LASF76:
 3263 00f9 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 70


 3263      79446F63 
 3263      735C446F 
 3263      63756D65 
 3263      6E74735C 
 3264 0127 30312E63 		.ascii	"01.cydsn\000"
 3264      7964736E 
 3264      00
 3265              	.LASF12:
 3266 0130 666C6F61 		.ascii	"float\000"
 3266      7400
 3267              	.LASF40:
 3268 0136 68657856 		.ascii	"hexValue\000"
 3268      616C7565 
 3268      00
 3269              	.LASF6:
 3270 013f 6C6F6E67 		.ascii	"long long int\000"
 3270      206C6F6E 
 3270      6720696E 
 3270      7400
 3271              	.LASF7:
 3272 014d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3272      206C6F6E 
 3272      6720756E 
 3272      7369676E 
 3272      65642069 
 3273              	.LASF67:
 3274 0164 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 3274      45535449 
 3274      4E415449 
 3274      4F4E5F41 
 3274      44445245 
 3275              	.LASF74:
 3276 017b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3276      4320342E 
 3276      392E3320 
 3276      32303135 
 3276      30333033 
 3277 01ae 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3277      20726576 
 3277      6973696F 
 3277      6E203232 
 3277      31323230 
 3278 01e1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3278      66756E63 
 3278      74696F6E 
 3278      2D736563 
 3278      74696F6E 
 3279              	.LASF49:
 3280 0209 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 3280      6574776F 
 3280      726B5374 
 3280      6174654F 
 3280      6E4C4544 
 3281              	.LASF38:
 3282 021f 68656164 		.ascii	"headerToDiffMan\000"
 3282      6572546F 
 3282      44696666 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 71


 3282      4D616E00 
 3283              	.LASF55:
 3284 022f 7072696E 		.ascii	"printChar\000"
 3284      74436861 
 3284      7200
 3285              	.LASF43:
 3286 0239 73747269 		.ascii	"stringToDiffMan\000"
 3286      6E67546F 
 3286      44696666 
 3286      4D616E00 
 3287              	.LASF1:
 3288 0249 756E7369 		.ascii	"unsigned char\000"
 3288      676E6564 
 3288      20636861 
 3288      7200
 3289              	.LASF64:
 3290 0257 63757272 		.ascii	"currentDataPos\000"
 3290      656E7444 
 3290      61746150 
 3290      6F7300
 3291              	.LASF65:
 3292 0266 63757272 		.ascii	"currentRXCharPosition\000"
 3292      656E7452 
 3292      58436861 
 3292      72506F73 
 3292      6974696F 
 3293              	.LASF66:
 3294 027c 72784D65 		.ascii	"rxMessageLength\000"
 3294      73736167 
 3294      654C656E 
 3294      67746800 
 3295              	.LASF48:
 3296 028c 696E6974 		.ascii	"initDiffManEncodedArray\000"
 3296      44696666 
 3296      4D616E45 
 3296      6E636F64 
 3296      65644172 
 3297              	.LASF0:
 3298 02a4 7369676E 		.ascii	"signed char\000"
 3298      65642063 
 3298      68617200 
 3299              	.LASF44:
 3300 02b0 61736369 		.ascii	"asciiToDiffMan\000"
 3300      69546F44 
 3300      6966664D 
 3300      616E00
 3301              	.LASF18:
 3302 02bf 69646C65 		.ascii	"idle\000"
 3302      00
 3303              	.LASF8:
 3304 02c4 756E7369 		.ascii	"unsigned int\000"
 3304      676E6564 
 3304      20696E74 
 3304      00
 3305              	.LASF61:
 3306 02d1 72656365 		.ascii	"receivedDataIndex\000"
 3306      69766564 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 72


 3306      44617461 
 3306      496E6465 
 3306      7800
 3307              	.LASF5:
 3308 02e3 6C6F6E67 		.ascii	"long unsigned int\000"
 3308      20756E73 
 3308      69676E65 
 3308      6420696E 
 3308      7400
 3309              	.LASF25:
 3310 02f5 626F7468 		.ascii	"both\000"
 3310      00
 3311              	.LASF51:
 3312 02fa 4D494E5F 		.ascii	"MIN_N\000"
 3312      4E00
 3313              	.LASF45:
 3314 0300 61736369 		.ascii	"asciiChar\000"
 3314      69436861 
 3314      7200
 3315              	.LASF14:
 3316 030a 63686172 		.ascii	"char\000"
 3316      00
 3317              	.LASF4:
 3318 030f 6C6F6E67 		.ascii	"long int\000"
 3318      20696E74 
 3318      00
 3319              	.LASF32:
 3320 0318 73747269 		.ascii	"stringPosition\000"
 3320      6E67506F 
 3320      73697469 
 3320      6F6E00
 3321              	.LASF10:
 3322 0327 696E7433 		.ascii	"int32_t\000"
 3322      325F7400 
 3323              	.LASF3:
 3324 032f 73686F72 		.ascii	"short unsigned int\000"
 3324      7420756E 
 3324      7369676E 
 3324      65642069 
 3324      6E7400
 3325              	.LASF33:
 3326 0342 7365636F 		.ascii	"seconds\000"
 3326      6E647300 
 3327              	.LASF36:
 3328 034a 5F426F6F 		.ascii	"_Bool\000"
 3328      6C00
 3329              	.LASF19:
 3330 0350 62757379 		.ascii	"busy\000"
 3330      00
 3331              	.LASF77:
 3332 0355 68656164 		.ascii	"headerCheck\000"
 3332      65724368 
 3332      65636B00 
 3333              	.LASF62:
 3334 0361 72656365 		.ascii	"receivedDataCount\000"
 3334      69766564 
 3334      44617461 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 73


 3334      436F756E 
 3334      7400
 3335              	.LASF15:
 3336 0373 72656738 		.ascii	"reg8\000"
 3336      00
 3337              	.LASF24:
 3338 0378 6D657373 		.ascii	"message\000"
 3338      61676500 
 3339              	.LASF13:
 3340 0380 646F7562 		.ascii	"double\000"
 3340      6C6500
 3341              	.LASF35:
 3342 0387 68656164 		.ascii	"headerValid\000"
 3342      65725661 
 3342      6C696400 
 3343              	.LASF59:
 3344 0393 64696666 		.ascii	"diffManReceivedData\000"
 3344      4D616E52 
 3344      65636569 
 3344      76656444 
 3344      61746100 
 3345              	.LASF60:
 3346 03a7 72784368 		.ascii	"rxChar\000"
 3346      617200
 3347              	.LASF29:
 3348 03ae 52656365 		.ascii	"ReceiveTimerISR\000"
 3348      69766554 
 3348      696D6572 
 3348      49535200 
 3349              	.LASF46:
 3350 03be 62696E61 		.ascii	"binaryValueOfChar\000"
 3350      72795661 
 3350      6C75654F 
 3350      66436861 
 3350      7200
 3351              	.LASF75:
 3352 03d0 2E5C6D61 		.ascii	".\\main.c\000"
 3352      696E2E63 
 3352      00
 3353              	.LASF9:
 3354 03d9 5F5F696E 		.ascii	"__int32_t\000"
 3354      7433325F 
 3354      7400
 3355              	.LASF63:
 3356 03e3 68616C66 		.ascii	"halfBitIndex\000"
 3356      42697449 
 3356      6E646578 
 3356      00
 3357              	.LASF56:
 3358 03f0 76616C69 		.ascii	"validHeader\000"
 3358      64486561 
 3358      64657200 
 3359              	.LASF52:
 3360 03fc 4D41585F 		.ascii	"MAX_N\000"
 3360      4E00
 3361              	.LASF54:
 3362 0402 64696666 		.ascii	"diffManToHex\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccgqFdzS.s 			page 74


 3362      4D616E54 
 3362      6F486578 
 3362      00
 3363              	.LASF69:
 3364 040f 64617461 		.ascii	"dataTransmissionComplete\000"
 3364      5472616E 
 3364      736D6973 
 3364      73696F6E 
 3364      436F6D70 
 3365              	.LASF28:
 3366 0428 54696D65 		.ascii	"TimerHandler\000"
 3366      7248616E 
 3366      646C6572 
 3366      00
 3367              	.LASF57:
 3368 0435 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3368      52784275 
 3368      66666572 
 3368      00
 3369              	.LASF42:
 3370 0442 70726576 		.ascii	"previousHalfBit\000"
 3370      696F7573 
 3370      48616C66 
 3370      42697400 
 3371              	.LASF41:
 3372 0452 62696E61 		.ascii	"binaryValueOfHex\000"
 3372      72795661 
 3372      6C75654F 
 3372      66486578 
 3372      00
 3373              	.LASF68:
 3374 0463 74696D65 		.ascii	"timerExpired\000"
 3374      72457870 
 3374      69726564 
 3374      00
 3375              	.LASF70:
 3376 0470 706F7765 		.ascii	"powerOnEdge\000"
 3376      724F6E45 
 3376      64676500 
 3377              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
