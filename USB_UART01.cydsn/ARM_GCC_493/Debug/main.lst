ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.comm	lengthOfData,4,4
  43              		.comm	messageLength,4,4
  44              		.comm	headerCRC,4,4
  45              		.global	TX_DESTINATION_ADDRESS
  46              		.align	2
  47              		.type	TX_DESTINATION_ADDRESS, %object
  48              		.size	TX_DESTINATION_ADDRESS, 4
  49              	TX_DESTINATION_ADDRESS:
  50 000c 00000000 		.space	4
  51              		.comm	timerExpired,1,1
  52              		.comm	dataTransmissionComplete,1,1
  53              		.comm	powerOnEdge,1,1
  54              		.global	headerValid
  55              		.type	headerValid, %object
  56              		.size	headerValid, 1
  57              	headerValid:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 2


  58 0010 00       		.space	1
  59              		.comm	networkState,1,1
  60              		.comm	crcState,1,1
  61              		.comm	receivedChar,1,1
  62 0011 000000   		.section	.text.Idle_Collision_ISR,"ax",%progbits
  63              		.align	2
  64              		.global	Idle_Collision_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	Idle_Collision_ISR, %function
  68              	Idle_Collision_ISR:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** #define INDEX_OF_MSB 6
   2:.\main.c      **** #define HIGH 1
   3:.\main.c      **** #define EIGHT_BITS 8
   4:.\main.c      **** #define START_BIT 2
   5:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   6:.\main.c      **** #define TX_SOURCE_ADDRESS 0
   7:.\main.c      **** #define RX_DESTINATION_ADDRESS 0//these 2 are supposed to be the same
   8:.\main.c      **** #define VERSION_NUMBER 1
   9:.\main.c      **** #define HEADER_POS 7
  10:.\main.c      **** 
  11:.\main.c      **** 
  12:.\main.c      **** #include <device.h>
  13:.\main.c      **** #include <stdbool.h>
  14:.\main.c      **** #include <stdlib.h> //For random number generator
  15:.\main.c      **** #include <time.h>
  16:.\main.c      **** #include "stdio.h"
  17:.\main.c      **** 
  18:.\main.c      **** 
  19:.\main.c      **** int getRandomNumber();
  20:.\main.c      **** void initDiffManEncodedArray();
  21:.\main.c      **** void stringToDiffMan(char*, uint8);
  22:.\main.c      **** void asciiToDiffMan(char);
  23:.\main.c      **** void transmitData();
  24:.\main.c      **** void setNetworkStateOnLEDs();
  25:.\main.c      **** void diffManToASCII();
  26:.\main.c      **** void storeChar();
  27:.\main.c      **** void printChar();
  28:.\main.c      **** bool headerCheck();
  29:.\main.c      **** 
  30:.\main.c      **** int diffManEncodedData[864];
  31:.\main.c      **** uint8 diffManReceivedData[108];
  32:.\main.c      **** char rxChar[108];
  33:.\main.c      **** int receivedDataIndex, receivedDataCount;
  34:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, lengthOfData, messageLength, h
  35:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge, headerValid = false;
  36:.\main.c      **** enum state {idle, busy, collision} networkState;
  37:.\main.c      **** enum crc {none, header, message, both} crcState;
  38:.\main.c      **** 
  39:.\main.c      **** char receivedChar;
  40:.\main.c      **** 
  41:.\main.c      **** CY_ISR(Idle_Collision_ISR){ 
  71              		.loc 1 41 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 3


  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  42:.\main.c      ****     networkState = idle; 
  81              		.loc 1 42 0
  82 0004 074B     		ldr	r3, .L4
  83 0006 0022     		movs	r2, #0
  84 0008 1A70     		strb	r2, [r3]
  43:.\main.c      ****     if(Receive_Read() == HIGH){
  85              		.loc 1 43 0
  86 000a FFF7FEFF 		bl	Receive_Read
  87 000e 0346     		mov	r3, r0
  88 0010 012B     		cmp	r3, #1
  89 0012 03D1     		bne	.L2
  44:.\main.c      ****         networkState = idle;  
  90              		.loc 1 44 0
  91 0014 034B     		ldr	r3, .L4
  92 0016 0022     		movs	r2, #0
  93 0018 1A70     		strb	r2, [r3]
  94 001a 02E0     		b	.L1
  95              	.L2:
  45:.\main.c      ****     }
  46:.\main.c      ****     else{
  47:.\main.c      ****         networkState = collision;
  96              		.loc 1 47 0
  97 001c 014B     		ldr	r3, .L4
  98 001e 0222     		movs	r2, #2
  99 0020 1A70     		strb	r2, [r3]
 100              	.L1:
  48:.\main.c      ****     }
  49:.\main.c      **** }
 101              		.loc 1 49 0
 102 0022 80BD     		pop	{r7, pc}
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0024 00000000 		.word	networkState
 107              		.cfi_endproc
 108              	.LFE63:
 109              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 110              		.section	.text.Edge_detect_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	Edge_detect_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	Edge_detect_ISR, %function
 116              	Edge_detect_ISR:
 117              	.LFB64:
  50:.\main.c      **** 
  51:.\main.c      **** CY_ISR(Edge_detect_ISR){
 118              		.loc 1 51 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 4


 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 98B5     		push	{r3, r4, r7, lr}
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  52:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  53:.\main.c      ****     Idle_Collision_Timer_Start();
 130              		.loc 1 53 0
 131 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  54:.\main.c      **** 	
  55:.\main.c      ****     //Ignore power on edge 
  56:.\main.c      ****     if(!powerOnEdge){
 132              		.loc 1 56 0
 133 0008 0F4B     		ldr	r3, .L9
 134 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000c 83F00103 		eor	r3, r3, #1
 136 0010 DBB2     		uxtb	r3, r3
 137 0012 002B     		cmp	r3, #0
 138 0014 0FD0     		beq	.L7
  57:.\main.c      ****         Receive_Timer_Start(); 
 139              		.loc 1 57 0
 140 0016 FFF7FEFF 		bl	Receive_Timer_Start
  58:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 141              		.loc 1 58 0
 142 001a 0C4B     		ldr	r3, .L9+4
 143 001c 1C68     		ldr	r4, [r3]
 144 001e FFF7FEFF 		bl	Receive_Read
 145 0022 0346     		mov	r3, r0
 146 0024 1A46     		mov	r2, r3
 147 0026 0A4B     		ldr	r3, .L9+8
 148 0028 1A55     		strb	r2, [r3, r4]
  59:.\main.c      ****         receivedDataCount++;    
 149              		.loc 1 59 0
 150 002a 084B     		ldr	r3, .L9+4
 151 002c 1B68     		ldr	r3, [r3]
 152 002e 0133     		adds	r3, r3, #1
 153 0030 064A     		ldr	r2, .L9+4
 154 0032 1360     		str	r3, [r2]
 155 0034 02E0     		b	.L8
 156              	.L7:
  60:.\main.c      ****     }
  61:.\main.c      ****     else{
  62:.\main.c      ****         powerOnEdge = false;
 157              		.loc 1 62 0
 158 0036 044B     		ldr	r3, .L9
 159 0038 0022     		movs	r2, #0
 160 003a 1A70     		strb	r2, [r3]
 161              	.L8:
  63:.\main.c      ****     }
  64:.\main.c      ****     networkState = busy;
 162              		.loc 1 64 0
 163 003c 054B     		ldr	r3, .L9+12
 164 003e 0122     		movs	r2, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 5


 165 0040 1A70     		strb	r2, [r3]
  65:.\main.c      ****     Receive_ClearInterrupt();
 166              		.loc 1 65 0
 167 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  66:.\main.c      **** }
 168              		.loc 1 66 0
 169 0046 98BD     		pop	{r3, r4, r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 0048 00000000 		.word	powerOnEdge
 174 004c 00000000 		.word	receivedDataCount
 175 0050 00000000 		.word	diffManReceivedData
 176 0054 00000000 		.word	networkState
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 180              		.section	.text.TimerHandler,"ax",%progbits
 181              		.align	2
 182              		.global	TimerHandler
 183              		.thumb
 184              		.thumb_func
 185              		.type	TimerHandler, %function
 186              	TimerHandler:
 187              	.LFB65:
  67:.\main.c      **** 
  68:.\main.c      **** CY_ISR(TimerHandler){
 188              		.loc 1 68 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
  69:.\main.c      ****     Timer_Stop();
 198              		.loc 1 69 0
 199 0004 FFF7FEFF 		bl	Timer_Stop
  70:.\main.c      ****     timerExpired = true;
 200              		.loc 1 70 0
 201 0008 024B     		ldr	r3, .L12
 202 000a 0122     		movs	r2, #1
 203 000c 1A70     		strb	r2, [r3]
  71:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 204              		.loc 1 71 0
 205 000e 024B     		ldr	r3, .L12+4
 206 0010 1B78     		ldrb	r3, [r3]
  72:.\main.c      **** }
 207              		.loc 1 72 0
 208 0012 80BD     		pop	{r7, pc}
 209              	.L13:
 210              		.align	2
 211              	.L12:
 212 0014 00000000 		.word	timerExpired
 213 0018 6B640040 		.word	1073767531
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 6


 214              		.cfi_endproc
 215              	.LFE65:
 216              		.size	TimerHandler, .-TimerHandler
 217              		.section	.text.ReceiveTimerISR,"ax",%progbits
 218              		.align	2
 219              		.global	ReceiveTimerISR
 220              		.thumb
 221              		.thumb_func
 222              		.type	ReceiveTimerISR, %function
 223              	ReceiveTimerISR:
 224              	.LFB66:
  73:.\main.c      **** 
  74:.\main.c      **** //TODO changing from reading to just repeting last data
  75:.\main.c      **** CY_ISR(ReceiveTimerISR){
 225              		.loc 1 75 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
  76:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 235              		.loc 1 76 0
 236 0004 094B     		ldr	r3, .L15
 237 0006 1B68     		ldr	r3, [r3]
 238 0008 084A     		ldr	r2, .L15
 239 000a 1268     		ldr	r2, [r2]
 240 000c 013A     		subs	r2, r2, #1
 241 000e 0849     		ldr	r1, .L15+4
 242 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 243 0012 074A     		ldr	r2, .L15+4
 244 0014 D154     		strb	r1, [r2, r3]
  77:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  78:.\main.c      ****     receivedDataCount++;
 245              		.loc 1 78 0
 246 0016 054B     		ldr	r3, .L15
 247 0018 1B68     		ldr	r3, [r3]
 248 001a 0133     		adds	r3, r3, #1
 249 001c 034A     		ldr	r2, .L15
 250 001e 1360     		str	r3, [r2]
  79:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 251              		.loc 1 79 0
 252 0020 044B     		ldr	r3, .L15+8
 253 0022 1B78     		ldrb	r3, [r3]
  80:.\main.c      **** }
 254              		.loc 1 80 0
 255 0024 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0026 5DF8047B 		ldr	r7, [sp], #4
 259              		.cfi_restore 7
 260              		.cfi_def_cfa_offset 0
 261 002a 7047     		bx	lr
 262              	.L16:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 7


 263              		.align	2
 264              	.L15:
 265 002c 00000000 		.word	receivedDataCount
 266 0030 00000000 		.word	diffManReceivedData
 267 0034 6F640040 		.word	1073767535
 268              		.cfi_endproc
 269              	.LFE66:
 270              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 271              		.section	.text.main,"ax",%progbits
 272              		.align	2
 273              		.global	main
 274              		.thumb
 275              		.thumb_func
 276              		.type	main, %function
 277              	main:
 278              	.LFB67:
  81:.\main.c      **** 
  82:.\main.c      **** int main()
  83:.\main.c      **** {
 279              		.loc 1 83 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 120
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 9EB0     		sub	sp, sp, #120
 288              		.cfi_def_cfa_offset 128
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  84:.\main.c      ****     char rx;
  85:.\main.c      ****     char lineString[108];
  86:.\main.c      ****     uint8 stringPosition = HEADER_POS;//after header
 291              		.loc 1 86 0
 292 0006 0723     		movs	r3, #7
 293 0008 87F87730 		strb	r3, [r7, #119]
  87:.\main.c      ****     timerExpired = false;
 294              		.loc 1 87 0
 295 000c 8C4B     		ldr	r3, .L39
 296 000e 0022     		movs	r2, #0
 297 0010 1A70     		strb	r2, [r3]
  88:.\main.c      ****     dataTransmissionComplete = false;
 298              		.loc 1 88 0
 299 0012 8C4B     		ldr	r3, .L39+4
 300 0014 0022     		movs	r2, #0
 301 0016 1A70     		strb	r2, [r3]
  89:.\main.c      **** 	
  90:.\main.c      **** 	messageLength = 0;
 302              		.loc 1 90 0
 303 0018 8B4B     		ldr	r3, .L39+8
 304 001a 0022     		movs	r2, #0
 305 001c 1A60     		str	r2, [r3]
  91:.\main.c      **** 	
  92:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge. 
 306              		.loc 1 92 0
 307 001e 8B4B     		ldr	r3, .L39+12
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 8


 308 0020 0122     		movs	r2, #1
 309 0022 1A70     		strb	r2, [r3]
  93:.\main.c      ****     //We want to ignore this edge on the rising edge.
  94:.\main.c      **** 	
  95:.\main.c      ****     /*
  96:.\main.c      ****     Get value from system clock and
  97:.\main.c      ****     place in seconds variable.
  98:.\main.c      ****     */
  99:.\main.c      ****     time_t seconds; 
 100:.\main.c      ****     time(&seconds);
 310              		.loc 1 100 0
 311 0024 3B1D     		adds	r3, r7, #4
 312 0026 1846     		mov	r0, r3
 313 0028 FFF7FEFF 		bl	time
 101:.\main.c      ****     /*
 102:.\main.c      ****     Convert seconds to a unsigned
 103:.\main.c      ****     integer for seed for random number generator
 104:.\main.c      ****     */
 105:.\main.c      ****     srand((unsigned int) seconds);
 314              		.loc 1 105 0
 315 002c 7B68     		ldr	r3, [r7, #4]
 316 002e 1846     		mov	r0, r3
 317 0030 FFF7FEFF 		bl	srand
 106:.\main.c      ****             
 107:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 318              		.loc 1 107 0
 319 0034 0120     		movs	r0, #1
 320 0036 FFF7FEFF 		bl	TX_pin_Write
 108:.\main.c      ****     
 109:.\main.c      ****     /* Enable Global Interrupts */
 110:.\main.c      ****     CyGlobalIntEnable;  
 321              		.loc 1 110 0
 322              	@ 110 ".\main.c" 1
 323 003a 62B6     		CPSIE   i
 324              	@ 0 "" 2
 111:.\main.c      ****     
 112:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 325              		.loc 1 112 0
 326              		.thumb
 327 003c FFF7FEFF 		bl	Receive_ClearInterrupt
 113:.\main.c      ****     
 114:.\main.c      ****     LCD_Start();
 328              		.loc 1 114 0
 329 0040 FFF7FEFF 		bl	LCD_Start
 115:.\main.c      ****     
 116:.\main.c      ****     //enable collision detection
 117:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 330              		.loc 1 117 0
 331 0044 8248     		ldr	r0, .L39+16
 332 0046 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 118:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 333              		.loc 1 118 0
 334 004a 8248     		ldr	r0, .L39+20
 335 004c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 119:.\main.c      ****     Idle_Collision_Timer_Start();
 336              		.loc 1 119 0
 337 0050 FFF7FEFF 		bl	Idle_Collision_Timer_Start
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 9


 120:.\main.c      **** 
 121:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 122:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 338              		.loc 1 122 0
 339 0054 0020     		movs	r0, #0
 340 0056 0021     		movs	r1, #0
 341 0058 FFF7FEFF 		bl	USBUART_1_Start
 123:.\main.c      ****     
 124:.\main.c      ****     //start transmission timer
 125:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 342              		.loc 1 125 0
 343 005c 7E48     		ldr	r0, .L39+24
 344 005e FFF7FEFF 		bl	TimerISR_StartEx
 126:.\main.c      **** 
 127:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR); 
 345              		.loc 1 127 0
 346 0062 7E48     		ldr	r0, .L39+28
 347 0064 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 128:.\main.c      ****     
 129:.\main.c      ****     receivedDataCount = 0;
 348              		.loc 1 129 0
 349 0068 7D4B     		ldr	r3, .L39+32
 350 006a 0022     		movs	r2, #0
 351 006c 1A60     		str	r2, [r3]
 130:.\main.c      ****     receivedDataIndex = 0; 
 352              		.loc 1 130 0
 353 006e 7D4B     		ldr	r3, .L39+36
 354 0070 0022     		movs	r2, #0
 355 0072 1A60     		str	r2, [r3]
 131:.\main.c      ****    
 132:.\main.c      ****     lineString[0] = 0x71;
 356              		.loc 1 132 0
 357 0074 7123     		movs	r3, #113
 358 0076 3B72     		strb	r3, [r7, #8]
 133:.\main.c      **** 	lineString[1] = VERSION_NUMBER;
 359              		.loc 1 133 0
 360 0078 0123     		movs	r3, #1
 361 007a 7B72     		strb	r3, [r7, #9]
 134:.\main.c      **** 	lineString[2] = TX_SOURCE_ADDRESS;
 362              		.loc 1 134 0
 363 007c 0023     		movs	r3, #0
 364 007e BB72     		strb	r3, [r7, #10]
 135:.\main.c      **** 	lineString[3] = TX_DESTINATION_ADDRESS;
 365              		.loc 1 135 0
 366 0080 794B     		ldr	r3, .L39+40
 367 0082 1B68     		ldr	r3, [r3]
 368 0084 DBB2     		uxtb	r3, r3
 369 0086 FB72     		strb	r3, [r7, #11]
 136:.\main.c      ****     lineString[4] = 0; 
 370              		.loc 1 136 0
 371 0088 0023     		movs	r3, #0
 372 008a 3B73     		strb	r3, [r7, #12]
 137:.\main.c      **** 	lineString[5] = 0;
 373              		.loc 1 137 0
 374 008c 0023     		movs	r3, #0
 375 008e 7B73     		strb	r3, [r7, #13]
 138:.\main.c      **** 	lineString[6] = 0x75;
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 10


 376              		.loc 1 138 0
 377 0090 7523     		movs	r3, #117
 378 0092 BB73     		strb	r3, [r7, #14]
 379              	.L36:
 139:.\main.c      **** 	
 140:.\main.c      ****     /* Main Loop: */
 141:.\main.c      ****     for(;;)
 142:.\main.c      ****     {
 143:.\main.c      ****         setNetworkStateOnLEDs();
 380              		.loc 1 143 0
 381 0094 FFF7FEFF 		bl	setNetworkStateOnLEDs
 144:.\main.c      ****         
 145:.\main.c      ****         /*Receive*/
 146:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 147:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 382              		.loc 1 147 0
 383 0098 744B     		ldr	r3, .L39+44
 384 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 009c 002B     		cmp	r3, #0
 386 009e 3ED1     		bne	.L18
 387              		.loc 1 147 0 is_stmt 0 discriminator 1
 388 00a0 6F4B     		ldr	r3, .L39+32
 389 00a2 1B68     		ldr	r3, [r3]
 390 00a4 212B     		cmp	r3, #33
 391 00a6 3ADD     		ble	.L18
 148:.\main.c      ****             
 149:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 150:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 392              		.loc 1 150 0 is_stmt 1
 393 00a8 714B     		ldr	r3, .L39+48
 394 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 395 00ac 002B     		cmp	r3, #0
 396 00ae 2DD1     		bne	.L19
 397              		.loc 1 150 0 is_stmt 0 discriminator 1
 398 00b0 6F4B     		ldr	r3, .L39+48
 399 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 400 00b4 012B     		cmp	r3, #1
 401 00b6 29D1     		bne	.L19
 151:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 402              		.loc 1 151 0 is_stmt 1
 403 00b8 6A4B     		ldr	r3, .L39+36
 404 00ba 0222     		movs	r2, #2
 405 00bc 1A60     		str	r2, [r3]
 152:.\main.c      ****                 while(receivedDataIndex < receivedDataCount-1){     //Note: receivedDataCount-1 b/c
 406              		.loc 1 152 0
 407 00be 06E0     		b	.L20
 408              	.L21:
 153:.\main.c      ****                     //wait for 8 bits TODO bad comment
 154:.\main.c      ****                     //char receivedChar;     TODO move to global variable
 155:.\main.c      ****                     //char *charPtr = &receivedChar;
 156:.\main.c      ****                     
 157:.\main.c      ****                     diffManToASCII();
 409              		.loc 1 157 0
 410 00c0 FFF7FEFF 		bl	diffManToASCII
 158:.\main.c      **** 					//program flow: check for header inside diffManToASCII
 159:.\main.c      **** 					//set flag if header start 0x71 is detected (decimal 113 or ASCII 'q')
 160:.\main.c      **** 					//after diffManToASCII completes, check for header flag
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 11


 161:.\main.c      **** 					//if valid, enter "header check" method
 162:.\main.c      **** 					//check first 8 bytes of ascii characters according to spec
 163:.\main.c      **** 					//if valid, set valid flag
 164:.\main.c      **** 					//otherwise discard contents
 165:.\main.c      **** 					storeChar();
 411              		.loc 1 165 0
 412 00c4 FFF7FEFF 		bl	storeChar
 166:.\main.c      ****                     receivedChar = 0;       //Reset the char
 413              		.loc 1 166 0
 414 00c8 6A4B     		ldr	r3, .L39+52
 415 00ca 0022     		movs	r2, #0
 416 00cc 1A70     		strb	r2, [r3]
 417              	.L20:
 152:.\main.c      ****                     //wait for 8 bits TODO bad comment
 418              		.loc 1 152 0
 419 00ce 644B     		ldr	r3, .L39+32
 420 00d0 1B68     		ldr	r3, [r3]
 421 00d2 5A1E     		subs	r2, r3, #1
 422 00d4 634B     		ldr	r3, .L39+36
 423 00d6 1B68     		ldr	r3, [r3]
 424 00d8 9A42     		cmp	r2, r3
 425 00da F1DC     		bgt	.L21
 167:.\main.c      ****                 }
 168:.\main.c      **** 				if(headerCheck()){
 426              		.loc 1 168 0
 427 00dc FFF7FEFF 		bl	headerCheck
 428 00e0 0346     		mov	r3, r0
 429 00e2 002B     		cmp	r3, #0
 430 00e4 01D0     		beq	.L22
 169:.\main.c      ****                     printChar();
 431              		.loc 1 169 0
 432 00e6 FFF7FEFF 		bl	printChar
 433              	.L22:
 170:.\main.c      ****                 }
 171:.\main.c      ****                //TODO remove
 172:.\main.c      ****                 /*LCD_Position(0,0);
 173:.\main.c      ****                 int i;
 174:.\main.c      ****                 for(i=0; i<16;i++){
 175:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 176:.\main.c      ****                 }
 177:.\main.c      ****                 LCD_Position(1,0);
 178:.\main.c      ****                 
 179:.\main.c      ****                 for(i=16; i<32;i++){
 180:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 181:.\main.c      ****                 }*/
 182:.\main.c      ****                 //end remove
 183:.\main.c      ****                 
 184:.\main.c      ****                 CyDelay(1000);//TODO remove for testing only    
 434              		.loc 1 184 0
 435 00ea 4FF47A70 		mov	r0, #1000
 436 00ee FFF7FEFF 		bl	CyDelay
 185:.\main.c      ****                 LCD_ClearDisplay();//TODO remove
 437              		.loc 1 185 0
 438 00f2 0120     		movs	r0, #1
 439 00f4 FFF7FEFF 		bl	LCD_WriteControl
 186:.\main.c      ****                 receivedDataCount = 0;  //Reset count
 440              		.loc 1 186 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 12


 441 00f8 594B     		ldr	r3, .L39+32
 442 00fa 0022     		movs	r2, #0
 443 00fc 1A60     		str	r2, [r3]
 187:.\main.c      ****                 receivedDataIndex = 0;  //Reset index
 444              		.loc 1 187 0
 445 00fe 594B     		ldr	r3, .L39+36
 446 0100 0022     		movs	r2, #0
 447 0102 1A60     		str	r2, [r3]
 188:.\main.c      ****                 currentRXCharPosition = 0;
 448              		.loc 1 188 0
 449 0104 5C4B     		ldr	r3, .L39+56
 450 0106 0022     		movs	r2, #0
 451 0108 1A60     		str	r2, [r3]
 452 010a 08E0     		b	.L18
 453              	.L19:
 189:.\main.c      ****             }
 190:.\main.c      ****             else{
 191:.\main.c      ****                 //Receive data did not start with the start bit
 192:.\main.c      ****                 receivedDataCount = 0;
 454              		.loc 1 192 0
 455 010c 544B     		ldr	r3, .L39+32
 456 010e 0022     		movs	r2, #0
 457 0110 1A60     		str	r2, [r3]
 193:.\main.c      ****                 receivedDataIndex = 0; 
 458              		.loc 1 193 0
 459 0112 544B     		ldr	r3, .L39+36
 460 0114 0022     		movs	r2, #0
 461 0116 1A60     		str	r2, [r3]
 194:.\main.c      ****                 currentRXCharPosition = 0;
 462              		.loc 1 194 0
 463 0118 574B     		ldr	r3, .L39+56
 464 011a 0022     		movs	r2, #0
 465 011c 1A60     		str	r2, [r3]
 466              	.L18:
 195:.\main.c      ****             }
 196:.\main.c      ****         }
 197:.\main.c      ****         else
 198:.\main.c      ****         {
 199:.\main.c      ****             //TODO prob remove this else
 200:.\main.c      ****         }
 201:.\main.c      ****         /*End Receive*/
 202:.\main.c      ****         
 203:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 467              		.loc 1 203 0
 468 011e FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 469 0122 0346     		mov	r3, r0
 470 0124 002B     		cmp	r3, #0
 471 0126 06D0     		beq	.L24
 204:.\main.c      ****         {
 205:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 472              		.loc 1 205 0
 473 0128 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 474 012c 0346     		mov	r3, r0
 475 012e 002B     		cmp	r3, #0
 476 0130 01D0     		beq	.L24
 206:.\main.c      ****             {
 207:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 13


 208:.\main.c      ****                 USBUART_1_CDC_Init();
 477              		.loc 1 208 0
 478 0132 FFF7FEFF 		bl	USBUART_1_CDC_Init
 479              	.L24:
 209:.\main.c      ****             }
 210:.\main.c      ****         }         
 211:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 480              		.loc 1 211 0
 481 0136 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 482 013a 0346     		mov	r3, r0
 483 013c 002B     		cmp	r3, #0
 484 013e 7ED0     		beq	.L25
 212:.\main.c      ****         {
 213:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 485              		.loc 1 213 0
 486 0140 FFF7FEFF 		bl	USBUART_1_DataIsReady
 487 0144 0346     		mov	r3, r0
 488 0146 002B     		cmp	r3, #0
 489 0148 79D0     		beq	.L25
 214:.\main.c      ****             {   
 215:.\main.c      ****                 rx = USBUART_1_GetChar();
 490              		.loc 1 215 0
 491 014a FFF7FEFF 		bl	USBUART_1_GetChar
 492 014e 0346     		mov	r3, r0
 493 0150 87F87630 		strb	r3, [r7, #118]
 216:.\main.c      ****                 switch(rx){
 494              		.loc 1 216 0
 495 0154 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 496 0158 0D2B     		cmp	r3, #13
 497 015a 25D0     		beq	.L27
 498 015c 1B2B     		cmp	r3, #27
 499 015e 6DD0     		beq	.L38
 500 0160 082B     		cmp	r3, #8
 501 0162 51D1     		bne	.L37
 217:.\main.c      ****                     case 8://backspace
 218:.\main.c      ****                         if(stringPosition>0){
 502              		.loc 1 218 0
 503 0164 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 504 0168 002B     		cmp	r3, #0
 505 016a 1CD0     		beq	.L30
 219:.\main.c      ****                             stringPosition--;
 506              		.loc 1 219 0
 507 016c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 508 0170 013B     		subs	r3, r3, #1
 509 0172 87F87730 		strb	r3, [r7, #119]
 220:.\main.c      ****                             lineString[stringPosition] = '\0';
 510              		.loc 1 220 0
 511 0176 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 512 017a 07F17802 		add	r2, r7, #120
 513 017e 1344     		add	r3, r3, r2
 514 0180 0022     		movs	r2, #0
 515 0182 03F8702C 		strb	r2, [r3, #-112]
 221:.\main.c      ****                             //backspace space backspace
 222:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u); 
 516              		.loc 1 222 0
 517 0186 00BF     		nop
 518              	.L31:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 14


 519              		.loc 1 222 0 is_stmt 0 discriminator 1
 520 0188 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 521 018c 0346     		mov	r3, r0
 522 018e 002B     		cmp	r3, #0
 523 0190 FAD0     		beq	.L31
 223:.\main.c      ****                             USBUART_1_PutChar(8);
 524              		.loc 1 223 0 is_stmt 1
 525 0192 0820     		movs	r0, #8
 526 0194 FFF7FEFF 		bl	USBUART_1_PutChar
 224:.\main.c      ****                             USBUART_1_PutChar(32);
 527              		.loc 1 224 0
 528 0198 2020     		movs	r0, #32
 529 019a FFF7FEFF 		bl	USBUART_1_PutChar
 225:.\main.c      ****                             USBUART_1_PutChar(8);
 530              		.loc 1 225 0
 531 019e 0820     		movs	r0, #8
 532 01a0 FFF7FEFF 		bl	USBUART_1_PutChar
 226:.\main.c      ****                         }
 227:.\main.c      ****                         break;
 533              		.loc 1 227 0
 534 01a4 4BE0     		b	.L25
 535              	.L30:
 536 01a6 4AE0     		b	.L25
 537              	.L27:
 228:.\main.c      ****                     case 13://enter (carriage return)
 229:.\main.c      ****                         initDiffManEncodedArray();
 538              		.loc 1 229 0
 539 01a8 FFF7FEFF 		bl	initDiffManEncodedArray
 230:.\main.c      **** 						lineString[4] = stringPosition - 6;
 540              		.loc 1 230 0
 541 01ac 97F87730 		ldrb	r3, [r7, #119]
 542 01b0 063B     		subs	r3, r3, #6
 543 01b2 DBB2     		uxtb	r3, r3
 544 01b4 3B73     		strb	r3, [r7, #12]
 231:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 545              		.loc 1 231 0
 546 01b6 07F10802 		add	r2, r7, #8
 547 01ba 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 548 01be 1046     		mov	r0, r2
 549 01c0 1946     		mov	r1, r3
 550 01c2 FFF7FEFF 		bl	stringToDiffMan
 232:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 551              		.loc 1 232 0
 552 01c6 00BF     		nop
 553              	.L32:
 554              		.loc 1 232 0 is_stmt 0 discriminator 1
 555 01c8 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 556 01cc 0346     		mov	r3, r0
 557 01ce 002B     		cmp	r3, #0
 558 01d0 FAD0     		beq	.L32
 233:.\main.c      ****                         USBUART_1_PutCRLF();
 559              		.loc 1 233 0 is_stmt 1
 560 01d2 FFF7FEFF 		bl	USBUART_1_PutCRLF
 234:.\main.c      ****                         
 235:.\main.c      ****                         //keep looping until data is transmitted
 236:.\main.c      **** 						
 237:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 15


 561              		.loc 1 237 0
 562 01d6 03E0     		b	.L33
 563              	.L34:
 238:.\main.c      **** 							
 239:.\main.c      ****                             transmitData();
 564              		.loc 1 239 0
 565 01d8 FFF7FEFF 		bl	transmitData
 240:.\main.c      ****                             setNetworkStateOnLEDs();
 566              		.loc 1 240 0
 567 01dc FFF7FEFF 		bl	setNetworkStateOnLEDs
 568              	.L33:
 237:.\main.c      **** 							
 569              		.loc 1 237 0
 570 01e0 184B     		ldr	r3, .L39+4
 571 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572 01e4 83F00103 		eor	r3, r3, #1
 573 01e8 DBB2     		uxtb	r3, r3
 574 01ea 002B     		cmp	r3, #0
 575 01ec F4D1     		bne	.L34
 241:.\main.c      ****                         }
 242:.\main.c      ****                         dataTransmissionComplete = false;
 576              		.loc 1 242 0
 577 01ee 154B     		ldr	r3, .L39+4
 578 01f0 0022     		movs	r2, #0
 579 01f2 1A70     		strb	r2, [r3]
 243:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 580              		.loc 1 243 0
 581 01f4 0120     		movs	r0, #1
 582 01f6 FFF7FEFF 		bl	TX_pin_Write
 244:.\main.c      ****                         //reset index
 245:.\main.c      ****                         halfBitIndex = 0;
 583              		.loc 1 245 0
 584 01fa 204B     		ldr	r3, .L39+60
 585 01fc 0022     		movs	r2, #0
 586 01fe 1A60     		str	r2, [r3]
 246:.\main.c      ****                         stringPosition = HEADER_POS; 
 587              		.loc 1 246 0
 588 0200 0723     		movs	r3, #7
 589 0202 87F87730 		strb	r3, [r7, #119]
 247:.\main.c      ****                         break;
 590              		.loc 1 247 0
 591 0206 1AE0     		b	.L25
 592              	.L37:
 248:.\main.c      ****                     case 27://escape
 249:.\main.c      ****                         break;
 250:.\main.c      ****                     default://everything else
 251:.\main.c      ****                         lineString[stringPosition] = rx;
 593              		.loc 1 251 0
 594 0208 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 595 020c 07F17802 		add	r2, r7, #120
 596 0210 1344     		add	r3, r3, r2
 597 0212 97F87620 		ldrb	r2, [r7, #118]
 598 0216 03F8702C 		strb	r2, [r3, #-112]
 252:.\main.c      ****                         stringPosition++;
 599              		.loc 1 252 0
 600 021a 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 601 021e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 16


 602 0220 87F87730 		strb	r3, [r7, #119]
 253:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u); 
 603              		.loc 1 253 0
 604 0224 00BF     		nop
 605              	.L35:
 606              		.loc 1 253 0 is_stmt 0 discriminator 1
 607 0226 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 608 022a 0346     		mov	r3, r0
 609 022c 002B     		cmp	r3, #0
 610 022e FAD0     		beq	.L35
 254:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 611              		.loc 1 254 0 is_stmt 1
 612 0230 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 613 0234 1846     		mov	r0, r3
 614 0236 FFF7FEFF 		bl	USBUART_1_PutChar
 255:.\main.c      ****                         break;
 615              		.loc 1 255 0
 616 023a 00E0     		b	.L25
 617              	.L38:
 249:.\main.c      ****                     default://everything else
 618              		.loc 1 249 0
 619 023c 00BF     		nop
 620              	.L25:
 256:.\main.c      ****                 }
 257:.\main.c      ****             }
 258:.\main.c      ****         }
 259:.\main.c      ****     }   
 621              		.loc 1 259 0 discriminator 1
 622 023e 29E7     		b	.L36
 623              	.L40:
 624              		.align	2
 625              	.L39:
 626 0240 00000000 		.word	timerExpired
 627 0244 00000000 		.word	dataTransmissionComplete
 628 0248 00000000 		.word	messageLength
 629 024c 00000000 		.word	powerOnEdge
 630 0250 00000000 		.word	Idle_Collision_ISR
 631 0254 00000000 		.word	Edge_detect_ISR
 632 0258 00000000 		.word	TimerHandler
 633 025c 00000000 		.word	ReceiveTimerISR
 634 0260 00000000 		.word	receivedDataCount
 635 0264 00000000 		.word	receivedDataIndex
 636 0268 00000000 		.word	TX_DESTINATION_ADDRESS
 637 026c 00000000 		.word	networkState
 638 0270 00000000 		.word	diffManReceivedData
 639 0274 00000000 		.word	receivedChar
 640 0278 00000000 		.word	currentRXCharPosition
 641 027c 00000000 		.word	halfBitIndex
 642              		.cfi_endproc
 643              	.LFE67:
 644              		.size	main, .-main
 645              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 646              		.align	2
 647              		.global	initDiffManEncodedArray
 648              		.thumb
 649              		.thumb_func
 650              		.type	initDiffManEncodedArray, %function
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 17


 651              	initDiffManEncodedArray:
 652              	.LFB68:
 260:.\main.c      **** }
 261:.\main.c      **** 
 262:.\main.c      **** /*
 263:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the 
 264:.\main.c      **** half bits 01. 
 265:.\main.c      **** Only call when starting to transfer a new string
 266:.\main.c      **** */
 267:.\main.c      **** void initDiffManEncodedArray(){
 653              		.loc 1 267 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0000 80B4     		push	{r7}
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0002 00AF     		add	r7, sp, #0
 662              		.cfi_def_cfa_register 7
 268:.\main.c      ****     halfBitIndex = 0;
 663              		.loc 1 268 0
 664 0004 0E4B     		ldr	r3, .L42
 665 0006 0022     		movs	r2, #0
 666 0008 1A60     		str	r2, [r3]
 269:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 667              		.loc 1 269 0
 668 000a 0D4B     		ldr	r3, .L42
 669 000c 1B68     		ldr	r3, [r3]
 670 000e 0D4A     		ldr	r2, .L42+4
 671 0010 0021     		movs	r1, #0
 672 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 270:.\main.c      ****     halfBitIndex++;
 673              		.loc 1 270 0
 674 0016 0A4B     		ldr	r3, .L42
 675 0018 1B68     		ldr	r3, [r3]
 676 001a 0133     		adds	r3, r3, #1
 677 001c 084A     		ldr	r2, .L42
 678 001e 1360     		str	r3, [r2]
 271:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 679              		.loc 1 271 0
 680 0020 074B     		ldr	r3, .L42
 681 0022 1B68     		ldr	r3, [r3]
 682 0024 074A     		ldr	r2, .L42+4
 683 0026 0121     		movs	r1, #1
 684 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 272:.\main.c      ****     halfBitIndex++;
 685              		.loc 1 272 0
 686 002c 044B     		ldr	r3, .L42
 687 002e 1B68     		ldr	r3, [r3]
 688 0030 0133     		adds	r3, r3, #1
 689 0032 034A     		ldr	r2, .L42
 690 0034 1360     		str	r3, [r2]
 273:.\main.c      **** }
 691              		.loc 1 273 0
 692 0036 BD46     		mov	sp, r7
 693              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 18


 694              		@ sp needed
 695 0038 5DF8047B 		ldr	r7, [sp], #4
 696              		.cfi_restore 7
 697              		.cfi_def_cfa_offset 0
 698 003c 7047     		bx	lr
 699              	.L43:
 700 003e 00BF     		.align	2
 701              	.L42:
 702 0040 00000000 		.word	halfBitIndex
 703 0044 00000000 		.word	diffManEncodedData
 704              		.cfi_endproc
 705              	.LFE68:
 706              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 707              		.section	.text.stringToDiffMan,"ax",%progbits
 708              		.align	2
 709              		.global	stringToDiffMan
 710              		.thumb
 711              		.thumb_func
 712              		.type	stringToDiffMan, %function
 713              	stringToDiffMan:
 714              	.LFB69:
 274:.\main.c      **** 
 275:.\main.c      **** /*
 276:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 277:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 278:.\main.c      **** */
 279:.\main.c      **** void stringToDiffMan(char lineString[], uint8 stringPosition){
 715              		.loc 1 279 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 16
 718              		@ frame_needed = 1, uses_anonymous_args = 0
 719 0000 80B5     		push	{r7, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 84B0     		sub	sp, sp, #16
 724              		.cfi_def_cfa_offset 24
 725 0004 00AF     		add	r7, sp, #0
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 728 0008 0B46     		mov	r3, r1
 729 000a FB70     		strb	r3, [r7, #3]
 280:.\main.c      **** 
 281:.\main.c      ****     unsigned int i = 0;
 730              		.loc 1 281 0
 731 000c 0023     		movs	r3, #0
 732 000e FB60     		str	r3, [r7, #12]
 282:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 733              		.loc 1 282 0
 734 0010 0023     		movs	r3, #0
 735 0012 FB60     		str	r3, [r7, #12]
 736 0014 09E0     		b	.L45
 737              	.L46:
 283:.\main.c      ****         asciiToDiffMan(lineString[i]);
 738              		.loc 1 283 0 discriminator 3
 739 0016 7A68     		ldr	r2, [r7, #4]
 740 0018 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 19


 741 001a 1344     		add	r3, r3, r2
 742 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 001e 1846     		mov	r0, r3
 744 0020 FFF7FEFF 		bl	asciiToDiffMan
 282:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 745              		.loc 1 282 0 discriminator 3
 746 0024 FB68     		ldr	r3, [r7, #12]
 747 0026 0133     		adds	r3, r3, #1
 748 0028 FB60     		str	r3, [r7, #12]
 749              	.L45:
 282:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 750              		.loc 1 282 0 is_stmt 0 discriminator 1
 751 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 752 002c FB68     		ldr	r3, [r7, #12]
 753 002e 9A42     		cmp	r2, r3
 754 0030 F1D8     		bhi	.L46
 284:.\main.c      ****     }
 285:.\main.c      **** }
 755              		.loc 1 285 0 is_stmt 1
 756 0032 1037     		adds	r7, r7, #16
 757              		.cfi_def_cfa_offset 8
 758 0034 BD46     		mov	sp, r7
 759              		.cfi_def_cfa_register 13
 760              		@ sp needed
 761 0036 80BD     		pop	{r7, pc}
 762              		.cfi_endproc
 763              	.LFE69:
 764              		.size	stringToDiffMan, .-stringToDiffMan
 765              		.section	.text.asciiToDiffMan,"ax",%progbits
 766              		.align	2
 767              		.global	asciiToDiffMan
 768              		.thumb
 769              		.thumb_func
 770              		.type	asciiToDiffMan, %function
 771              	asciiToDiffMan:
 772              	.LFB70:
 286:.\main.c      **** 
 287:.\main.c      **** /*
 288:.\main.c      **** Helper method. Do not call from main.
 289:.\main.c      **** Converts a ascii char to a differental manchester line encoded version
 290:.\main.c      **** */
 291:.\main.c      **** void asciiToDiffMan(char asciiChar)
 292:.\main.c      **** {
 773              		.loc 1 292 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 104
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 0000 80B4     		push	{r7}
 779              		.cfi_def_cfa_offset 4
 780              		.cfi_offset 7, -4
 781 0002 9BB0     		sub	sp, sp, #108
 782              		.cfi_def_cfa_offset 112
 783 0004 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 0006 0346     		mov	r3, r0
 786 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 20


 293:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 787              		.loc 1 293 0
 788 000a 6C4B     		ldr	r3, .L59
 789 000c 1B68     		ldr	r3, [r3]
 790 000e 013B     		subs	r3, r3, #1
 791 0010 6B4A     		ldr	r2, .L59+4
 792 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 793 0016 87F86730 		strb	r3, [r7, #103]
 294:.\main.c      ****     //send starting 1 bit (encoded)
 295:.\main.c      ****     if(previousHalfBit == 1){
 794              		.loc 1 295 0
 795 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 796 001e 012B     		cmp	r3, #1
 797 0020 16D1     		bne	.L48
 296:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 798              		.loc 1 296 0
 799 0022 664B     		ldr	r3, .L59
 800 0024 1B68     		ldr	r3, [r3]
 801 0026 664A     		ldr	r2, .L59+4
 802 0028 0121     		movs	r1, #1
 803 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 297:.\main.c      ****         halfBitIndex++;
 804              		.loc 1 297 0
 805 002e 634B     		ldr	r3, .L59
 806 0030 1B68     		ldr	r3, [r3]
 807 0032 0133     		adds	r3, r3, #1
 808 0034 614A     		ldr	r2, .L59
 809 0036 1360     		str	r3, [r2]
 298:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 810              		.loc 1 298 0
 811 0038 604B     		ldr	r3, .L59
 812 003a 1B68     		ldr	r3, [r3]
 813 003c 604A     		ldr	r2, .L59+4
 814 003e 0021     		movs	r1, #0
 815 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 299:.\main.c      ****         halfBitIndex++;
 816              		.loc 1 299 0
 817 0044 5D4B     		ldr	r3, .L59
 818 0046 1B68     		ldr	r3, [r3]
 819 0048 0133     		adds	r3, r3, #1
 820 004a 5C4A     		ldr	r2, .L59
 821 004c 1360     		str	r3, [r2]
 822 004e 15E0     		b	.L49
 823              	.L48:
 300:.\main.c      ****     }else{
 301:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 824              		.loc 1 301 0
 825 0050 5A4B     		ldr	r3, .L59
 826 0052 1B68     		ldr	r3, [r3]
 827 0054 5A4A     		ldr	r2, .L59+4
 828 0056 0021     		movs	r1, #0
 829 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 302:.\main.c      ****         halfBitIndex++;
 830              		.loc 1 302 0
 831 005c 574B     		ldr	r3, .L59
 832 005e 1B68     		ldr	r3, [r3]
 833 0060 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 21


 834 0062 564A     		ldr	r2, .L59
 835 0064 1360     		str	r3, [r2]
 303:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 836              		.loc 1 303 0
 837 0066 554B     		ldr	r3, .L59
 838 0068 1B68     		ldr	r3, [r3]
 839 006a 554A     		ldr	r2, .L59+4
 840 006c 0121     		movs	r1, #1
 841 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 304:.\main.c      ****         halfBitIndex++;
 842              		.loc 1 304 0
 843 0072 524B     		ldr	r3, .L59
 844 0074 1B68     		ldr	r3, [r3]
 845 0076 0133     		adds	r3, r3, #1
 846 0078 504A     		ldr	r2, .L59
 847 007a 1360     		str	r3, [r2]
 848              	.L49:
 305:.\main.c      ****     } 
 306:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 849              		.loc 1 306 0
 850 007c 4F4B     		ldr	r3, .L59
 851 007e 1B68     		ldr	r3, [r3]
 852 0080 013B     		subs	r3, r3, #1
 853 0082 4F4A     		ldr	r2, .L59+4
 854 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 855 0088 87F86730 		strb	r3, [r7, #103]
 307:.\main.c      **** 
 308:.\main.c      ****     
 309:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 310:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB 
 311:.\main.c      ****     int i;
 312:.\main.c      ****     for(i=0; asciiChar>0; i++)
 856              		.loc 1 312 0
 857 008c 0023     		movs	r3, #0
 858 008e 3B66     		str	r3, [r7, #96]
 859 0090 0FE0     		b	.L50
 860              	.L51:
 313:.\main.c      ****     { 
 314:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2; 
 861              		.loc 1 314 0 discriminator 3
 862 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 863 0094 03F00102 		and	r2, r3, #1
 864 0098 3B6E     		ldr	r3, [r7, #96]
 865 009a 9B00     		lsls	r3, r3, #2
 866 009c 07F16801 		add	r1, r7, #104
 867 00a0 0B44     		add	r3, r3, r1
 868 00a2 43F85C2C 		str	r2, [r3, #-92]
 315:.\main.c      ****         asciiChar=asciiChar/2;
 869              		.loc 1 315 0 discriminator 3
 870 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 871 00a8 5B08     		lsrs	r3, r3, #1
 872 00aa FB71     		strb	r3, [r7, #7]
 312:.\main.c      ****     { 
 873              		.loc 1 312 0 discriminator 3
 874 00ac 3B6E     		ldr	r3, [r7, #96]
 875 00ae 0133     		adds	r3, r3, #1
 876 00b0 3B66     		str	r3, [r7, #96]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 22


 877              	.L50:
 312:.\main.c      ****     { 
 878              		.loc 1 312 0 is_stmt 0 discriminator 1
 879 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 880 00b4 002B     		cmp	r3, #0
 881 00b6 ECD1     		bne	.L51
 316:.\main.c      ****     }
 317:.\main.c      **** 
 318:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 319:.\main.c      ****     //must start at the end of the array so to encode the MSB first 
 320:.\main.c      ****     int j;
 321:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--) 
 882              		.loc 1 321 0 is_stmt 1
 883 00b8 0623     		movs	r3, #6
 884 00ba FB65     		str	r3, [r7, #92]
 885 00bc 76E0     		b	.L52
 886              	.L58:
 322:.\main.c      ****     {
 323:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 887              		.loc 1 323 0
 888 00be FB6D     		ldr	r3, [r7, #92]
 889 00c0 9B00     		lsls	r3, r3, #2
 890 00c2 07F16802 		add	r2, r7, #104
 891 00c6 1344     		add	r3, r3, r2
 892 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 893 00cc 012B     		cmp	r3, #1
 894 00ce 31D1     		bne	.L53
 324:.\main.c      ****         {
 325:.\main.c      ****             //bit == 1
 326:.\main.c      ****             if(previousHalfBit == 1)
 895              		.loc 1 326 0
 896 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 897 00d4 012B     		cmp	r3, #1
 898 00d6 16D1     		bne	.L54
 327:.\main.c      ****             {
 328:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 899              		.loc 1 328 0
 900 00d8 384B     		ldr	r3, .L59
 901 00da 1B68     		ldr	r3, [r3]
 902 00dc 384A     		ldr	r2, .L59+4
 903 00de 0121     		movs	r1, #1
 904 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 329:.\main.c      ****                 halfBitIndex++;
 905              		.loc 1 329 0
 906 00e4 354B     		ldr	r3, .L59
 907 00e6 1B68     		ldr	r3, [r3]
 908 00e8 0133     		adds	r3, r3, #1
 909 00ea 344A     		ldr	r2, .L59
 910 00ec 1360     		str	r3, [r2]
 330:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 911              		.loc 1 330 0
 912 00ee 334B     		ldr	r3, .L59
 913 00f0 1B68     		ldr	r3, [r3]
 914 00f2 334A     		ldr	r2, .L59+4
 915 00f4 0021     		movs	r1, #0
 916 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 331:.\main.c      ****                 halfBitIndex++;    
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 23


 917              		.loc 1 331 0
 918 00fa 304B     		ldr	r3, .L59
 919 00fc 1B68     		ldr	r3, [r3]
 920 00fe 0133     		adds	r3, r3, #1
 921 0100 2E4A     		ldr	r2, .L59
 922 0102 1360     		str	r3, [r2]
 923 0104 47E0     		b	.L56
 924              	.L54:
 332:.\main.c      ****             }
 333:.\main.c      ****             else
 334:.\main.c      ****             {
 335:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 925              		.loc 1 335 0
 926 0106 2D4B     		ldr	r3, .L59
 927 0108 1B68     		ldr	r3, [r3]
 928 010a 2D4A     		ldr	r2, .L59+4
 929 010c 0021     		movs	r1, #0
 930 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 336:.\main.c      ****                 halfBitIndex++;
 931              		.loc 1 336 0
 932 0112 2A4B     		ldr	r3, .L59
 933 0114 1B68     		ldr	r3, [r3]
 934 0116 0133     		adds	r3, r3, #1
 935 0118 284A     		ldr	r2, .L59
 936 011a 1360     		str	r3, [r2]
 337:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 937              		.loc 1 337 0
 938 011c 274B     		ldr	r3, .L59
 939 011e 1B68     		ldr	r3, [r3]
 940 0120 274A     		ldr	r2, .L59+4
 941 0122 0121     		movs	r1, #1
 942 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 338:.\main.c      ****                 halfBitIndex++;
 943              		.loc 1 338 0
 944 0128 244B     		ldr	r3, .L59
 945 012a 1B68     		ldr	r3, [r3]
 946 012c 0133     		adds	r3, r3, #1
 947 012e 234A     		ldr	r2, .L59
 948 0130 1360     		str	r3, [r2]
 949 0132 30E0     		b	.L56
 950              	.L53:
 339:.\main.c      ****             }
 340:.\main.c      ****             
 341:.\main.c      ****         }
 342:.\main.c      ****         else
 343:.\main.c      ****         {
 344:.\main.c      ****             //bit == 0
 345:.\main.c      ****             if(previousHalfBit == 1)
 951              		.loc 1 345 0
 952 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 953 0138 012B     		cmp	r3, #1
 954 013a 16D1     		bne	.L57
 346:.\main.c      ****             {
 347:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 955              		.loc 1 347 0
 956 013c 1F4B     		ldr	r3, .L59
 957 013e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 24


 958 0140 1F4A     		ldr	r2, .L59+4
 959 0142 0021     		movs	r1, #0
 960 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 348:.\main.c      ****                 halfBitIndex++;
 961              		.loc 1 348 0
 962 0148 1C4B     		ldr	r3, .L59
 963 014a 1B68     		ldr	r3, [r3]
 964 014c 0133     		adds	r3, r3, #1
 965 014e 1B4A     		ldr	r2, .L59
 966 0150 1360     		str	r3, [r2]
 349:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 967              		.loc 1 349 0
 968 0152 1A4B     		ldr	r3, .L59
 969 0154 1B68     		ldr	r3, [r3]
 970 0156 1A4A     		ldr	r2, .L59+4
 971 0158 0121     		movs	r1, #1
 972 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 350:.\main.c      ****                 halfBitIndex++;
 973              		.loc 1 350 0
 974 015e 174B     		ldr	r3, .L59
 975 0160 1B68     		ldr	r3, [r3]
 976 0162 0133     		adds	r3, r3, #1
 977 0164 154A     		ldr	r2, .L59
 978 0166 1360     		str	r3, [r2]
 979 0168 15E0     		b	.L56
 980              	.L57:
 351:.\main.c      ****             }
 352:.\main.c      ****             else
 353:.\main.c      ****             {
 354:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 981              		.loc 1 354 0
 982 016a 144B     		ldr	r3, .L59
 983 016c 1B68     		ldr	r3, [r3]
 984 016e 144A     		ldr	r2, .L59+4
 985 0170 0121     		movs	r1, #1
 986 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 355:.\main.c      ****                 halfBitIndex++;
 987              		.loc 1 355 0
 988 0176 114B     		ldr	r3, .L59
 989 0178 1B68     		ldr	r3, [r3]
 990 017a 0133     		adds	r3, r3, #1
 991 017c 0F4A     		ldr	r2, .L59
 992 017e 1360     		str	r3, [r2]
 356:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 993              		.loc 1 356 0
 994 0180 0E4B     		ldr	r3, .L59
 995 0182 1B68     		ldr	r3, [r3]
 996 0184 0E4A     		ldr	r2, .L59+4
 997 0186 0021     		movs	r1, #0
 998 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 357:.\main.c      ****                 halfBitIndex++;
 999              		.loc 1 357 0
 1000 018c 0B4B     		ldr	r3, .L59
 1001 018e 1B68     		ldr	r3, [r3]
 1002 0190 0133     		adds	r3, r3, #1
 1003 0192 0A4A     		ldr	r2, .L59
 1004 0194 1360     		str	r3, [r2]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 25


 1005              	.L56:
 358:.\main.c      ****             }
 359:.\main.c      ****         }
 360:.\main.c      ****         
 361:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1006              		.loc 1 361 0 discriminator 2
 1007 0196 094B     		ldr	r3, .L59
 1008 0198 1B68     		ldr	r3, [r3]
 1009 019a 013B     		subs	r3, r3, #1
 1010 019c 084A     		ldr	r2, .L59+4
 1011 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1012 01a2 87F86730 		strb	r3, [r7, #103]
 321:.\main.c      ****     {
 1013              		.loc 1 321 0 discriminator 2
 1014 01a6 FB6D     		ldr	r3, [r7, #92]
 1015 01a8 013B     		subs	r3, r3, #1
 1016 01aa FB65     		str	r3, [r7, #92]
 1017              	.L52:
 321:.\main.c      ****     {
 1018              		.loc 1 321 0 is_stmt 0 discriminator 1
 1019 01ac FB6D     		ldr	r3, [r7, #92]
 1020 01ae 002B     		cmp	r3, #0
 1021 01b0 85DA     		bge	.L58
 362:.\main.c      ****     }//end for
 363:.\main.c      ****    
 364:.\main.c      **** }//end function
 1022              		.loc 1 364 0 is_stmt 1
 1023 01b2 6C37     		adds	r7, r7, #108
 1024              		.cfi_def_cfa_offset 4
 1025 01b4 BD46     		mov	sp, r7
 1026              		.cfi_def_cfa_register 13
 1027              		@ sp needed
 1028 01b6 5DF8047B 		ldr	r7, [sp], #4
 1029              		.cfi_restore 7
 1030              		.cfi_def_cfa_offset 0
 1031 01ba 7047     		bx	lr
 1032              	.L60:
 1033              		.align	2
 1034              	.L59:
 1035 01bc 00000000 		.word	halfBitIndex
 1036 01c0 00000000 		.word	diffManEncodedData
 1037              		.cfi_endproc
 1038              	.LFE70:
 1039              		.size	asciiToDiffMan, .-asciiToDiffMan
 1040              		.global	__aeabi_i2d
 1041              		.global	__aeabi_ddiv
 1042              		.global	__aeabi_dmul
 1043              		.global	__aeabi_d2iz
 1044              		.section	.text.transmitData,"ax",%progbits
 1045              		.align	2
 1046              		.global	transmitData
 1047              		.thumb
 1048              		.thumb_func
 1049              		.type	transmitData, %function
 1050              	transmitData:
 1051              	.LFB71:
 365:.\main.c      **** 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 26


 366:.\main.c      **** /*
 367:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 368:.\main.c      **** Checks network state before transmitting.
 369:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 370:.\main.c      **** */
 371:.\main.c      **** void transmitData(){
 1052              		.loc 1 371 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 80B5     		push	{r7, lr}
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 82B0     		sub	sp, sp, #8
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 372:.\main.c      ****     int i;
 373:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1064              		.loc 1 373 0
 1065 0006 0023     		movs	r3, #0
 1066 0008 7B60     		str	r3, [r7, #4]
 1067 000a 47E0     		b	.L62
 1068              	.L66:
 374:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 375:.\main.c      ****         //Else break out of transmition and wait random time
 376:.\main.c      ****         if(networkState != idle){
 1069              		.loc 1 376 0
 1070 000c 2B4B     		ldr	r3, .L68
 1071 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 0010 002B     		cmp	r3, #0
 1073 0012 2BD0     		beq	.L63
 377:.\main.c      ****             if(networkState == collision){
 1074              		.loc 1 377 0
 1075 0014 294B     		ldr	r3, .L68
 1076 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1077 0018 022B     		cmp	r3, #2
 1078 001a 27D1     		bne	.L63
 1079              	.LBB2:
 378:.\main.c      ****                 TX_pin_Write(1);
 1080              		.loc 1 378 0
 1081 001c 0120     		movs	r0, #1
 1082 001e FFF7FEFF 		bl	TX_pin_Write
 379:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1083              		.loc 1 379 0
 1084 0022 FFF7FEFF 		bl	getRandomNumber
 1085 0026 0346     		mov	r3, r0
 1086 0028 1846     		mov	r0, r3
 1087 002a FFF7FEFF 		bl	__aeabi_i2d
 1088 002e 0246     		mov	r2, r0
 1089 0030 0B46     		mov	r3, r1
 1090 0032 1046     		mov	r0, r2
 1091 0034 1946     		mov	r1, r3
 1092 0036 4FF00002 		mov	r2, #0
 1093 003a 214B     		ldr	r3, .L68+4
 1094 003c FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 27


 1095 0040 0246     		mov	r2, r0
 1096 0042 0B46     		mov	r3, r1
 1097 0044 1046     		mov	r0, r2
 1098 0046 1946     		mov	r1, r3
 1099 0048 4FF00002 		mov	r2, #0
 1100 004c 1D4B     		ldr	r3, .L68+8
 1101 004e FFF7FEFF 		bl	__aeabi_dmul
 1102 0052 0246     		mov	r2, r0
 1103 0054 0B46     		mov	r3, r1
 1104 0056 1046     		mov	r0, r2
 1105 0058 1946     		mov	r1, r3
 1106 005a FFF7FEFF 		bl	__aeabi_d2iz
 1107 005e 0346     		mov	r3, r0
 1108 0060 3B60     		str	r3, [r7]
 380:.\main.c      ****                
 381:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 382:.\main.c      ****                 CyDelay(value);
 1109              		.loc 1 382 0
 1110 0062 3B68     		ldr	r3, [r7]
 1111 0064 1846     		mov	r0, r3
 1112 0066 FFF7FEFF 		bl	CyDelay
 383:.\main.c      ****                 break;
 1113              		.loc 1 383 0
 1114 006a 1CE0     		b	.L64
 1115              	.L63:
 1116              	.LBE2:
 384:.\main.c      ****             }
 385:.\main.c      ****         }
 386:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1117              		.loc 1 386 0
 1118 006c 164A     		ldr	r2, .L68+12
 1119 006e 7B68     		ldr	r3, [r7, #4]
 1120 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1121 0074 DBB2     		uxtb	r3, r3
 1122 0076 1846     		mov	r0, r3
 1123 0078 FFF7FEFF 		bl	TX_pin_Write
 387:.\main.c      ****         Timer_Start();
 1124              		.loc 1 387 0
 1125 007c FFF7FEFF 		bl	Timer_Start
 388:.\main.c      ****         while(!timerExpired); 
 1126              		.loc 1 388 0
 1127 0080 00BF     		nop
 1128              	.L65:
 1129              		.loc 1 388 0 is_stmt 0 discriminator 1
 1130 0082 124B     		ldr	r3, .L68+16
 1131 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1132 0086 83F00103 		eor	r3, r3, #1
 1133 008a DBB2     		uxtb	r3, r3
 1134 008c 002B     		cmp	r3, #0
 1135 008e F8D1     		bne	.L65
 389:.\main.c      ****         timerExpired = false;
 1136              		.loc 1 389 0 is_stmt 1 discriminator 2
 1137 0090 0E4B     		ldr	r3, .L68+16
 1138 0092 0022     		movs	r2, #0
 1139 0094 1A70     		strb	r2, [r3]
 373:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1140              		.loc 1 373 0 discriminator 2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 28


 1141 0096 7B68     		ldr	r3, [r7, #4]
 1142 0098 0133     		adds	r3, r3, #1
 1143 009a 7B60     		str	r3, [r7, #4]
 1144              	.L62:
 373:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1145              		.loc 1 373 0 is_stmt 0 discriminator 1
 1146 009c 0C4B     		ldr	r3, .L68+20
 1147 009e 1B68     		ldr	r3, [r3]
 1148 00a0 7A68     		ldr	r2, [r7, #4]
 1149 00a2 9A42     		cmp	r2, r3
 1150 00a4 B2DB     		blt	.L66
 1151              	.L64:
 390:.\main.c      ****     }
 391:.\main.c      ****     
 392:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag 
 393:.\main.c      ****     if(i == halfBitIndex){
 1152              		.loc 1 393 0 is_stmt 1
 1153 00a6 0A4B     		ldr	r3, .L68+20
 1154 00a8 1B68     		ldr	r3, [r3]
 1155 00aa 7A68     		ldr	r2, [r7, #4]
 1156 00ac 9A42     		cmp	r2, r3
 1157 00ae 02D1     		bne	.L61
 394:.\main.c      ****         dataTransmissionComplete = true;
 1158              		.loc 1 394 0
 1159 00b0 084B     		ldr	r3, .L68+24
 1160 00b2 0122     		movs	r2, #1
 1161 00b4 1A70     		strb	r2, [r3]
 1162              	.L61:
 395:.\main.c      ****     }
 396:.\main.c      **** }
 1163              		.loc 1 396 0
 1164 00b6 0837     		adds	r7, r7, #8
 1165              		.cfi_def_cfa_offset 8
 1166 00b8 BD46     		mov	sp, r7
 1167              		.cfi_def_cfa_register 13
 1168              		@ sp needed
 1169 00ba 80BD     		pop	{r7, pc}
 1170              	.L69:
 1171              		.align	2
 1172              	.L68:
 1173 00bc 00000000 		.word	networkState
 1174 00c0 00006040 		.word	1080033280
 1175 00c4 00008940 		.word	1082720256
 1176 00c8 00000000 		.word	diffManEncodedData
 1177 00cc 00000000 		.word	timerExpired
 1178 00d0 00000000 		.word	halfBitIndex
 1179 00d4 00000000 		.word	dataTransmissionComplete
 1180              		.cfi_endproc
 1181              	.LFE71:
 1182              		.size	transmitData, .-transmitData
 1183              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1184              		.align	2
 1185              		.global	setNetworkStateOnLEDs
 1186              		.thumb
 1187              		.thumb_func
 1188              		.type	setNetworkStateOnLEDs, %function
 1189              	setNetworkStateOnLEDs:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 29


 1190              	.LFB72:
 397:.\main.c      **** 
 398:.\main.c      **** void setNetworkStateOnLEDs(){
 1191              		.loc 1 398 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 0
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0000 80B5     		push	{r7, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 0002 00AF     		add	r7, sp, #0
 1200              		.cfi_def_cfa_register 7
 399:.\main.c      **** 	 switch(networkState){
 1201              		.loc 1 399 0
 1202 0004 134B     		ldr	r3, .L76
 1203 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1204 0008 012B     		cmp	r3, #1
 1205 000a 04D0     		beq	.L72
 1206 000c 022B     		cmp	r3, #2
 1207 000e 16D0     		beq	.L73
 1208 0010 002B     		cmp	r3, #0
 1209 0012 0AD0     		beq	.L74
 400:.\main.c      ****         case busy:
 401:.\main.c      ****         {
 402:.\main.c      ****             LED4_Write(1);
 403:.\main.c      ****             LED3_Write(0);
 404:.\main.c      ****             LED2_Write(0);
 405:.\main.c      ****             break;
 406:.\main.c      ****         }
 407:.\main.c      ****         case idle:
 408:.\main.c      ****         {
 409:.\main.c      ****             LED3_Write(1);
 410:.\main.c      ****             LED4_Write(0);
 411:.\main.c      ****             LED2_Write(0);
 412:.\main.c      ****             break;
 413:.\main.c      ****         }
 414:.\main.c      ****         case collision:
 415:.\main.c      ****         {
 416:.\main.c      ****             LED2_Write(1);
 417:.\main.c      ****             LED4_Write(0);
 418:.\main.c      ****             LED3_Write(0);
 419:.\main.c      ****             break;
 420:.\main.c      ****         }
 421:.\main.c      ****         default:
 422:.\main.c      ****         {
 423:.\main.c      ****            //error
 424:.\main.c      ****             break;
 1210              		.loc 1 424 0
 1211 0014 1DE0     		b	.L70
 1212              	.L72:
 402:.\main.c      ****             LED3_Write(0);
 1213              		.loc 1 402 0
 1214 0016 0120     		movs	r0, #1
 1215 0018 FFF7FEFF 		bl	LED4_Write
 403:.\main.c      ****             LED2_Write(0);
 1216              		.loc 1 403 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 30


 1217 001c 0020     		movs	r0, #0
 1218 001e FFF7FEFF 		bl	LED3_Write
 404:.\main.c      ****             break;
 1219              		.loc 1 404 0
 1220 0022 0020     		movs	r0, #0
 1221 0024 FFF7FEFF 		bl	LED2_Write
 405:.\main.c      ****         }
 1222              		.loc 1 405 0
 1223 0028 13E0     		b	.L70
 1224              	.L74:
 409:.\main.c      ****             LED4_Write(0);
 1225              		.loc 1 409 0
 1226 002a 0120     		movs	r0, #1
 1227 002c FFF7FEFF 		bl	LED3_Write
 410:.\main.c      ****             LED2_Write(0);
 1228              		.loc 1 410 0
 1229 0030 0020     		movs	r0, #0
 1230 0032 FFF7FEFF 		bl	LED4_Write
 411:.\main.c      ****             break;
 1231              		.loc 1 411 0
 1232 0036 0020     		movs	r0, #0
 1233 0038 FFF7FEFF 		bl	LED2_Write
 412:.\main.c      ****         }
 1234              		.loc 1 412 0
 1235 003c 09E0     		b	.L70
 1236              	.L73:
 416:.\main.c      ****             LED4_Write(0);
 1237              		.loc 1 416 0
 1238 003e 0120     		movs	r0, #1
 1239 0040 FFF7FEFF 		bl	LED2_Write
 417:.\main.c      ****             LED3_Write(0);
 1240              		.loc 1 417 0
 1241 0044 0020     		movs	r0, #0
 1242 0046 FFF7FEFF 		bl	LED4_Write
 418:.\main.c      ****             break;
 1243              		.loc 1 418 0
 1244 004a 0020     		movs	r0, #0
 1245 004c FFF7FEFF 		bl	LED3_Write
 419:.\main.c      ****         }
 1246              		.loc 1 419 0
 1247 0050 00BF     		nop
 1248              	.L70:
 425:.\main.c      ****         } 
 426:.\main.c      **** 	}
 427:.\main.c      **** }
 1249              		.loc 1 427 0
 1250 0052 80BD     		pop	{r7, pc}
 1251              	.L77:
 1252              		.align	2
 1253              	.L76:
 1254 0054 00000000 		.word	networkState
 1255              		.cfi_endproc
 1256              	.LFE72:
 1257              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1258              		.section	.text.getRandomNumber,"ax",%progbits
 1259              		.align	2
 1260              		.global	getRandomNumber
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 31


 1261              		.thumb
 1262              		.thumb_func
 1263              		.type	getRandomNumber, %function
 1264              	getRandomNumber:
 1265              	.LFB73:
 428:.\main.c      **** 
 429:.\main.c      **** /*
 430:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 431:.\main.c      **** */
 432:.\main.c      **** int getRandomNumber()
 433:.\main.c      **** {
 1266              		.loc 1 433 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 16
 1269              		@ frame_needed = 1, uses_anonymous_args = 0
 1270 0000 80B5     		push	{r7, lr}
 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 84B0     		sub	sp, sp, #16
 1275              		.cfi_def_cfa_offset 24
 1276 0004 00AF     		add	r7, sp, #0
 1277              		.cfi_def_cfa_register 7
 434:.\main.c      ****     const int MIN_N = 1;
 1278              		.loc 1 434 0
 1279 0006 0123     		movs	r3, #1
 1280 0008 FB60     		str	r3, [r7, #12]
 435:.\main.c      ****     const int MAX_N = 128;
 1281              		.loc 1 435 0
 1282 000a 8023     		movs	r3, #128
 1283 000c BB60     		str	r3, [r7, #8]
 436:.\main.c      ****         
 437:.\main.c      ****     int n;
 438:.\main.c      **** /*
 439:.\main.c      ****     Get first and second random numbers.
 440:.\main.c      ****     */
 441:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1284              		.loc 1 441 0
 1285 000e FFF7FEFF 		bl	rand
 1286 0012 0246     		mov	r2, r0
 1287 0014 B968     		ldr	r1, [r7, #8]
 1288 0016 FB68     		ldr	r3, [r7, #12]
 1289 0018 CB1A     		subs	r3, r1, r3
 1290 001a 0133     		adds	r3, r3, #1
 1291 001c 92FBF3F1 		sdiv	r1, r2, r3
 1292 0020 03FB01F3 		mul	r3, r3, r1
 1293 0024 D21A     		subs	r2, r2, r3
 1294 0026 FB68     		ldr	r3, [r7, #12]
 1295 0028 1344     		add	r3, r3, r2
 1296 002a 7B60     		str	r3, [r7, #4]
 442:.\main.c      ****     return n;
 1297              		.loc 1 442 0
 1298 002c 7B68     		ldr	r3, [r7, #4]
 443:.\main.c      **** }
 1299              		.loc 1 443 0
 1300 002e 1846     		mov	r0, r3
 1301 0030 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 32


 1302              		.cfi_def_cfa_offset 8
 1303 0032 BD46     		mov	sp, r7
 1304              		.cfi_def_cfa_register 13
 1305              		@ sp needed
 1306 0034 80BD     		pop	{r7, pc}
 1307              		.cfi_endproc
 1308              	.LFE73:
 1309              		.size	getRandomNumber, .-getRandomNumber
 1310 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1311              		.align	2
 1312              		.global	diffManToASCII
 1313              		.thumb
 1314              		.thumb_func
 1315              		.type	diffManToASCII, %function
 1316              	diffManToASCII:
 1317              	.LFB74:
 444:.\main.c      **** 
 445:.\main.c      **** /*
 446:.\main.c      **** Helper method.
 447:.\main.c      **** Convert differental manchester line encoded byte to ascii char
 448:.\main.c      **** 
 449:.\main.c      **** charPtr = pointer to char 
 450:.\main.c      **** */
 451:.\main.c      **** void diffManToASCII()
 452:.\main.c      **** {
 1318              		.loc 1 452 0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 8
 1321              		@ frame_needed = 1, uses_anonymous_args = 0
 1322              		@ link register save eliminated.
 1323 0000 80B4     		push	{r7}
 1324              		.cfi_def_cfa_offset 4
 1325              		.cfi_offset 7, -4
 1326 0002 83B0     		sub	sp, sp, #12
 1327              		.cfi_def_cfa_offset 16
 1328 0004 00AF     		add	r7, sp, #0
 1329              		.cfi_def_cfa_register 7
 453:.\main.c      ****     int i;
 454:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1330              		.loc 1 454 0
 1331 0006 0023     		movs	r3, #0
 1332 0008 7B60     		str	r3, [r7, #4]
 1333 000a 42E0     		b	.L81
 1334              	.L87:
 1335              	.LBB3:
 455:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1336              		.loc 1 455 0
 1337 000c 254B     		ldr	r3, .L88
 1338 000e 1B68     		ldr	r3, [r3]
 1339 0010 013B     		subs	r3, r3, #1
 1340 0012 254A     		ldr	r2, .L88+4
 1341 0014 D35C     		ldrb	r3, [r2, r3]
 1342 0016 FB70     		strb	r3, [r7, #3]
 456:.\main.c      ****         //send starting 1 bit (encoded)
 457:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1343              		.loc 1 457 0
 1344 0018 224B     		ldr	r3, .L88
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 33


 1345 001a 1B68     		ldr	r3, [r3]
 1346 001c 224A     		ldr	r2, .L88+4
 1347 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1348 0020 012B     		cmp	r3, #1
 1349 0022 17D1     		bne	.L82
 458:.\main.c      ****             //current half bit is 1
 459:.\main.c      ****             if(previousHalfBit == 1)
 1350              		.loc 1 459 0
 1351 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1352 0026 012B     		cmp	r3, #1
 1353 0028 0FD1     		bne	.L83
 460:.\main.c      ****             {
 461:.\main.c      ****                 receivedChar |= (1 << (7 - i));      
 1354              		.loc 1 461 0
 1355 002a 7B68     		ldr	r3, [r7, #4]
 1356 002c C3F10703 		rsb	r3, r3, #7
 1357 0030 0122     		movs	r2, #1
 1358 0032 02FA03F3 		lsl	r3, r2, r3
 1359 0036 DAB2     		uxtb	r2, r3
 1360 0038 1C4B     		ldr	r3, .L88+8
 1361 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1362 003c DBB2     		uxtb	r3, r3
 1363 003e 1343     		orrs	r3, r3, r2
 1364 0040 DBB2     		uxtb	r3, r3
 1365 0042 DAB2     		uxtb	r2, r3
 1366 0044 194B     		ldr	r3, .L88+8
 1367 0046 1A70     		strb	r2, [r3]
 1368 0048 1BE0     		b	.L85
 1369              	.L83:
 462:.\main.c      ****             }
 463:.\main.c      ****             else
 464:.\main.c      ****             {
 465:.\main.c      ****                 receivedChar |= (0 << (7 - i));    
 1370              		.loc 1 465 0
 1371 004a 184B     		ldr	r3, .L88+8
 1372 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1373 004e 174B     		ldr	r3, .L88+8
 1374 0050 1A70     		strb	r2, [r3]
 1375 0052 16E0     		b	.L85
 1376              	.L82:
 466:.\main.c      ****             }
 467:.\main.c      ****         }
 468:.\main.c      ****         else{
 469:.\main.c      ****             //current half bit is 0
 470:.\main.c      ****             if(previousHalfBit == 1)
 1377              		.loc 1 470 0
 1378 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1379 0056 012B     		cmp	r3, #1
 1380 0058 04D1     		bne	.L86
 471:.\main.c      ****             {
 472:.\main.c      ****                 receivedChar |= (0 << (7 - i));    
 1381              		.loc 1 472 0
 1382 005a 144B     		ldr	r3, .L88+8
 1383 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1384 005e 134B     		ldr	r3, .L88+8
 1385 0060 1A70     		strb	r2, [r3]
 1386 0062 0EE0     		b	.L85
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 34


 1387              	.L86:
 473:.\main.c      ****             }
 474:.\main.c      ****             else
 475:.\main.c      ****             {
 476:.\main.c      ****                 receivedChar |= (1 << (7 - i));    
 1388              		.loc 1 476 0
 1389 0064 7B68     		ldr	r3, [r7, #4]
 1390 0066 C3F10703 		rsb	r3, r3, #7
 1391 006a 0122     		movs	r2, #1
 1392 006c 02FA03F3 		lsl	r3, r2, r3
 1393 0070 DAB2     		uxtb	r2, r3
 1394 0072 0E4B     		ldr	r3, .L88+8
 1395 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1396 0076 DBB2     		uxtb	r3, r3
 1397 0078 1343     		orrs	r3, r3, r2
 1398 007a DBB2     		uxtb	r3, r3
 1399 007c DAB2     		uxtb	r2, r3
 1400 007e 0B4B     		ldr	r3, .L88+8
 1401 0080 1A70     		strb	r2, [r3]
 1402              	.L85:
 477:.\main.c      ****             }
 478:.\main.c      ****         } 
 479:.\main.c      ****         receivedDataIndex += 2;
 1403              		.loc 1 479 0 discriminator 2
 1404 0082 084B     		ldr	r3, .L88
 1405 0084 1B68     		ldr	r3, [r3]
 1406 0086 0233     		adds	r3, r3, #2
 1407 0088 064A     		ldr	r2, .L88
 1408 008a 1360     		str	r3, [r2]
 1409              	.LBE3:
 454:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1410              		.loc 1 454 0 discriminator 2
 1411 008c 7B68     		ldr	r3, [r7, #4]
 1412 008e 0133     		adds	r3, r3, #1
 1413 0090 7B60     		str	r3, [r7, #4]
 1414              	.L81:
 454:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1415              		.loc 1 454 0 is_stmt 0 discriminator 1
 1416 0092 7B68     		ldr	r3, [r7, #4]
 1417 0094 072B     		cmp	r3, #7
 1418 0096 B9DD     		ble	.L87
 480:.\main.c      ****     }//end for loop
 481:.\main.c      **** }
 1419              		.loc 1 481 0 is_stmt 1
 1420 0098 0C37     		adds	r7, r7, #12
 1421              		.cfi_def_cfa_offset 4
 1422 009a BD46     		mov	sp, r7
 1423              		.cfi_def_cfa_register 13
 1424              		@ sp needed
 1425 009c 5DF8047B 		ldr	r7, [sp], #4
 1426              		.cfi_restore 7
 1427              		.cfi_def_cfa_offset 0
 1428 00a0 7047     		bx	lr
 1429              	.L89:
 1430 00a2 00BF     		.align	2
 1431              	.L88:
 1432 00a4 00000000 		.word	receivedDataIndex
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 35


 1433 00a8 00000000 		.word	diffManReceivedData
 1434 00ac 00000000 		.word	receivedChar
 1435              		.cfi_endproc
 1436              	.LFE74:
 1437              		.size	diffManToASCII, .-diffManToASCII
 1438              		.section	.text.storeChar,"ax",%progbits
 1439              		.align	2
 1440              		.global	storeChar
 1441              		.thumb
 1442              		.thumb_func
 1443              		.type	storeChar, %function
 1444              	storeChar:
 1445              	.LFB75:
 482:.\main.c      **** 
 483:.\main.c      **** //stores char in receive array
 484:.\main.c      **** void storeChar(){   
 1446              		.loc 1 484 0
 1447              		.cfi_startproc
 1448              		@ args = 0, pretend = 0, frame = 0
 1449              		@ frame_needed = 1, uses_anonymous_args = 0
 1450              		@ link register save eliminated.
 1451 0000 80B4     		push	{r7}
 1452              		.cfi_def_cfa_offset 4
 1453              		.cfi_offset 7, -4
 1454 0002 00AF     		add	r7, sp, #0
 1455              		.cfi_def_cfa_register 7
 485:.\main.c      **** 	receivedChar &= ASCII_CHAR_MASK;
 1456              		.loc 1 485 0
 1457 0004 0A4B     		ldr	r3, .L91
 1458 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1459 0008 03F07F03 		and	r3, r3, #127
 1460 000c DAB2     		uxtb	r2, r3
 1461 000e 084B     		ldr	r3, .L91
 1462 0010 1A70     		strb	r2, [r3]
 486:.\main.c      **** 	rxChar[currentRXCharPosition] = receivedChar;
 1463              		.loc 1 486 0
 1464 0012 084B     		ldr	r3, .L91+4
 1465 0014 1B68     		ldr	r3, [r3]
 1466 0016 064A     		ldr	r2, .L91
 1467 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1468 001a 074A     		ldr	r2, .L91+8
 1469 001c D154     		strb	r1, [r2, r3]
 487:.\main.c      **** 	currentRXCharPosition++;
 1470              		.loc 1 487 0
 1471 001e 054B     		ldr	r3, .L91+4
 1472 0020 1B68     		ldr	r3, [r3]
 1473 0022 0133     		adds	r3, r3, #1
 1474 0024 034A     		ldr	r2, .L91+4
 1475 0026 1360     		str	r3, [r2]
 488:.\main.c      **** }
 1476              		.loc 1 488 0
 1477 0028 BD46     		mov	sp, r7
 1478              		.cfi_def_cfa_register 13
 1479              		@ sp needed
 1480 002a 5DF8047B 		ldr	r7, [sp], #4
 1481              		.cfi_restore 7
 1482              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 36


 1483 002e 7047     		bx	lr
 1484              	.L92:
 1485              		.align	2
 1486              	.L91:
 1487 0030 00000000 		.word	receivedChar
 1488 0034 00000000 		.word	currentRXCharPosition
 1489 0038 00000000 		.word	rxChar
 1490              		.cfi_endproc
 1491              	.LFE75:
 1492              		.size	storeChar, .-storeChar
 1493              		.section	.text.printChar,"ax",%progbits
 1494              		.align	2
 1495              		.global	printChar
 1496              		.thumb
 1497              		.thumb_func
 1498              		.type	printChar, %function
 1499              	printChar:
 1500              	.LFB76:
 489:.\main.c      **** 
 490:.\main.c      **** //Grabs all chars and prints to LCD
 491:.\main.c      **** void printChar(){
 1501              		.loc 1 491 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 8
 1504              		@ frame_needed = 1, uses_anonymous_args = 0
 1505 0000 80B5     		push	{r7, lr}
 1506              		.cfi_def_cfa_offset 8
 1507              		.cfi_offset 7, -8
 1508              		.cfi_offset 14, -4
 1509 0002 82B0     		sub	sp, sp, #8
 1510              		.cfi_def_cfa_offset 16
 1511 0004 00AF     		add	r7, sp, #0
 1512              		.cfi_def_cfa_register 7
 492:.\main.c      **** 	int i;//char position after array
 493:.\main.c      ****     for(i = 7; i < messageLength; i++){//we are assuming messageLength from the header is valid and
 1513              		.loc 1 493 0
 1514 0006 0723     		movs	r3, #7
 1515 0008 7B60     		str	r3, [r7, #4]
 1516 000a 09E0     		b	.L94
 1517              	.L95:
 494:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1518              		.loc 1 494 0 discriminator 3
 1519 000c 084A     		ldr	r2, .L96
 1520 000e 7B68     		ldr	r3, [r7, #4]
 1521 0010 1344     		add	r3, r3, r2
 1522 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1523 0014 1846     		mov	r0, r3
 1524 0016 FFF7FEFF 		bl	LCD_PutChar
 493:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1525              		.loc 1 493 0 discriminator 3
 1526 001a 7B68     		ldr	r3, [r7, #4]
 1527 001c 0133     		adds	r3, r3, #1
 1528 001e 7B60     		str	r3, [r7, #4]
 1529              	.L94:
 493:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1530              		.loc 1 493 0 is_stmt 0 discriminator 1
 1531 0020 044B     		ldr	r3, .L96+4
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 37


 1532 0022 1B68     		ldr	r3, [r3]
 1533 0024 7A68     		ldr	r2, [r7, #4]
 1534 0026 9A42     		cmp	r2, r3
 1535 0028 F0DB     		blt	.L95
 495:.\main.c      **** 		//TODO: implement USB transmit
 496:.\main.c      ****     }
 497:.\main.c      **** }
 1536              		.loc 1 497 0 is_stmt 1
 1537 002a 0837     		adds	r7, r7, #8
 1538              		.cfi_def_cfa_offset 8
 1539 002c BD46     		mov	sp, r7
 1540              		.cfi_def_cfa_register 13
 1541              		@ sp needed
 1542 002e 80BD     		pop	{r7, pc}
 1543              	.L97:
 1544              		.align	2
 1545              	.L96:
 1546 0030 00000000 		.word	rxChar
 1547 0034 00000000 		.word	messageLength
 1548              		.cfi_endproc
 1549              	.LFE76:
 1550              		.size	printChar, .-printChar
 1551              		.section	.text.headerCheck,"ax",%progbits
 1552              		.align	2
 1553              		.global	headerCheck
 1554              		.thumb
 1555              		.thumb_func
 1556              		.type	headerCheck, %function
 1557              	headerCheck:
 1558              	.LFB77:
 498:.\main.c      **** 
 499:.\main.c      **** //checks received header and strips from array if valid
 500:.\main.c      **** //otherwise, disregard contents
 501:.\main.c      **** bool headerCheck(){
 1559              		.loc 1 501 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 1, uses_anonymous_args = 0
 1563 0000 80B5     		push	{r7, lr}
 1564              		.cfi_def_cfa_offset 8
 1565              		.cfi_offset 7, -8
 1566              		.cfi_offset 14, -4
 1567 0002 00AF     		add	r7, sp, #0
 1568              		.cfi_def_cfa_register 7
 502:.\main.c      ****     //nested if loops are probably the easiest way to check
 503:.\main.c      **** 	if(rxChar[0] == 'q'){
 1569              		.loc 1 503 0
 1570 0004 124B     		ldr	r3, .L102
 1571 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1572 0008 712B     		cmp	r3, #113
 1573 000a 1ED1     		bne	.L99
 504:.\main.c      **** 		if(rxChar[3] == 0x00 || rxChar[3] == RX_DESTINATION_ADDRESS){
 1574              		.loc 1 504 0
 1575 000c 104B     		ldr	r3, .L102
 1576 000e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1577 0010 002B     		cmp	r3, #0
 1578 0012 03D0     		beq	.L100
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 38


 1579              		.loc 1 504 0 is_stmt 0 discriminator 1
 1580 0014 0E4B     		ldr	r3, .L102
 1581 0016 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1582 0018 002B     		cmp	r3, #0
 1583 001a 16D1     		bne	.L99
 1584              	.L100:
 505:.\main.c      **** 			//this is as valid as we go (CRC is optional)
 506:.\main.c      **** 			messageLength = rxChar[4];
 1585              		.loc 1 506 0 is_stmt 1
 1586 001c 0C4B     		ldr	r3, .L102
 1587 001e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1588 0020 1A46     		mov	r2, r3
 1589 0022 0C4B     		ldr	r3, .L102+4
 1590 0024 1A60     		str	r2, [r3]
 507:.\main.c      ****             LCD_PrintNumber(rxChar[4]); 
 1591              		.loc 1 507 0
 1592 0026 0A4B     		ldr	r3, .L102
 1593 0028 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1594 002a 1846     		mov	r0, r3
 1595 002c FFF7FEFF 		bl	LCD_PrintU32Number
 508:.\main.c      **** 			crcState = rxChar[5];
 1596              		.loc 1 508 0
 1597 0030 074B     		ldr	r3, .L102
 1598 0032 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1599 0034 084B     		ldr	r3, .L102+8
 1600 0036 1A70     		strb	r2, [r3]
 509:.\main.c      **** 			headerCRC = rxChar[6];
 1601              		.loc 1 509 0
 1602 0038 054B     		ldr	r3, .L102
 1603 003a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1604 003c 1A46     		mov	r2, r3
 1605 003e 074B     		ldr	r3, .L102+12
 1606 0040 1A60     		str	r2, [r3]
 510:.\main.c      ****             CyDelay(1000);
 1607              		.loc 1 510 0
 1608 0042 4FF47A70 		mov	r0, #1000
 1609 0046 FFF7FEFF 		bl	CyDelay
 1610              	.L99:
 511:.\main.c      **** 			//return true;
 512:.\main.c      **** 		}
 513:.\main.c      **** 	}
 514:.\main.c      **** 	return false;
 1611              		.loc 1 514 0
 1612 004a 0023     		movs	r3, #0
 515:.\main.c      **** }
 1613              		.loc 1 515 0
 1614 004c 1846     		mov	r0, r3
 1615 004e 80BD     		pop	{r7, pc}
 1616              	.L103:
 1617              		.align	2
 1618              	.L102:
 1619 0050 00000000 		.word	rxChar
 1620 0054 00000000 		.word	messageLength
 1621 0058 00000000 		.word	crcState
 1622 005c 00000000 		.word	headerCRC
 1623              		.cfi_endproc
 1624              	.LFE77:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 39


 1625              		.size	headerCheck, .-headerCheck
 1626              		.text
 1627              	.Letext0:
 1628              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1629              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1630              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1631              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1632              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1633              		.section	.debug_info,"",%progbits
 1634              	.Ldebug_info0:
 1635 0000 20050000 		.4byte	0x520
 1636 0004 0400     		.2byte	0x4
 1637 0006 00000000 		.4byte	.Ldebug_abbrev0
 1638 000a 04       		.byte	0x4
 1639 000b 01       		.uleb128 0x1
 1640 000c 51010000 		.4byte	.LASF72
 1641 0010 01       		.byte	0x1
 1642 0011 AB030000 		.4byte	.LASF73
 1643 0015 46000000 		.4byte	.LASF74
 1644 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1645 001d 00000000 		.4byte	0
 1646 0021 00000000 		.4byte	.Ldebug_line0
 1647 0025 02       		.uleb128 0x2
 1648 0026 01       		.byte	0x1
 1649 0027 06       		.byte	0x6
 1650 0028 61020000 		.4byte	.LASF0
 1651 002c 02       		.uleb128 0x2
 1652 002d 01       		.byte	0x1
 1653 002e 08       		.byte	0x8
 1654 002f 0F020000 		.4byte	.LASF1
 1655 0033 02       		.uleb128 0x2
 1656 0034 02       		.byte	0x2
 1657 0035 05       		.byte	0x5
 1658 0036 C0000000 		.4byte	.LASF2
 1659 003a 02       		.uleb128 0x2
 1660 003b 02       		.byte	0x2
 1661 003c 07       		.byte	0x7
 1662 003d 08030000 		.4byte	.LASF3
 1663 0041 03       		.uleb128 0x3
 1664 0042 B4030000 		.4byte	.LASF9
 1665 0046 02       		.byte	0x2
 1666 0047 3F       		.byte	0x3f
 1667 0048 4C000000 		.4byte	0x4c
 1668 004c 02       		.uleb128 0x2
 1669 004d 04       		.byte	0x4
 1670 004e 05       		.byte	0x5
 1671 004f E8020000 		.4byte	.LASF4
 1672 0053 02       		.uleb128 0x2
 1673 0054 04       		.byte	0x4
 1674 0055 07       		.byte	0x7
 1675 0056 AF020000 		.4byte	.LASF5
 1676 005a 02       		.uleb128 0x2
 1677 005b 08       		.byte	0x8
 1678 005c 05       		.byte	0x5
 1679 005d 15010000 		.4byte	.LASF6
 1680 0061 02       		.uleb128 0x2
 1681 0062 08       		.byte	0x8
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 40


 1682 0063 07       		.byte	0x7
 1683 0064 23010000 		.4byte	.LASF7
 1684 0068 04       		.uleb128 0x4
 1685 0069 04       		.byte	0x4
 1686 006a 05       		.byte	0x5
 1687 006b 696E7400 		.ascii	"int\000"
 1688 006f 02       		.uleb128 0x2
 1689 0070 04       		.byte	0x4
 1690 0071 07       		.byte	0x7
 1691 0072 90020000 		.4byte	.LASF8
 1692 0076 03       		.uleb128 0x3
 1693 0077 00030000 		.4byte	.LASF10
 1694 007b 03       		.byte	0x3
 1695 007c 2C       		.byte	0x2c
 1696 007d 41000000 		.4byte	0x41
 1697 0081 03       		.uleb128 0x3
 1698 0082 EE000000 		.4byte	.LASF11
 1699 0086 04       		.byte	0x4
 1700 0087 C2       		.byte	0xc2
 1701 0088 2C000000 		.4byte	0x2c
 1702 008c 03       		.uleb128 0x3
 1703 008d DA000000 		.4byte	.LASF12
 1704 0091 04       		.byte	0x4
 1705 0092 C3       		.byte	0xc3
 1706 0093 3A000000 		.4byte	0x3a
 1707 0097 02       		.uleb128 0x2
 1708 0098 04       		.byte	0x4
 1709 0099 04       		.byte	0x4
 1710 009a 0F010000 		.4byte	.LASF13
 1711 009e 02       		.uleb128 0x2
 1712 009f 08       		.byte	0x8
 1713 00a0 04       		.byte	0x4
 1714 00a1 4D030000 		.4byte	.LASF14
 1715 00a5 02       		.uleb128 0x2
 1716 00a6 01       		.byte	0x1
 1717 00a7 08       		.byte	0x8
 1718 00a8 D6020000 		.4byte	.LASF15
 1719 00ac 05       		.uleb128 0x5
 1720 00ad 40030000 		.4byte	.LASF16
 1721 00b1 04       		.byte	0x4
 1722 00b2 6C01     		.2byte	0x16c
 1723 00b4 B8000000 		.4byte	0xb8
 1724 00b8 06       		.uleb128 0x6
 1725 00b9 81000000 		.4byte	0x81
 1726 00bd 02       		.uleb128 0x2
 1727 00be 04       		.byte	0x4
 1728 00bf 07       		.byte	0x7
 1729 00c0 3D000000 		.4byte	.LASF17
 1730 00c4 07       		.uleb128 0x7
 1731 00c5 04       		.byte	0x4
 1732 00c6 A5000000 		.4byte	0xa5
 1733 00ca 03       		.uleb128 0x3
 1734 00cb 42020000 		.4byte	.LASF18
 1735 00cf 05       		.byte	0x5
 1736 00d0 7A       		.byte	0x7a
 1737 00d1 4C000000 		.4byte	0x4c
 1738 00d5 08       		.uleb128 0x8
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 41


 1739 00d6 27000000 		.4byte	.LASF22
 1740 00da 01       		.byte	0x1
 1741 00db 01       		.byte	0x1
 1742 00dc 24       		.byte	0x24
 1743 00dd F4000000 		.4byte	0xf4
 1744 00e1 09       		.uleb128 0x9
 1745 00e2 7C020000 		.4byte	.LASF19
 1746 00e6 00       		.sleb128 0
 1747 00e7 09       		.uleb128 0x9
 1748 00e8 29030000 		.4byte	.LASF20
 1749 00ec 01       		.sleb128 1
 1750 00ed 09       		.uleb128 0x9
 1751 00ee D0000000 		.4byte	.LASF21
 1752 00f2 02       		.sleb128 2
 1753 00f3 00       		.byte	0
 1754 00f4 0A       		.uleb128 0xa
 1755 00f5 63726300 		.ascii	"crc\000"
 1756 00f9 01       		.byte	0x1
 1757 00fa 01       		.byte	0x1
 1758 00fb 25       		.byte	0x25
 1759 00fc 19010000 		.4byte	0x119
 1760 0100 09       		.uleb128 0x9
 1761 0101 BB000000 		.4byte	.LASF23
 1762 0105 00       		.sleb128 0
 1763 0106 09       		.uleb128 0x9
 1764 0107 00000000 		.4byte	.LASF24
 1765 010b 01       		.sleb128 1
 1766 010c 09       		.uleb128 0x9
 1767 010d 45030000 		.4byte	.LASF25
 1768 0111 02       		.sleb128 2
 1769 0112 09       		.uleb128 0x9
 1770 0113 C1020000 		.4byte	.LASF26
 1771 0117 03       		.sleb128 3
 1772 0118 00       		.byte	0
 1773 0119 0B       		.uleb128 0xb
 1774 011a 14000000 		.4byte	.LASF27
 1775 011e 01       		.byte	0x1
 1776 011f 29       		.byte	0x29
 1777 0120 00000000 		.4byte	.LFB63
 1778 0124 28000000 		.4byte	.LFE63-.LFB63
 1779 0128 01       		.uleb128 0x1
 1780 0129 9C       		.byte	0x9c
 1781 012a 0B       		.uleb128 0xb
 1782 012b FF000000 		.4byte	.LASF28
 1783 012f 01       		.byte	0x1
 1784 0130 33       		.byte	0x33
 1785 0131 00000000 		.4byte	.LFB64
 1786 0135 58000000 		.4byte	.LFE64-.LFB64
 1787 0139 01       		.uleb128 0x1
 1788 013a 9C       		.byte	0x9c
 1789 013b 0B       		.uleb128 0xb
 1790 013c 01040000 		.4byte	.LASF29
 1791 0140 01       		.byte	0x1
 1792 0141 44       		.byte	0x44
 1793 0142 00000000 		.4byte	.LFB65
 1794 0146 1C000000 		.4byte	.LFE65-.LFB65
 1795 014a 01       		.uleb128 0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 42


 1796 014b 9C       		.byte	0x9c
 1797 014c 0C       		.uleb128 0xc
 1798 014d 89030000 		.4byte	.LASF30
 1799 0151 01       		.byte	0x1
 1800 0152 4B       		.byte	0x4b
 1801 0153 00000000 		.4byte	.LFB66
 1802 0157 38000000 		.4byte	.LFE66-.LFB66
 1803 015b 01       		.uleb128 0x1
 1804 015c 9C       		.byte	0x9c
 1805 015d 0D       		.uleb128 0xd
 1806 015e 97000000 		.4byte	.LASF34
 1807 0162 01       		.byte	0x1
 1808 0163 52       		.byte	0x52
 1809 0164 68000000 		.4byte	0x68
 1810 0168 00000000 		.4byte	.LFB67
 1811 016c 80020000 		.4byte	.LFE67-.LFB67
 1812 0170 01       		.uleb128 0x1
 1813 0171 9C       		.byte	0x9c
 1814 0172 B0010000 		.4byte	0x1b0
 1815 0176 0E       		.uleb128 0xe
 1816 0177 727800   		.ascii	"rx\000"
 1817 017a 01       		.byte	0x1
 1818 017b 54       		.byte	0x54
 1819 017c A5000000 		.4byte	0xa5
 1820 0180 02       		.uleb128 0x2
 1821 0181 91       		.byte	0x91
 1822 0182 76       		.sleb128 -10
 1823 0183 0F       		.uleb128 0xf
 1824 0184 F4000000 		.4byte	.LASF31
 1825 0188 01       		.byte	0x1
 1826 0189 55       		.byte	0x55
 1827 018a B0010000 		.4byte	0x1b0
 1828 018e 03       		.uleb128 0x3
 1829 018f 91       		.byte	0x91
 1830 0190 887F     		.sleb128 -120
 1831 0192 0F       		.uleb128 0xf
 1832 0193 F1020000 		.4byte	.LASF32
 1833 0197 01       		.byte	0x1
 1834 0198 56       		.byte	0x56
 1835 0199 81000000 		.4byte	0x81
 1836 019d 02       		.uleb128 0x2
 1837 019e 91       		.byte	0x91
 1838 019f 77       		.sleb128 -9
 1839 01a0 0F       		.uleb128 0xf
 1840 01a1 1B030000 		.4byte	.LASF33
 1841 01a5 01       		.byte	0x1
 1842 01a6 63       		.byte	0x63
 1843 01a7 CA000000 		.4byte	0xca
 1844 01ab 03       		.uleb128 0x3
 1845 01ac 91       		.byte	0x91
 1846 01ad 847F     		.sleb128 -124
 1847 01af 00       		.byte	0
 1848 01b0 10       		.uleb128 0x10
 1849 01b1 A5000000 		.4byte	0xa5
 1850 01b5 C0010000 		.4byte	0x1c0
 1851 01b9 11       		.uleb128 0x11
 1852 01ba BD000000 		.4byte	0xbd
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 43


 1853 01be 6B       		.byte	0x6b
 1854 01bf 00       		.byte	0
 1855 01c0 12       		.uleb128 0x12
 1856 01c1 49020000 		.4byte	.LASF41
 1857 01c5 01       		.byte	0x1
 1858 01c6 0B01     		.2byte	0x10b
 1859 01c8 00000000 		.4byte	.LFB68
 1860 01cc 48000000 		.4byte	.LFE68-.LFB68
 1861 01d0 01       		.uleb128 0x1
 1862 01d1 9C       		.byte	0x9c
 1863 01d2 13       		.uleb128 0x13
 1864 01d3 FF010000 		.4byte	.LASF35
 1865 01d7 01       		.byte	0x1
 1866 01d8 1701     		.2byte	0x117
 1867 01da 00000000 		.4byte	.LFB69
 1868 01de 38000000 		.4byte	.LFE69-.LFB69
 1869 01e2 01       		.uleb128 0x1
 1870 01e3 9C       		.byte	0x9c
 1871 01e4 14020000 		.4byte	0x214
 1872 01e8 14       		.uleb128 0x14
 1873 01e9 F4000000 		.4byte	.LASF31
 1874 01ed 01       		.byte	0x1
 1875 01ee 1701     		.2byte	0x117
 1876 01f0 C4000000 		.4byte	0xc4
 1877 01f4 02       		.uleb128 0x2
 1878 01f5 91       		.byte	0x91
 1879 01f6 6C       		.sleb128 -20
 1880 01f7 14       		.uleb128 0x14
 1881 01f8 F1020000 		.4byte	.LASF32
 1882 01fc 01       		.byte	0x1
 1883 01fd 1701     		.2byte	0x117
 1884 01ff 81000000 		.4byte	0x81
 1885 0203 02       		.uleb128 0x2
 1886 0204 91       		.byte	0x91
 1887 0205 6B       		.sleb128 -21
 1888 0206 15       		.uleb128 0x15
 1889 0207 6900     		.ascii	"i\000"
 1890 0209 01       		.byte	0x1
 1891 020a 1901     		.2byte	0x119
 1892 020c 6F000000 		.4byte	0x6f
 1893 0210 02       		.uleb128 0x2
 1894 0211 91       		.byte	0x91
 1895 0212 74       		.sleb128 -12
 1896 0213 00       		.byte	0
 1897 0214 16       		.uleb128 0x16
 1898 0215 6D020000 		.4byte	.LASF36
 1899 0219 01       		.byte	0x1
 1900 021a 2301     		.2byte	0x123
 1901 021c 00000000 		.4byte	.LFB70
 1902 0220 C4010000 		.4byte	.LFE70-.LFB70
 1903 0224 01       		.uleb128 0x1
 1904 0225 9C       		.byte	0x9c
 1905 0226 74020000 		.4byte	0x274
 1906 022a 14       		.uleb128 0x14
 1907 022b CC020000 		.4byte	.LASF37
 1908 022f 01       		.byte	0x1
 1909 0230 2301     		.2byte	0x123
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 44


 1910 0232 A5000000 		.4byte	0xa5
 1911 0236 03       		.uleb128 0x3
 1912 0237 91       		.byte	0x91
 1913 0238 977F     		.sleb128 -105
 1914 023a 17       		.uleb128 0x17
 1915 023b 1B040000 		.4byte	.LASF38
 1916 023f 01       		.byte	0x1
 1917 0240 2501     		.2byte	0x125
 1918 0242 81000000 		.4byte	0x81
 1919 0246 02       		.uleb128 0x2
 1920 0247 91       		.byte	0x91
 1921 0248 77       		.sleb128 -9
 1922 0249 17       		.uleb128 0x17
 1923 024a 99030000 		.4byte	.LASF39
 1924 024e 01       		.byte	0x1
 1925 024f 3601     		.2byte	0x136
 1926 0251 74020000 		.4byte	0x274
 1927 0255 03       		.uleb128 0x3
 1928 0256 91       		.byte	0x91
 1929 0257 9C7F     		.sleb128 -100
 1930 0259 15       		.uleb128 0x15
 1931 025a 6900     		.ascii	"i\000"
 1932 025c 01       		.byte	0x1
 1933 025d 3701     		.2byte	0x137
 1934 025f 68000000 		.4byte	0x68
 1935 0263 02       		.uleb128 0x2
 1936 0264 91       		.byte	0x91
 1937 0265 70       		.sleb128 -16
 1938 0266 15       		.uleb128 0x15
 1939 0267 6A00     		.ascii	"j\000"
 1940 0269 01       		.byte	0x1
 1941 026a 4001     		.2byte	0x140
 1942 026c 68000000 		.4byte	0x68
 1943 0270 02       		.uleb128 0x2
 1944 0271 91       		.byte	0x91
 1945 0272 6C       		.sleb128 -20
 1946 0273 00       		.byte	0
 1947 0274 10       		.uleb128 0x10
 1948 0275 6F000000 		.4byte	0x6f
 1949 0279 84020000 		.4byte	0x284
 1950 027d 11       		.uleb128 0x11
 1951 027e BD000000 		.4byte	0xbd
 1952 0282 13       		.byte	0x13
 1953 0283 00       		.byte	0
 1954 0284 18       		.uleb128 0x18
 1955 0285 07000000 		.4byte	.LASF46
 1956 0289 01       		.byte	0x1
 1957 028a 7301     		.2byte	0x173
 1958 028c 00000000 		.4byte	.LFB71
 1959 0290 D8000000 		.4byte	.LFE71-.LFB71
 1960 0294 01       		.uleb128 0x1
 1961 0295 9C       		.byte	0x9c
 1962 0296 C1020000 		.4byte	0x2c1
 1963 029a 15       		.uleb128 0x15
 1964 029b 6900     		.ascii	"i\000"
 1965 029d 01       		.byte	0x1
 1966 029e 7401     		.2byte	0x174
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 45


 1967 02a0 68000000 		.4byte	0x68
 1968 02a4 02       		.uleb128 0x2
 1969 02a5 91       		.byte	0x91
 1970 02a6 74       		.sleb128 -12
 1971 02a7 19       		.uleb128 0x19
 1972 02a8 1C000000 		.4byte	.LBB2
 1973 02ac 50000000 		.4byte	.LBE2-.LBB2
 1974 02b0 17       		.uleb128 0x17
 1975 02b1 CA000000 		.4byte	.LASF40
 1976 02b5 01       		.byte	0x1
 1977 02b6 7B01     		.2byte	0x17b
 1978 02b8 68000000 		.4byte	0x68
 1979 02bc 02       		.uleb128 0x2
 1980 02bd 91       		.byte	0x91
 1981 02be 70       		.sleb128 -16
 1982 02bf 00       		.byte	0
 1983 02c0 00       		.byte	0
 1984 02c1 1A       		.uleb128 0x1a
 1985 02c2 DF010000 		.4byte	.LASF42
 1986 02c6 01       		.byte	0x1
 1987 02c7 8E01     		.2byte	0x18e
 1988 02c9 00000000 		.4byte	.LFB72
 1989 02cd 58000000 		.4byte	.LFE72-.LFB72
 1990 02d1 01       		.uleb128 0x1
 1991 02d2 9C       		.byte	0x9c
 1992 02d3 1B       		.uleb128 0x1b
 1993 02d4 2D000000 		.4byte	.LASF43
 1994 02d8 01       		.byte	0x1
 1995 02d9 B001     		.2byte	0x1b0
 1996 02db 68000000 		.4byte	0x68
 1997 02df 00000000 		.4byte	.LFB73
 1998 02e3 36000000 		.4byte	.LFE73-.LFB73
 1999 02e7 01       		.uleb128 0x1
 2000 02e8 9C       		.byte	0x9c
 2001 02e9 19030000 		.4byte	0x319
 2002 02ed 17       		.uleb128 0x17
 2003 02ee C6020000 		.4byte	.LASF44
 2004 02f2 01       		.byte	0x1
 2005 02f3 B201     		.2byte	0x1b2
 2006 02f5 19030000 		.4byte	0x319
 2007 02f9 02       		.uleb128 0x2
 2008 02fa 91       		.byte	0x91
 2009 02fb 74       		.sleb128 -12
 2010 02fc 17       		.uleb128 0x17
 2011 02fd CB030000 		.4byte	.LASF45
 2012 0301 01       		.byte	0x1
 2013 0302 B301     		.2byte	0x1b3
 2014 0304 19030000 		.4byte	0x319
 2015 0308 02       		.uleb128 0x2
 2016 0309 91       		.byte	0x91
 2017 030a 70       		.sleb128 -16
 2018 030b 15       		.uleb128 0x15
 2019 030c 6E00     		.ascii	"n\000"
 2020 030e 01       		.byte	0x1
 2021 030f B501     		.2byte	0x1b5
 2022 0311 68000000 		.4byte	0x68
 2023 0315 02       		.uleb128 0x2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 46


 2024 0316 91       		.byte	0x91
 2025 0317 6C       		.sleb128 -20
 2026 0318 00       		.byte	0
 2027 0319 1C       		.uleb128 0x1c
 2028 031a 68000000 		.4byte	0x68
 2029 031e 1D       		.uleb128 0x1d
 2030 031f 81020000 		.4byte	.LASF47
 2031 0323 01       		.byte	0x1
 2032 0324 C301     		.2byte	0x1c3
 2033 0326 00000000 		.4byte	.LFB74
 2034 032a B0000000 		.4byte	.LFE74-.LFB74
 2035 032e 01       		.uleb128 0x1
 2036 032f 9C       		.byte	0x9c
 2037 0330 5B030000 		.4byte	0x35b
 2038 0334 15       		.uleb128 0x15
 2039 0335 6900     		.ascii	"i\000"
 2040 0337 01       		.byte	0x1
 2041 0338 C501     		.2byte	0x1c5
 2042 033a 68000000 		.4byte	0x68
 2043 033e 02       		.uleb128 0x2
 2044 033f 91       		.byte	0x91
 2045 0340 74       		.sleb128 -12
 2046 0341 19       		.uleb128 0x19
 2047 0342 0C000000 		.4byte	.LBB3
 2048 0346 80000000 		.4byte	.LBE3-.LBB3
 2049 034a 17       		.uleb128 0x17
 2050 034b 1B040000 		.4byte	.LASF38
 2051 034f 01       		.byte	0x1
 2052 0350 C701     		.2byte	0x1c7
 2053 0352 81000000 		.4byte	0x81
 2054 0356 02       		.uleb128 0x2
 2055 0357 91       		.byte	0x91
 2056 0358 73       		.sleb128 -13
 2057 0359 00       		.byte	0
 2058 035a 00       		.byte	0
 2059 035b 12       		.uleb128 0x12
 2060 035c A8000000 		.4byte	.LASF48
 2061 0360 01       		.byte	0x1
 2062 0361 E401     		.2byte	0x1e4
 2063 0363 00000000 		.4byte	.LFB75
 2064 0367 3C000000 		.4byte	.LFE75-.LFB75
 2065 036b 01       		.uleb128 0x1
 2066 036c 9C       		.byte	0x9c
 2067 036d 18       		.uleb128 0x18
 2068 036e F5010000 		.4byte	.LASF49
 2069 0372 01       		.byte	0x1
 2070 0373 EB01     		.2byte	0x1eb
 2071 0375 00000000 		.4byte	.LFB76
 2072 0379 38000000 		.4byte	.LFE76-.LFB76
 2073 037d 01       		.uleb128 0x1
 2074 037e 9C       		.byte	0x9c
 2075 037f 91030000 		.4byte	0x391
 2076 0383 15       		.uleb128 0x15
 2077 0384 6900     		.ascii	"i\000"
 2078 0386 01       		.byte	0x1
 2079 0387 EC01     		.2byte	0x1ec
 2080 0389 68000000 		.4byte	0x68
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 47


 2081 038d 02       		.uleb128 0x2
 2082 038e 91       		.byte	0x91
 2083 038f 74       		.sleb128 -12
 2084 0390 00       		.byte	0
 2085 0391 1E       		.uleb128 0x1e
 2086 0392 9C000000 		.4byte	.LASF50
 2087 0396 01       		.byte	0x1
 2088 0397 F501     		.2byte	0x1f5
 2089 0399 A7030000 		.4byte	0x3a7
 2090 039d 00000000 		.4byte	.LFB77
 2091 03a1 60000000 		.4byte	.LFE77-.LFB77
 2092 03a5 01       		.uleb128 0x1
 2093 03a6 9C       		.byte	0x9c
 2094 03a7 02       		.uleb128 0x2
 2095 03a8 01       		.byte	0x1
 2096 03a9 02       		.byte	0x2
 2097 03aa 23030000 		.4byte	.LASF51
 2098 03ae 1F       		.uleb128 0x1f
 2099 03af 0E040000 		.4byte	.LASF52
 2100 03b3 06       		.byte	0x6
 2101 03b4 2A06     		.2byte	0x62a
 2102 03b6 BA030000 		.4byte	0x3ba
 2103 03ba 06       		.uleb128 0x6
 2104 03bb 76000000 		.4byte	0x76
 2105 03bf 10       		.uleb128 0x10
 2106 03c0 68000000 		.4byte	0x68
 2107 03c4 D0030000 		.4byte	0x3d0
 2108 03c8 20       		.uleb128 0x20
 2109 03c9 BD000000 		.4byte	0xbd
 2110 03cd 5F03     		.2byte	0x35f
 2111 03cf 00       		.byte	0
 2112 03d0 21       		.uleb128 0x21
 2113 03d1 84000000 		.4byte	.LASF53
 2114 03d5 01       		.byte	0x1
 2115 03d6 1E       		.byte	0x1e
 2116 03d7 BF030000 		.4byte	0x3bf
 2117 03db 05       		.uleb128 0x5
 2118 03dc 03       		.byte	0x3
 2119 03dd 00000000 		.4byte	diffManEncodedData
 2120 03e1 10       		.uleb128 0x10
 2121 03e2 81000000 		.4byte	0x81
 2122 03e6 F1030000 		.4byte	0x3f1
 2123 03ea 11       		.uleb128 0x11
 2124 03eb BD000000 		.4byte	0xbd
 2125 03ef 6B       		.byte	0x6b
 2126 03f0 00       		.byte	0
 2127 03f1 21       		.uleb128 0x21
 2128 03f2 6E030000 		.4byte	.LASF54
 2129 03f6 01       		.byte	0x1
 2130 03f7 1F       		.byte	0x1f
 2131 03f8 E1030000 		.4byte	0x3e1
 2132 03fc 05       		.uleb128 0x5
 2133 03fd 03       		.byte	0x3
 2134 03fe 00000000 		.4byte	diffManReceivedData
 2135 0402 21       		.uleb128 0x21
 2136 0403 82030000 		.4byte	.LASF55
 2137 0407 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 48


 2138 0408 20       		.byte	0x20
 2139 0409 B0010000 		.4byte	0x1b0
 2140 040d 05       		.uleb128 0x5
 2141 040e 03       		.byte	0x3
 2142 040f 00000000 		.4byte	rxChar
 2143 0413 21       		.uleb128 0x21
 2144 0414 9D020000 		.4byte	.LASF56
 2145 0418 01       		.byte	0x1
 2146 0419 21       		.byte	0x21
 2147 041a 68000000 		.4byte	0x68
 2148 041e 05       		.uleb128 0x5
 2149 041f 03       		.byte	0x3
 2150 0420 00000000 		.4byte	receivedDataIndex
 2151 0424 21       		.uleb128 0x21
 2152 0425 2E030000 		.4byte	.LASF57
 2153 0429 01       		.byte	0x1
 2154 042a 21       		.byte	0x21
 2155 042b 68000000 		.4byte	0x68
 2156 042f 05       		.uleb128 0x5
 2157 0430 03       		.byte	0x3
 2158 0431 00000000 		.4byte	receivedDataCount
 2159 0435 21       		.uleb128 0x21
 2160 0436 BE030000 		.4byte	.LASF58
 2161 043a 01       		.byte	0x1
 2162 043b 22       		.byte	0x22
 2163 043c 68000000 		.4byte	0x68
 2164 0440 05       		.uleb128 0x5
 2165 0441 03       		.byte	0x3
 2166 0442 00000000 		.4byte	halfBitIndex
 2167 0446 21       		.uleb128 0x21
 2168 0447 1D020000 		.4byte	.LASF59
 2169 044b 01       		.byte	0x1
 2170 044c 22       		.byte	0x22
 2171 044d 68000000 		.4byte	0x68
 2172 0451 05       		.uleb128 0x5
 2173 0452 03       		.byte	0x3
 2174 0453 00000000 		.4byte	currentDataPos
 2175 0457 21       		.uleb128 0x21
 2176 0458 2C020000 		.4byte	.LASF60
 2177 045c 01       		.byte	0x1
 2178 045d 22       		.byte	0x22
 2179 045e 68000000 		.4byte	0x68
 2180 0462 05       		.uleb128 0x5
 2181 0463 03       		.byte	0x3
 2182 0464 00000000 		.4byte	currentRXCharPosition
 2183 0468 21       		.uleb128 0x21
 2184 0469 DB030000 		.4byte	.LASF61
 2185 046d 01       		.byte	0x1
 2186 046e 22       		.byte	0x22
 2187 046f 68000000 		.4byte	0x68
 2188 0473 05       		.uleb128 0x5
 2189 0474 03       		.byte	0x3
 2190 0475 00000000 		.4byte	lengthOfData
 2191 0479 21       		.uleb128 0x21
 2192 047a 60030000 		.4byte	.LASF62
 2193 047e 01       		.byte	0x1
 2194 047f 22       		.byte	0x22
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 49


 2195 0480 68000000 		.4byte	0x68
 2196 0484 05       		.uleb128 0x5
 2197 0485 03       		.byte	0x3
 2198 0486 00000000 		.4byte	messageLength
 2199 048a 21       		.uleb128 0x21
 2200 048b D1030000 		.4byte	.LASF63
 2201 048f 01       		.byte	0x1
 2202 0490 22       		.byte	0x22
 2203 0491 68000000 		.4byte	0x68
 2204 0495 05       		.uleb128 0x5
 2205 0496 03       		.byte	0x3
 2206 0497 00000000 		.4byte	headerCRC
 2207 049b 21       		.uleb128 0x21
 2208 049c 3A010000 		.4byte	.LASF64
 2209 04a0 01       		.byte	0x1
 2210 04a1 22       		.byte	0x22
 2211 04a2 68000000 		.4byte	0x68
 2212 04a6 05       		.uleb128 0x5
 2213 04a7 03       		.byte	0x3
 2214 04a8 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2215 04ac 21       		.uleb128 0x21
 2216 04ad 2B040000 		.4byte	.LASF65
 2217 04b1 01       		.byte	0x1
 2218 04b2 23       		.byte	0x23
 2219 04b3 A7030000 		.4byte	0x3a7
 2220 04b7 05       		.uleb128 0x5
 2221 04b8 03       		.byte	0x3
 2222 04b9 00000000 		.4byte	timerExpired
 2223 04bd 21       		.uleb128 0x21
 2224 04be E8030000 		.4byte	.LASF66
 2225 04c2 01       		.byte	0x1
 2226 04c3 23       		.byte	0x23
 2227 04c4 A7030000 		.4byte	0x3a7
 2228 04c8 05       		.uleb128 0x5
 2229 04c9 03       		.byte	0x3
 2230 04ca 00000000 		.4byte	dataTransmissionComplete
 2231 04ce 21       		.uleb128 0x21
 2232 04cf 38040000 		.4byte	.LASF67
 2233 04d3 01       		.byte	0x1
 2234 04d4 23       		.byte	0x23
 2235 04d5 A7030000 		.4byte	0x3a7
 2236 04d9 05       		.uleb128 0x5
 2237 04da 03       		.byte	0x3
 2238 04db 00000000 		.4byte	powerOnEdge
 2239 04df 21       		.uleb128 0x21
 2240 04e0 54030000 		.4byte	.LASF68
 2241 04e4 01       		.byte	0x1
 2242 04e5 23       		.byte	0x23
 2243 04e6 A7030000 		.4byte	0x3a7
 2244 04ea 05       		.uleb128 0x5
 2245 04eb 03       		.byte	0x3
 2246 04ec 00000000 		.4byte	headerValid
 2247 04f0 21       		.uleb128 0x21
 2248 04f1 E1000000 		.4byte	.LASF69
 2249 04f5 01       		.byte	0x1
 2250 04f6 24       		.byte	0x24
 2251 04f7 D5000000 		.4byte	0xd5
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 50


 2252 04fb 05       		.uleb128 0x5
 2253 04fc 03       		.byte	0x3
 2254 04fd 00000000 		.4byte	networkState
 2255 0501 21       		.uleb128 0x21
 2256 0502 B2000000 		.4byte	.LASF70
 2257 0506 01       		.byte	0x1
 2258 0507 25       		.byte	0x25
 2259 0508 F4000000 		.4byte	0xf4
 2260 050c 05       		.uleb128 0x5
 2261 050d 03       		.byte	0x3
 2262 050e 00000000 		.4byte	crcState
 2263 0512 21       		.uleb128 0x21
 2264 0513 DB020000 		.4byte	.LASF71
 2265 0517 01       		.byte	0x1
 2266 0518 27       		.byte	0x27
 2267 0519 A5000000 		.4byte	0xa5
 2268 051d 05       		.uleb128 0x5
 2269 051e 03       		.byte	0x3
 2270 051f 00000000 		.4byte	receivedChar
 2271 0523 00       		.byte	0
 2272              		.section	.debug_abbrev,"",%progbits
 2273              	.Ldebug_abbrev0:
 2274 0000 01       		.uleb128 0x1
 2275 0001 11       		.uleb128 0x11
 2276 0002 01       		.byte	0x1
 2277 0003 25       		.uleb128 0x25
 2278 0004 0E       		.uleb128 0xe
 2279 0005 13       		.uleb128 0x13
 2280 0006 0B       		.uleb128 0xb
 2281 0007 03       		.uleb128 0x3
 2282 0008 0E       		.uleb128 0xe
 2283 0009 1B       		.uleb128 0x1b
 2284 000a 0E       		.uleb128 0xe
 2285 000b 55       		.uleb128 0x55
 2286 000c 17       		.uleb128 0x17
 2287 000d 11       		.uleb128 0x11
 2288 000e 01       		.uleb128 0x1
 2289 000f 10       		.uleb128 0x10
 2290 0010 17       		.uleb128 0x17
 2291 0011 00       		.byte	0
 2292 0012 00       		.byte	0
 2293 0013 02       		.uleb128 0x2
 2294 0014 24       		.uleb128 0x24
 2295 0015 00       		.byte	0
 2296 0016 0B       		.uleb128 0xb
 2297 0017 0B       		.uleb128 0xb
 2298 0018 3E       		.uleb128 0x3e
 2299 0019 0B       		.uleb128 0xb
 2300 001a 03       		.uleb128 0x3
 2301 001b 0E       		.uleb128 0xe
 2302 001c 00       		.byte	0
 2303 001d 00       		.byte	0
 2304 001e 03       		.uleb128 0x3
 2305 001f 16       		.uleb128 0x16
 2306 0020 00       		.byte	0
 2307 0021 03       		.uleb128 0x3
 2308 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 51


 2309 0023 3A       		.uleb128 0x3a
 2310 0024 0B       		.uleb128 0xb
 2311 0025 3B       		.uleb128 0x3b
 2312 0026 0B       		.uleb128 0xb
 2313 0027 49       		.uleb128 0x49
 2314 0028 13       		.uleb128 0x13
 2315 0029 00       		.byte	0
 2316 002a 00       		.byte	0
 2317 002b 04       		.uleb128 0x4
 2318 002c 24       		.uleb128 0x24
 2319 002d 00       		.byte	0
 2320 002e 0B       		.uleb128 0xb
 2321 002f 0B       		.uleb128 0xb
 2322 0030 3E       		.uleb128 0x3e
 2323 0031 0B       		.uleb128 0xb
 2324 0032 03       		.uleb128 0x3
 2325 0033 08       		.uleb128 0x8
 2326 0034 00       		.byte	0
 2327 0035 00       		.byte	0
 2328 0036 05       		.uleb128 0x5
 2329 0037 16       		.uleb128 0x16
 2330 0038 00       		.byte	0
 2331 0039 03       		.uleb128 0x3
 2332 003a 0E       		.uleb128 0xe
 2333 003b 3A       		.uleb128 0x3a
 2334 003c 0B       		.uleb128 0xb
 2335 003d 3B       		.uleb128 0x3b
 2336 003e 05       		.uleb128 0x5
 2337 003f 49       		.uleb128 0x49
 2338 0040 13       		.uleb128 0x13
 2339 0041 00       		.byte	0
 2340 0042 00       		.byte	0
 2341 0043 06       		.uleb128 0x6
 2342 0044 35       		.uleb128 0x35
 2343 0045 00       		.byte	0
 2344 0046 49       		.uleb128 0x49
 2345 0047 13       		.uleb128 0x13
 2346 0048 00       		.byte	0
 2347 0049 00       		.byte	0
 2348 004a 07       		.uleb128 0x7
 2349 004b 0F       		.uleb128 0xf
 2350 004c 00       		.byte	0
 2351 004d 0B       		.uleb128 0xb
 2352 004e 0B       		.uleb128 0xb
 2353 004f 49       		.uleb128 0x49
 2354 0050 13       		.uleb128 0x13
 2355 0051 00       		.byte	0
 2356 0052 00       		.byte	0
 2357 0053 08       		.uleb128 0x8
 2358 0054 04       		.uleb128 0x4
 2359 0055 01       		.byte	0x1
 2360 0056 03       		.uleb128 0x3
 2361 0057 0E       		.uleb128 0xe
 2362 0058 0B       		.uleb128 0xb
 2363 0059 0B       		.uleb128 0xb
 2364 005a 3A       		.uleb128 0x3a
 2365 005b 0B       		.uleb128 0xb
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 52


 2366 005c 3B       		.uleb128 0x3b
 2367 005d 0B       		.uleb128 0xb
 2368 005e 01       		.uleb128 0x1
 2369 005f 13       		.uleb128 0x13
 2370 0060 00       		.byte	0
 2371 0061 00       		.byte	0
 2372 0062 09       		.uleb128 0x9
 2373 0063 28       		.uleb128 0x28
 2374 0064 00       		.byte	0
 2375 0065 03       		.uleb128 0x3
 2376 0066 0E       		.uleb128 0xe
 2377 0067 1C       		.uleb128 0x1c
 2378 0068 0D       		.uleb128 0xd
 2379 0069 00       		.byte	0
 2380 006a 00       		.byte	0
 2381 006b 0A       		.uleb128 0xa
 2382 006c 04       		.uleb128 0x4
 2383 006d 01       		.byte	0x1
 2384 006e 03       		.uleb128 0x3
 2385 006f 08       		.uleb128 0x8
 2386 0070 0B       		.uleb128 0xb
 2387 0071 0B       		.uleb128 0xb
 2388 0072 3A       		.uleb128 0x3a
 2389 0073 0B       		.uleb128 0xb
 2390 0074 3B       		.uleb128 0x3b
 2391 0075 0B       		.uleb128 0xb
 2392 0076 01       		.uleb128 0x1
 2393 0077 13       		.uleb128 0x13
 2394 0078 00       		.byte	0
 2395 0079 00       		.byte	0
 2396 007a 0B       		.uleb128 0xb
 2397 007b 2E       		.uleb128 0x2e
 2398 007c 00       		.byte	0
 2399 007d 3F       		.uleb128 0x3f
 2400 007e 19       		.uleb128 0x19
 2401 007f 03       		.uleb128 0x3
 2402 0080 0E       		.uleb128 0xe
 2403 0081 3A       		.uleb128 0x3a
 2404 0082 0B       		.uleb128 0xb
 2405 0083 3B       		.uleb128 0x3b
 2406 0084 0B       		.uleb128 0xb
 2407 0085 27       		.uleb128 0x27
 2408 0086 19       		.uleb128 0x19
 2409 0087 11       		.uleb128 0x11
 2410 0088 01       		.uleb128 0x1
 2411 0089 12       		.uleb128 0x12
 2412 008a 06       		.uleb128 0x6
 2413 008b 40       		.uleb128 0x40
 2414 008c 18       		.uleb128 0x18
 2415 008d 9642     		.uleb128 0x2116
 2416 008f 19       		.uleb128 0x19
 2417 0090 00       		.byte	0
 2418 0091 00       		.byte	0
 2419 0092 0C       		.uleb128 0xc
 2420 0093 2E       		.uleb128 0x2e
 2421 0094 00       		.byte	0
 2422 0095 3F       		.uleb128 0x3f
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 53


 2423 0096 19       		.uleb128 0x19
 2424 0097 03       		.uleb128 0x3
 2425 0098 0E       		.uleb128 0xe
 2426 0099 3A       		.uleb128 0x3a
 2427 009a 0B       		.uleb128 0xb
 2428 009b 3B       		.uleb128 0x3b
 2429 009c 0B       		.uleb128 0xb
 2430 009d 27       		.uleb128 0x27
 2431 009e 19       		.uleb128 0x19
 2432 009f 11       		.uleb128 0x11
 2433 00a0 01       		.uleb128 0x1
 2434 00a1 12       		.uleb128 0x12
 2435 00a2 06       		.uleb128 0x6
 2436 00a3 40       		.uleb128 0x40
 2437 00a4 18       		.uleb128 0x18
 2438 00a5 9742     		.uleb128 0x2117
 2439 00a7 19       		.uleb128 0x19
 2440 00a8 00       		.byte	0
 2441 00a9 00       		.byte	0
 2442 00aa 0D       		.uleb128 0xd
 2443 00ab 2E       		.uleb128 0x2e
 2444 00ac 01       		.byte	0x1
 2445 00ad 3F       		.uleb128 0x3f
 2446 00ae 19       		.uleb128 0x19
 2447 00af 03       		.uleb128 0x3
 2448 00b0 0E       		.uleb128 0xe
 2449 00b1 3A       		.uleb128 0x3a
 2450 00b2 0B       		.uleb128 0xb
 2451 00b3 3B       		.uleb128 0x3b
 2452 00b4 0B       		.uleb128 0xb
 2453 00b5 49       		.uleb128 0x49
 2454 00b6 13       		.uleb128 0x13
 2455 00b7 11       		.uleb128 0x11
 2456 00b8 01       		.uleb128 0x1
 2457 00b9 12       		.uleb128 0x12
 2458 00ba 06       		.uleb128 0x6
 2459 00bb 40       		.uleb128 0x40
 2460 00bc 18       		.uleb128 0x18
 2461 00bd 9642     		.uleb128 0x2116
 2462 00bf 19       		.uleb128 0x19
 2463 00c0 01       		.uleb128 0x1
 2464 00c1 13       		.uleb128 0x13
 2465 00c2 00       		.byte	0
 2466 00c3 00       		.byte	0
 2467 00c4 0E       		.uleb128 0xe
 2468 00c5 34       		.uleb128 0x34
 2469 00c6 00       		.byte	0
 2470 00c7 03       		.uleb128 0x3
 2471 00c8 08       		.uleb128 0x8
 2472 00c9 3A       		.uleb128 0x3a
 2473 00ca 0B       		.uleb128 0xb
 2474 00cb 3B       		.uleb128 0x3b
 2475 00cc 0B       		.uleb128 0xb
 2476 00cd 49       		.uleb128 0x49
 2477 00ce 13       		.uleb128 0x13
 2478 00cf 02       		.uleb128 0x2
 2479 00d0 18       		.uleb128 0x18
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 54


 2480 00d1 00       		.byte	0
 2481 00d2 00       		.byte	0
 2482 00d3 0F       		.uleb128 0xf
 2483 00d4 34       		.uleb128 0x34
 2484 00d5 00       		.byte	0
 2485 00d6 03       		.uleb128 0x3
 2486 00d7 0E       		.uleb128 0xe
 2487 00d8 3A       		.uleb128 0x3a
 2488 00d9 0B       		.uleb128 0xb
 2489 00da 3B       		.uleb128 0x3b
 2490 00db 0B       		.uleb128 0xb
 2491 00dc 49       		.uleb128 0x49
 2492 00dd 13       		.uleb128 0x13
 2493 00de 02       		.uleb128 0x2
 2494 00df 18       		.uleb128 0x18
 2495 00e0 00       		.byte	0
 2496 00e1 00       		.byte	0
 2497 00e2 10       		.uleb128 0x10
 2498 00e3 01       		.uleb128 0x1
 2499 00e4 01       		.byte	0x1
 2500 00e5 49       		.uleb128 0x49
 2501 00e6 13       		.uleb128 0x13
 2502 00e7 01       		.uleb128 0x1
 2503 00e8 13       		.uleb128 0x13
 2504 00e9 00       		.byte	0
 2505 00ea 00       		.byte	0
 2506 00eb 11       		.uleb128 0x11
 2507 00ec 21       		.uleb128 0x21
 2508 00ed 00       		.byte	0
 2509 00ee 49       		.uleb128 0x49
 2510 00ef 13       		.uleb128 0x13
 2511 00f0 2F       		.uleb128 0x2f
 2512 00f1 0B       		.uleb128 0xb
 2513 00f2 00       		.byte	0
 2514 00f3 00       		.byte	0
 2515 00f4 12       		.uleb128 0x12
 2516 00f5 2E       		.uleb128 0x2e
 2517 00f6 00       		.byte	0
 2518 00f7 3F       		.uleb128 0x3f
 2519 00f8 19       		.uleb128 0x19
 2520 00f9 03       		.uleb128 0x3
 2521 00fa 0E       		.uleb128 0xe
 2522 00fb 3A       		.uleb128 0x3a
 2523 00fc 0B       		.uleb128 0xb
 2524 00fd 3B       		.uleb128 0x3b
 2525 00fe 05       		.uleb128 0x5
 2526 00ff 11       		.uleb128 0x11
 2527 0100 01       		.uleb128 0x1
 2528 0101 12       		.uleb128 0x12
 2529 0102 06       		.uleb128 0x6
 2530 0103 40       		.uleb128 0x40
 2531 0104 18       		.uleb128 0x18
 2532 0105 9742     		.uleb128 0x2117
 2533 0107 19       		.uleb128 0x19
 2534 0108 00       		.byte	0
 2535 0109 00       		.byte	0
 2536 010a 13       		.uleb128 0x13
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 55


 2537 010b 2E       		.uleb128 0x2e
 2538 010c 01       		.byte	0x1
 2539 010d 3F       		.uleb128 0x3f
 2540 010e 19       		.uleb128 0x19
 2541 010f 03       		.uleb128 0x3
 2542 0110 0E       		.uleb128 0xe
 2543 0111 3A       		.uleb128 0x3a
 2544 0112 0B       		.uleb128 0xb
 2545 0113 3B       		.uleb128 0x3b
 2546 0114 05       		.uleb128 0x5
 2547 0115 27       		.uleb128 0x27
 2548 0116 19       		.uleb128 0x19
 2549 0117 11       		.uleb128 0x11
 2550 0118 01       		.uleb128 0x1
 2551 0119 12       		.uleb128 0x12
 2552 011a 06       		.uleb128 0x6
 2553 011b 40       		.uleb128 0x40
 2554 011c 18       		.uleb128 0x18
 2555 011d 9642     		.uleb128 0x2116
 2556 011f 19       		.uleb128 0x19
 2557 0120 01       		.uleb128 0x1
 2558 0121 13       		.uleb128 0x13
 2559 0122 00       		.byte	0
 2560 0123 00       		.byte	0
 2561 0124 14       		.uleb128 0x14
 2562 0125 05       		.uleb128 0x5
 2563 0126 00       		.byte	0
 2564 0127 03       		.uleb128 0x3
 2565 0128 0E       		.uleb128 0xe
 2566 0129 3A       		.uleb128 0x3a
 2567 012a 0B       		.uleb128 0xb
 2568 012b 3B       		.uleb128 0x3b
 2569 012c 05       		.uleb128 0x5
 2570 012d 49       		.uleb128 0x49
 2571 012e 13       		.uleb128 0x13
 2572 012f 02       		.uleb128 0x2
 2573 0130 18       		.uleb128 0x18
 2574 0131 00       		.byte	0
 2575 0132 00       		.byte	0
 2576 0133 15       		.uleb128 0x15
 2577 0134 34       		.uleb128 0x34
 2578 0135 00       		.byte	0
 2579 0136 03       		.uleb128 0x3
 2580 0137 08       		.uleb128 0x8
 2581 0138 3A       		.uleb128 0x3a
 2582 0139 0B       		.uleb128 0xb
 2583 013a 3B       		.uleb128 0x3b
 2584 013b 05       		.uleb128 0x5
 2585 013c 49       		.uleb128 0x49
 2586 013d 13       		.uleb128 0x13
 2587 013e 02       		.uleb128 0x2
 2588 013f 18       		.uleb128 0x18
 2589 0140 00       		.byte	0
 2590 0141 00       		.byte	0
 2591 0142 16       		.uleb128 0x16
 2592 0143 2E       		.uleb128 0x2e
 2593 0144 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 56


 2594 0145 3F       		.uleb128 0x3f
 2595 0146 19       		.uleb128 0x19
 2596 0147 03       		.uleb128 0x3
 2597 0148 0E       		.uleb128 0xe
 2598 0149 3A       		.uleb128 0x3a
 2599 014a 0B       		.uleb128 0xb
 2600 014b 3B       		.uleb128 0x3b
 2601 014c 05       		.uleb128 0x5
 2602 014d 27       		.uleb128 0x27
 2603 014e 19       		.uleb128 0x19
 2604 014f 11       		.uleb128 0x11
 2605 0150 01       		.uleb128 0x1
 2606 0151 12       		.uleb128 0x12
 2607 0152 06       		.uleb128 0x6
 2608 0153 40       		.uleb128 0x40
 2609 0154 18       		.uleb128 0x18
 2610 0155 9742     		.uleb128 0x2117
 2611 0157 19       		.uleb128 0x19
 2612 0158 01       		.uleb128 0x1
 2613 0159 13       		.uleb128 0x13
 2614 015a 00       		.byte	0
 2615 015b 00       		.byte	0
 2616 015c 17       		.uleb128 0x17
 2617 015d 34       		.uleb128 0x34
 2618 015e 00       		.byte	0
 2619 015f 03       		.uleb128 0x3
 2620 0160 0E       		.uleb128 0xe
 2621 0161 3A       		.uleb128 0x3a
 2622 0162 0B       		.uleb128 0xb
 2623 0163 3B       		.uleb128 0x3b
 2624 0164 05       		.uleb128 0x5
 2625 0165 49       		.uleb128 0x49
 2626 0166 13       		.uleb128 0x13
 2627 0167 02       		.uleb128 0x2
 2628 0168 18       		.uleb128 0x18
 2629 0169 00       		.byte	0
 2630 016a 00       		.byte	0
 2631 016b 18       		.uleb128 0x18
 2632 016c 2E       		.uleb128 0x2e
 2633 016d 01       		.byte	0x1
 2634 016e 3F       		.uleb128 0x3f
 2635 016f 19       		.uleb128 0x19
 2636 0170 03       		.uleb128 0x3
 2637 0171 0E       		.uleb128 0xe
 2638 0172 3A       		.uleb128 0x3a
 2639 0173 0B       		.uleb128 0xb
 2640 0174 3B       		.uleb128 0x3b
 2641 0175 05       		.uleb128 0x5
 2642 0176 11       		.uleb128 0x11
 2643 0177 01       		.uleb128 0x1
 2644 0178 12       		.uleb128 0x12
 2645 0179 06       		.uleb128 0x6
 2646 017a 40       		.uleb128 0x40
 2647 017b 18       		.uleb128 0x18
 2648 017c 9642     		.uleb128 0x2116
 2649 017e 19       		.uleb128 0x19
 2650 017f 01       		.uleb128 0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 57


 2651 0180 13       		.uleb128 0x13
 2652 0181 00       		.byte	0
 2653 0182 00       		.byte	0
 2654 0183 19       		.uleb128 0x19
 2655 0184 0B       		.uleb128 0xb
 2656 0185 01       		.byte	0x1
 2657 0186 11       		.uleb128 0x11
 2658 0187 01       		.uleb128 0x1
 2659 0188 12       		.uleb128 0x12
 2660 0189 06       		.uleb128 0x6
 2661 018a 00       		.byte	0
 2662 018b 00       		.byte	0
 2663 018c 1A       		.uleb128 0x1a
 2664 018d 2E       		.uleb128 0x2e
 2665 018e 00       		.byte	0
 2666 018f 3F       		.uleb128 0x3f
 2667 0190 19       		.uleb128 0x19
 2668 0191 03       		.uleb128 0x3
 2669 0192 0E       		.uleb128 0xe
 2670 0193 3A       		.uleb128 0x3a
 2671 0194 0B       		.uleb128 0xb
 2672 0195 3B       		.uleb128 0x3b
 2673 0196 05       		.uleb128 0x5
 2674 0197 11       		.uleb128 0x11
 2675 0198 01       		.uleb128 0x1
 2676 0199 12       		.uleb128 0x12
 2677 019a 06       		.uleb128 0x6
 2678 019b 40       		.uleb128 0x40
 2679 019c 18       		.uleb128 0x18
 2680 019d 9642     		.uleb128 0x2116
 2681 019f 19       		.uleb128 0x19
 2682 01a0 00       		.byte	0
 2683 01a1 00       		.byte	0
 2684 01a2 1B       		.uleb128 0x1b
 2685 01a3 2E       		.uleb128 0x2e
 2686 01a4 01       		.byte	0x1
 2687 01a5 3F       		.uleb128 0x3f
 2688 01a6 19       		.uleb128 0x19
 2689 01a7 03       		.uleb128 0x3
 2690 01a8 0E       		.uleb128 0xe
 2691 01a9 3A       		.uleb128 0x3a
 2692 01aa 0B       		.uleb128 0xb
 2693 01ab 3B       		.uleb128 0x3b
 2694 01ac 05       		.uleb128 0x5
 2695 01ad 49       		.uleb128 0x49
 2696 01ae 13       		.uleb128 0x13
 2697 01af 11       		.uleb128 0x11
 2698 01b0 01       		.uleb128 0x1
 2699 01b1 12       		.uleb128 0x12
 2700 01b2 06       		.uleb128 0x6
 2701 01b3 40       		.uleb128 0x40
 2702 01b4 18       		.uleb128 0x18
 2703 01b5 9642     		.uleb128 0x2116
 2704 01b7 19       		.uleb128 0x19
 2705 01b8 01       		.uleb128 0x1
 2706 01b9 13       		.uleb128 0x13
 2707 01ba 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 58


 2708 01bb 00       		.byte	0
 2709 01bc 1C       		.uleb128 0x1c
 2710 01bd 26       		.uleb128 0x26
 2711 01be 00       		.byte	0
 2712 01bf 49       		.uleb128 0x49
 2713 01c0 13       		.uleb128 0x13
 2714 01c1 00       		.byte	0
 2715 01c2 00       		.byte	0
 2716 01c3 1D       		.uleb128 0x1d
 2717 01c4 2E       		.uleb128 0x2e
 2718 01c5 01       		.byte	0x1
 2719 01c6 3F       		.uleb128 0x3f
 2720 01c7 19       		.uleb128 0x19
 2721 01c8 03       		.uleb128 0x3
 2722 01c9 0E       		.uleb128 0xe
 2723 01ca 3A       		.uleb128 0x3a
 2724 01cb 0B       		.uleb128 0xb
 2725 01cc 3B       		.uleb128 0x3b
 2726 01cd 05       		.uleb128 0x5
 2727 01ce 11       		.uleb128 0x11
 2728 01cf 01       		.uleb128 0x1
 2729 01d0 12       		.uleb128 0x12
 2730 01d1 06       		.uleb128 0x6
 2731 01d2 40       		.uleb128 0x40
 2732 01d3 18       		.uleb128 0x18
 2733 01d4 9742     		.uleb128 0x2117
 2734 01d6 19       		.uleb128 0x19
 2735 01d7 01       		.uleb128 0x1
 2736 01d8 13       		.uleb128 0x13
 2737 01d9 00       		.byte	0
 2738 01da 00       		.byte	0
 2739 01db 1E       		.uleb128 0x1e
 2740 01dc 2E       		.uleb128 0x2e
 2741 01dd 00       		.byte	0
 2742 01de 3F       		.uleb128 0x3f
 2743 01df 19       		.uleb128 0x19
 2744 01e0 03       		.uleb128 0x3
 2745 01e1 0E       		.uleb128 0xe
 2746 01e2 3A       		.uleb128 0x3a
 2747 01e3 0B       		.uleb128 0xb
 2748 01e4 3B       		.uleb128 0x3b
 2749 01e5 05       		.uleb128 0x5
 2750 01e6 49       		.uleb128 0x49
 2751 01e7 13       		.uleb128 0x13
 2752 01e8 11       		.uleb128 0x11
 2753 01e9 01       		.uleb128 0x1
 2754 01ea 12       		.uleb128 0x12
 2755 01eb 06       		.uleb128 0x6
 2756 01ec 40       		.uleb128 0x40
 2757 01ed 18       		.uleb128 0x18
 2758 01ee 9642     		.uleb128 0x2116
 2759 01f0 19       		.uleb128 0x19
 2760 01f1 00       		.byte	0
 2761 01f2 00       		.byte	0
 2762 01f3 1F       		.uleb128 0x1f
 2763 01f4 34       		.uleb128 0x34
 2764 01f5 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 59


 2765 01f6 03       		.uleb128 0x3
 2766 01f7 0E       		.uleb128 0xe
 2767 01f8 3A       		.uleb128 0x3a
 2768 01f9 0B       		.uleb128 0xb
 2769 01fa 3B       		.uleb128 0x3b
 2770 01fb 05       		.uleb128 0x5
 2771 01fc 49       		.uleb128 0x49
 2772 01fd 13       		.uleb128 0x13
 2773 01fe 3F       		.uleb128 0x3f
 2774 01ff 19       		.uleb128 0x19
 2775 0200 3C       		.uleb128 0x3c
 2776 0201 19       		.uleb128 0x19
 2777 0202 00       		.byte	0
 2778 0203 00       		.byte	0
 2779 0204 20       		.uleb128 0x20
 2780 0205 21       		.uleb128 0x21
 2781 0206 00       		.byte	0
 2782 0207 49       		.uleb128 0x49
 2783 0208 13       		.uleb128 0x13
 2784 0209 2F       		.uleb128 0x2f
 2785 020a 05       		.uleb128 0x5
 2786 020b 00       		.byte	0
 2787 020c 00       		.byte	0
 2788 020d 21       		.uleb128 0x21
 2789 020e 34       		.uleb128 0x34
 2790 020f 00       		.byte	0
 2791 0210 03       		.uleb128 0x3
 2792 0211 0E       		.uleb128 0xe
 2793 0212 3A       		.uleb128 0x3a
 2794 0213 0B       		.uleb128 0xb
 2795 0214 3B       		.uleb128 0x3b
 2796 0215 0B       		.uleb128 0xb
 2797 0216 49       		.uleb128 0x49
 2798 0217 13       		.uleb128 0x13
 2799 0218 3F       		.uleb128 0x3f
 2800 0219 19       		.uleb128 0x19
 2801 021a 02       		.uleb128 0x2
 2802 021b 18       		.uleb128 0x18
 2803 021c 00       		.byte	0
 2804 021d 00       		.byte	0
 2805 021e 00       		.byte	0
 2806              		.section	.debug_aranges,"",%progbits
 2807 0000 8C000000 		.4byte	0x8c
 2808 0004 0200     		.2byte	0x2
 2809 0006 00000000 		.4byte	.Ldebug_info0
 2810 000a 04       		.byte	0x4
 2811 000b 00       		.byte	0
 2812 000c 0000     		.2byte	0
 2813 000e 0000     		.2byte	0
 2814 0010 00000000 		.4byte	.LFB63
 2815 0014 28000000 		.4byte	.LFE63-.LFB63
 2816 0018 00000000 		.4byte	.LFB64
 2817 001c 58000000 		.4byte	.LFE64-.LFB64
 2818 0020 00000000 		.4byte	.LFB65
 2819 0024 1C000000 		.4byte	.LFE65-.LFB65
 2820 0028 00000000 		.4byte	.LFB66
 2821 002c 38000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 60


 2822 0030 00000000 		.4byte	.LFB67
 2823 0034 80020000 		.4byte	.LFE67-.LFB67
 2824 0038 00000000 		.4byte	.LFB68
 2825 003c 48000000 		.4byte	.LFE68-.LFB68
 2826 0040 00000000 		.4byte	.LFB69
 2827 0044 38000000 		.4byte	.LFE69-.LFB69
 2828 0048 00000000 		.4byte	.LFB70
 2829 004c C4010000 		.4byte	.LFE70-.LFB70
 2830 0050 00000000 		.4byte	.LFB71
 2831 0054 D8000000 		.4byte	.LFE71-.LFB71
 2832 0058 00000000 		.4byte	.LFB72
 2833 005c 58000000 		.4byte	.LFE72-.LFB72
 2834 0060 00000000 		.4byte	.LFB73
 2835 0064 36000000 		.4byte	.LFE73-.LFB73
 2836 0068 00000000 		.4byte	.LFB74
 2837 006c B0000000 		.4byte	.LFE74-.LFB74
 2838 0070 00000000 		.4byte	.LFB75
 2839 0074 3C000000 		.4byte	.LFE75-.LFB75
 2840 0078 00000000 		.4byte	.LFB76
 2841 007c 38000000 		.4byte	.LFE76-.LFB76
 2842 0080 00000000 		.4byte	.LFB77
 2843 0084 60000000 		.4byte	.LFE77-.LFB77
 2844 0088 00000000 		.4byte	0
 2845 008c 00000000 		.4byte	0
 2846              		.section	.debug_ranges,"",%progbits
 2847              	.Ldebug_ranges0:
 2848 0000 00000000 		.4byte	.LFB63
 2849 0004 28000000 		.4byte	.LFE63
 2850 0008 00000000 		.4byte	.LFB64
 2851 000c 58000000 		.4byte	.LFE64
 2852 0010 00000000 		.4byte	.LFB65
 2853 0014 1C000000 		.4byte	.LFE65
 2854 0018 00000000 		.4byte	.LFB66
 2855 001c 38000000 		.4byte	.LFE66
 2856 0020 00000000 		.4byte	.LFB67
 2857 0024 80020000 		.4byte	.LFE67
 2858 0028 00000000 		.4byte	.LFB68
 2859 002c 48000000 		.4byte	.LFE68
 2860 0030 00000000 		.4byte	.LFB69
 2861 0034 38000000 		.4byte	.LFE69
 2862 0038 00000000 		.4byte	.LFB70
 2863 003c C4010000 		.4byte	.LFE70
 2864 0040 00000000 		.4byte	.LFB71
 2865 0044 D8000000 		.4byte	.LFE71
 2866 0048 00000000 		.4byte	.LFB72
 2867 004c 58000000 		.4byte	.LFE72
 2868 0050 00000000 		.4byte	.LFB73
 2869 0054 36000000 		.4byte	.LFE73
 2870 0058 00000000 		.4byte	.LFB74
 2871 005c B0000000 		.4byte	.LFE74
 2872 0060 00000000 		.4byte	.LFB75
 2873 0064 3C000000 		.4byte	.LFE75
 2874 0068 00000000 		.4byte	.LFB76
 2875 006c 38000000 		.4byte	.LFE76
 2876 0070 00000000 		.4byte	.LFB77
 2877 0074 60000000 		.4byte	.LFE77
 2878 0078 00000000 		.4byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 61


 2879 007c 00000000 		.4byte	0
 2880              		.section	.debug_line,"",%progbits
 2881              	.Ldebug_line0:
 2882 0000 3D040000 		.section	.debug_str,"MS",%progbits,1
 2882      0200C001 
 2882      00000201 
 2882      FB0E0D00 
 2882      01010101 
 2883              	.LASF24:
 2884 0000 68656164 		.ascii	"header\000"
 2884      657200
 2885              	.LASF46:
 2886 0007 7472616E 		.ascii	"transmitData\000"
 2886      736D6974 
 2886      44617461 
 2886      00
 2887              	.LASF27:
 2888 0014 49646C65 		.ascii	"Idle_Collision_ISR\000"
 2888      5F436F6C 
 2888      6C697369 
 2888      6F6E5F49 
 2888      535200
 2889              	.LASF22:
 2890 0027 73746174 		.ascii	"state\000"
 2890      6500
 2891              	.LASF43:
 2892 002d 67657452 		.ascii	"getRandomNumber\000"
 2892      616E646F 
 2892      6D4E756D 
 2892      62657200 
 2893              	.LASF17:
 2894 003d 73697A65 		.ascii	"sizetype\000"
 2894      74797065 
 2894      00
 2895              	.LASF74:
 2896 0046 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\PSoC Creator\\USB_UART01\\"
 2896      635C486F 
 2896      6D655C44 
 2896      6F63756D 
 2896      656E7473 
 2897 0073 5553425F 		.ascii	"USB_UART01.cydsn\000"
 2897      55415254 
 2897      30312E63 
 2897      7964736E 
 2897      00
 2898              	.LASF53:
 2899 0084 64696666 		.ascii	"diffManEncodedData\000"
 2899      4D616E45 
 2899      6E636F64 
 2899      65644461 
 2899      746100
 2900              	.LASF34:
 2901 0097 6D61696E 		.ascii	"main\000"
 2901      00
 2902              	.LASF50:
 2903 009c 68656164 		.ascii	"headerCheck\000"
 2903      65724368 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 62


 2903      65636B00 
 2904              	.LASF48:
 2905 00a8 73746F72 		.ascii	"storeChar\000"
 2905      65436861 
 2905      7200
 2906              	.LASF70:
 2907 00b2 63726353 		.ascii	"crcState\000"
 2907      74617465 
 2907      00
 2908              	.LASF23:
 2909 00bb 6E6F6E65 		.ascii	"none\000"
 2909      00
 2910              	.LASF2:
 2911 00c0 73686F72 		.ascii	"short int\000"
 2911      7420696E 
 2911      7400
 2912              	.LASF40:
 2913 00ca 76616C75 		.ascii	"value\000"
 2913      6500
 2914              	.LASF21:
 2915 00d0 636F6C6C 		.ascii	"collision\000"
 2915      6973696F 
 2915      6E00
 2916              	.LASF12:
 2917 00da 75696E74 		.ascii	"uint16\000"
 2917      313600
 2918              	.LASF69:
 2919 00e1 6E657477 		.ascii	"networkState\000"
 2919      6F726B53 
 2919      74617465 
 2919      00
 2920              	.LASF11:
 2921 00ee 75696E74 		.ascii	"uint8\000"
 2921      3800
 2922              	.LASF31:
 2923 00f4 6C696E65 		.ascii	"lineString\000"
 2923      53747269 
 2923      6E6700
 2924              	.LASF28:
 2925 00ff 45646765 		.ascii	"Edge_detect_ISR\000"
 2925      5F646574 
 2925      6563745F 
 2925      49535200 
 2926              	.LASF13:
 2927 010f 666C6F61 		.ascii	"float\000"
 2927      7400
 2928              	.LASF6:
 2929 0115 6C6F6E67 		.ascii	"long long int\000"
 2929      206C6F6E 
 2929      6720696E 
 2929      7400
 2930              	.LASF7:
 2931 0123 6C6F6E67 		.ascii	"long long unsigned int\000"
 2931      206C6F6E 
 2931      6720756E 
 2931      7369676E 
 2931      65642069 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 63


 2932              	.LASF64:
 2933 013a 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 2933      45535449 
 2933      4E415449 
 2933      4F4E5F41 
 2933      44445245 
 2934              	.LASF72:
 2935 0151 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2935      4320342E 
 2935      392E3320 
 2935      32303135 
 2935      30333033 
 2936 0184 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2936      20726576 
 2936      6973696F 
 2936      6E203232 
 2936      31323230 
 2937 01b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2937      66756E63 
 2937      74696F6E 
 2937      2D736563 
 2937      74696F6E 
 2938              	.LASF42:
 2939 01df 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 2939      6574776F 
 2939      726B5374 
 2939      6174654F 
 2939      6E4C4544 
 2940              	.LASF49:
 2941 01f5 7072696E 		.ascii	"printChar\000"
 2941      74436861 
 2941      7200
 2942              	.LASF35:
 2943 01ff 73747269 		.ascii	"stringToDiffMan\000"
 2943      6E67546F 
 2943      44696666 
 2943      4D616E00 
 2944              	.LASF1:
 2945 020f 756E7369 		.ascii	"unsigned char\000"
 2945      676E6564 
 2945      20636861 
 2945      7200
 2946              	.LASF59:
 2947 021d 63757272 		.ascii	"currentDataPos\000"
 2947      656E7444 
 2947      61746150 
 2947      6F7300
 2948              	.LASF60:
 2949 022c 63757272 		.ascii	"currentRXCharPosition\000"
 2949      656E7452 
 2949      58436861 
 2949      72506F73 
 2949      6974696F 
 2950              	.LASF18:
 2951 0242 74696D65 		.ascii	"time_t\000"
 2951      5F7400
 2952              	.LASF41:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 64


 2953 0249 696E6974 		.ascii	"initDiffManEncodedArray\000"
 2953      44696666 
 2953      4D616E45 
 2953      6E636F64 
 2953      65644172 
 2954              	.LASF0:
 2955 0261 7369676E 		.ascii	"signed char\000"
 2955      65642063 
 2955      68617200 
 2956              	.LASF36:
 2957 026d 61736369 		.ascii	"asciiToDiffMan\000"
 2957      69546F44 
 2957      6966664D 
 2957      616E00
 2958              	.LASF19:
 2959 027c 69646C65 		.ascii	"idle\000"
 2959      00
 2960              	.LASF47:
 2961 0281 64696666 		.ascii	"diffManToASCII\000"
 2961      4D616E54 
 2961      6F415343 
 2961      494900
 2962              	.LASF8:
 2963 0290 756E7369 		.ascii	"unsigned int\000"
 2963      676E6564 
 2963      20696E74 
 2963      00
 2964              	.LASF56:
 2965 029d 72656365 		.ascii	"receivedDataIndex\000"
 2965      69766564 
 2965      44617461 
 2965      496E6465 
 2965      7800
 2966              	.LASF5:
 2967 02af 6C6F6E67 		.ascii	"long unsigned int\000"
 2967      20756E73 
 2967      69676E65 
 2967      6420696E 
 2967      7400
 2968              	.LASF26:
 2969 02c1 626F7468 		.ascii	"both\000"
 2969      00
 2970              	.LASF44:
 2971 02c6 4D494E5F 		.ascii	"MIN_N\000"
 2971      4E00
 2972              	.LASF37:
 2973 02cc 61736369 		.ascii	"asciiChar\000"
 2973      69436861 
 2973      7200
 2974              	.LASF15:
 2975 02d6 63686172 		.ascii	"char\000"
 2975      00
 2976              	.LASF71:
 2977 02db 72656365 		.ascii	"receivedChar\000"
 2977      69766564 
 2977      43686172 
 2977      00
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 65


 2978              	.LASF4:
 2979 02e8 6C6F6E67 		.ascii	"long int\000"
 2979      20696E74 
 2979      00
 2980              	.LASF32:
 2981 02f1 73747269 		.ascii	"stringPosition\000"
 2981      6E67506F 
 2981      73697469 
 2981      6F6E00
 2982              	.LASF10:
 2983 0300 696E7433 		.ascii	"int32_t\000"
 2983      325F7400 
 2984              	.LASF3:
 2985 0308 73686F72 		.ascii	"short unsigned int\000"
 2985      7420756E 
 2985      7369676E 
 2985      65642069 
 2985      6E7400
 2986              	.LASF33:
 2987 031b 7365636F 		.ascii	"seconds\000"
 2987      6E647300 
 2988              	.LASF51:
 2989 0323 5F426F6F 		.ascii	"_Bool\000"
 2989      6C00
 2990              	.LASF20:
 2991 0329 62757379 		.ascii	"busy\000"
 2991      00
 2992              	.LASF57:
 2993 032e 72656365 		.ascii	"receivedDataCount\000"
 2993      69766564 
 2993      44617461 
 2993      436F756E 
 2993      7400
 2994              	.LASF16:
 2995 0340 72656738 		.ascii	"reg8\000"
 2995      00
 2996              	.LASF25:
 2997 0345 6D657373 		.ascii	"message\000"
 2997      61676500 
 2998              	.LASF14:
 2999 034d 646F7562 		.ascii	"double\000"
 2999      6C6500
 3000              	.LASF68:
 3001 0354 68656164 		.ascii	"headerValid\000"
 3001      65725661 
 3001      6C696400 
 3002              	.LASF62:
 3003 0360 6D657373 		.ascii	"messageLength\000"
 3003      6167654C 
 3003      656E6774 
 3003      6800
 3004              	.LASF54:
 3005 036e 64696666 		.ascii	"diffManReceivedData\000"
 3005      4D616E52 
 3005      65636569 
 3005      76656444 
 3005      61746100 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 66


 3006              	.LASF55:
 3007 0382 72784368 		.ascii	"rxChar\000"
 3007      617200
 3008              	.LASF30:
 3009 0389 52656365 		.ascii	"ReceiveTimerISR\000"
 3009      69766554 
 3009      696D6572 
 3009      49535200 
 3010              	.LASF39:
 3011 0399 62696E61 		.ascii	"binaryValueOfChar\000"
 3011      72795661 
 3011      6C75654F 
 3011      66436861 
 3011      7200
 3012              	.LASF73:
 3013 03ab 2E5C6D61 		.ascii	".\\main.c\000"
 3013      696E2E63 
 3013      00
 3014              	.LASF9:
 3015 03b4 5F5F696E 		.ascii	"__int32_t\000"
 3015      7433325F 
 3015      7400
 3016              	.LASF58:
 3017 03be 68616C66 		.ascii	"halfBitIndex\000"
 3017      42697449 
 3017      6E646578 
 3017      00
 3018              	.LASF45:
 3019 03cb 4D41585F 		.ascii	"MAX_N\000"
 3019      4E00
 3020              	.LASF63:
 3021 03d1 68656164 		.ascii	"headerCRC\000"
 3021      65724352 
 3021      4300
 3022              	.LASF61:
 3023 03db 6C656E67 		.ascii	"lengthOfData\000"
 3023      74684F66 
 3023      44617461 
 3023      00
 3024              	.LASF66:
 3025 03e8 64617461 		.ascii	"dataTransmissionComplete\000"
 3025      5472616E 
 3025      736D6973 
 3025      73696F6E 
 3025      436F6D70 
 3026              	.LASF29:
 3027 0401 54696D65 		.ascii	"TimerHandler\000"
 3027      7248616E 
 3027      646C6572 
 3027      00
 3028              	.LASF52:
 3029 040e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3029      52784275 
 3029      66666572 
 3029      00
 3030              	.LASF38:
 3031 041b 70726576 		.ascii	"previousHalfBit\000"
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPnpO6A.s 			page 67


 3031      696F7573 
 3031      48616C66 
 3031      42697400 
 3032              	.LASF65:
 3033 042b 74696D65 		.ascii	"timerExpired\000"
 3033      72457870 
 3033      69726564 
 3033      00
 3034              	.LASF67:
 3035 0438 706F7765 		.ascii	"powerOnEdge\000"
 3035      724F6E45 
 3035      64676500 
 3036              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
