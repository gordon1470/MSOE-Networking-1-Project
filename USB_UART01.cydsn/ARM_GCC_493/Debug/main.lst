ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3200,4
  19              		.comm	diffManReceivedData,3200,4
  20              		.global	receivedDataIndex
  21              		.bss
  22              		.align	2
  23              		.type	receivedDataIndex, %object
  24              		.size	receivedDataIndex, 4
  25              	receivedDataIndex:
  26 0000 00000000 		.space	4
  27              		.global	receivedDataCount
  28              		.align	2
  29              		.type	receivedDataCount, %object
  30              		.size	receivedDataCount, 4
  31              	receivedDataCount:
  32 0004 00000000 		.space	4
  33              		.global	halfBitIndex
  34              		.align	2
  35              		.type	halfBitIndex, %object
  36              		.size	halfBitIndex, 4
  37              	halfBitIndex:
  38 0008 00000000 		.space	4
  39              		.global	currentDataPos
  40              		.align	2
  41              		.type	currentDataPos, %object
  42              		.size	currentDataPos, 4
  43              	currentDataPos:
  44 000c 00000000 		.space	4
  45              		.comm	lengthOfData,4,4
  46              		.comm	timerExpired,1,1
  47              		.comm	dataTransmissionComplete,1,1
  48              		.comm	networkState,1,1
  49              		.section	.text.Idle_Collision_ISR,"ax",%progbits
  50              		.align	2
  51              		.global	Idle_Collision_ISR
  52              		.thumb
  53              		.thumb_func
  54              		.type	Idle_Collision_ISR, %function
  55              	Idle_Collision_ISR:
  56              	.LFB63:
  57              		.file 1 ".\\main.c"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 2


   1:.\main.c      **** /*******************************************************************************
   2:.\main.c      **** This file performs a transmit. No collision is detected. 
   3:.\main.c      **** *******************************************************************************/
   4:.\main.c      **** #define INDEX_OF_MSB 6
   5:.\main.c      **** #define HIGH 1
   6:.\main.c      **** #define EIGHT_BITS 8
   7:.\main.c      **** #define START_BIT 2
   8:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   9:.\main.c      **** 
  10:.\main.c      **** #include <device.h>
  11:.\main.c      **** #include <stdbool.h>
  12:.\main.c      **** #include <stdlib.h> //For random number generator
  13:.\main.c      **** #include <time.h>
  14:.\main.c      **** #include "stdio.h"
  15:.\main.c      **** 
  16:.\main.c      **** 
  17:.\main.c      **** int getRandomNumber();
  18:.\main.c      **** void initDiffManEncodedArray();
  19:.\main.c      **** void stringToDiffMan(char*, uint8);
  20:.\main.c      **** void asciiToDiffMan(char);
  21:.\main.c      **** void transmitData();
  22:.\main.c      **** void setNetworkStateOnLEDs();
  23:.\main.c      **** void diffManToASCII(char*);
  24:.\main.c      **** void printChar(char *);
  25:.\main.c      **** 
  26:.\main.c      **** int diffManEncodedData[800];
  27:.\main.c      **** int diffManReceivedData[800];
  28:.\main.c      **** int receivedDataIndex = 0, receivedDataCount = 0;
  29:.\main.c      **** int halfBitIndex = 0, currentDataPos=0, lengthOfData;
  30:.\main.c      **** bool timerExpired, dataTransmissionComplete;
  31:.\main.c      **** enum state {busy, idle, collision} networkState; 
  32:.\main.c      **** 
  33:.\main.c      **** CY_ISR(Idle_Collision_ISR){ 
  58              		.loc 1 33 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62 0000 80B5     		push	{r7, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              		.cfi_def_cfa_register 7
  34:.\main.c      ****     networkState = idle; 
  68              		.loc 1 34 0
  69 0004 074B     		ldr	r3, .L4
  70 0006 0122     		movs	r2, #1
  71 0008 1A70     		strb	r2, [r3]
  35:.\main.c      ****     if(Receive_Read() == HIGH){
  72              		.loc 1 35 0
  73 000a FFF7FEFF 		bl	Receive_Read
  74 000e 0346     		mov	r3, r0
  75 0010 012B     		cmp	r3, #1
  76 0012 03D1     		bne	.L2
  36:.\main.c      ****         networkState = idle;  
  77              		.loc 1 36 0
  78 0014 034B     		ldr	r3, .L4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 3


  79 0016 0122     		movs	r2, #1
  80 0018 1A70     		strb	r2, [r3]
  81 001a 02E0     		b	.L1
  82              	.L2:
  37:.\main.c      ****     }
  38:.\main.c      ****     else{
  39:.\main.c      ****         networkState = collision;
  83              		.loc 1 39 0
  84 001c 014B     		ldr	r3, .L4
  85 001e 0222     		movs	r2, #2
  86 0020 1A70     		strb	r2, [r3]
  87              	.L1:
  40:.\main.c      ****     }
  41:.\main.c      **** }
  88              		.loc 1 41 0
  89 0022 80BD     		pop	{r7, pc}
  90              	.L5:
  91              		.align	2
  92              	.L4:
  93 0024 00000000 		.word	networkState
  94              		.cfi_endproc
  95              	.LFE63:
  96              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
  97              		.section	.text.Edge_detect_ISR,"ax",%progbits
  98              		.align	2
  99              		.global	Edge_detect_ISR
 100              		.thumb
 101              		.thumb_func
 102              		.type	Edge_detect_ISR, %function
 103              	Edge_detect_ISR:
 104              	.LFB64:
  42:.\main.c      **** 
  43:.\main.c      **** CY_ISR(Edge_detect_ISR){
 105              		.loc 1 43 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 98B5     		push	{r3, r4, r7, lr}
 110              		.cfi_def_cfa_offset 16
 111              		.cfi_offset 3, -16
 112              		.cfi_offset 4, -12
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 00AF     		add	r7, sp, #0
 116              		.cfi_def_cfa_register 7
  44:.\main.c      ****      //Note: onedge detect, will trigger receive timer to start (see TopDesign)
  45:.\main.c      ****     networkState = busy;
 117              		.loc 1 45 0
 118 0004 0A4B     		ldr	r3, .L7
 119 0006 0022     		movs	r2, #0
 120 0008 1A70     		strb	r2, [r3]
  46:.\main.c      ****     
  47:.\main.c      ****     diffManReceivedData[receivedDataCount] = Receive_Read();
 121              		.loc 1 47 0
 122 000a 0A4B     		ldr	r3, .L7+4
 123 000c 1C68     		ldr	r4, [r3]
 124 000e FFF7FEFF 		bl	Receive_Read
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 4


 125 0012 0346     		mov	r3, r0
 126 0014 1A46     		mov	r2, r3
 127 0016 084B     		ldr	r3, .L7+8
 128 0018 43F82420 		str	r2, [r3, r4, lsl #2]
  48:.\main.c      ****     receivedDataCount++; 
 129              		.loc 1 48 0
 130 001c 054B     		ldr	r3, .L7+4
 131 001e 1B68     		ldr	r3, [r3]
 132 0020 0133     		adds	r3, r3, #1
 133 0022 044A     		ldr	r2, .L7+4
 134 0024 1360     		str	r3, [r2]
  49:.\main.c      ****     
  50:.\main.c      ****     Idle_Collision_Timer_Start();
 135              		.loc 1 50 0
 136 0026 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  51:.\main.c      ****     Receive_ClearInterrupt();
 137              		.loc 1 51 0
 138 002a FFF7FEFF 		bl	Receive_ClearInterrupt
  52:.\main.c      **** }
 139              		.loc 1 52 0
 140 002e 98BD     		pop	{r3, r4, r7, pc}
 141              	.L8:
 142              		.align	2
 143              	.L7:
 144 0030 00000000 		.word	networkState
 145 0034 00000000 		.word	receivedDataCount
 146 0038 00000000 		.word	diffManReceivedData
 147              		.cfi_endproc
 148              	.LFE64:
 149              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 150              		.section	.text.TimerHandler,"ax",%progbits
 151              		.align	2
 152              		.global	TimerHandler
 153              		.thumb
 154              		.thumb_func
 155              		.type	TimerHandler, %function
 156              	TimerHandler:
 157              	.LFB65:
  53:.\main.c      **** 
  54:.\main.c      **** CY_ISR(TimerHandler){
 158              		.loc 1 54 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
  55:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 168              		.loc 1 55 0
 169 0004 034B     		ldr	r3, .L10
 170 0006 1B78     		ldrb	r3, [r3]
  56:.\main.c      ****     Timer_Stop();
 171              		.loc 1 56 0
 172 0008 FFF7FEFF 		bl	Timer_Stop
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 5


  57:.\main.c      ****     timerExpired = true;
 173              		.loc 1 57 0
 174 000c 024B     		ldr	r3, .L10+4
 175 000e 0122     		movs	r2, #1
 176 0010 1A70     		strb	r2, [r3]
  58:.\main.c      **** }
 177              		.loc 1 58 0
 178 0012 80BD     		pop	{r7, pc}
 179              	.L11:
 180              		.align	2
 181              	.L10:
 182 0014 6B640040 		.word	1073767531
 183 0018 00000000 		.word	timerExpired
 184              		.cfi_endproc
 185              	.LFE65:
 186              		.size	TimerHandler, .-TimerHandler
 187              		.section	.text.ReceiveTimerISR,"ax",%progbits
 188              		.align	2
 189              		.global	ReceiveTimerISR
 190              		.thumb
 191              		.thumb_func
 192              		.type	ReceiveTimerISR, %function
 193              	ReceiveTimerISR:
 194              	.LFB66:
  59:.\main.c      **** 
  60:.\main.c      **** CY_ISR(ReceiveTimerISR){
 195              		.loc 1 60 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 1, uses_anonymous_args = 0
 199 0000 98B5     		push	{r3, r4, r7, lr}
 200              		.cfi_def_cfa_offset 16
 201              		.cfi_offset 3, -16
 202              		.cfi_offset 4, -12
 203              		.cfi_offset 7, -8
 204              		.cfi_offset 14, -4
 205 0002 00AF     		add	r7, sp, #0
 206              		.cfi_def_cfa_register 7
  61:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 207              		.loc 1 61 0
 208 0004 084B     		ldr	r3, .L13
 209 0006 1B78     		ldrb	r3, [r3]
  62:.\main.c      ****     diffManReceivedData[receivedDataCount] = Receive_Read();
 210              		.loc 1 62 0
 211 0008 084B     		ldr	r3, .L13+4
 212 000a 1C68     		ldr	r4, [r3]
 213 000c FFF7FEFF 		bl	Receive_Read
 214 0010 0346     		mov	r3, r0
 215 0012 1A46     		mov	r2, r3
 216 0014 064B     		ldr	r3, .L13+8
 217 0016 43F82420 		str	r2, [r3, r4, lsl #2]
  63:.\main.c      ****     receivedDataCount++;
 218              		.loc 1 63 0
 219 001a 044B     		ldr	r3, .L13+4
 220 001c 1B68     		ldr	r3, [r3]
 221 001e 0133     		adds	r3, r3, #1
 222 0020 024A     		ldr	r2, .L13+4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 6


 223 0022 1360     		str	r3, [r2]
  64:.\main.c      **** }
 224              		.loc 1 64 0
 225 0024 98BD     		pop	{r3, r4, r7, pc}
 226              	.L14:
 227 0026 00BF     		.align	2
 228              	.L13:
 229 0028 6F640040 		.word	1073767535
 230 002c 00000000 		.word	receivedDataCount
 231 0030 00000000 		.word	diffManReceivedData
 232              		.cfi_endproc
 233              	.LFE66:
 234              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 235              		.section	.text.main,"ax",%progbits
 236              		.align	2
 237              		.global	main
 238              		.thumb
 239              		.thumb_func
 240              		.type	main, %function
 241              	main:
 242              	.LFB67:
  65:.\main.c      **** 
  66:.\main.c      **** int main()
  67:.\main.c      **** {
 243              		.loc 1 67 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 120
 246              		@ frame_needed = 1, uses_anonymous_args = 0
 247 0000 80B5     		push	{r7, lr}
 248              		.cfi_def_cfa_offset 8
 249              		.cfi_offset 7, -8
 250              		.cfi_offset 14, -4
 251 0002 9EB0     		sub	sp, sp, #120
 252              		.cfi_def_cfa_offset 128
 253 0004 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
  68:.\main.c      **** 
  69:.\main.c      ****     char rx;
  70:.\main.c      ****     char lineString[100];
  71:.\main.c      ****     uint8 stringPosition = 0;
 255              		.loc 1 71 0
 256 0006 0023     		movs	r3, #0
 257 0008 87F87730 		strb	r3, [r7, #119]
  72:.\main.c      ****     timerExpired = false;
 258              		.loc 1 72 0
 259 000c 6D4B     		ldr	r3, .L34
 260 000e 0022     		movs	r2, #0
 261 0010 1A70     		strb	r2, [r3]
  73:.\main.c      ****     dataTransmissionComplete = false;
 262              		.loc 1 73 0
 263 0012 6D4B     		ldr	r3, .L34+4
 264 0014 0022     		movs	r2, #0
 265 0016 1A70     		strb	r2, [r3]
  74:.\main.c      ****     /*
  75:.\main.c      ****     Get value from system clock and
  76:.\main.c      ****     place in seconds variable.
  77:.\main.c      ****     */
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 7


  78:.\main.c      ****     time_t seconds; 
  79:.\main.c      ****     time(&seconds);
 266              		.loc 1 79 0
 267 0018 07F10803 		add	r3, r7, #8
 268 001c 1846     		mov	r0, r3
 269 001e FFF7FEFF 		bl	time
  80:.\main.c      ****     /*
  81:.\main.c      ****     Convert seconds to a unsigned
  82:.\main.c      ****     integer for seed for random number generator
  83:.\main.c      ****     */
  84:.\main.c      ****     srand((unsigned int) seconds);
 270              		.loc 1 84 0
 271 0022 BB68     		ldr	r3, [r7, #8]
 272 0024 1846     		mov	r0, r3
 273 0026 FFF7FEFF 		bl	srand
  85:.\main.c      ****     
  86:.\main.c      ****     
  87:.\main.c      ****     /* Enable Global Interrupts */
  88:.\main.c      ****     CyGlobalIntEnable;                        
 274              		.loc 1 88 0
 275              	@ 88 ".\main.c" 1
 276 002a 62B6     		CPSIE   i
 277              	@ 0 "" 2
  89:.\main.c      ****     
  90:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 278              		.loc 1 90 0
 279              		.thumb
 280 002c 0120     		movs	r0, #1
 281 002e FFF7FEFF 		bl	TX_pin_Write
  91:.\main.c      ****     
  92:.\main.c      ****     //enable collision detection
  93:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 282              		.loc 1 93 0
 283 0032 6648     		ldr	r0, .L34+8
 284 0034 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
  94:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 285              		.loc 1 94 0
 286 0038 6548     		ldr	r0, .L34+12
 287 003a FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
  95:.\main.c      ****     Idle_Collision_Timer_Start();
 288              		.loc 1 95 0
 289 003e FFF7FEFF 		bl	Idle_Collision_Timer_Start
  96:.\main.c      **** 
  97:.\main.c      ****     /* Start USBFS Operation with 3V operation */
  98:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 290              		.loc 1 98 0
 291 0042 0020     		movs	r0, #0
 292 0044 0021     		movs	r1, #0
 293 0046 FFF7FEFF 		bl	USBUART_1_Start
  99:.\main.c      ****     
 100:.\main.c      ****     //start tranmission timer
 101:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 294              		.loc 1 101 0
 295 004a 6248     		ldr	r0, .L34+16
 296 004c FFF7FEFF 		bl	TimerISR_StartEx
 102:.\main.c      **** 
 103:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 8


 297              		.loc 1 103 0
 298 0050 6148     		ldr	r0, .L34+20
 299 0052 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 300              	.L31:
 104:.\main.c      ****     
 105:.\main.c      ****     /* Main Loop: */
 106:.\main.c      ****     for(;;)
 107:.\main.c      ****     {
 108:.\main.c      ****         setNetworkStateOnLEDs();
 301              		.loc 1 108 0
 302 0056 FFF7FEFF 		bl	setNetworkStateOnLEDs
 109:.\main.c      ****         //TODO add lcd start
 110:.\main.c      ****         /*Receive*/
 111:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 112:.\main.c      ****         if(networkState == idle && receivedDataCount >= EIGHT_BITS + START_BIT){
 303              		.loc 1 112 0
 304 005a 604B     		ldr	r3, .L34+24
 305 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 306 005e 012B     		cmp	r3, #1
 307 0060 24D1     		bne	.L16
 308              		.loc 1 112 0 is_stmt 0 discriminator 1
 309 0062 5F4B     		ldr	r3, .L34+28
 310 0064 1B68     		ldr	r3, [r3]
 311 0066 092B     		cmp	r3, #9
 312 0068 20DD     		ble	.L16
 113:.\main.c      ****             
 114:.\main.c      ****             //Verify that have received start bit (01)
 115:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 313              		.loc 1 115 0 is_stmt 1
 314 006a 5E4B     		ldr	r3, .L34+32
 315 006c 1B68     		ldr	r3, [r3]
 316 006e 002B     		cmp	r3, #0
 317 0070 1CD1     		bne	.L16
 318              		.loc 1 115 0 is_stmt 0 discriminator 1
 319 0072 5C4B     		ldr	r3, .L34+32
 320 0074 5B68     		ldr	r3, [r3, #4]
 321 0076 012B     		cmp	r3, #1
 322 0078 18D1     		bne	.L16
 116:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 323              		.loc 1 116 0 is_stmt 1
 324 007a 5B4B     		ldr	r3, .L34+36
 325 007c 0222     		movs	r2, #2
 326 007e 1A60     		str	r2, [r3]
 117:.\main.c      ****                 while(receivedDataIndex < receivedDataCount){
 327              		.loc 1 117 0
 328 0080 07E0     		b	.L17
 329              	.L18:
 330              	.LBB2:
 118:.\main.c      ****                     //wait for 8 bits
 119:.\main.c      ****                     char receivedChar;     
 120:.\main.c      ****                     char *charPtr = &receivedChar;
 331              		.loc 1 120 0
 332 0082 FB1D     		adds	r3, r7, #7
 333 0084 3B67     		str	r3, [r7, #112]
 121:.\main.c      ****                     diffManToASCII(charPtr);
 334              		.loc 1 121 0
 335 0086 386F     		ldr	r0, [r7, #112]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 9


 336 0088 FFF7FEFF 		bl	diffManToASCII
 122:.\main.c      ****                     printChar(charPtr);
 337              		.loc 1 122 0
 338 008c 386F     		ldr	r0, [r7, #112]
 339 008e FFF7FEFF 		bl	printChar
 340              	.L17:
 341              	.LBE2:
 117:.\main.c      ****                     //wait for 8 bits
 342              		.loc 1 117 0
 343 0092 554B     		ldr	r3, .L34+36
 344 0094 1A68     		ldr	r2, [r3]
 345 0096 524B     		ldr	r3, .L34+28
 346 0098 1B68     		ldr	r3, [r3]
 347 009a 9A42     		cmp	r2, r3
 348 009c F1DB     		blt	.L18
 123:.\main.c      ****                 }
 124:.\main.c      ****                 receivedDataCount = receivedDataIndex = 0; 
 349              		.loc 1 124 0
 350 009e 524B     		ldr	r3, .L34+36
 351 00a0 0022     		movs	r2, #0
 352 00a2 1A60     		str	r2, [r3]
 353 00a4 504B     		ldr	r3, .L34+36
 354 00a6 1B68     		ldr	r3, [r3]
 355 00a8 4D4A     		ldr	r2, .L34+28
 356 00aa 1360     		str	r3, [r2]
 357              	.L16:
 125:.\main.c      ****             }
 126:.\main.c      ****             else{
 127:.\main.c      ****                 //Receive data did not start with the start bit
 128:.\main.c      ****             }
 129:.\main.c      ****         }
 130:.\main.c      ****         /*End Receive*/
 131:.\main.c      ****         
 132:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 358              		.loc 1 132 0
 359 00ac FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 360 00b0 0346     		mov	r3, r0
 361 00b2 002B     		cmp	r3, #0
 362 00b4 06D0     		beq	.L19
 133:.\main.c      ****         {
 134:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 363              		.loc 1 134 0
 364 00b6 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 365 00ba 0346     		mov	r3, r0
 366 00bc 002B     		cmp	r3, #0
 367 00be 01D0     		beq	.L19
 135:.\main.c      ****             {
 136:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 137:.\main.c      ****                 USBUART_1_CDC_Init();
 368              		.loc 1 137 0
 369 00c0 FFF7FEFF 		bl	USBUART_1_CDC_Init
 370              	.L19:
 138:.\main.c      ****             }
 139:.\main.c      ****         }         
 140:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 371              		.loc 1 140 0
 372 00c4 FFF7FEFF 		bl	USBUART_1_GetConfiguration
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 10


 373 00c8 0346     		mov	r3, r0
 374 00ca 002B     		cmp	r3, #0
 375 00cc 79D0     		beq	.L20
 141:.\main.c      ****         {
 142:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 376              		.loc 1 142 0
 377 00ce FFF7FEFF 		bl	USBUART_1_DataIsReady
 378 00d2 0346     		mov	r3, r0
 379 00d4 002B     		cmp	r3, #0
 380 00d6 74D0     		beq	.L20
 143:.\main.c      ****             {   
 144:.\main.c      ****                 rx = USBUART_1_GetChar();
 381              		.loc 1 144 0
 382 00d8 FFF7FEFF 		bl	USBUART_1_GetChar
 383 00dc 0346     		mov	r3, r0
 384 00de 87F87630 		strb	r3, [r7, #118]
 145:.\main.c      ****                 switch(rx){
 385              		.loc 1 145 0
 386 00e2 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 387 00e6 0D2B     		cmp	r3, #13
 388 00e8 25D0     		beq	.L22
 389 00ea 1B2B     		cmp	r3, #27
 390 00ec 68D0     		beq	.L33
 391 00ee 082B     		cmp	r3, #8
 392 00f0 4CD1     		bne	.L32
 146:.\main.c      ****                     case 8://backspace
 147:.\main.c      ****                         if(stringPosition>0){
 393              		.loc 1 147 0
 394 00f2 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 395 00f6 002B     		cmp	r3, #0
 396 00f8 1CD0     		beq	.L25
 148:.\main.c      ****                             stringPosition--;
 397              		.loc 1 148 0
 398 00fa 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 399 00fe 013B     		subs	r3, r3, #1
 400 0100 87F87730 		strb	r3, [r7, #119]
 149:.\main.c      ****                             lineString[stringPosition] = '\0';
 401              		.loc 1 149 0
 402 0104 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 403 0108 07F17802 		add	r2, r7, #120
 404 010c 1344     		add	r3, r3, r2
 405 010e 0022     		movs	r2, #0
 406 0110 03F86C2C 		strb	r2, [r3, #-108]
 150:.\main.c      ****                             //backspace space backspace
 151:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u); 
 407              		.loc 1 151 0
 408 0114 00BF     		nop
 409              	.L26:
 410              		.loc 1 151 0 is_stmt 0 discriminator 1
 411 0116 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 412 011a 0346     		mov	r3, r0
 413 011c 002B     		cmp	r3, #0
 414 011e FAD0     		beq	.L26
 152:.\main.c      ****                             USBUART_1_PutChar(8);
 415              		.loc 1 152 0 is_stmt 1
 416 0120 0820     		movs	r0, #8
 417 0122 FFF7FEFF 		bl	USBUART_1_PutChar
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 11


 153:.\main.c      ****                             USBUART_1_PutChar(32);
 418              		.loc 1 153 0
 419 0126 2020     		movs	r0, #32
 420 0128 FFF7FEFF 		bl	USBUART_1_PutChar
 154:.\main.c      ****                             USBUART_1_PutChar(8);
 421              		.loc 1 154 0
 422 012c 0820     		movs	r0, #8
 423 012e FFF7FEFF 		bl	USBUART_1_PutChar
 155:.\main.c      ****                         }
 156:.\main.c      ****                         break;
 424              		.loc 1 156 0
 425 0132 46E0     		b	.L20
 426              	.L25:
 427 0134 45E0     		b	.L20
 428              	.L22:
 157:.\main.c      ****                     case 13://enter (carriage return)
 158:.\main.c      ****                         initDiffManEncodedArray();
 429              		.loc 1 158 0
 430 0136 FFF7FEFF 		bl	initDiffManEncodedArray
 159:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 431              		.loc 1 159 0
 432 013a 07F10C02 		add	r2, r7, #12
 433 013e 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 434 0142 1046     		mov	r0, r2
 435 0144 1946     		mov	r1, r3
 436 0146 FFF7FEFF 		bl	stringToDiffMan
 160:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 437              		.loc 1 160 0
 438 014a 00BF     		nop
 439              	.L27:
 440              		.loc 1 160 0 is_stmt 0 discriminator 1
 441 014c FFF7FEFF 		bl	USBUART_1_CDCIsReady
 442 0150 0346     		mov	r3, r0
 443 0152 002B     		cmp	r3, #0
 444 0154 FAD0     		beq	.L27
 161:.\main.c      ****                         USBUART_1_PutCRLF();
 445              		.loc 1 161 0 is_stmt 1
 446 0156 FFF7FEFF 		bl	USBUART_1_PutCRLF
 162:.\main.c      ****                         
 163:.\main.c      ****                         //keep looping until data is transmitted
 164:.\main.c      ****                         while(!dataTransmissionComplete){
 447              		.loc 1 164 0
 448 015a 03E0     		b	.L28
 449              	.L29:
 165:.\main.c      ****                             transmitData();
 450              		.loc 1 165 0
 451 015c FFF7FEFF 		bl	transmitData
 166:.\main.c      ****                             setNetworkStateOnLEDs();
 452              		.loc 1 166 0
 453 0160 FFF7FEFF 		bl	setNetworkStateOnLEDs
 454              	.L28:
 164:.\main.c      ****                             transmitData();
 455              		.loc 1 164 0
 456 0164 184B     		ldr	r3, .L34+4
 457 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 458 0168 83F00103 		eor	r3, r3, #1
 459 016c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 12


 460 016e 002B     		cmp	r3, #0
 461 0170 F4D1     		bne	.L29
 167:.\main.c      ****                         }
 168:.\main.c      ****                         dataTransmissionComplete = false;
 462              		.loc 1 168 0
 463 0172 154B     		ldr	r3, .L34+4
 464 0174 0022     		movs	r2, #0
 465 0176 1A70     		strb	r2, [r3]
 169:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 466              		.loc 1 169 0
 467 0178 0120     		movs	r0, #1
 468 017a FFF7FEFF 		bl	TX_pin_Write
 170:.\main.c      ****                         //reset index
 171:.\main.c      ****                         halfBitIndex = 0;
 469              		.loc 1 171 0
 470 017e 1B4B     		ldr	r3, .L34+40
 471 0180 0022     		movs	r2, #0
 472 0182 1A60     		str	r2, [r3]
 172:.\main.c      ****                         stringPosition = 0; 
 473              		.loc 1 172 0
 474 0184 0023     		movs	r3, #0
 475 0186 87F87730 		strb	r3, [r7, #119]
 173:.\main.c      ****                         break;
 476              		.loc 1 173 0
 477 018a 1AE0     		b	.L20
 478              	.L32:
 174:.\main.c      ****                     case 27://escape
 175:.\main.c      ****                         break;
 176:.\main.c      ****                     default://everything else
 177:.\main.c      ****                         lineString[stringPosition] = rx;
 479              		.loc 1 177 0
 480 018c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 481 0190 07F17802 		add	r2, r7, #120
 482 0194 1344     		add	r3, r3, r2
 483 0196 97F87620 		ldrb	r2, [r7, #118]
 484 019a 03F86C2C 		strb	r2, [r3, #-108]
 178:.\main.c      ****                         stringPosition++;
 485              		.loc 1 178 0
 486 019e 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 487 01a2 0133     		adds	r3, r3, #1
 488 01a4 87F87730 		strb	r3, [r7, #119]
 179:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u); 
 489              		.loc 1 179 0
 490 01a8 00BF     		nop
 491              	.L30:
 492              		.loc 1 179 0 is_stmt 0 discriminator 1
 493 01aa FFF7FEFF 		bl	USBUART_1_CDCIsReady
 494 01ae 0346     		mov	r3, r0
 495 01b0 002B     		cmp	r3, #0
 496 01b2 FAD0     		beq	.L30
 180:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 497              		.loc 1 180 0 is_stmt 1
 498 01b4 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 499 01b8 1846     		mov	r0, r3
 500 01ba FFF7FEFF 		bl	USBUART_1_PutChar
 181:.\main.c      ****                         break;
 501              		.loc 1 181 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 13


 502 01be 00E0     		b	.L20
 503              	.L33:
 175:.\main.c      ****                     default://everything else
 504              		.loc 1 175 0
 505 01c0 00BF     		nop
 506              	.L20:
 182:.\main.c      ****                 }
 183:.\main.c      ****             }
 184:.\main.c      ****         }
 185:.\main.c      ****     }   
 507              		.loc 1 185 0 discriminator 1
 508 01c2 48E7     		b	.L31
 509              	.L35:
 510              		.align	2
 511              	.L34:
 512 01c4 00000000 		.word	timerExpired
 513 01c8 00000000 		.word	dataTransmissionComplete
 514 01cc 00000000 		.word	Idle_Collision_ISR
 515 01d0 00000000 		.word	Edge_detect_ISR
 516 01d4 00000000 		.word	TimerHandler
 517 01d8 00000000 		.word	ReceiveTimerISR
 518 01dc 00000000 		.word	networkState
 519 01e0 00000000 		.word	receivedDataCount
 520 01e4 00000000 		.word	diffManReceivedData
 521 01e8 00000000 		.word	receivedDataIndex
 522 01ec 00000000 		.word	halfBitIndex
 523              		.cfi_endproc
 524              	.LFE67:
 525              		.size	main, .-main
 526              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 527              		.align	2
 528              		.global	initDiffManEncodedArray
 529              		.thumb
 530              		.thumb_func
 531              		.type	initDiffManEncodedArray, %function
 532              	initDiffManEncodedArray:
 533              	.LFB68:
 186:.\main.c      **** }
 187:.\main.c      **** 
 188:.\main.c      **** /*
 189:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the 
 190:.\main.c      **** half bits 01. 
 191:.\main.c      **** Only call when starting to transfer a new string
 192:.\main.c      **** */
 193:.\main.c      **** void initDiffManEncodedArray(){
 534              		.loc 1 193 0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538              		@ link register save eliminated.
 539 0000 80B4     		push	{r7}
 540              		.cfi_def_cfa_offset 4
 541              		.cfi_offset 7, -4
 542 0002 00AF     		add	r7, sp, #0
 543              		.cfi_def_cfa_register 7
 194:.\main.c      ****     halfBitIndex = 0;
 544              		.loc 1 194 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 14


 545 0004 0E4B     		ldr	r3, .L37
 546 0006 0022     		movs	r2, #0
 547 0008 1A60     		str	r2, [r3]
 195:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 548              		.loc 1 195 0
 549 000a 0D4B     		ldr	r3, .L37
 550 000c 1B68     		ldr	r3, [r3]
 551 000e 0D4A     		ldr	r2, .L37+4
 552 0010 0021     		movs	r1, #0
 553 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 196:.\main.c      ****     halfBitIndex++;
 554              		.loc 1 196 0
 555 0016 0A4B     		ldr	r3, .L37
 556 0018 1B68     		ldr	r3, [r3]
 557 001a 0133     		adds	r3, r3, #1
 558 001c 084A     		ldr	r2, .L37
 559 001e 1360     		str	r3, [r2]
 197:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 560              		.loc 1 197 0
 561 0020 074B     		ldr	r3, .L37
 562 0022 1B68     		ldr	r3, [r3]
 563 0024 074A     		ldr	r2, .L37+4
 564 0026 0121     		movs	r1, #1
 565 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 198:.\main.c      ****     halfBitIndex++;
 566              		.loc 1 198 0
 567 002c 044B     		ldr	r3, .L37
 568 002e 1B68     		ldr	r3, [r3]
 569 0030 0133     		adds	r3, r3, #1
 570 0032 034A     		ldr	r2, .L37
 571 0034 1360     		str	r3, [r2]
 199:.\main.c      **** }
 572              		.loc 1 199 0
 573 0036 BD46     		mov	sp, r7
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 0038 5DF8047B 		ldr	r7, [sp], #4
 577              		.cfi_restore 7
 578              		.cfi_def_cfa_offset 0
 579 003c 7047     		bx	lr
 580              	.L38:
 581 003e 00BF     		.align	2
 582              	.L37:
 583 0040 00000000 		.word	halfBitIndex
 584 0044 00000000 		.word	diffManEncodedData
 585              		.cfi_endproc
 586              	.LFE68:
 587              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 588              		.section	.text.stringToDiffMan,"ax",%progbits
 589              		.align	2
 590              		.global	stringToDiffMan
 591              		.thumb
 592              		.thumb_func
 593              		.type	stringToDiffMan, %function
 594              	stringToDiffMan:
 595              	.LFB69:
 200:.\main.c      **** 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 15


 201:.\main.c      **** /*
 202:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 203:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 204:.\main.c      **** */
 205:.\main.c      **** void stringToDiffMan(char lineString[], uint8 stringPosition){
 596              		.loc 1 205 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 16
 599              		@ frame_needed = 1, uses_anonymous_args = 0
 600 0000 80B5     		push	{r7, lr}
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
 604 0002 84B0     		sub	sp, sp, #16
 605              		.cfi_def_cfa_offset 24
 606 0004 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 608 0006 7860     		str	r0, [r7, #4]
 609 0008 0B46     		mov	r3, r1
 610 000a FB70     		strb	r3, [r7, #3]
 206:.\main.c      **** 
 207:.\main.c      ****     unsigned int i = 0;
 611              		.loc 1 207 0
 612 000c 0023     		movs	r3, #0
 613 000e FB60     		str	r3, [r7, #12]
 208:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 614              		.loc 1 208 0
 615 0010 0023     		movs	r3, #0
 616 0012 FB60     		str	r3, [r7, #12]
 617 0014 09E0     		b	.L40
 618              	.L41:
 209:.\main.c      ****         asciiToDiffMan(lineString[i]);
 619              		.loc 1 209 0 discriminator 3
 620 0016 7A68     		ldr	r2, [r7, #4]
 621 0018 FB68     		ldr	r3, [r7, #12]
 622 001a 1344     		add	r3, r3, r2
 623 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 624 001e 1846     		mov	r0, r3
 625 0020 FFF7FEFF 		bl	asciiToDiffMan
 208:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 626              		.loc 1 208 0 discriminator 3
 627 0024 FB68     		ldr	r3, [r7, #12]
 628 0026 0133     		adds	r3, r3, #1
 629 0028 FB60     		str	r3, [r7, #12]
 630              	.L40:
 208:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 631              		.loc 1 208 0 is_stmt 0 discriminator 1
 632 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 633 002c FB68     		ldr	r3, [r7, #12]
 634 002e 9A42     		cmp	r2, r3
 635 0030 F1D8     		bhi	.L41
 210:.\main.c      ****     }
 211:.\main.c      **** }
 636              		.loc 1 211 0 is_stmt 1
 637 0032 1037     		adds	r7, r7, #16
 638              		.cfi_def_cfa_offset 8
 639 0034 BD46     		mov	sp, r7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 16


 640              		.cfi_def_cfa_register 13
 641              		@ sp needed
 642 0036 80BD     		pop	{r7, pc}
 643              		.cfi_endproc
 644              	.LFE69:
 645              		.size	stringToDiffMan, .-stringToDiffMan
 646              		.section	.text.asciiToDiffMan,"ax",%progbits
 647              		.align	2
 648              		.global	asciiToDiffMan
 649              		.thumb
 650              		.thumb_func
 651              		.type	asciiToDiffMan, %function
 652              	asciiToDiffMan:
 653              	.LFB70:
 212:.\main.c      **** 
 213:.\main.c      **** /*
 214:.\main.c      **** Helper method. Do not call from main.
 215:.\main.c      **** Converts a ascii char to a differental manchester line encoded version
 216:.\main.c      **** */
 217:.\main.c      **** void asciiToDiffMan(char asciiChar)
 218:.\main.c      **** {
 654              		.loc 1 218 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 104
 657              		@ frame_needed = 1, uses_anonymous_args = 0
 658              		@ link register save eliminated.
 659 0000 80B4     		push	{r7}
 660              		.cfi_def_cfa_offset 4
 661              		.cfi_offset 7, -4
 662 0002 9BB0     		sub	sp, sp, #108
 663              		.cfi_def_cfa_offset 112
 664 0004 00AF     		add	r7, sp, #0
 665              		.cfi_def_cfa_register 7
 666 0006 0346     		mov	r3, r0
 667 0008 FB71     		strb	r3, [r7, #7]
 219:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 668              		.loc 1 219 0
 669 000a 6C4B     		ldr	r3, .L54
 670 000c 1B68     		ldr	r3, [r3]
 671 000e 013B     		subs	r3, r3, #1
 672 0010 6B4A     		ldr	r2, .L54+4
 673 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 674 0016 87F86730 		strb	r3, [r7, #103]
 220:.\main.c      ****     //send starting 1 bit (encoded)
 221:.\main.c      ****     if(previousHalfBit == 1){
 675              		.loc 1 221 0
 676 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 677 001e 012B     		cmp	r3, #1
 678 0020 16D1     		bne	.L43
 222:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 679              		.loc 1 222 0
 680 0022 664B     		ldr	r3, .L54
 681 0024 1B68     		ldr	r3, [r3]
 682 0026 664A     		ldr	r2, .L54+4
 683 0028 0121     		movs	r1, #1
 684 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 223:.\main.c      ****         halfBitIndex++;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 17


 685              		.loc 1 223 0
 686 002e 634B     		ldr	r3, .L54
 687 0030 1B68     		ldr	r3, [r3]
 688 0032 0133     		adds	r3, r3, #1
 689 0034 614A     		ldr	r2, .L54
 690 0036 1360     		str	r3, [r2]
 224:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 691              		.loc 1 224 0
 692 0038 604B     		ldr	r3, .L54
 693 003a 1B68     		ldr	r3, [r3]
 694 003c 604A     		ldr	r2, .L54+4
 695 003e 0021     		movs	r1, #0
 696 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 225:.\main.c      ****         halfBitIndex++;
 697              		.loc 1 225 0
 698 0044 5D4B     		ldr	r3, .L54
 699 0046 1B68     		ldr	r3, [r3]
 700 0048 0133     		adds	r3, r3, #1
 701 004a 5C4A     		ldr	r2, .L54
 702 004c 1360     		str	r3, [r2]
 703 004e 15E0     		b	.L44
 704              	.L43:
 226:.\main.c      ****     }else{
 227:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 705              		.loc 1 227 0
 706 0050 5A4B     		ldr	r3, .L54
 707 0052 1B68     		ldr	r3, [r3]
 708 0054 5A4A     		ldr	r2, .L54+4
 709 0056 0021     		movs	r1, #0
 710 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 228:.\main.c      ****         halfBitIndex++;
 711              		.loc 1 228 0
 712 005c 574B     		ldr	r3, .L54
 713 005e 1B68     		ldr	r3, [r3]
 714 0060 0133     		adds	r3, r3, #1
 715 0062 564A     		ldr	r2, .L54
 716 0064 1360     		str	r3, [r2]
 229:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 717              		.loc 1 229 0
 718 0066 554B     		ldr	r3, .L54
 719 0068 1B68     		ldr	r3, [r3]
 720 006a 554A     		ldr	r2, .L54+4
 721 006c 0121     		movs	r1, #1
 722 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 230:.\main.c      ****         halfBitIndex++;
 723              		.loc 1 230 0
 724 0072 524B     		ldr	r3, .L54
 725 0074 1B68     		ldr	r3, [r3]
 726 0076 0133     		adds	r3, r3, #1
 727 0078 504A     		ldr	r2, .L54
 728 007a 1360     		str	r3, [r2]
 729              	.L44:
 231:.\main.c      ****     } 
 232:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 730              		.loc 1 232 0
 731 007c 4F4B     		ldr	r3, .L54
 732 007e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 18


 733 0080 013B     		subs	r3, r3, #1
 734 0082 4F4A     		ldr	r2, .L54+4
 735 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 736 0088 87F86730 		strb	r3, [r7, #103]
 233:.\main.c      **** 
 234:.\main.c      ****     
 235:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 236:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB 
 237:.\main.c      ****     int i;
 238:.\main.c      ****     for(i=0; asciiChar>0; i++)
 737              		.loc 1 238 0
 738 008c 0023     		movs	r3, #0
 739 008e 3B66     		str	r3, [r7, #96]
 740 0090 0FE0     		b	.L45
 741              	.L46:
 239:.\main.c      ****     { 
 240:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2; 
 742              		.loc 1 240 0 discriminator 3
 743 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 744 0094 03F00102 		and	r2, r3, #1
 745 0098 3B6E     		ldr	r3, [r7, #96]
 746 009a 9B00     		lsls	r3, r3, #2
 747 009c 07F16801 		add	r1, r7, #104
 748 00a0 0B44     		add	r3, r3, r1
 749 00a2 43F85C2C 		str	r2, [r3, #-92]
 241:.\main.c      ****         asciiChar=asciiChar/2;
 750              		.loc 1 241 0 discriminator 3
 751 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 752 00a8 5B08     		lsrs	r3, r3, #1
 753 00aa FB71     		strb	r3, [r7, #7]
 238:.\main.c      ****     { 
 754              		.loc 1 238 0 discriminator 3
 755 00ac 3B6E     		ldr	r3, [r7, #96]
 756 00ae 0133     		adds	r3, r3, #1
 757 00b0 3B66     		str	r3, [r7, #96]
 758              	.L45:
 238:.\main.c      ****     { 
 759              		.loc 1 238 0 is_stmt 0 discriminator 1
 760 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 761 00b4 002B     		cmp	r3, #0
 762 00b6 ECD1     		bne	.L46
 242:.\main.c      ****     }
 243:.\main.c      **** 
 244:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 245:.\main.c      ****     //must start at the end of the array so to encode the MSB first 
 246:.\main.c      ****     int j;
 247:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--) 
 763              		.loc 1 247 0 is_stmt 1
 764 00b8 0623     		movs	r3, #6
 765 00ba FB65     		str	r3, [r7, #92]
 766 00bc 76E0     		b	.L47
 767              	.L53:
 248:.\main.c      ****     {
 249:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 768              		.loc 1 249 0
 769 00be FB6D     		ldr	r3, [r7, #92]
 770 00c0 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 19


 771 00c2 07F16802 		add	r2, r7, #104
 772 00c6 1344     		add	r3, r3, r2
 773 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 774 00cc 012B     		cmp	r3, #1
 775 00ce 31D1     		bne	.L48
 250:.\main.c      ****         {
 251:.\main.c      ****             //bit == 1
 252:.\main.c      ****             if(previousHalfBit == 1)
 776              		.loc 1 252 0
 777 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 778 00d4 012B     		cmp	r3, #1
 779 00d6 16D1     		bne	.L49
 253:.\main.c      ****             {
 254:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 780              		.loc 1 254 0
 781 00d8 384B     		ldr	r3, .L54
 782 00da 1B68     		ldr	r3, [r3]
 783 00dc 384A     		ldr	r2, .L54+4
 784 00de 0121     		movs	r1, #1
 785 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 255:.\main.c      ****                 halfBitIndex++;
 786              		.loc 1 255 0
 787 00e4 354B     		ldr	r3, .L54
 788 00e6 1B68     		ldr	r3, [r3]
 789 00e8 0133     		adds	r3, r3, #1
 790 00ea 344A     		ldr	r2, .L54
 791 00ec 1360     		str	r3, [r2]
 256:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 792              		.loc 1 256 0
 793 00ee 334B     		ldr	r3, .L54
 794 00f0 1B68     		ldr	r3, [r3]
 795 00f2 334A     		ldr	r2, .L54+4
 796 00f4 0021     		movs	r1, #0
 797 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 257:.\main.c      ****                 halfBitIndex++;    
 798              		.loc 1 257 0
 799 00fa 304B     		ldr	r3, .L54
 800 00fc 1B68     		ldr	r3, [r3]
 801 00fe 0133     		adds	r3, r3, #1
 802 0100 2E4A     		ldr	r2, .L54
 803 0102 1360     		str	r3, [r2]
 804 0104 47E0     		b	.L51
 805              	.L49:
 258:.\main.c      ****             }
 259:.\main.c      ****             else
 260:.\main.c      ****             {
 261:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 806              		.loc 1 261 0
 807 0106 2D4B     		ldr	r3, .L54
 808 0108 1B68     		ldr	r3, [r3]
 809 010a 2D4A     		ldr	r2, .L54+4
 810 010c 0021     		movs	r1, #0
 811 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 262:.\main.c      ****                 halfBitIndex++;
 812              		.loc 1 262 0
 813 0112 2A4B     		ldr	r3, .L54
 814 0114 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 20


 815 0116 0133     		adds	r3, r3, #1
 816 0118 284A     		ldr	r2, .L54
 817 011a 1360     		str	r3, [r2]
 263:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 818              		.loc 1 263 0
 819 011c 274B     		ldr	r3, .L54
 820 011e 1B68     		ldr	r3, [r3]
 821 0120 274A     		ldr	r2, .L54+4
 822 0122 0121     		movs	r1, #1
 823 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 264:.\main.c      ****                 halfBitIndex++;
 824              		.loc 1 264 0
 825 0128 244B     		ldr	r3, .L54
 826 012a 1B68     		ldr	r3, [r3]
 827 012c 0133     		adds	r3, r3, #1
 828 012e 234A     		ldr	r2, .L54
 829 0130 1360     		str	r3, [r2]
 830 0132 30E0     		b	.L51
 831              	.L48:
 265:.\main.c      ****             }
 266:.\main.c      ****             
 267:.\main.c      ****         }
 268:.\main.c      ****         else
 269:.\main.c      ****         {
 270:.\main.c      ****             //bit == 0
 271:.\main.c      ****             if(previousHalfBit == 1)
 832              		.loc 1 271 0
 833 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 834 0138 012B     		cmp	r3, #1
 835 013a 16D1     		bne	.L52
 272:.\main.c      ****             {
 273:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 836              		.loc 1 273 0
 837 013c 1F4B     		ldr	r3, .L54
 838 013e 1B68     		ldr	r3, [r3]
 839 0140 1F4A     		ldr	r2, .L54+4
 840 0142 0021     		movs	r1, #0
 841 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 274:.\main.c      ****                 halfBitIndex++;
 842              		.loc 1 274 0
 843 0148 1C4B     		ldr	r3, .L54
 844 014a 1B68     		ldr	r3, [r3]
 845 014c 0133     		adds	r3, r3, #1
 846 014e 1B4A     		ldr	r2, .L54
 847 0150 1360     		str	r3, [r2]
 275:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 848              		.loc 1 275 0
 849 0152 1A4B     		ldr	r3, .L54
 850 0154 1B68     		ldr	r3, [r3]
 851 0156 1A4A     		ldr	r2, .L54+4
 852 0158 0121     		movs	r1, #1
 853 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 276:.\main.c      ****                 halfBitIndex++;
 854              		.loc 1 276 0
 855 015e 174B     		ldr	r3, .L54
 856 0160 1B68     		ldr	r3, [r3]
 857 0162 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 21


 858 0164 154A     		ldr	r2, .L54
 859 0166 1360     		str	r3, [r2]
 860 0168 15E0     		b	.L51
 861              	.L52:
 277:.\main.c      ****             }
 278:.\main.c      ****             else
 279:.\main.c      ****             {
 280:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 862              		.loc 1 280 0
 863 016a 144B     		ldr	r3, .L54
 864 016c 1B68     		ldr	r3, [r3]
 865 016e 144A     		ldr	r2, .L54+4
 866 0170 0121     		movs	r1, #1
 867 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 281:.\main.c      ****                 halfBitIndex++;
 868              		.loc 1 281 0
 869 0176 114B     		ldr	r3, .L54
 870 0178 1B68     		ldr	r3, [r3]
 871 017a 0133     		adds	r3, r3, #1
 872 017c 0F4A     		ldr	r2, .L54
 873 017e 1360     		str	r3, [r2]
 282:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 874              		.loc 1 282 0
 875 0180 0E4B     		ldr	r3, .L54
 876 0182 1B68     		ldr	r3, [r3]
 877 0184 0E4A     		ldr	r2, .L54+4
 878 0186 0021     		movs	r1, #0
 879 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 283:.\main.c      ****                 halfBitIndex++;
 880              		.loc 1 283 0
 881 018c 0B4B     		ldr	r3, .L54
 882 018e 1B68     		ldr	r3, [r3]
 883 0190 0133     		adds	r3, r3, #1
 884 0192 0A4A     		ldr	r2, .L54
 885 0194 1360     		str	r3, [r2]
 886              	.L51:
 284:.\main.c      ****             }
 285:.\main.c      ****         }
 286:.\main.c      ****         
 287:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 887              		.loc 1 287 0 discriminator 2
 888 0196 094B     		ldr	r3, .L54
 889 0198 1B68     		ldr	r3, [r3]
 890 019a 013B     		subs	r3, r3, #1
 891 019c 084A     		ldr	r2, .L54+4
 892 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 893 01a2 87F86730 		strb	r3, [r7, #103]
 247:.\main.c      ****     {
 894              		.loc 1 247 0 discriminator 2
 895 01a6 FB6D     		ldr	r3, [r7, #92]
 896 01a8 013B     		subs	r3, r3, #1
 897 01aa FB65     		str	r3, [r7, #92]
 898              	.L47:
 247:.\main.c      ****     {
 899              		.loc 1 247 0 is_stmt 0 discriminator 1
 900 01ac FB6D     		ldr	r3, [r7, #92]
 901 01ae 002B     		cmp	r3, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 22


 902 01b0 85DA     		bge	.L53
 288:.\main.c      ****     }//end for
 289:.\main.c      ****    
 290:.\main.c      **** }//end function
 903              		.loc 1 290 0 is_stmt 1
 904 01b2 6C37     		adds	r7, r7, #108
 905              		.cfi_def_cfa_offset 4
 906 01b4 BD46     		mov	sp, r7
 907              		.cfi_def_cfa_register 13
 908              		@ sp needed
 909 01b6 5DF8047B 		ldr	r7, [sp], #4
 910              		.cfi_restore 7
 911              		.cfi_def_cfa_offset 0
 912 01ba 7047     		bx	lr
 913              	.L55:
 914              		.align	2
 915              	.L54:
 916 01bc 00000000 		.word	halfBitIndex
 917 01c0 00000000 		.word	diffManEncodedData
 918              		.cfi_endproc
 919              	.LFE70:
 920              		.size	asciiToDiffMan, .-asciiToDiffMan
 921              		.global	__aeabi_i2d
 922              		.global	__aeabi_ddiv
 923              		.global	__aeabi_dmul
 924              		.global	__aeabi_d2iz
 925              		.section	.text.transmitData,"ax",%progbits
 926              		.align	2
 927              		.global	transmitData
 928              		.thumb
 929              		.thumb_func
 930              		.type	transmitData, %function
 931              	transmitData:
 932              	.LFB71:
 291:.\main.c      **** 
 292:.\main.c      **** /*
 293:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 294:.\main.c      **** Checks network state before transmitting.
 295:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 296:.\main.c      **** */
 297:.\main.c      **** void transmitData(){
 933              		.loc 1 297 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 82B0     		sub	sp, sp, #8
 942              		.cfi_def_cfa_offset 16
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 298:.\main.c      ****     int i;
 299:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 945              		.loc 1 299 0
 946 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 23


 947 0008 7B60     		str	r3, [r7, #4]
 948 000a 50E0     		b	.L57
 949              	.L61:
 300:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 301:.\main.c      ****         //Else break out of transmition and wait random time
 302:.\main.c      ****         if(networkState != idle){
 950              		.loc 1 302 0
 951 000c 304B     		ldr	r3, .L63
 952 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 953 0010 012B     		cmp	r3, #1
 954 0012 34D0     		beq	.L58
 303:.\main.c      ****             if(networkState == collision){
 955              		.loc 1 303 0
 956 0014 2E4B     		ldr	r3, .L63
 957 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 958 0018 022B     		cmp	r3, #2
 959 001a 30D1     		bne	.L58
 960              	.LBB3:
 304:.\main.c      ****                 TX_pin_Write(1);
 961              		.loc 1 304 0
 962 001c 0120     		movs	r0, #1
 963 001e FFF7FEFF 		bl	TX_pin_Write
 305:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 964              		.loc 1 305 0
 965 0022 FFF7FEFF 		bl	getRandomNumber
 966 0026 0346     		mov	r3, r0
 967 0028 1846     		mov	r0, r3
 968 002a FFF7FEFF 		bl	__aeabi_i2d
 969 002e 0246     		mov	r2, r0
 970 0030 0B46     		mov	r3, r1
 971 0032 1046     		mov	r0, r2
 972 0034 1946     		mov	r1, r3
 973 0036 4FF00002 		mov	r2, #0
 974 003a 264B     		ldr	r3, .L63+4
 975 003c FFF7FEFF 		bl	__aeabi_ddiv
 976 0040 0246     		mov	r2, r0
 977 0042 0B46     		mov	r3, r1
 978 0044 1046     		mov	r0, r2
 979 0046 1946     		mov	r1, r3
 980 0048 4FF00002 		mov	r2, #0
 981 004c 224B     		ldr	r3, .L63+8
 982 004e FFF7FEFF 		bl	__aeabi_dmul
 983 0052 0246     		mov	r2, r0
 984 0054 0B46     		mov	r3, r1
 985 0056 1046     		mov	r0, r2
 986 0058 1946     		mov	r1, r3
 987 005a FFF7FEFF 		bl	__aeabi_d2iz
 988 005e 0346     		mov	r3, r0
 989 0060 3B60     		str	r3, [r7]
 306:.\main.c      ****                
 307:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 308:.\main.c      ****                 CyDelay(value);
 990              		.loc 1 308 0
 991 0062 3B68     		ldr	r3, [r7]
 992 0064 1846     		mov	r0, r3
 993 0066 FFF7FEFF 		bl	CyDelay
 309:.\main.c      ****                 LCD_Position(0,0);
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 24


 994              		.loc 1 309 0
 995 006a 0020     		movs	r0, #0
 996 006c 0021     		movs	r1, #0
 997 006e FFF7FEFF 		bl	LCD_Position
 310:.\main.c      ****                 LCD_PrintNumber(value);
 998              		.loc 1 310 0
 999 0072 3B68     		ldr	r3, [r7]
 1000 0074 9BB2     		uxth	r3, r3
 1001 0076 1846     		mov	r0, r3
 1002 0078 FFF7FEFF 		bl	LCD_PrintU32Number
 311:.\main.c      ****                 break;
 1003              		.loc 1 311 0
 1004 007c 1CE0     		b	.L59
 1005              	.L58:
 1006              	.LBE3:
 312:.\main.c      ****             }
 313:.\main.c      ****         }
 314:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1007              		.loc 1 314 0
 1008 007e 174A     		ldr	r2, .L63+12
 1009 0080 7B68     		ldr	r3, [r7, #4]
 1010 0082 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1011 0086 DBB2     		uxtb	r3, r3
 1012 0088 1846     		mov	r0, r3
 1013 008a FFF7FEFF 		bl	TX_pin_Write
 315:.\main.c      ****         Timer_Start();
 1014              		.loc 1 315 0
 1015 008e FFF7FEFF 		bl	Timer_Start
 316:.\main.c      ****         while(!timerExpired); 
 1016              		.loc 1 316 0
 1017 0092 00BF     		nop
 1018              	.L60:
 1019              		.loc 1 316 0 is_stmt 0 discriminator 1
 1020 0094 124B     		ldr	r3, .L63+16
 1021 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1022 0098 83F00103 		eor	r3, r3, #1
 1023 009c DBB2     		uxtb	r3, r3
 1024 009e 002B     		cmp	r3, #0
 1025 00a0 F8D1     		bne	.L60
 317:.\main.c      ****         timerExpired = false;
 1026              		.loc 1 317 0 is_stmt 1 discriminator 2
 1027 00a2 0F4B     		ldr	r3, .L63+16
 1028 00a4 0022     		movs	r2, #0
 1029 00a6 1A70     		strb	r2, [r3]
 299:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1030              		.loc 1 299 0 discriminator 2
 1031 00a8 7B68     		ldr	r3, [r7, #4]
 1032 00aa 0133     		adds	r3, r3, #1
 1033 00ac 7B60     		str	r3, [r7, #4]
 1034              	.L57:
 299:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1035              		.loc 1 299 0 is_stmt 0 discriminator 1
 1036 00ae 0D4B     		ldr	r3, .L63+20
 1037 00b0 1B68     		ldr	r3, [r3]
 1038 00b2 7A68     		ldr	r2, [r7, #4]
 1039 00b4 9A42     		cmp	r2, r3
 1040 00b6 A9DB     		blt	.L61
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 25


 1041              	.L59:
 318:.\main.c      ****     }
 319:.\main.c      ****     
 320:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag 
 321:.\main.c      ****     if(i == halfBitIndex){
 1042              		.loc 1 321 0 is_stmt 1
 1043 00b8 0A4B     		ldr	r3, .L63+20
 1044 00ba 1B68     		ldr	r3, [r3]
 1045 00bc 7A68     		ldr	r2, [r7, #4]
 1046 00be 9A42     		cmp	r2, r3
 1047 00c0 02D1     		bne	.L56
 322:.\main.c      ****         dataTransmissionComplete = true;
 1048              		.loc 1 322 0
 1049 00c2 094B     		ldr	r3, .L63+24
 1050 00c4 0122     		movs	r2, #1
 1051 00c6 1A70     		strb	r2, [r3]
 1052              	.L56:
 323:.\main.c      ****     }
 324:.\main.c      **** }
 1053              		.loc 1 324 0
 1054 00c8 0837     		adds	r7, r7, #8
 1055              		.cfi_def_cfa_offset 8
 1056 00ca BD46     		mov	sp, r7
 1057              		.cfi_def_cfa_register 13
 1058              		@ sp needed
 1059 00cc 80BD     		pop	{r7, pc}
 1060              	.L64:
 1061 00ce 00BF     		.align	2
 1062              	.L63:
 1063 00d0 00000000 		.word	networkState
 1064 00d4 00006040 		.word	1080033280
 1065 00d8 00008940 		.word	1082720256
 1066 00dc 00000000 		.word	diffManEncodedData
 1067 00e0 00000000 		.word	timerExpired
 1068 00e4 00000000 		.word	halfBitIndex
 1069 00e8 00000000 		.word	dataTransmissionComplete
 1070              		.cfi_endproc
 1071              	.LFE71:
 1072              		.size	transmitData, .-transmitData
 1073              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1074              		.align	2
 1075              		.global	setNetworkStateOnLEDs
 1076              		.thumb
 1077              		.thumb_func
 1078              		.type	setNetworkStateOnLEDs, %function
 1079              	setNetworkStateOnLEDs:
 1080              	.LFB72:
 325:.\main.c      **** 
 326:.\main.c      **** void setNetworkStateOnLEDs(){
 1081              		.loc 1 326 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 1, uses_anonymous_args = 0
 1085 0000 80B5     		push	{r7, lr}
 1086              		.cfi_def_cfa_offset 8
 1087              		.cfi_offset 7, -8
 1088              		.cfi_offset 14, -4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 26


 1089 0002 00AF     		add	r7, sp, #0
 1090              		.cfi_def_cfa_register 7
 327:.\main.c      **** 	 switch(networkState){
 1091              		.loc 1 327 0
 1092 0004 134B     		ldr	r3, .L71
 1093 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1094 0008 012B     		cmp	r3, #1
 1095 000a 0ED0     		beq	.L67
 1096 000c 022B     		cmp	r3, #2
 1097 000e 16D0     		beq	.L68
 1098 0010 002B     		cmp	r3, #0
 1099 0012 00D0     		beq	.L69
 328:.\main.c      ****         case busy:
 329:.\main.c      ****         {
 330:.\main.c      ****             LED4_Write(1);
 331:.\main.c      ****             LED3_Write(0);
 332:.\main.c      ****             LED2_Write(0);
 333:.\main.c      ****             break;
 334:.\main.c      ****         }
 335:.\main.c      ****         case idle:
 336:.\main.c      ****         {
 337:.\main.c      ****             LED3_Write(1);
 338:.\main.c      ****             LED4_Write(0);
 339:.\main.c      ****             LED2_Write(0);
 340:.\main.c      ****             break;
 341:.\main.c      ****         }
 342:.\main.c      ****         case collision:
 343:.\main.c      ****         {
 344:.\main.c      ****             LED2_Write(1);
 345:.\main.c      ****             LED4_Write(0);
 346:.\main.c      ****             LED3_Write(0);
 347:.\main.c      ****             break;
 348:.\main.c      ****         }
 349:.\main.c      ****         default:
 350:.\main.c      ****         {
 351:.\main.c      ****            //error
 352:.\main.c      ****             break;
 1100              		.loc 1 352 0
 1101 0014 1DE0     		b	.L65
 1102              	.L69:
 330:.\main.c      ****             LED3_Write(0);
 1103              		.loc 1 330 0
 1104 0016 0120     		movs	r0, #1
 1105 0018 FFF7FEFF 		bl	LED4_Write
 331:.\main.c      ****             LED2_Write(0);
 1106              		.loc 1 331 0
 1107 001c 0020     		movs	r0, #0
 1108 001e FFF7FEFF 		bl	LED3_Write
 332:.\main.c      ****             break;
 1109              		.loc 1 332 0
 1110 0022 0020     		movs	r0, #0
 1111 0024 FFF7FEFF 		bl	LED2_Write
 333:.\main.c      ****         }
 1112              		.loc 1 333 0
 1113 0028 13E0     		b	.L65
 1114              	.L67:
 337:.\main.c      ****             LED4_Write(0);
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 27


 1115              		.loc 1 337 0
 1116 002a 0120     		movs	r0, #1
 1117 002c FFF7FEFF 		bl	LED3_Write
 338:.\main.c      ****             LED2_Write(0);
 1118              		.loc 1 338 0
 1119 0030 0020     		movs	r0, #0
 1120 0032 FFF7FEFF 		bl	LED4_Write
 339:.\main.c      ****             break;
 1121              		.loc 1 339 0
 1122 0036 0020     		movs	r0, #0
 1123 0038 FFF7FEFF 		bl	LED2_Write
 340:.\main.c      ****         }
 1124              		.loc 1 340 0
 1125 003c 09E0     		b	.L65
 1126              	.L68:
 344:.\main.c      ****             LED4_Write(0);
 1127              		.loc 1 344 0
 1128 003e 0120     		movs	r0, #1
 1129 0040 FFF7FEFF 		bl	LED2_Write
 345:.\main.c      ****             LED3_Write(0);
 1130              		.loc 1 345 0
 1131 0044 0020     		movs	r0, #0
 1132 0046 FFF7FEFF 		bl	LED4_Write
 346:.\main.c      ****             break;
 1133              		.loc 1 346 0
 1134 004a 0020     		movs	r0, #0
 1135 004c FFF7FEFF 		bl	LED3_Write
 347:.\main.c      ****         }
 1136              		.loc 1 347 0
 1137 0050 00BF     		nop
 1138              	.L65:
 353:.\main.c      ****         } 
 354:.\main.c      **** 	}
 355:.\main.c      **** }
 1139              		.loc 1 355 0
 1140 0052 80BD     		pop	{r7, pc}
 1141              	.L72:
 1142              		.align	2
 1143              	.L71:
 1144 0054 00000000 		.word	networkState
 1145              		.cfi_endproc
 1146              	.LFE72:
 1147              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1148              		.section	.text.getRandomNumber,"ax",%progbits
 1149              		.align	2
 1150              		.global	getRandomNumber
 1151              		.thumb
 1152              		.thumb_func
 1153              		.type	getRandomNumber, %function
 1154              	getRandomNumber:
 1155              	.LFB73:
 356:.\main.c      **** 
 357:.\main.c      **** /*
 358:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 359:.\main.c      **** */
 360:.\main.c      **** int getRandomNumber()
 361:.\main.c      **** {
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 28


 1156              		.loc 1 361 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 16
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160 0000 80B5     		push	{r7, lr}
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 84B0     		sub	sp, sp, #16
 1165              		.cfi_def_cfa_offset 24
 1166 0004 00AF     		add	r7, sp, #0
 1167              		.cfi_def_cfa_register 7
 362:.\main.c      ****     const int MIN_N = 1;
 1168              		.loc 1 362 0
 1169 0006 0123     		movs	r3, #1
 1170 0008 FB60     		str	r3, [r7, #12]
 363:.\main.c      ****     const int MAX_N = 128;
 1171              		.loc 1 363 0
 1172 000a 8023     		movs	r3, #128
 1173 000c BB60     		str	r3, [r7, #8]
 364:.\main.c      ****         
 365:.\main.c      ****     int n;
 366:.\main.c      **** /*
 367:.\main.c      ****     Get first and second random numbers.
 368:.\main.c      ****     */
 369:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1174              		.loc 1 369 0
 1175 000e FFF7FEFF 		bl	rand
 1176 0012 0246     		mov	r2, r0
 1177 0014 B968     		ldr	r1, [r7, #8]
 1178 0016 FB68     		ldr	r3, [r7, #12]
 1179 0018 CB1A     		subs	r3, r1, r3
 1180 001a 0133     		adds	r3, r3, #1
 1181 001c 92FBF3F1 		sdiv	r1, r2, r3
 1182 0020 03FB01F3 		mul	r3, r3, r1
 1183 0024 D21A     		subs	r2, r2, r3
 1184 0026 FB68     		ldr	r3, [r7, #12]
 1185 0028 1344     		add	r3, r3, r2
 1186 002a 7B60     		str	r3, [r7, #4]
 370:.\main.c      ****     return n;
 1187              		.loc 1 370 0
 1188 002c 7B68     		ldr	r3, [r7, #4]
 371:.\main.c      **** }
 1189              		.loc 1 371 0
 1190 002e 1846     		mov	r0, r3
 1191 0030 1037     		adds	r7, r7, #16
 1192              		.cfi_def_cfa_offset 8
 1193 0032 BD46     		mov	sp, r7
 1194              		.cfi_def_cfa_register 13
 1195              		@ sp needed
 1196 0034 80BD     		pop	{r7, pc}
 1197              		.cfi_endproc
 1198              	.LFE73:
 1199              		.size	getRandomNumber, .-getRandomNumber
 1200 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1201              		.align	2
 1202              		.global	diffManToASCII
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 29


 1203              		.thumb
 1204              		.thumb_func
 1205              		.type	diffManToASCII, %function
 1206              	diffManToASCII:
 1207              	.LFB74:
 372:.\main.c      **** 
 373:.\main.c      **** /*
 374:.\main.c      **** Helper method.
 375:.\main.c      **** Convert differental manchester line encoded byte to ascii char
 376:.\main.c      **** 
 377:.\main.c      **** charPtr = pointer to char 
 378:.\main.c      **** */
 379:.\main.c      **** void diffManToASCII(char *charPtr)
 380:.\main.c      **** {
 1208              		.loc 1 380 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 16
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212              		@ link register save eliminated.
 1213 0000 80B4     		push	{r7}
 1214              		.cfi_def_cfa_offset 4
 1215              		.cfi_offset 7, -4
 1216 0002 85B0     		sub	sp, sp, #20
 1217              		.cfi_def_cfa_offset 24
 1218 0004 00AF     		add	r7, sp, #0
 1219              		.cfi_def_cfa_register 7
 1220 0006 7860     		str	r0, [r7, #4]
 381:.\main.c      ****     int i;
 382:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1221              		.loc 1 382 0
 1222 0008 0023     		movs	r3, #0
 1223 000a FB60     		str	r3, [r7, #12]
 1224 000c 46E0     		b	.L76
 1225              	.L82:
 1226              	.LBB4:
 383:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1227              		.loc 1 383 0
 1228 000e 274B     		ldr	r3, .L83
 1229 0010 1B68     		ldr	r3, [r3]
 1230 0012 013B     		subs	r3, r3, #1
 1231 0014 264A     		ldr	r2, .L83+4
 1232 0016 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1233 001a FB72     		strb	r3, [r7, #11]
 384:.\main.c      ****         //send starting 1 bit (encoded)
 385:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1234              		.loc 1 385 0
 1235 001c 234B     		ldr	r3, .L83
 1236 001e 1B68     		ldr	r3, [r3]
 1237 0020 234A     		ldr	r2, .L83+4
 1238 0022 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1239 0026 012B     		cmp	r3, #1
 1240 0028 18D1     		bne	.L77
 386:.\main.c      ****             //current half bit is 1
 387:.\main.c      ****             if(previousHalfBit == 1)
 1241              		.loc 1 387 0
 1242 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1243 002c 012B     		cmp	r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 30


 1244 002e 10D1     		bne	.L78
 388:.\main.c      ****             {
 389:.\main.c      ****                 *charPtr |= (1 << (7 - i));      
 1245              		.loc 1 389 0
 1246 0030 7B68     		ldr	r3, [r7, #4]
 1247 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1248 0034 D9B2     		uxtb	r1, r3
 1249 0036 FB68     		ldr	r3, [r7, #12]
 1250 0038 C3F10703 		rsb	r3, r3, #7
 1251 003c 0122     		movs	r2, #1
 1252 003e 02FA03F3 		lsl	r3, r2, r3
 1253 0042 DBB2     		uxtb	r3, r3
 1254 0044 0A46     		mov	r2, r1
 1255 0046 1343     		orrs	r3, r3, r2
 1256 0048 DBB2     		uxtb	r3, r3
 1257 004a DAB2     		uxtb	r2, r3
 1258 004c 7B68     		ldr	r3, [r7, #4]
 1259 004e 1A70     		strb	r2, [r3]
 1260 0050 1CE0     		b	.L80
 1261              	.L78:
 390:.\main.c      ****             }
 391:.\main.c      ****             else
 392:.\main.c      ****             {
 393:.\main.c      ****                 *charPtr |= (0 << (7 - i));    
 1262              		.loc 1 393 0
 1263 0052 7B68     		ldr	r3, [r7, #4]
 1264 0054 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1265 0056 7B68     		ldr	r3, [r7, #4]
 1266 0058 1A70     		strb	r2, [r3]
 1267 005a 17E0     		b	.L80
 1268              	.L77:
 394:.\main.c      ****             }
 395:.\main.c      ****         }
 396:.\main.c      ****         else{
 397:.\main.c      ****             //current half bit is 0
 398:.\main.c      ****             if(previousHalfBit == 1)
 1269              		.loc 1 398 0
 1270 005c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1271 005e 012B     		cmp	r3, #1
 1272 0060 04D1     		bne	.L81
 399:.\main.c      ****             {
 400:.\main.c      ****                 *charPtr |= (0 << (7 - i));    
 1273              		.loc 1 400 0
 1274 0062 7B68     		ldr	r3, [r7, #4]
 1275 0064 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1276 0066 7B68     		ldr	r3, [r7, #4]
 1277 0068 1A70     		strb	r2, [r3]
 1278 006a 0FE0     		b	.L80
 1279              	.L81:
 401:.\main.c      ****             }
 402:.\main.c      ****             else
 403:.\main.c      ****             {
 404:.\main.c      ****                 *charPtr |= (1 << (7 - i));    
 1280              		.loc 1 404 0
 1281 006c 7B68     		ldr	r3, [r7, #4]
 1282 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1283 0070 D9B2     		uxtb	r1, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 31


 1284 0072 FB68     		ldr	r3, [r7, #12]
 1285 0074 C3F10703 		rsb	r3, r3, #7
 1286 0078 0122     		movs	r2, #1
 1287 007a 02FA03F3 		lsl	r3, r2, r3
 1288 007e DBB2     		uxtb	r3, r3
 1289 0080 0A46     		mov	r2, r1
 1290 0082 1343     		orrs	r3, r3, r2
 1291 0084 DBB2     		uxtb	r3, r3
 1292 0086 DAB2     		uxtb	r2, r3
 1293 0088 7B68     		ldr	r3, [r7, #4]
 1294 008a 1A70     		strb	r2, [r3]
 1295              	.L80:
 405:.\main.c      ****             }
 406:.\main.c      ****         } 
 407:.\main.c      ****         receivedDataIndex += 2;
 1296              		.loc 1 407 0 discriminator 2
 1297 008c 074B     		ldr	r3, .L83
 1298 008e 1B68     		ldr	r3, [r3]
 1299 0090 0233     		adds	r3, r3, #2
 1300 0092 064A     		ldr	r2, .L83
 1301 0094 1360     		str	r3, [r2]
 1302              	.LBE4:
 382:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1303              		.loc 1 382 0 discriminator 2
 1304 0096 FB68     		ldr	r3, [r7, #12]
 1305 0098 0133     		adds	r3, r3, #1
 1306 009a FB60     		str	r3, [r7, #12]
 1307              	.L76:
 382:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1308              		.loc 1 382 0 is_stmt 0 discriminator 1
 1309 009c FB68     		ldr	r3, [r7, #12]
 1310 009e 072B     		cmp	r3, #7
 1311 00a0 B5DD     		ble	.L82
 408:.\main.c      ****     }//end for loop
 409:.\main.c      ****    
 410:.\main.c      **** }
 1312              		.loc 1 410 0 is_stmt 1
 1313 00a2 1437     		adds	r7, r7, #20
 1314              		.cfi_def_cfa_offset 4
 1315 00a4 BD46     		mov	sp, r7
 1316              		.cfi_def_cfa_register 13
 1317              		@ sp needed
 1318 00a6 5DF8047B 		ldr	r7, [sp], #4
 1319              		.cfi_restore 7
 1320              		.cfi_def_cfa_offset 0
 1321 00aa 7047     		bx	lr
 1322              	.L84:
 1323              		.align	2
 1324              	.L83:
 1325 00ac 00000000 		.word	receivedDataIndex
 1326 00b0 00000000 		.word	diffManReceivedData
 1327              		.cfi_endproc
 1328              	.LFE74:
 1329              		.size	diffManToASCII, .-diffManToASCII
 1330              		.section	.text.printChar,"ax",%progbits
 1331              		.align	2
 1332              		.global	printChar
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 32


 1333              		.thumb
 1334              		.thumb_func
 1335              		.type	printChar, %function
 1336              	printChar:
 1337              	.LFB75:
 411:.\main.c      **** 
 412:.\main.c      **** //Formats char and prints to LCD
 413:.\main.c      **** void printChar(char *charPtr){
 1338              		.loc 1 413 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 8
 1341              		@ frame_needed = 1, uses_anonymous_args = 0
 1342 0000 80B5     		push	{r7, lr}
 1343              		.cfi_def_cfa_offset 8
 1344              		.cfi_offset 7, -8
 1345              		.cfi_offset 14, -4
 1346 0002 82B0     		sub	sp, sp, #8
 1347              		.cfi_def_cfa_offset 16
 1348 0004 00AF     		add	r7, sp, #0
 1349              		.cfi_def_cfa_register 7
 1350 0006 7860     		str	r0, [r7, #4]
 414:.\main.c      ****     ///Remove leading 1 bit of char
 415:.\main.c      ****     *charPtr &= ASCII_CHAR_MASK;
 1351              		.loc 1 415 0
 1352 0008 7B68     		ldr	r3, [r7, #4]
 1353 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1354 000c 03F07F03 		and	r3, r3, #127
 1355 0010 DAB2     		uxtb	r2, r3
 1356 0012 7B68     		ldr	r3, [r7, #4]
 1357 0014 1A70     		strb	r2, [r3]
 416:.\main.c      ****     
 417:.\main.c      ****     LCD_PutChar(*charPtr);
 1358              		.loc 1 417 0
 1359 0016 7B68     		ldr	r3, [r7, #4]
 1360 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1361 001a 1846     		mov	r0, r3
 1362 001c FFF7FEFF 		bl	LCD_PutChar
 418:.\main.c      **** }
 1363              		.loc 1 418 0
 1364 0020 0837     		adds	r7, r7, #8
 1365              		.cfi_def_cfa_offset 8
 1366 0022 BD46     		mov	sp, r7
 1367              		.cfi_def_cfa_register 13
 1368              		@ sp needed
 1369 0024 80BD     		pop	{r7, pc}
 1370              		.cfi_endproc
 1371              	.LFE75:
 1372              		.size	printChar, .-printChar
 1373 0026 00BF     		.text
 1374              	.Letext0:
 1375              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1376              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1377              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1378              		.file 5 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1379              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1380              		.section	.debug_info,"",%progbits
 1381              	.Ldebug_info0:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 33


 1382 0000 57040000 		.4byte	0x457
 1383 0004 0400     		.2byte	0x4
 1384 0006 00000000 		.4byte	.Ldebug_abbrev0
 1385 000a 04       		.byte	0x4
 1386 000b 01       		.uleb128 0x1
 1387 000c 10010000 		.4byte	.LASF57
 1388 0010 01       		.byte	0x1
 1389 0011 45030000 		.4byte	.LASF58
 1390 0015 AE000000 		.4byte	.LASF59
 1391 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1392 001d 00000000 		.4byte	0
 1393 0021 00000000 		.4byte	.Ldebug_line0
 1394 0025 02       		.uleb128 0x2
 1395 0026 01       		.byte	0x1
 1396 0027 06       		.byte	0x6
 1397 0028 FA010000 		.4byte	.LASF0
 1398 002c 02       		.uleb128 0x2
 1399 002d 01       		.byte	0x1
 1400 002e 08       		.byte	0x8
 1401 002f BE010000 		.4byte	.LASF1
 1402 0033 02       		.uleb128 0x2
 1403 0034 02       		.byte	0x2
 1404 0035 05       		.byte	0x5
 1405 0036 67000000 		.4byte	.LASF2
 1406 003a 02       		.uleb128 0x2
 1407 003b 02       		.byte	0x2
 1408 003c 07       		.byte	0x7
 1409 003d 8A020000 		.4byte	.LASF3
 1410 0041 03       		.uleb128 0x3
 1411 0042 4E030000 		.4byte	.LASF9
 1412 0046 02       		.byte	0x2
 1413 0047 3F       		.byte	0x3f
 1414 0048 4C000000 		.4byte	0x4c
 1415 004c 02       		.uleb128 0x2
 1416 004d 04       		.byte	0x4
 1417 004e 05       		.byte	0x5
 1418 004f 6A020000 		.4byte	.LASF4
 1419 0053 02       		.uleb128 0x2
 1420 0054 04       		.byte	0x4
 1421 0055 07       		.byte	0x7
 1422 0056 36020000 		.4byte	.LASF5
 1423 005a 02       		.uleb128 0x2
 1424 005b 08       		.byte	0x8
 1425 005c 05       		.byte	0x5
 1426 005d EB000000 		.4byte	.LASF6
 1427 0061 02       		.uleb128 0x2
 1428 0062 08       		.byte	0x8
 1429 0063 07       		.byte	0x7
 1430 0064 F9000000 		.4byte	.LASF7
 1431 0068 04       		.uleb128 0x4
 1432 0069 04       		.byte	0x4
 1433 006a 05       		.byte	0x5
 1434 006b 696E7400 		.ascii	"int\000"
 1435 006f 02       		.uleb128 0x2
 1436 0070 04       		.byte	0x4
 1437 0071 07       		.byte	0x7
 1438 0072 29020000 		.4byte	.LASF8
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 34


 1439 0076 03       		.uleb128 0x3
 1440 0077 82020000 		.4byte	.LASF10
 1441 007b 03       		.byte	0x3
 1442 007c 2C       		.byte	0x2c
 1443 007d 41000000 		.4byte	0x41
 1444 0081 03       		.uleb128 0x3
 1445 0082 9D000000 		.4byte	.LASF11
 1446 0086 04       		.byte	0x4
 1447 0087 C2       		.byte	0xc2
 1448 0088 2C000000 		.4byte	0x2c
 1449 008c 03       		.uleb128 0x3
 1450 008d 81000000 		.4byte	.LASF12
 1451 0091 04       		.byte	0x4
 1452 0092 C3       		.byte	0xc3
 1453 0093 3A000000 		.4byte	0x3a
 1454 0097 02       		.uleb128 0x2
 1455 0098 04       		.byte	0x4
 1456 0099 04       		.byte	0x4
 1457 009a E5000000 		.4byte	.LASF13
 1458 009e 02       		.uleb128 0x2
 1459 009f 08       		.byte	0x8
 1460 00a0 04       		.byte	0x4
 1461 00a1 D9020000 		.4byte	.LASF14
 1462 00a5 02       		.uleb128 0x2
 1463 00a6 01       		.byte	0x1
 1464 00a7 08       		.byte	0x8
 1465 00a8 58020000 		.4byte	.LASF15
 1466 00ac 05       		.uleb128 0x5
 1467 00ad C2020000 		.4byte	.LASF16
 1468 00b1 04       		.byte	0x4
 1469 00b2 6C01     		.2byte	0x16c
 1470 00b4 B8000000 		.4byte	0xb8
 1471 00b8 06       		.uleb128 0x6
 1472 00b9 81000000 		.4byte	0x81
 1473 00bd 02       		.uleb128 0x2
 1474 00be 04       		.byte	0x4
 1475 00bf 07       		.byte	0x7
 1476 00c0 36000000 		.4byte	.LASF17
 1477 00c4 07       		.uleb128 0x7
 1478 00c5 04       		.byte	0x4
 1479 00c6 A5000000 		.4byte	0xa5
 1480 00ca 03       		.uleb128 0x3
 1481 00cb DB010000 		.4byte	.LASF18
 1482 00cf 05       		.byte	0x5
 1483 00d0 7A       		.byte	0x7a
 1484 00d1 4C000000 		.4byte	0x4c
 1485 00d5 08       		.uleb128 0x8
 1486 00d6 20000000 		.4byte	.LASF60
 1487 00da 01       		.byte	0x1
 1488 00db 01       		.byte	0x1
 1489 00dc 1F       		.byte	0x1f
 1490 00dd F4000000 		.4byte	0xf4
 1491 00e1 09       		.uleb128 0x9
 1492 00e2 AB020000 		.4byte	.LASF19
 1493 00e6 00       		.sleb128 0
 1494 00e7 09       		.uleb128 0x9
 1495 00e8 15020000 		.4byte	.LASF20
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 35


 1496 00ec 01       		.sleb128 1
 1497 00ed 09       		.uleb128 0x9
 1498 00ee 77000000 		.4byte	.LASF21
 1499 00f2 02       		.sleb128 2
 1500 00f3 00       		.byte	0
 1501 00f4 0A       		.uleb128 0xa
 1502 00f5 0D000000 		.4byte	.LASF22
 1503 00f9 01       		.byte	0x1
 1504 00fa 21       		.byte	0x21
 1505 00fb 00000000 		.4byte	.LFB63
 1506 00ff 28000000 		.4byte	.LFE63-.LFB63
 1507 0103 01       		.uleb128 0x1
 1508 0104 9C       		.byte	0x9c
 1509 0105 0A       		.uleb128 0xa
 1510 0106 57000000 		.4byte	.LASF23
 1511 010a 01       		.byte	0x1
 1512 010b 2B       		.byte	0x2b
 1513 010c 00000000 		.4byte	.LFB64
 1514 0110 3C000000 		.4byte	.LFE64-.LFB64
 1515 0114 01       		.uleb128 0x1
 1516 0115 9C       		.byte	0x9c
 1517 0116 0A       		.uleb128 0xa
 1518 0117 72030000 		.4byte	.LASF24
 1519 011b 01       		.byte	0x1
 1520 011c 36       		.byte	0x36
 1521 011d 00000000 		.4byte	.LFB65
 1522 0121 1C000000 		.4byte	.LFE65-.LFB65
 1523 0125 01       		.uleb128 0x1
 1524 0126 9C       		.byte	0x9c
 1525 0127 0A       		.uleb128 0xa
 1526 0128 23030000 		.4byte	.LASF25
 1527 012c 01       		.byte	0x1
 1528 012d 3C       		.byte	0x3c
 1529 012e 00000000 		.4byte	.LFB66
 1530 0132 34000000 		.4byte	.LFE66-.LFB66
 1531 0136 01       		.uleb128 0x1
 1532 0137 9C       		.byte	0x9c
 1533 0138 0B       		.uleb128 0xb
 1534 0139 52000000 		.4byte	.LASF31
 1535 013d 01       		.byte	0x1
 1536 013e 42       		.byte	0x42
 1537 013f 68000000 		.4byte	0x68
 1538 0143 00000000 		.4byte	.LFB67
 1539 0147 F0010000 		.4byte	.LFE67-.LFB67
 1540 014b 01       		.uleb128 0x1
 1541 014c 9C       		.byte	0x9c
 1542 014d B2010000 		.4byte	0x1b2
 1543 0151 0C       		.uleb128 0xc
 1544 0152 727800   		.ascii	"rx\000"
 1545 0155 01       		.byte	0x1
 1546 0156 45       		.byte	0x45
 1547 0157 A5000000 		.4byte	0xa5
 1548 015b 02       		.uleb128 0x2
 1549 015c 91       		.byte	0x91
 1550 015d 76       		.sleb128 -10
 1551 015e 0D       		.uleb128 0xd
 1552 015f A3000000 		.4byte	.LASF26
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 36


 1553 0163 01       		.byte	0x1
 1554 0164 46       		.byte	0x46
 1555 0165 B2010000 		.4byte	0x1b2
 1556 0169 03       		.uleb128 0x3
 1557 016a 91       		.byte	0x91
 1558 016b 8C7F     		.sleb128 -116
 1559 016d 0D       		.uleb128 0xd
 1560 016e 73020000 		.4byte	.LASF27
 1561 0172 01       		.byte	0x1
 1562 0173 47       		.byte	0x47
 1563 0174 81000000 		.4byte	0x81
 1564 0178 02       		.uleb128 0x2
 1565 0179 91       		.byte	0x91
 1566 017a 77       		.sleb128 -9
 1567 017b 0D       		.uleb128 0xd
 1568 017c 9D020000 		.4byte	.LASF28
 1569 0180 01       		.byte	0x1
 1570 0181 4E       		.byte	0x4e
 1571 0182 CA000000 		.4byte	0xca
 1572 0186 03       		.uleb128 0x3
 1573 0187 91       		.byte	0x91
 1574 0188 887F     		.sleb128 -120
 1575 018a 0E       		.uleb128 0xe
 1576 018b 82000000 		.4byte	.LBB2
 1577 018f 10000000 		.4byte	.LBE2-.LBB2
 1578 0193 0D       		.uleb128 0xd
 1579 0194 5D020000 		.4byte	.LASF29
 1580 0198 01       		.byte	0x1
 1581 0199 77       		.byte	0x77
 1582 019a A5000000 		.4byte	0xa5
 1583 019e 03       		.uleb128 0x3
 1584 019f 91       		.byte	0x91
 1585 01a0 877F     		.sleb128 -121
 1586 01a2 0D       		.uleb128 0xd
 1587 01a3 95000000 		.4byte	.LASF30
 1588 01a7 01       		.byte	0x1
 1589 01a8 78       		.byte	0x78
 1590 01a9 C4000000 		.4byte	0xc4
 1591 01ad 02       		.uleb128 0x2
 1592 01ae 91       		.byte	0x91
 1593 01af 70       		.sleb128 -16
 1594 01b0 00       		.byte	0
 1595 01b1 00       		.byte	0
 1596 01b2 0F       		.uleb128 0xf
 1597 01b3 A5000000 		.4byte	0xa5
 1598 01b7 C2010000 		.4byte	0x1c2
 1599 01bb 10       		.uleb128 0x10
 1600 01bc BD000000 		.4byte	0xbd
 1601 01c0 63       		.byte	0x63
 1602 01c1 00       		.byte	0
 1603 01c2 11       		.uleb128 0x11
 1604 01c3 E2010000 		.4byte	.LASF38
 1605 01c7 01       		.byte	0x1
 1606 01c8 C1       		.byte	0xc1
 1607 01c9 00000000 		.4byte	.LFB68
 1608 01cd 48000000 		.4byte	.LFE68-.LFB68
 1609 01d1 01       		.uleb128 0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 37


 1610 01d2 9C       		.byte	0x9c
 1611 01d3 12       		.uleb128 0x12
 1612 01d4 AE010000 		.4byte	.LASF32
 1613 01d8 01       		.byte	0x1
 1614 01d9 CD       		.byte	0xcd
 1615 01da 00000000 		.4byte	.LFB69
 1616 01de 38000000 		.4byte	.LFE69-.LFB69
 1617 01e2 01       		.uleb128 0x1
 1618 01e3 9C       		.byte	0x9c
 1619 01e4 11020000 		.4byte	0x211
 1620 01e8 13       		.uleb128 0x13
 1621 01e9 A3000000 		.4byte	.LASF26
 1622 01ed 01       		.byte	0x1
 1623 01ee CD       		.byte	0xcd
 1624 01ef C4000000 		.4byte	0xc4
 1625 01f3 02       		.uleb128 0x2
 1626 01f4 91       		.byte	0x91
 1627 01f5 6C       		.sleb128 -20
 1628 01f6 13       		.uleb128 0x13
 1629 01f7 73020000 		.4byte	.LASF27
 1630 01fb 01       		.byte	0x1
 1631 01fc CD       		.byte	0xcd
 1632 01fd 81000000 		.4byte	0x81
 1633 0201 02       		.uleb128 0x2
 1634 0202 91       		.byte	0x91
 1635 0203 6B       		.sleb128 -21
 1636 0204 0C       		.uleb128 0xc
 1637 0205 6900     		.ascii	"i\000"
 1638 0207 01       		.byte	0x1
 1639 0208 CF       		.byte	0xcf
 1640 0209 6F000000 		.4byte	0x6f
 1641 020d 02       		.uleb128 0x2
 1642 020e 91       		.byte	0x91
 1643 020f 74       		.sleb128 -12
 1644 0210 00       		.byte	0
 1645 0211 14       		.uleb128 0x14
 1646 0212 06020000 		.4byte	.LASF33
 1647 0216 01       		.byte	0x1
 1648 0217 D9       		.byte	0xd9
 1649 0218 00000000 		.4byte	.LFB70
 1650 021c C4010000 		.4byte	.LFE70-.LFB70
 1651 0220 01       		.uleb128 0x1
 1652 0221 9C       		.byte	0x9c
 1653 0222 6B020000 		.4byte	0x26b
 1654 0226 13       		.uleb128 0x13
 1655 0227 4E020000 		.4byte	.LASF34
 1656 022b 01       		.byte	0x1
 1657 022c D9       		.byte	0xd9
 1658 022d A5000000 		.4byte	0xa5
 1659 0231 03       		.uleb128 0x3
 1660 0232 91       		.byte	0x91
 1661 0233 977F     		.sleb128 -105
 1662 0235 0D       		.uleb128 0xd
 1663 0236 8C030000 		.4byte	.LASF35
 1664 023a 01       		.byte	0x1
 1665 023b DB       		.byte	0xdb
 1666 023c 81000000 		.4byte	0x81
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 38


 1667 0240 02       		.uleb128 0x2
 1668 0241 91       		.byte	0x91
 1669 0242 77       		.sleb128 -9
 1670 0243 0D       		.uleb128 0xd
 1671 0244 33030000 		.4byte	.LASF36
 1672 0248 01       		.byte	0x1
 1673 0249 EC       		.byte	0xec
 1674 024a 6B020000 		.4byte	0x26b
 1675 024e 03       		.uleb128 0x3
 1676 024f 91       		.byte	0x91
 1677 0250 9C7F     		.sleb128 -100
 1678 0252 0C       		.uleb128 0xc
 1679 0253 6900     		.ascii	"i\000"
 1680 0255 01       		.byte	0x1
 1681 0256 ED       		.byte	0xed
 1682 0257 68000000 		.4byte	0x68
 1683 025b 02       		.uleb128 0x2
 1684 025c 91       		.byte	0x91
 1685 025d 70       		.sleb128 -16
 1686 025e 0C       		.uleb128 0xc
 1687 025f 6A00     		.ascii	"j\000"
 1688 0261 01       		.byte	0x1
 1689 0262 F6       		.byte	0xf6
 1690 0263 68000000 		.4byte	0x68
 1691 0267 02       		.uleb128 0x2
 1692 0268 91       		.byte	0x91
 1693 0269 6C       		.sleb128 -20
 1694 026a 00       		.byte	0
 1695 026b 0F       		.uleb128 0xf
 1696 026c 6F000000 		.4byte	0x6f
 1697 0270 7B020000 		.4byte	0x27b
 1698 0274 10       		.uleb128 0x10
 1699 0275 BD000000 		.4byte	0xbd
 1700 0279 13       		.byte	0x13
 1701 027a 00       		.byte	0
 1702 027b 15       		.uleb128 0x15
 1703 027c 00000000 		.4byte	.LASF61
 1704 0280 01       		.byte	0x1
 1705 0281 2901     		.2byte	0x129
 1706 0283 00000000 		.4byte	.LFB71
 1707 0287 EC000000 		.4byte	.LFE71-.LFB71
 1708 028b 01       		.uleb128 0x1
 1709 028c 9C       		.byte	0x9c
 1710 028d B8020000 		.4byte	0x2b8
 1711 0291 16       		.uleb128 0x16
 1712 0292 6900     		.ascii	"i\000"
 1713 0294 01       		.byte	0x1
 1714 0295 2A01     		.2byte	0x12a
 1715 0297 68000000 		.4byte	0x68
 1716 029b 02       		.uleb128 0x2
 1717 029c 91       		.byte	0x91
 1718 029d 74       		.sleb128 -12
 1719 029e 0E       		.uleb128 0xe
 1720 029f 1C000000 		.4byte	.LBB3
 1721 02a3 62000000 		.4byte	.LBE3-.LBB3
 1722 02a7 17       		.uleb128 0x17
 1723 02a8 71000000 		.4byte	.LASF37
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 39


 1724 02ac 01       		.byte	0x1
 1725 02ad 3101     		.2byte	0x131
 1726 02af 68000000 		.4byte	0x68
 1727 02b3 02       		.uleb128 0x2
 1728 02b4 91       		.byte	0x91
 1729 02b5 70       		.sleb128 -16
 1730 02b6 00       		.byte	0
 1731 02b7 00       		.byte	0
 1732 02b8 18       		.uleb128 0x18
 1733 02b9 E0020000 		.4byte	.LASF39
 1734 02bd 01       		.byte	0x1
 1735 02be 4601     		.2byte	0x146
 1736 02c0 00000000 		.4byte	.LFB72
 1737 02c4 58000000 		.4byte	.LFE72-.LFB72
 1738 02c8 01       		.uleb128 0x1
 1739 02c9 9C       		.byte	0x9c
 1740 02ca 19       		.uleb128 0x19
 1741 02cb 26000000 		.4byte	.LASF40
 1742 02cf 01       		.byte	0x1
 1743 02d0 6801     		.2byte	0x168
 1744 02d2 68000000 		.4byte	0x68
 1745 02d6 00000000 		.4byte	.LFB73
 1746 02da 36000000 		.4byte	.LFE73-.LFB73
 1747 02de 01       		.uleb128 0x1
 1748 02df 9C       		.byte	0x9c
 1749 02e0 10030000 		.4byte	0x310
 1750 02e4 17       		.uleb128 0x17
 1751 02e5 48020000 		.4byte	.LASF41
 1752 02e9 01       		.byte	0x1
 1753 02ea 6A01     		.2byte	0x16a
 1754 02ec 10030000 		.4byte	0x310
 1755 02f0 02       		.uleb128 0x2
 1756 02f1 91       		.byte	0x91
 1757 02f2 74       		.sleb128 -12
 1758 02f3 17       		.uleb128 0x17
 1759 02f4 9E010000 		.4byte	.LASF42
 1760 02f8 01       		.byte	0x1
 1761 02f9 6B01     		.2byte	0x16b
 1762 02fb 10030000 		.4byte	0x310
 1763 02ff 02       		.uleb128 0x2
 1764 0300 91       		.byte	0x91
 1765 0301 70       		.sleb128 -16
 1766 0302 16       		.uleb128 0x16
 1767 0303 6E00     		.ascii	"n\000"
 1768 0305 01       		.byte	0x1
 1769 0306 6D01     		.2byte	0x16d
 1770 0308 68000000 		.4byte	0x68
 1771 030c 02       		.uleb128 0x2
 1772 030d 91       		.byte	0x91
 1773 030e 6C       		.sleb128 -20
 1774 030f 00       		.byte	0
 1775 0310 1A       		.uleb128 0x1a
 1776 0311 68000000 		.4byte	0x68
 1777 0315 1B       		.uleb128 0x1b
 1778 0316 1A020000 		.4byte	.LASF43
 1779 031a 01       		.byte	0x1
 1780 031b 7B01     		.2byte	0x17b
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 40


 1781 031d 00000000 		.4byte	.LFB74
 1782 0321 B4000000 		.4byte	.LFE74-.LFB74
 1783 0325 01       		.uleb128 0x1
 1784 0326 9C       		.byte	0x9c
 1785 0327 61030000 		.4byte	0x361
 1786 032b 1C       		.uleb128 0x1c
 1787 032c 95000000 		.4byte	.LASF30
 1788 0330 01       		.byte	0x1
 1789 0331 7B01     		.2byte	0x17b
 1790 0333 C4000000 		.4byte	0xc4
 1791 0337 02       		.uleb128 0x2
 1792 0338 91       		.byte	0x91
 1793 0339 6C       		.sleb128 -20
 1794 033a 16       		.uleb128 0x16
 1795 033b 6900     		.ascii	"i\000"
 1796 033d 01       		.byte	0x1
 1797 033e 7D01     		.2byte	0x17d
 1798 0340 68000000 		.4byte	0x68
 1799 0344 02       		.uleb128 0x2
 1800 0345 91       		.byte	0x91
 1801 0346 74       		.sleb128 -12
 1802 0347 0E       		.uleb128 0xe
 1803 0348 0E000000 		.4byte	.LBB4
 1804 034c 88000000 		.4byte	.LBE4-.LBB4
 1805 0350 17       		.uleb128 0x17
 1806 0351 8C030000 		.4byte	.LASF35
 1807 0355 01       		.byte	0x1
 1808 0356 7F01     		.2byte	0x17f
 1809 0358 81000000 		.4byte	0x81
 1810 035c 02       		.uleb128 0x2
 1811 035d 91       		.byte	0x91
 1812 035e 73       		.sleb128 -13
 1813 035f 00       		.byte	0
 1814 0360 00       		.byte	0
 1815 0361 1D       		.uleb128 0x1d
 1816 0362 A4010000 		.4byte	.LASF44
 1817 0366 01       		.byte	0x1
 1818 0367 9D01     		.2byte	0x19d
 1819 0369 00000000 		.4byte	.LFB75
 1820 036d 26000000 		.4byte	.LFE75-.LFB75
 1821 0371 01       		.uleb128 0x1
 1822 0372 9C       		.byte	0x9c
 1823 0373 87030000 		.4byte	0x387
 1824 0377 1C       		.uleb128 0x1c
 1825 0378 95000000 		.4byte	.LASF30
 1826 037c 01       		.byte	0x1
 1827 037d 9D01     		.2byte	0x19d
 1828 037f C4000000 		.4byte	0xc4
 1829 0383 02       		.uleb128 0x2
 1830 0384 91       		.byte	0x91
 1831 0385 74       		.sleb128 -12
 1832 0386 00       		.byte	0
 1833 0387 1E       		.uleb128 0x1e
 1834 0388 7F030000 		.4byte	.LASF45
 1835 038c 06       		.byte	0x6
 1836 038d 2A06     		.2byte	0x62a
 1837 038f 93030000 		.4byte	0x393
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 41


 1838 0393 06       		.uleb128 0x6
 1839 0394 76000000 		.4byte	0x76
 1840 0398 0F       		.uleb128 0xf
 1841 0399 68000000 		.4byte	0x68
 1842 039d A9030000 		.4byte	0x3a9
 1843 03a1 1F       		.uleb128 0x1f
 1844 03a2 BD000000 		.4byte	0xbd
 1845 03a6 1F03     		.2byte	0x31f
 1846 03a8 00       		.byte	0
 1847 03a9 20       		.uleb128 0x20
 1848 03aa 3F000000 		.4byte	.LASF46
 1849 03ae 01       		.byte	0x1
 1850 03af 1A       		.byte	0x1a
 1851 03b0 98030000 		.4byte	0x398
 1852 03b4 05       		.uleb128 0x5
 1853 03b5 03       		.byte	0x3
 1854 03b6 00000000 		.4byte	diffManEncodedData
 1855 03ba 20       		.uleb128 0x20
 1856 03bb F6020000 		.4byte	.LASF47
 1857 03bf 01       		.byte	0x1
 1858 03c0 1B       		.byte	0x1b
 1859 03c1 98030000 		.4byte	0x398
 1860 03c5 05       		.uleb128 0x5
 1861 03c6 03       		.byte	0x3
 1862 03c7 00000000 		.4byte	diffManReceivedData
 1863 03cb 20       		.uleb128 0x20
 1864 03cc C7020000 		.4byte	.LASF48
 1865 03d0 01       		.byte	0x1
 1866 03d1 1C       		.byte	0x1c
 1867 03d2 68000000 		.4byte	0x68
 1868 03d6 05       		.uleb128 0x5
 1869 03d7 03       		.byte	0x3
 1870 03d8 00000000 		.4byte	receivedDataIndex
 1871 03dc 20       		.uleb128 0x20
 1872 03dd B0020000 		.4byte	.LASF49
 1873 03e1 01       		.byte	0x1
 1874 03e2 1C       		.byte	0x1c
 1875 03e3 68000000 		.4byte	0x68
 1876 03e7 05       		.uleb128 0x5
 1877 03e8 03       		.byte	0x3
 1878 03e9 00000000 		.4byte	receivedDataCount
 1879 03ed 20       		.uleb128 0x20
 1880 03ee 58030000 		.4byte	.LASF50
 1881 03f2 01       		.byte	0x1
 1882 03f3 1D       		.byte	0x1d
 1883 03f4 68000000 		.4byte	0x68
 1884 03f8 05       		.uleb128 0x5
 1885 03f9 03       		.byte	0x3
 1886 03fa 00000000 		.4byte	halfBitIndex
 1887 03fe 20       		.uleb128 0x20
 1888 03ff CC010000 		.4byte	.LASF51
 1889 0403 01       		.byte	0x1
 1890 0404 1D       		.byte	0x1d
 1891 0405 68000000 		.4byte	0x68
 1892 0409 05       		.uleb128 0x5
 1893 040a 03       		.byte	0x3
 1894 040b 00000000 		.4byte	currentDataPos
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 42


 1895 040f 20       		.uleb128 0x20
 1896 0410 65030000 		.4byte	.LASF52
 1897 0414 01       		.byte	0x1
 1898 0415 1D       		.byte	0x1d
 1899 0416 68000000 		.4byte	0x68
 1900 041a 05       		.uleb128 0x5
 1901 041b 03       		.byte	0x3
 1902 041c 00000000 		.4byte	lengthOfData
 1903 0420 20       		.uleb128 0x20
 1904 0421 9C030000 		.4byte	.LASF53
 1905 0425 01       		.byte	0x1
 1906 0426 1E       		.byte	0x1e
 1907 0427 31040000 		.4byte	0x431
 1908 042b 05       		.uleb128 0x5
 1909 042c 03       		.byte	0x3
 1910 042d 00000000 		.4byte	timerExpired
 1911 0431 02       		.uleb128 0x2
 1912 0432 01       		.byte	0x1
 1913 0433 02       		.byte	0x2
 1914 0434 A5020000 		.4byte	.LASF54
 1915 0438 20       		.uleb128 0x20
 1916 0439 0A030000 		.4byte	.LASF55
 1917 043d 01       		.byte	0x1
 1918 043e 1E       		.byte	0x1e
 1919 043f 31040000 		.4byte	0x431
 1920 0443 05       		.uleb128 0x5
 1921 0444 03       		.byte	0x3
 1922 0445 00000000 		.4byte	dataTransmissionComplete
 1923 0449 20       		.uleb128 0x20
 1924 044a 88000000 		.4byte	.LASF56
 1925 044e 01       		.byte	0x1
 1926 044f 1F       		.byte	0x1f
 1927 0450 D5000000 		.4byte	0xd5
 1928 0454 05       		.uleb128 0x5
 1929 0455 03       		.byte	0x3
 1930 0456 00000000 		.4byte	networkState
 1931 045a 00       		.byte	0
 1932              		.section	.debug_abbrev,"",%progbits
 1933              	.Ldebug_abbrev0:
 1934 0000 01       		.uleb128 0x1
 1935 0001 11       		.uleb128 0x11
 1936 0002 01       		.byte	0x1
 1937 0003 25       		.uleb128 0x25
 1938 0004 0E       		.uleb128 0xe
 1939 0005 13       		.uleb128 0x13
 1940 0006 0B       		.uleb128 0xb
 1941 0007 03       		.uleb128 0x3
 1942 0008 0E       		.uleb128 0xe
 1943 0009 1B       		.uleb128 0x1b
 1944 000a 0E       		.uleb128 0xe
 1945 000b 55       		.uleb128 0x55
 1946 000c 17       		.uleb128 0x17
 1947 000d 11       		.uleb128 0x11
 1948 000e 01       		.uleb128 0x1
 1949 000f 10       		.uleb128 0x10
 1950 0010 17       		.uleb128 0x17
 1951 0011 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 43


 1952 0012 00       		.byte	0
 1953 0013 02       		.uleb128 0x2
 1954 0014 24       		.uleb128 0x24
 1955 0015 00       		.byte	0
 1956 0016 0B       		.uleb128 0xb
 1957 0017 0B       		.uleb128 0xb
 1958 0018 3E       		.uleb128 0x3e
 1959 0019 0B       		.uleb128 0xb
 1960 001a 03       		.uleb128 0x3
 1961 001b 0E       		.uleb128 0xe
 1962 001c 00       		.byte	0
 1963 001d 00       		.byte	0
 1964 001e 03       		.uleb128 0x3
 1965 001f 16       		.uleb128 0x16
 1966 0020 00       		.byte	0
 1967 0021 03       		.uleb128 0x3
 1968 0022 0E       		.uleb128 0xe
 1969 0023 3A       		.uleb128 0x3a
 1970 0024 0B       		.uleb128 0xb
 1971 0025 3B       		.uleb128 0x3b
 1972 0026 0B       		.uleb128 0xb
 1973 0027 49       		.uleb128 0x49
 1974 0028 13       		.uleb128 0x13
 1975 0029 00       		.byte	0
 1976 002a 00       		.byte	0
 1977 002b 04       		.uleb128 0x4
 1978 002c 24       		.uleb128 0x24
 1979 002d 00       		.byte	0
 1980 002e 0B       		.uleb128 0xb
 1981 002f 0B       		.uleb128 0xb
 1982 0030 3E       		.uleb128 0x3e
 1983 0031 0B       		.uleb128 0xb
 1984 0032 03       		.uleb128 0x3
 1985 0033 08       		.uleb128 0x8
 1986 0034 00       		.byte	0
 1987 0035 00       		.byte	0
 1988 0036 05       		.uleb128 0x5
 1989 0037 16       		.uleb128 0x16
 1990 0038 00       		.byte	0
 1991 0039 03       		.uleb128 0x3
 1992 003a 0E       		.uleb128 0xe
 1993 003b 3A       		.uleb128 0x3a
 1994 003c 0B       		.uleb128 0xb
 1995 003d 3B       		.uleb128 0x3b
 1996 003e 05       		.uleb128 0x5
 1997 003f 49       		.uleb128 0x49
 1998 0040 13       		.uleb128 0x13
 1999 0041 00       		.byte	0
 2000 0042 00       		.byte	0
 2001 0043 06       		.uleb128 0x6
 2002 0044 35       		.uleb128 0x35
 2003 0045 00       		.byte	0
 2004 0046 49       		.uleb128 0x49
 2005 0047 13       		.uleb128 0x13
 2006 0048 00       		.byte	0
 2007 0049 00       		.byte	0
 2008 004a 07       		.uleb128 0x7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 44


 2009 004b 0F       		.uleb128 0xf
 2010 004c 00       		.byte	0
 2011 004d 0B       		.uleb128 0xb
 2012 004e 0B       		.uleb128 0xb
 2013 004f 49       		.uleb128 0x49
 2014 0050 13       		.uleb128 0x13
 2015 0051 00       		.byte	0
 2016 0052 00       		.byte	0
 2017 0053 08       		.uleb128 0x8
 2018 0054 04       		.uleb128 0x4
 2019 0055 01       		.byte	0x1
 2020 0056 03       		.uleb128 0x3
 2021 0057 0E       		.uleb128 0xe
 2022 0058 0B       		.uleb128 0xb
 2023 0059 0B       		.uleb128 0xb
 2024 005a 3A       		.uleb128 0x3a
 2025 005b 0B       		.uleb128 0xb
 2026 005c 3B       		.uleb128 0x3b
 2027 005d 0B       		.uleb128 0xb
 2028 005e 01       		.uleb128 0x1
 2029 005f 13       		.uleb128 0x13
 2030 0060 00       		.byte	0
 2031 0061 00       		.byte	0
 2032 0062 09       		.uleb128 0x9
 2033 0063 28       		.uleb128 0x28
 2034 0064 00       		.byte	0
 2035 0065 03       		.uleb128 0x3
 2036 0066 0E       		.uleb128 0xe
 2037 0067 1C       		.uleb128 0x1c
 2038 0068 0D       		.uleb128 0xd
 2039 0069 00       		.byte	0
 2040 006a 00       		.byte	0
 2041 006b 0A       		.uleb128 0xa
 2042 006c 2E       		.uleb128 0x2e
 2043 006d 00       		.byte	0
 2044 006e 3F       		.uleb128 0x3f
 2045 006f 19       		.uleb128 0x19
 2046 0070 03       		.uleb128 0x3
 2047 0071 0E       		.uleb128 0xe
 2048 0072 3A       		.uleb128 0x3a
 2049 0073 0B       		.uleb128 0xb
 2050 0074 3B       		.uleb128 0x3b
 2051 0075 0B       		.uleb128 0xb
 2052 0076 27       		.uleb128 0x27
 2053 0077 19       		.uleb128 0x19
 2054 0078 11       		.uleb128 0x11
 2055 0079 01       		.uleb128 0x1
 2056 007a 12       		.uleb128 0x12
 2057 007b 06       		.uleb128 0x6
 2058 007c 40       		.uleb128 0x40
 2059 007d 18       		.uleb128 0x18
 2060 007e 9642     		.uleb128 0x2116
 2061 0080 19       		.uleb128 0x19
 2062 0081 00       		.byte	0
 2063 0082 00       		.byte	0
 2064 0083 0B       		.uleb128 0xb
 2065 0084 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 45


 2066 0085 01       		.byte	0x1
 2067 0086 3F       		.uleb128 0x3f
 2068 0087 19       		.uleb128 0x19
 2069 0088 03       		.uleb128 0x3
 2070 0089 0E       		.uleb128 0xe
 2071 008a 3A       		.uleb128 0x3a
 2072 008b 0B       		.uleb128 0xb
 2073 008c 3B       		.uleb128 0x3b
 2074 008d 0B       		.uleb128 0xb
 2075 008e 49       		.uleb128 0x49
 2076 008f 13       		.uleb128 0x13
 2077 0090 11       		.uleb128 0x11
 2078 0091 01       		.uleb128 0x1
 2079 0092 12       		.uleb128 0x12
 2080 0093 06       		.uleb128 0x6
 2081 0094 40       		.uleb128 0x40
 2082 0095 18       		.uleb128 0x18
 2083 0096 9642     		.uleb128 0x2116
 2084 0098 19       		.uleb128 0x19
 2085 0099 01       		.uleb128 0x1
 2086 009a 13       		.uleb128 0x13
 2087 009b 00       		.byte	0
 2088 009c 00       		.byte	0
 2089 009d 0C       		.uleb128 0xc
 2090 009e 34       		.uleb128 0x34
 2091 009f 00       		.byte	0
 2092 00a0 03       		.uleb128 0x3
 2093 00a1 08       		.uleb128 0x8
 2094 00a2 3A       		.uleb128 0x3a
 2095 00a3 0B       		.uleb128 0xb
 2096 00a4 3B       		.uleb128 0x3b
 2097 00a5 0B       		.uleb128 0xb
 2098 00a6 49       		.uleb128 0x49
 2099 00a7 13       		.uleb128 0x13
 2100 00a8 02       		.uleb128 0x2
 2101 00a9 18       		.uleb128 0x18
 2102 00aa 00       		.byte	0
 2103 00ab 00       		.byte	0
 2104 00ac 0D       		.uleb128 0xd
 2105 00ad 34       		.uleb128 0x34
 2106 00ae 00       		.byte	0
 2107 00af 03       		.uleb128 0x3
 2108 00b0 0E       		.uleb128 0xe
 2109 00b1 3A       		.uleb128 0x3a
 2110 00b2 0B       		.uleb128 0xb
 2111 00b3 3B       		.uleb128 0x3b
 2112 00b4 0B       		.uleb128 0xb
 2113 00b5 49       		.uleb128 0x49
 2114 00b6 13       		.uleb128 0x13
 2115 00b7 02       		.uleb128 0x2
 2116 00b8 18       		.uleb128 0x18
 2117 00b9 00       		.byte	0
 2118 00ba 00       		.byte	0
 2119 00bb 0E       		.uleb128 0xe
 2120 00bc 0B       		.uleb128 0xb
 2121 00bd 01       		.byte	0x1
 2122 00be 11       		.uleb128 0x11
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 46


 2123 00bf 01       		.uleb128 0x1
 2124 00c0 12       		.uleb128 0x12
 2125 00c1 06       		.uleb128 0x6
 2126 00c2 00       		.byte	0
 2127 00c3 00       		.byte	0
 2128 00c4 0F       		.uleb128 0xf
 2129 00c5 01       		.uleb128 0x1
 2130 00c6 01       		.byte	0x1
 2131 00c7 49       		.uleb128 0x49
 2132 00c8 13       		.uleb128 0x13
 2133 00c9 01       		.uleb128 0x1
 2134 00ca 13       		.uleb128 0x13
 2135 00cb 00       		.byte	0
 2136 00cc 00       		.byte	0
 2137 00cd 10       		.uleb128 0x10
 2138 00ce 21       		.uleb128 0x21
 2139 00cf 00       		.byte	0
 2140 00d0 49       		.uleb128 0x49
 2141 00d1 13       		.uleb128 0x13
 2142 00d2 2F       		.uleb128 0x2f
 2143 00d3 0B       		.uleb128 0xb
 2144 00d4 00       		.byte	0
 2145 00d5 00       		.byte	0
 2146 00d6 11       		.uleb128 0x11
 2147 00d7 2E       		.uleb128 0x2e
 2148 00d8 00       		.byte	0
 2149 00d9 3F       		.uleb128 0x3f
 2150 00da 19       		.uleb128 0x19
 2151 00db 03       		.uleb128 0x3
 2152 00dc 0E       		.uleb128 0xe
 2153 00dd 3A       		.uleb128 0x3a
 2154 00de 0B       		.uleb128 0xb
 2155 00df 3B       		.uleb128 0x3b
 2156 00e0 0B       		.uleb128 0xb
 2157 00e1 11       		.uleb128 0x11
 2158 00e2 01       		.uleb128 0x1
 2159 00e3 12       		.uleb128 0x12
 2160 00e4 06       		.uleb128 0x6
 2161 00e5 40       		.uleb128 0x40
 2162 00e6 18       		.uleb128 0x18
 2163 00e7 9742     		.uleb128 0x2117
 2164 00e9 19       		.uleb128 0x19
 2165 00ea 00       		.byte	0
 2166 00eb 00       		.byte	0
 2167 00ec 12       		.uleb128 0x12
 2168 00ed 2E       		.uleb128 0x2e
 2169 00ee 01       		.byte	0x1
 2170 00ef 3F       		.uleb128 0x3f
 2171 00f0 19       		.uleb128 0x19
 2172 00f1 03       		.uleb128 0x3
 2173 00f2 0E       		.uleb128 0xe
 2174 00f3 3A       		.uleb128 0x3a
 2175 00f4 0B       		.uleb128 0xb
 2176 00f5 3B       		.uleb128 0x3b
 2177 00f6 0B       		.uleb128 0xb
 2178 00f7 27       		.uleb128 0x27
 2179 00f8 19       		.uleb128 0x19
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 47


 2180 00f9 11       		.uleb128 0x11
 2181 00fa 01       		.uleb128 0x1
 2182 00fb 12       		.uleb128 0x12
 2183 00fc 06       		.uleb128 0x6
 2184 00fd 40       		.uleb128 0x40
 2185 00fe 18       		.uleb128 0x18
 2186 00ff 9642     		.uleb128 0x2116
 2187 0101 19       		.uleb128 0x19
 2188 0102 01       		.uleb128 0x1
 2189 0103 13       		.uleb128 0x13
 2190 0104 00       		.byte	0
 2191 0105 00       		.byte	0
 2192 0106 13       		.uleb128 0x13
 2193 0107 05       		.uleb128 0x5
 2194 0108 00       		.byte	0
 2195 0109 03       		.uleb128 0x3
 2196 010a 0E       		.uleb128 0xe
 2197 010b 3A       		.uleb128 0x3a
 2198 010c 0B       		.uleb128 0xb
 2199 010d 3B       		.uleb128 0x3b
 2200 010e 0B       		.uleb128 0xb
 2201 010f 49       		.uleb128 0x49
 2202 0110 13       		.uleb128 0x13
 2203 0111 02       		.uleb128 0x2
 2204 0112 18       		.uleb128 0x18
 2205 0113 00       		.byte	0
 2206 0114 00       		.byte	0
 2207 0115 14       		.uleb128 0x14
 2208 0116 2E       		.uleb128 0x2e
 2209 0117 01       		.byte	0x1
 2210 0118 3F       		.uleb128 0x3f
 2211 0119 19       		.uleb128 0x19
 2212 011a 03       		.uleb128 0x3
 2213 011b 0E       		.uleb128 0xe
 2214 011c 3A       		.uleb128 0x3a
 2215 011d 0B       		.uleb128 0xb
 2216 011e 3B       		.uleb128 0x3b
 2217 011f 0B       		.uleb128 0xb
 2218 0120 27       		.uleb128 0x27
 2219 0121 19       		.uleb128 0x19
 2220 0122 11       		.uleb128 0x11
 2221 0123 01       		.uleb128 0x1
 2222 0124 12       		.uleb128 0x12
 2223 0125 06       		.uleb128 0x6
 2224 0126 40       		.uleb128 0x40
 2225 0127 18       		.uleb128 0x18
 2226 0128 9742     		.uleb128 0x2117
 2227 012a 19       		.uleb128 0x19
 2228 012b 01       		.uleb128 0x1
 2229 012c 13       		.uleb128 0x13
 2230 012d 00       		.byte	0
 2231 012e 00       		.byte	0
 2232 012f 15       		.uleb128 0x15
 2233 0130 2E       		.uleb128 0x2e
 2234 0131 01       		.byte	0x1
 2235 0132 3F       		.uleb128 0x3f
 2236 0133 19       		.uleb128 0x19
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 48


 2237 0134 03       		.uleb128 0x3
 2238 0135 0E       		.uleb128 0xe
 2239 0136 3A       		.uleb128 0x3a
 2240 0137 0B       		.uleb128 0xb
 2241 0138 3B       		.uleb128 0x3b
 2242 0139 05       		.uleb128 0x5
 2243 013a 11       		.uleb128 0x11
 2244 013b 01       		.uleb128 0x1
 2245 013c 12       		.uleb128 0x12
 2246 013d 06       		.uleb128 0x6
 2247 013e 40       		.uleb128 0x40
 2248 013f 18       		.uleb128 0x18
 2249 0140 9642     		.uleb128 0x2116
 2250 0142 19       		.uleb128 0x19
 2251 0143 01       		.uleb128 0x1
 2252 0144 13       		.uleb128 0x13
 2253 0145 00       		.byte	0
 2254 0146 00       		.byte	0
 2255 0147 16       		.uleb128 0x16
 2256 0148 34       		.uleb128 0x34
 2257 0149 00       		.byte	0
 2258 014a 03       		.uleb128 0x3
 2259 014b 08       		.uleb128 0x8
 2260 014c 3A       		.uleb128 0x3a
 2261 014d 0B       		.uleb128 0xb
 2262 014e 3B       		.uleb128 0x3b
 2263 014f 05       		.uleb128 0x5
 2264 0150 49       		.uleb128 0x49
 2265 0151 13       		.uleb128 0x13
 2266 0152 02       		.uleb128 0x2
 2267 0153 18       		.uleb128 0x18
 2268 0154 00       		.byte	0
 2269 0155 00       		.byte	0
 2270 0156 17       		.uleb128 0x17
 2271 0157 34       		.uleb128 0x34
 2272 0158 00       		.byte	0
 2273 0159 03       		.uleb128 0x3
 2274 015a 0E       		.uleb128 0xe
 2275 015b 3A       		.uleb128 0x3a
 2276 015c 0B       		.uleb128 0xb
 2277 015d 3B       		.uleb128 0x3b
 2278 015e 05       		.uleb128 0x5
 2279 015f 49       		.uleb128 0x49
 2280 0160 13       		.uleb128 0x13
 2281 0161 02       		.uleb128 0x2
 2282 0162 18       		.uleb128 0x18
 2283 0163 00       		.byte	0
 2284 0164 00       		.byte	0
 2285 0165 18       		.uleb128 0x18
 2286 0166 2E       		.uleb128 0x2e
 2287 0167 00       		.byte	0
 2288 0168 3F       		.uleb128 0x3f
 2289 0169 19       		.uleb128 0x19
 2290 016a 03       		.uleb128 0x3
 2291 016b 0E       		.uleb128 0xe
 2292 016c 3A       		.uleb128 0x3a
 2293 016d 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 49


 2294 016e 3B       		.uleb128 0x3b
 2295 016f 05       		.uleb128 0x5
 2296 0170 11       		.uleb128 0x11
 2297 0171 01       		.uleb128 0x1
 2298 0172 12       		.uleb128 0x12
 2299 0173 06       		.uleb128 0x6
 2300 0174 40       		.uleb128 0x40
 2301 0175 18       		.uleb128 0x18
 2302 0176 9642     		.uleb128 0x2116
 2303 0178 19       		.uleb128 0x19
 2304 0179 00       		.byte	0
 2305 017a 00       		.byte	0
 2306 017b 19       		.uleb128 0x19
 2307 017c 2E       		.uleb128 0x2e
 2308 017d 01       		.byte	0x1
 2309 017e 3F       		.uleb128 0x3f
 2310 017f 19       		.uleb128 0x19
 2311 0180 03       		.uleb128 0x3
 2312 0181 0E       		.uleb128 0xe
 2313 0182 3A       		.uleb128 0x3a
 2314 0183 0B       		.uleb128 0xb
 2315 0184 3B       		.uleb128 0x3b
 2316 0185 05       		.uleb128 0x5
 2317 0186 49       		.uleb128 0x49
 2318 0187 13       		.uleb128 0x13
 2319 0188 11       		.uleb128 0x11
 2320 0189 01       		.uleb128 0x1
 2321 018a 12       		.uleb128 0x12
 2322 018b 06       		.uleb128 0x6
 2323 018c 40       		.uleb128 0x40
 2324 018d 18       		.uleb128 0x18
 2325 018e 9642     		.uleb128 0x2116
 2326 0190 19       		.uleb128 0x19
 2327 0191 01       		.uleb128 0x1
 2328 0192 13       		.uleb128 0x13
 2329 0193 00       		.byte	0
 2330 0194 00       		.byte	0
 2331 0195 1A       		.uleb128 0x1a
 2332 0196 26       		.uleb128 0x26
 2333 0197 00       		.byte	0
 2334 0198 49       		.uleb128 0x49
 2335 0199 13       		.uleb128 0x13
 2336 019a 00       		.byte	0
 2337 019b 00       		.byte	0
 2338 019c 1B       		.uleb128 0x1b
 2339 019d 2E       		.uleb128 0x2e
 2340 019e 01       		.byte	0x1
 2341 019f 3F       		.uleb128 0x3f
 2342 01a0 19       		.uleb128 0x19
 2343 01a1 03       		.uleb128 0x3
 2344 01a2 0E       		.uleb128 0xe
 2345 01a3 3A       		.uleb128 0x3a
 2346 01a4 0B       		.uleb128 0xb
 2347 01a5 3B       		.uleb128 0x3b
 2348 01a6 05       		.uleb128 0x5
 2349 01a7 27       		.uleb128 0x27
 2350 01a8 19       		.uleb128 0x19
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 50


 2351 01a9 11       		.uleb128 0x11
 2352 01aa 01       		.uleb128 0x1
 2353 01ab 12       		.uleb128 0x12
 2354 01ac 06       		.uleb128 0x6
 2355 01ad 40       		.uleb128 0x40
 2356 01ae 18       		.uleb128 0x18
 2357 01af 9742     		.uleb128 0x2117
 2358 01b1 19       		.uleb128 0x19
 2359 01b2 01       		.uleb128 0x1
 2360 01b3 13       		.uleb128 0x13
 2361 01b4 00       		.byte	0
 2362 01b5 00       		.byte	0
 2363 01b6 1C       		.uleb128 0x1c
 2364 01b7 05       		.uleb128 0x5
 2365 01b8 00       		.byte	0
 2366 01b9 03       		.uleb128 0x3
 2367 01ba 0E       		.uleb128 0xe
 2368 01bb 3A       		.uleb128 0x3a
 2369 01bc 0B       		.uleb128 0xb
 2370 01bd 3B       		.uleb128 0x3b
 2371 01be 05       		.uleb128 0x5
 2372 01bf 49       		.uleb128 0x49
 2373 01c0 13       		.uleb128 0x13
 2374 01c1 02       		.uleb128 0x2
 2375 01c2 18       		.uleb128 0x18
 2376 01c3 00       		.byte	0
 2377 01c4 00       		.byte	0
 2378 01c5 1D       		.uleb128 0x1d
 2379 01c6 2E       		.uleb128 0x2e
 2380 01c7 01       		.byte	0x1
 2381 01c8 3F       		.uleb128 0x3f
 2382 01c9 19       		.uleb128 0x19
 2383 01ca 03       		.uleb128 0x3
 2384 01cb 0E       		.uleb128 0xe
 2385 01cc 3A       		.uleb128 0x3a
 2386 01cd 0B       		.uleb128 0xb
 2387 01ce 3B       		.uleb128 0x3b
 2388 01cf 05       		.uleb128 0x5
 2389 01d0 27       		.uleb128 0x27
 2390 01d1 19       		.uleb128 0x19
 2391 01d2 11       		.uleb128 0x11
 2392 01d3 01       		.uleb128 0x1
 2393 01d4 12       		.uleb128 0x12
 2394 01d5 06       		.uleb128 0x6
 2395 01d6 40       		.uleb128 0x40
 2396 01d7 18       		.uleb128 0x18
 2397 01d8 9642     		.uleb128 0x2116
 2398 01da 19       		.uleb128 0x19
 2399 01db 01       		.uleb128 0x1
 2400 01dc 13       		.uleb128 0x13
 2401 01dd 00       		.byte	0
 2402 01de 00       		.byte	0
 2403 01df 1E       		.uleb128 0x1e
 2404 01e0 34       		.uleb128 0x34
 2405 01e1 00       		.byte	0
 2406 01e2 03       		.uleb128 0x3
 2407 01e3 0E       		.uleb128 0xe
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 51


 2408 01e4 3A       		.uleb128 0x3a
 2409 01e5 0B       		.uleb128 0xb
 2410 01e6 3B       		.uleb128 0x3b
 2411 01e7 05       		.uleb128 0x5
 2412 01e8 49       		.uleb128 0x49
 2413 01e9 13       		.uleb128 0x13
 2414 01ea 3F       		.uleb128 0x3f
 2415 01eb 19       		.uleb128 0x19
 2416 01ec 3C       		.uleb128 0x3c
 2417 01ed 19       		.uleb128 0x19
 2418 01ee 00       		.byte	0
 2419 01ef 00       		.byte	0
 2420 01f0 1F       		.uleb128 0x1f
 2421 01f1 21       		.uleb128 0x21
 2422 01f2 00       		.byte	0
 2423 01f3 49       		.uleb128 0x49
 2424 01f4 13       		.uleb128 0x13
 2425 01f5 2F       		.uleb128 0x2f
 2426 01f6 05       		.uleb128 0x5
 2427 01f7 00       		.byte	0
 2428 01f8 00       		.byte	0
 2429 01f9 20       		.uleb128 0x20
 2430 01fa 34       		.uleb128 0x34
 2431 01fb 00       		.byte	0
 2432 01fc 03       		.uleb128 0x3
 2433 01fd 0E       		.uleb128 0xe
 2434 01fe 3A       		.uleb128 0x3a
 2435 01ff 0B       		.uleb128 0xb
 2436 0200 3B       		.uleb128 0x3b
 2437 0201 0B       		.uleb128 0xb
 2438 0202 49       		.uleb128 0x49
 2439 0203 13       		.uleb128 0x13
 2440 0204 3F       		.uleb128 0x3f
 2441 0205 19       		.uleb128 0x19
 2442 0206 02       		.uleb128 0x2
 2443 0207 18       		.uleb128 0x18
 2444 0208 00       		.byte	0
 2445 0209 00       		.byte	0
 2446 020a 00       		.byte	0
 2447              		.section	.debug_aranges,"",%progbits
 2448 0000 7C000000 		.4byte	0x7c
 2449 0004 0200     		.2byte	0x2
 2450 0006 00000000 		.4byte	.Ldebug_info0
 2451 000a 04       		.byte	0x4
 2452 000b 00       		.byte	0
 2453 000c 0000     		.2byte	0
 2454 000e 0000     		.2byte	0
 2455 0010 00000000 		.4byte	.LFB63
 2456 0014 28000000 		.4byte	.LFE63-.LFB63
 2457 0018 00000000 		.4byte	.LFB64
 2458 001c 3C000000 		.4byte	.LFE64-.LFB64
 2459 0020 00000000 		.4byte	.LFB65
 2460 0024 1C000000 		.4byte	.LFE65-.LFB65
 2461 0028 00000000 		.4byte	.LFB66
 2462 002c 34000000 		.4byte	.LFE66-.LFB66
 2463 0030 00000000 		.4byte	.LFB67
 2464 0034 F0010000 		.4byte	.LFE67-.LFB67
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 52


 2465 0038 00000000 		.4byte	.LFB68
 2466 003c 48000000 		.4byte	.LFE68-.LFB68
 2467 0040 00000000 		.4byte	.LFB69
 2468 0044 38000000 		.4byte	.LFE69-.LFB69
 2469 0048 00000000 		.4byte	.LFB70
 2470 004c C4010000 		.4byte	.LFE70-.LFB70
 2471 0050 00000000 		.4byte	.LFB71
 2472 0054 EC000000 		.4byte	.LFE71-.LFB71
 2473 0058 00000000 		.4byte	.LFB72
 2474 005c 58000000 		.4byte	.LFE72-.LFB72
 2475 0060 00000000 		.4byte	.LFB73
 2476 0064 36000000 		.4byte	.LFE73-.LFB73
 2477 0068 00000000 		.4byte	.LFB74
 2478 006c B4000000 		.4byte	.LFE74-.LFB74
 2479 0070 00000000 		.4byte	.LFB75
 2480 0074 26000000 		.4byte	.LFE75-.LFB75
 2481 0078 00000000 		.4byte	0
 2482 007c 00000000 		.4byte	0
 2483              		.section	.debug_ranges,"",%progbits
 2484              	.Ldebug_ranges0:
 2485 0000 00000000 		.4byte	.LFB63
 2486 0004 28000000 		.4byte	.LFE63
 2487 0008 00000000 		.4byte	.LFB64
 2488 000c 3C000000 		.4byte	.LFE64
 2489 0010 00000000 		.4byte	.LFB65
 2490 0014 1C000000 		.4byte	.LFE65
 2491 0018 00000000 		.4byte	.LFB66
 2492 001c 34000000 		.4byte	.LFE66
 2493 0020 00000000 		.4byte	.LFB67
 2494 0024 F0010000 		.4byte	.LFE67
 2495 0028 00000000 		.4byte	.LFB68
 2496 002c 48000000 		.4byte	.LFE68
 2497 0030 00000000 		.4byte	.LFB69
 2498 0034 38000000 		.4byte	.LFE69
 2499 0038 00000000 		.4byte	.LFB70
 2500 003c C4010000 		.4byte	.LFE70
 2501 0040 00000000 		.4byte	.LFB71
 2502 0044 EC000000 		.4byte	.LFE71
 2503 0048 00000000 		.4byte	.LFB72
 2504 004c 58000000 		.4byte	.LFE72
 2505 0050 00000000 		.4byte	.LFB73
 2506 0054 36000000 		.4byte	.LFE73
 2507 0058 00000000 		.4byte	.LFB74
 2508 005c B4000000 		.4byte	.LFE74
 2509 0060 00000000 		.4byte	.LFB75
 2510 0064 26000000 		.4byte	.LFE75
 2511 0068 00000000 		.4byte	0
 2512 006c 00000000 		.4byte	0
 2513              		.section	.debug_line,"",%progbits
 2514              	.Ldebug_line0:
 2515 0000 C7030000 		.section	.debug_str,"MS",%progbits,1
 2515      0200AE01 
 2515      00000201 
 2515      FB0E0D00 
 2515      01010101 
 2516              	.LASF61:
 2517 0000 7472616E 		.ascii	"transmitData\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 53


 2517      736D6974 
 2517      44617461 
 2517      00
 2518              	.LASF22:
 2519 000d 49646C65 		.ascii	"Idle_Collision_ISR\000"
 2519      5F436F6C 
 2519      6C697369 
 2519      6F6E5F49 
 2519      535200
 2520              	.LASF60:
 2521 0020 73746174 		.ascii	"state\000"
 2521      6500
 2522              	.LASF40:
 2523 0026 67657452 		.ascii	"getRandomNumber\000"
 2523      616E646F 
 2523      6D4E756D 
 2523      62657200 
 2524              	.LASF17:
 2525 0036 73697A65 		.ascii	"sizetype\000"
 2525      74797065 
 2525      00
 2526              	.LASF46:
 2527 003f 64696666 		.ascii	"diffManEncodedData\000"
 2527      4D616E45 
 2527      6E636F64 
 2527      65644461 
 2527      746100
 2528              	.LASF31:
 2529 0052 6D61696E 		.ascii	"main\000"
 2529      00
 2530              	.LASF23:
 2531 0057 45646765 		.ascii	"Edge_detect_ISR\000"
 2531      5F646574 
 2531      6563745F 
 2531      49535200 
 2532              	.LASF2:
 2533 0067 73686F72 		.ascii	"short int\000"
 2533      7420696E 
 2533      7400
 2534              	.LASF37:
 2535 0071 76616C75 		.ascii	"value\000"
 2535      6500
 2536              	.LASF21:
 2537 0077 636F6C6C 		.ascii	"collision\000"
 2537      6973696F 
 2537      6E00
 2538              	.LASF12:
 2539 0081 75696E74 		.ascii	"uint16\000"
 2539      313600
 2540              	.LASF56:
 2541 0088 6E657477 		.ascii	"networkState\000"
 2541      6F726B53 
 2541      74617465 
 2541      00
 2542              	.LASF30:
 2543 0095 63686172 		.ascii	"charPtr\000"
 2543      50747200 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 54


 2544              	.LASF11:
 2545 009d 75696E74 		.ascii	"uint8\000"
 2545      3800
 2546              	.LASF26:
 2547 00a3 6C696E65 		.ascii	"lineString\000"
 2547      53747269 
 2547      6E6700
 2548              	.LASF59:
 2549 00ae 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
 2549      79446F63 
 2549      735C446F 
 2549      63756D65 
 2549      6E74735C 
 2550 00dc 30312E63 		.ascii	"01.cydsn\000"
 2550      7964736E 
 2550      00
 2551              	.LASF13:
 2552 00e5 666C6F61 		.ascii	"float\000"
 2552      7400
 2553              	.LASF6:
 2554 00eb 6C6F6E67 		.ascii	"long long int\000"
 2554      206C6F6E 
 2554      6720696E 
 2554      7400
 2555              	.LASF7:
 2556 00f9 6C6F6E67 		.ascii	"long long unsigned int\000"
 2556      206C6F6E 
 2556      6720756E 
 2556      7369676E 
 2556      65642069 
 2557              	.LASF57:
 2558 0110 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2558      4320342E 
 2558      392E3320 
 2558      32303135 
 2558      30333033 
 2559 0143 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2559      20726576 
 2559      6973696F 
 2559      6E203232 
 2559      31323230 
 2560 0176 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2560      66756E63 
 2560      74696F6E 
 2560      2D736563 
 2560      74696F6E 
 2561              	.LASF42:
 2562 019e 4D41585F 		.ascii	"MAX_N\000"
 2562      4E00
 2563              	.LASF44:
 2564 01a4 7072696E 		.ascii	"printChar\000"
 2564      74436861 
 2564      7200
 2565              	.LASF32:
 2566 01ae 73747269 		.ascii	"stringToDiffMan\000"
 2566      6E67546F 
 2566      44696666 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 55


 2566      4D616E00 
 2567              	.LASF1:
 2568 01be 756E7369 		.ascii	"unsigned char\000"
 2568      676E6564 
 2568      20636861 
 2568      7200
 2569              	.LASF51:
 2570 01cc 63757272 		.ascii	"currentDataPos\000"
 2570      656E7444 
 2570      61746150 
 2570      6F7300
 2571              	.LASF18:
 2572 01db 74696D65 		.ascii	"time_t\000"
 2572      5F7400
 2573              	.LASF38:
 2574 01e2 696E6974 		.ascii	"initDiffManEncodedArray\000"
 2574      44696666 
 2574      4D616E45 
 2574      6E636F64 
 2574      65644172 
 2575              	.LASF0:
 2576 01fa 7369676E 		.ascii	"signed char\000"
 2576      65642063 
 2576      68617200 
 2577              	.LASF33:
 2578 0206 61736369 		.ascii	"asciiToDiffMan\000"
 2578      69546F44 
 2578      6966664D 
 2578      616E00
 2579              	.LASF20:
 2580 0215 69646C65 		.ascii	"idle\000"
 2580      00
 2581              	.LASF43:
 2582 021a 64696666 		.ascii	"diffManToASCII\000"
 2582      4D616E54 
 2582      6F415343 
 2582      494900
 2583              	.LASF8:
 2584 0229 756E7369 		.ascii	"unsigned int\000"
 2584      676E6564 
 2584      20696E74 
 2584      00
 2585              	.LASF5:
 2586 0236 6C6F6E67 		.ascii	"long unsigned int\000"
 2586      20756E73 
 2586      69676E65 
 2586      6420696E 
 2586      7400
 2587              	.LASF41:
 2588 0248 4D494E5F 		.ascii	"MIN_N\000"
 2588      4E00
 2589              	.LASF34:
 2590 024e 61736369 		.ascii	"asciiChar\000"
 2590      69436861 
 2590      7200
 2591              	.LASF15:
 2592 0258 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 56


 2592      00
 2593              	.LASF29:
 2594 025d 72656365 		.ascii	"receivedChar\000"
 2594      69766564 
 2594      43686172 
 2594      00
 2595              	.LASF4:
 2596 026a 6C6F6E67 		.ascii	"long int\000"
 2596      20696E74 
 2596      00
 2597              	.LASF27:
 2598 0273 73747269 		.ascii	"stringPosition\000"
 2598      6E67506F 
 2598      73697469 
 2598      6F6E00
 2599              	.LASF10:
 2600 0282 696E7433 		.ascii	"int32_t\000"
 2600      325F7400 
 2601              	.LASF3:
 2602 028a 73686F72 		.ascii	"short unsigned int\000"
 2602      7420756E 
 2602      7369676E 
 2602      65642069 
 2602      6E7400
 2603              	.LASF28:
 2604 029d 7365636F 		.ascii	"seconds\000"
 2604      6E647300 
 2605              	.LASF54:
 2606 02a5 5F426F6F 		.ascii	"_Bool\000"
 2606      6C00
 2607              	.LASF19:
 2608 02ab 62757379 		.ascii	"busy\000"
 2608      00
 2609              	.LASF49:
 2610 02b0 72656365 		.ascii	"receivedDataCount\000"
 2610      69766564 
 2610      44617461 
 2610      436F756E 
 2610      7400
 2611              	.LASF16:
 2612 02c2 72656738 		.ascii	"reg8\000"
 2612      00
 2613              	.LASF48:
 2614 02c7 72656365 		.ascii	"receivedDataIndex\000"
 2614      69766564 
 2614      44617461 
 2614      496E6465 
 2614      7800
 2615              	.LASF14:
 2616 02d9 646F7562 		.ascii	"double\000"
 2616      6C6500
 2617              	.LASF39:
 2618 02e0 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 2618      6574776F 
 2618      726B5374 
 2618      6174654F 
 2618      6E4C4544 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 57


 2619              	.LASF47:
 2620 02f6 64696666 		.ascii	"diffManReceivedData\000"
 2620      4D616E52 
 2620      65636569 
 2620      76656444 
 2620      61746100 
 2621              	.LASF55:
 2622 030a 64617461 		.ascii	"dataTransmissionComplete\000"
 2622      5472616E 
 2622      736D6973 
 2622      73696F6E 
 2622      436F6D70 
 2623              	.LASF25:
 2624 0323 52656365 		.ascii	"ReceiveTimerISR\000"
 2624      69766554 
 2624      696D6572 
 2624      49535200 
 2625              	.LASF36:
 2626 0333 62696E61 		.ascii	"binaryValueOfChar\000"
 2626      72795661 
 2626      6C75654F 
 2626      66436861 
 2626      7200
 2627              	.LASF58:
 2628 0345 2E5C6D61 		.ascii	".\\main.c\000"
 2628      696E2E63 
 2628      00
 2629              	.LASF9:
 2630 034e 5F5F696E 		.ascii	"__int32_t\000"
 2630      7433325F 
 2630      7400
 2631              	.LASF50:
 2632 0358 68616C66 		.ascii	"halfBitIndex\000"
 2632      42697449 
 2632      6E646578 
 2632      00
 2633              	.LASF52:
 2634 0365 6C656E67 		.ascii	"lengthOfData\000"
 2634      74684F66 
 2634      44617461 
 2634      00
 2635              	.LASF24:
 2636 0372 54696D65 		.ascii	"TimerHandler\000"
 2636      7248616E 
 2636      646C6572 
 2636      00
 2637              	.LASF45:
 2638 037f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2638      52784275 
 2638      66666572 
 2638      00
 2639              	.LASF35:
 2640 038c 70726576 		.ascii	"previousHalfBit\000"
 2640      696F7573 
 2640      48616C66 
 2640      42697400 
 2641              	.LASF53:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccN9bS4D.s 			page 58


 2642 039c 74696D65 		.ascii	"timerExpired\000"
 2642      72457870 
 2642      69726564 
 2642      00
 2643              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
