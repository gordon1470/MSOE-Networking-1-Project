ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.comm	lengthOfData,4,4
  43              		.comm	messageLength,4,4
  44              		.comm	headerCRC,4,4
  45              		.global	TX_DESTINATION_ADDRESS
  46              		.align	2
  47              		.type	TX_DESTINATION_ADDRESS, %object
  48              		.size	TX_DESTINATION_ADDRESS, 4
  49              	TX_DESTINATION_ADDRESS:
  50 000c 00000000 		.space	4
  51              		.comm	timerExpired,1,1
  52              		.comm	dataTransmissionComplete,1,1
  53              		.comm	powerOnEdge,1,1
  54              		.global	headerValid
  55              		.type	headerValid, %object
  56              		.size	headerValid, 1
  57              	headerValid:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 2


  58 0010 00       		.space	1
  59              		.comm	networkState,1,1
  60              		.comm	crcState,1,1
  61              		.comm	receivedChar,1,1
  62 0011 000000   		.section	.text.Idle_Collision_ISR,"ax",%progbits
  63              		.align	2
  64              		.global	Idle_Collision_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	Idle_Collision_ISR, %function
  68              	Idle_Collision_ISR:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** #define INDEX_OF_MSB 6
   2:.\main.c      **** #define HIGH 1
   3:.\main.c      **** #define EIGHT_BITS 8
   4:.\main.c      **** #define START_BIT 2
   5:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   6:.\main.c      **** #define TX_SOURCE_ADDRESS 0
   7:.\main.c      **** #define RX_DESTINATION_ADDRESS 0//these 2 are supposed to be the same
   8:.\main.c      **** #define VERSION_NUMBER 1
   9:.\main.c      **** #define HEADER_POS 7
  10:.\main.c      **** 
  11:.\main.c      **** 
  12:.\main.c      **** #include <device.h>
  13:.\main.c      **** #include <stdbool.h>
  14:.\main.c      **** #include <stdlib.h> //For random number generator
  15:.\main.c      **** #include <time.h>
  16:.\main.c      **** #include "stdio.h"
  17:.\main.c      **** 
  18:.\main.c      **** 
  19:.\main.c      **** int getRandomNumber();
  20:.\main.c      **** void initDiffManEncodedArray();
  21:.\main.c      **** void stringToDiffMan(char*, uint8);
  22:.\main.c      **** void asciiToDiffMan(char);
  23:.\main.c      **** void transmitData();
  24:.\main.c      **** void setNetworkStateOnLEDs();
  25:.\main.c      **** void diffManToASCII();
  26:.\main.c      **** void storeChar();
  27:.\main.c      **** void printChar();
  28:.\main.c      **** bool headerCheck();
  29:.\main.c      **** 
  30:.\main.c      **** int diffManEncodedData[864];
  31:.\main.c      **** uint8 diffManReceivedData[108];
  32:.\main.c      **** char rxChar[108];
  33:.\main.c      **** int receivedDataIndex, receivedDataCount;
  34:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, lengthOfData, messageLength, h
  35:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge, headerValid = false;
  36:.\main.c      **** enum state {idle, busy, collision} networkState;
  37:.\main.c      **** enum crc {none, header, message, both} crcState;
  38:.\main.c      **** 
  39:.\main.c      **** char receivedChar;
  40:.\main.c      **** 
  41:.\main.c      **** CY_ISR(Idle_Collision_ISR){
  71              		.loc 1 41 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 3


  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  42:.\main.c      ****     networkState = idle;
  81              		.loc 1 42 0
  82 0004 074B     		ldr	r3, .L4
  83 0006 0022     		movs	r2, #0
  84 0008 1A70     		strb	r2, [r3]
  43:.\main.c      ****     if(Receive_Read() == HIGH){
  85              		.loc 1 43 0
  86 000a FFF7FEFF 		bl	Receive_Read
  87 000e 0346     		mov	r3, r0
  88 0010 012B     		cmp	r3, #1
  89 0012 03D1     		bne	.L2
  44:.\main.c      ****         networkState = idle;
  90              		.loc 1 44 0
  91 0014 034B     		ldr	r3, .L4
  92 0016 0022     		movs	r2, #0
  93 0018 1A70     		strb	r2, [r3]
  94 001a 02E0     		b	.L1
  95              	.L2:
  45:.\main.c      ****     }
  46:.\main.c      ****     else{
  47:.\main.c      ****         networkState = collision;
  96              		.loc 1 47 0
  97 001c 014B     		ldr	r3, .L4
  98 001e 0222     		movs	r2, #2
  99 0020 1A70     		strb	r2, [r3]
 100              	.L1:
  48:.\main.c      ****     }
  49:.\main.c      **** }
 101              		.loc 1 49 0
 102 0022 80BD     		pop	{r7, pc}
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0024 00000000 		.word	networkState
 107              		.cfi_endproc
 108              	.LFE63:
 109              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 110              		.section	.text.Edge_detect_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	Edge_detect_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	Edge_detect_ISR, %function
 116              	Edge_detect_ISR:
 117              	.LFB64:
  50:.\main.c      **** 
  51:.\main.c      **** CY_ISR(Edge_detect_ISR){
 118              		.loc 1 51 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 4


 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 98B5     		push	{r3, r4, r7, lr}
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  52:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  53:.\main.c      ****     Idle_Collision_Timer_Start();
 130              		.loc 1 53 0
 131 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  54:.\main.c      **** 
  55:.\main.c      ****     //Ignore power on edge
  56:.\main.c      ****     if(!powerOnEdge){
 132              		.loc 1 56 0
 133 0008 0F4B     		ldr	r3, .L9
 134 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000c 83F00103 		eor	r3, r3, #1
 136 0010 DBB2     		uxtb	r3, r3
 137 0012 002B     		cmp	r3, #0
 138 0014 0FD0     		beq	.L7
  57:.\main.c      ****         Receive_Timer_Start();
 139              		.loc 1 57 0
 140 0016 FFF7FEFF 		bl	Receive_Timer_Start
  58:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 141              		.loc 1 58 0
 142 001a 0C4B     		ldr	r3, .L9+4
 143 001c 1C68     		ldr	r4, [r3]
 144 001e FFF7FEFF 		bl	Receive_Read
 145 0022 0346     		mov	r3, r0
 146 0024 1A46     		mov	r2, r3
 147 0026 0A4B     		ldr	r3, .L9+8
 148 0028 1A55     		strb	r2, [r3, r4]
  59:.\main.c      ****         receivedDataCount++;
 149              		.loc 1 59 0
 150 002a 084B     		ldr	r3, .L9+4
 151 002c 1B68     		ldr	r3, [r3]
 152 002e 0133     		adds	r3, r3, #1
 153 0030 064A     		ldr	r2, .L9+4
 154 0032 1360     		str	r3, [r2]
 155 0034 02E0     		b	.L8
 156              	.L7:
  60:.\main.c      ****     }
  61:.\main.c      ****     else{
  62:.\main.c      ****         powerOnEdge = false;
 157              		.loc 1 62 0
 158 0036 044B     		ldr	r3, .L9
 159 0038 0022     		movs	r2, #0
 160 003a 1A70     		strb	r2, [r3]
 161              	.L8:
  63:.\main.c      ****     }
  64:.\main.c      ****     networkState = busy;
 162              		.loc 1 64 0
 163 003c 054B     		ldr	r3, .L9+12
 164 003e 0122     		movs	r2, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 5


 165 0040 1A70     		strb	r2, [r3]
  65:.\main.c      ****     Receive_ClearInterrupt();
 166              		.loc 1 65 0
 167 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  66:.\main.c      **** }
 168              		.loc 1 66 0
 169 0046 98BD     		pop	{r3, r4, r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 0048 00000000 		.word	powerOnEdge
 174 004c 00000000 		.word	receivedDataCount
 175 0050 00000000 		.word	diffManReceivedData
 176 0054 00000000 		.word	networkState
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 180              		.section	.text.TimerHandler,"ax",%progbits
 181              		.align	2
 182              		.global	TimerHandler
 183              		.thumb
 184              		.thumb_func
 185              		.type	TimerHandler, %function
 186              	TimerHandler:
 187              	.LFB65:
  67:.\main.c      **** 
  68:.\main.c      **** CY_ISR(TimerHandler){
 188              		.loc 1 68 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
  69:.\main.c      ****     Timer_Stop();
 198              		.loc 1 69 0
 199 0004 FFF7FEFF 		bl	Timer_Stop
  70:.\main.c      ****     timerExpired = true;
 200              		.loc 1 70 0
 201 0008 024B     		ldr	r3, .L12
 202 000a 0122     		movs	r2, #1
 203 000c 1A70     		strb	r2, [r3]
  71:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 204              		.loc 1 71 0
 205 000e 024B     		ldr	r3, .L12+4
 206 0010 1B78     		ldrb	r3, [r3]
  72:.\main.c      **** }
 207              		.loc 1 72 0
 208 0012 80BD     		pop	{r7, pc}
 209              	.L13:
 210              		.align	2
 211              	.L12:
 212 0014 00000000 		.word	timerExpired
 213 0018 6B640040 		.word	1073767531
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 6


 214              		.cfi_endproc
 215              	.LFE65:
 216              		.size	TimerHandler, .-TimerHandler
 217              		.section	.text.ReceiveTimerISR,"ax",%progbits
 218              		.align	2
 219              		.global	ReceiveTimerISR
 220              		.thumb
 221              		.thumb_func
 222              		.type	ReceiveTimerISR, %function
 223              	ReceiveTimerISR:
 224              	.LFB66:
  73:.\main.c      **** 
  74:.\main.c      **** //TODO changing from reading to just repeting last data
  75:.\main.c      **** CY_ISR(ReceiveTimerISR){
 225              		.loc 1 75 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
  76:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 235              		.loc 1 76 0
 236 0004 094B     		ldr	r3, .L15
 237 0006 1B68     		ldr	r3, [r3]
 238 0008 084A     		ldr	r2, .L15
 239 000a 1268     		ldr	r2, [r2]
 240 000c 013A     		subs	r2, r2, #1
 241 000e 0849     		ldr	r1, .L15+4
 242 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 243 0012 074A     		ldr	r2, .L15+4
 244 0014 D154     		strb	r1, [r2, r3]
  77:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  78:.\main.c      ****     receivedDataCount++;
 245              		.loc 1 78 0
 246 0016 054B     		ldr	r3, .L15
 247 0018 1B68     		ldr	r3, [r3]
 248 001a 0133     		adds	r3, r3, #1
 249 001c 034A     		ldr	r2, .L15
 250 001e 1360     		str	r3, [r2]
  79:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 251              		.loc 1 79 0
 252 0020 044B     		ldr	r3, .L15+8
 253 0022 1B78     		ldrb	r3, [r3]
  80:.\main.c      **** }
 254              		.loc 1 80 0
 255 0024 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0026 5DF8047B 		ldr	r7, [sp], #4
 259              		.cfi_restore 7
 260              		.cfi_def_cfa_offset 0
 261 002a 7047     		bx	lr
 262              	.L16:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 7


 263              		.align	2
 264              	.L15:
 265 002c 00000000 		.word	receivedDataCount
 266 0030 00000000 		.word	diffManReceivedData
 267 0034 6F640040 		.word	1073767535
 268              		.cfi_endproc
 269              	.LFE66:
 270              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 271              		.section	.text.main,"ax",%progbits
 272              		.align	2
 273              		.global	main
 274              		.thumb
 275              		.thumb_func
 276              		.type	main, %function
 277              	main:
 278              	.LFB67:
  81:.\main.c      **** 
  82:.\main.c      **** int main()
  83:.\main.c      **** {
 279              		.loc 1 83 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 120
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 9EB0     		sub	sp, sp, #120
 288              		.cfi_def_cfa_offset 128
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  84:.\main.c      ****     char rx;
  85:.\main.c      ****     char lineString[108];
  86:.\main.c      ****     uint8 stringPosition = HEADER_POS;//after header
 291              		.loc 1 86 0
 292 0006 0723     		movs	r3, #7
 293 0008 87F87730 		strb	r3, [r7, #119]
  87:.\main.c      ****     timerExpired = false;
 294              		.loc 1 87 0
 295 000c 8C4B     		ldr	r3, .L39
 296 000e 0022     		movs	r2, #0
 297 0010 1A70     		strb	r2, [r3]
  88:.\main.c      ****     dataTransmissionComplete = false;
 298              		.loc 1 88 0
 299 0012 8C4B     		ldr	r3, .L39+4
 300 0014 0022     		movs	r2, #0
 301 0016 1A70     		strb	r2, [r3]
  89:.\main.c      **** 
  90:.\main.c      **** 	messageLength = 0;
 302              		.loc 1 90 0
 303 0018 8B4B     		ldr	r3, .L39+8
 304 001a 0022     		movs	r2, #0
 305 001c 1A60     		str	r2, [r3]
  91:.\main.c      **** 
  92:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge.
 306              		.loc 1 92 0
 307 001e 8B4B     		ldr	r3, .L39+12
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 8


 308 0020 0122     		movs	r2, #1
 309 0022 1A70     		strb	r2, [r3]
  93:.\main.c      ****     //We want to ignore this edge on the rising edge.
  94:.\main.c      **** 
  95:.\main.c      ****     /*
  96:.\main.c      ****     Get value from system clock and
  97:.\main.c      ****     place in seconds variable.
  98:.\main.c      ****     */
  99:.\main.c      ****     time_t seconds;
 100:.\main.c      ****     time(&seconds);
 310              		.loc 1 100 0
 311 0024 3B1D     		adds	r3, r7, #4
 312 0026 1846     		mov	r0, r3
 313 0028 FFF7FEFF 		bl	time
 101:.\main.c      ****     /*
 102:.\main.c      ****     Convert seconds to a unsigned
 103:.\main.c      ****     integer for seed for random number generator
 104:.\main.c      ****     */
 105:.\main.c      ****     srand((unsigned int) seconds);
 314              		.loc 1 105 0
 315 002c 7B68     		ldr	r3, [r7, #4]
 316 002e 1846     		mov	r0, r3
 317 0030 FFF7FEFF 		bl	srand
 106:.\main.c      **** 
 107:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 318              		.loc 1 107 0
 319 0034 0120     		movs	r0, #1
 320 0036 FFF7FEFF 		bl	TX_pin_Write
 108:.\main.c      **** 
 109:.\main.c      ****     /* Enable Global Interrupts */
 110:.\main.c      ****     CyGlobalIntEnable;
 321              		.loc 1 110 0
 322              	@ 110 ".\main.c" 1
 323 003a 62B6     		CPSIE   i
 324              	@ 0 "" 2
 111:.\main.c      **** 
 112:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 325              		.loc 1 112 0
 326              		.thumb
 327 003c FFF7FEFF 		bl	Receive_ClearInterrupt
 113:.\main.c      **** 
 114:.\main.c      ****     LCD_Start();
 328              		.loc 1 114 0
 329 0040 FFF7FEFF 		bl	LCD_Start
 115:.\main.c      **** 
 116:.\main.c      ****     //enable collision detection
 117:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 330              		.loc 1 117 0
 331 0044 8248     		ldr	r0, .L39+16
 332 0046 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 118:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 333              		.loc 1 118 0
 334 004a 8248     		ldr	r0, .L39+20
 335 004c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 119:.\main.c      ****     Idle_Collision_Timer_Start();
 336              		.loc 1 119 0
 337 0050 FFF7FEFF 		bl	Idle_Collision_Timer_Start
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 9


 120:.\main.c      **** 
 121:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 122:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 338              		.loc 1 122 0
 339 0054 0020     		movs	r0, #0
 340 0056 0021     		movs	r1, #0
 341 0058 FFF7FEFF 		bl	USBUART_1_Start
 123:.\main.c      **** 
 124:.\main.c      ****     //start transmission timer
 125:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 342              		.loc 1 125 0
 343 005c 7E48     		ldr	r0, .L39+24
 344 005e FFF7FEFF 		bl	TimerISR_StartEx
 126:.\main.c      **** 
 127:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
 345              		.loc 1 127 0
 346 0062 7E48     		ldr	r0, .L39+28
 347 0064 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 128:.\main.c      **** 
 129:.\main.c      ****     receivedDataCount = 0;
 348              		.loc 1 129 0
 349 0068 7D4B     		ldr	r3, .L39+32
 350 006a 0022     		movs	r2, #0
 351 006c 1A60     		str	r2, [r3]
 130:.\main.c      ****     receivedDataIndex = 0;
 352              		.loc 1 130 0
 353 006e 7D4B     		ldr	r3, .L39+36
 354 0070 0022     		movs	r2, #0
 355 0072 1A60     		str	r2, [r3]
 131:.\main.c      **** 
 132:.\main.c      ****     lineString[0] = 0x71;
 356              		.loc 1 132 0
 357 0074 7123     		movs	r3, #113
 358 0076 3B72     		strb	r3, [r7, #8]
 133:.\main.c      **** 	lineString[1] = VERSION_NUMBER;
 359              		.loc 1 133 0
 360 0078 0123     		movs	r3, #1
 361 007a 7B72     		strb	r3, [r7, #9]
 134:.\main.c      **** 	lineString[2] = TX_SOURCE_ADDRESS;
 362              		.loc 1 134 0
 363 007c 0023     		movs	r3, #0
 364 007e BB72     		strb	r3, [r7, #10]
 135:.\main.c      **** 	lineString[3] = TX_DESTINATION_ADDRESS;
 365              		.loc 1 135 0
 366 0080 794B     		ldr	r3, .L39+40
 367 0082 1B68     		ldr	r3, [r3]
 368 0084 DBB2     		uxtb	r3, r3
 369 0086 FB72     		strb	r3, [r7, #11]
 136:.\main.c      ****     lineString[4] = 0;
 370              		.loc 1 136 0
 371 0088 0023     		movs	r3, #0
 372 008a 3B73     		strb	r3, [r7, #12]
 137:.\main.c      **** 	lineString[5] = 0;
 373              		.loc 1 137 0
 374 008c 0023     		movs	r3, #0
 375 008e 7B73     		strb	r3, [r7, #13]
 138:.\main.c      **** 	lineString[6] = 0x75;
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 10


 376              		.loc 1 138 0
 377 0090 7523     		movs	r3, #117
 378 0092 BB73     		strb	r3, [r7, #14]
 379              	.L36:
 139:.\main.c      **** 
 140:.\main.c      ****     /* Main Loop: */
 141:.\main.c      ****     for(;;)
 142:.\main.c      ****     {
 143:.\main.c      ****         setNetworkStateOnLEDs();
 380              		.loc 1 143 0
 381 0094 FFF7FEFF 		bl	setNetworkStateOnLEDs
 144:.\main.c      **** 
 145:.\main.c      ****         /*Receive*/
 146:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 147:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 382              		.loc 1 147 0
 383 0098 744B     		ldr	r3, .L39+44
 384 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 009c 002B     		cmp	r3, #0
 386 009e 3ED1     		bne	.L18
 387              		.loc 1 147 0 is_stmt 0 discriminator 1
 388 00a0 6F4B     		ldr	r3, .L39+32
 389 00a2 1B68     		ldr	r3, [r3]
 390 00a4 212B     		cmp	r3, #33
 391 00a6 3ADD     		ble	.L18
 148:.\main.c      **** 
 149:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 150:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 392              		.loc 1 150 0 is_stmt 1
 393 00a8 714B     		ldr	r3, .L39+48
 394 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 395 00ac 002B     		cmp	r3, #0
 396 00ae 2DD1     		bne	.L19
 397              		.loc 1 150 0 is_stmt 0 discriminator 1
 398 00b0 6F4B     		ldr	r3, .L39+48
 399 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 400 00b4 012B     		cmp	r3, #1
 401 00b6 29D1     		bne	.L19
 151:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 402              		.loc 1 151 0 is_stmt 1
 403 00b8 6A4B     		ldr	r3, .L39+36
 404 00ba 0222     		movs	r2, #2
 405 00bc 1A60     		str	r2, [r3]
 152:.\main.c      ****                 while(receivedDataIndex < receivedDataCount-1){     //Note: receivedDataCount-1 b/c
 406              		.loc 1 152 0
 407 00be 06E0     		b	.L20
 408              	.L21:
 153:.\main.c      ****                     //wait for 8 bits TODO bad comment
 154:.\main.c      ****                     //char receivedChar;     TODO move to global variable
 155:.\main.c      ****                     //char *charPtr = &receivedChar;
 156:.\main.c      **** 
 157:.\main.c      ****                     diffManToASCII();
 409              		.loc 1 157 0
 410 00c0 FFF7FEFF 		bl	diffManToASCII
 158:.\main.c      **** 					storeChar();
 411              		.loc 1 158 0
 412 00c4 FFF7FEFF 		bl	storeChar
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 11


 159:.\main.c      ****                     receivedChar = 0;       //Reset the char
 413              		.loc 1 159 0
 414 00c8 6A4B     		ldr	r3, .L39+52
 415 00ca 0022     		movs	r2, #0
 416 00cc 1A70     		strb	r2, [r3]
 417              	.L20:
 152:.\main.c      ****                     //wait for 8 bits TODO bad comment
 418              		.loc 1 152 0
 419 00ce 644B     		ldr	r3, .L39+32
 420 00d0 1B68     		ldr	r3, [r3]
 421 00d2 5A1E     		subs	r2, r3, #1
 422 00d4 634B     		ldr	r3, .L39+36
 423 00d6 1B68     		ldr	r3, [r3]
 424 00d8 9A42     		cmp	r2, r3
 425 00da F1DC     		bgt	.L21
 160:.\main.c      ****                 }
 161:.\main.c      **** 				if(headerCheck()){
 426              		.loc 1 161 0
 427 00dc FFF7FEFF 		bl	headerCheck
 428 00e0 0346     		mov	r3, r0
 429 00e2 002B     		cmp	r3, #0
 430 00e4 01D0     		beq	.L22
 162:.\main.c      ****                     printChar();
 431              		.loc 1 162 0
 432 00e6 FFF7FEFF 		bl	printChar
 433              	.L22:
 163:.\main.c      ****                 }
 164:.\main.c      ****                //TODO remove
 165:.\main.c      ****                 /*LCD_Position(0,0);
 166:.\main.c      ****                 int i;
 167:.\main.c      ****                 for(i=0; i<16;i++){
 168:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 169:.\main.c      ****                 }
 170:.\main.c      ****                 LCD_Position(1,0);
 171:.\main.c      **** 
 172:.\main.c      ****                 for(i=16; i<32;i++){
 173:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 174:.\main.c      ****                 }*/
 175:.\main.c      ****                 //end remove
 176:.\main.c      **** 
 177:.\main.c      ****                 CyDelay(1000);//TODO remove for testing only
 434              		.loc 1 177 0
 435 00ea 4FF47A70 		mov	r0, #1000
 436 00ee FFF7FEFF 		bl	CyDelay
 178:.\main.c      ****                 LCD_ClearDisplay();//TODO remove
 437              		.loc 1 178 0
 438 00f2 0120     		movs	r0, #1
 439 00f4 FFF7FEFF 		bl	LCD_WriteControl
 179:.\main.c      ****                 receivedDataCount = 0;  //Reset count
 440              		.loc 1 179 0
 441 00f8 594B     		ldr	r3, .L39+32
 442 00fa 0022     		movs	r2, #0
 443 00fc 1A60     		str	r2, [r3]
 180:.\main.c      ****                 receivedDataIndex = 0;  //Reset index
 444              		.loc 1 180 0
 445 00fe 594B     		ldr	r3, .L39+36
 446 0100 0022     		movs	r2, #0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 12


 447 0102 1A60     		str	r2, [r3]
 181:.\main.c      ****                 currentRXCharPosition = 0;
 448              		.loc 1 181 0
 449 0104 5C4B     		ldr	r3, .L39+56
 450 0106 0022     		movs	r2, #0
 451 0108 1A60     		str	r2, [r3]
 452 010a 08E0     		b	.L18
 453              	.L19:
 182:.\main.c      ****             }
 183:.\main.c      ****             else{
 184:.\main.c      ****                 //Receive data did not start with the start bit
 185:.\main.c      ****                 receivedDataCount = 0;
 454              		.loc 1 185 0
 455 010c 544B     		ldr	r3, .L39+32
 456 010e 0022     		movs	r2, #0
 457 0110 1A60     		str	r2, [r3]
 186:.\main.c      ****                 receivedDataIndex = 0;
 458              		.loc 1 186 0
 459 0112 544B     		ldr	r3, .L39+36
 460 0114 0022     		movs	r2, #0
 461 0116 1A60     		str	r2, [r3]
 187:.\main.c      ****                 currentRXCharPosition = 0;
 462              		.loc 1 187 0
 463 0118 574B     		ldr	r3, .L39+56
 464 011a 0022     		movs	r2, #0
 465 011c 1A60     		str	r2, [r3]
 466              	.L18:
 188:.\main.c      ****             }
 189:.\main.c      ****         }
 190:.\main.c      ****         else
 191:.\main.c      ****         {
 192:.\main.c      ****             //TODO prob remove this else
 193:.\main.c      ****         }
 194:.\main.c      ****         /*End Receive*/
 195:.\main.c      **** 
 196:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 467              		.loc 1 196 0
 468 011e FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 469 0122 0346     		mov	r3, r0
 470 0124 002B     		cmp	r3, #0
 471 0126 06D0     		beq	.L24
 197:.\main.c      ****         {
 198:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 472              		.loc 1 198 0
 473 0128 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 474 012c 0346     		mov	r3, r0
 475 012e 002B     		cmp	r3, #0
 476 0130 01D0     		beq	.L24
 199:.\main.c      ****             {
 200:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 201:.\main.c      ****                 USBUART_1_CDC_Init();
 477              		.loc 1 201 0
 478 0132 FFF7FEFF 		bl	USBUART_1_CDC_Init
 479              	.L24:
 202:.\main.c      ****             }
 203:.\main.c      ****         }
 204:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 13


 480              		.loc 1 204 0
 481 0136 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 482 013a 0346     		mov	r3, r0
 483 013c 002B     		cmp	r3, #0
 484 013e 7ED0     		beq	.L25
 205:.\main.c      ****         {
 206:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 485              		.loc 1 206 0
 486 0140 FFF7FEFF 		bl	USBUART_1_DataIsReady
 487 0144 0346     		mov	r3, r0
 488 0146 002B     		cmp	r3, #0
 489 0148 79D0     		beq	.L25
 207:.\main.c      ****             {
 208:.\main.c      ****                 rx = USBUART_1_GetChar();
 490              		.loc 1 208 0
 491 014a FFF7FEFF 		bl	USBUART_1_GetChar
 492 014e 0346     		mov	r3, r0
 493 0150 87F87630 		strb	r3, [r7, #118]
 209:.\main.c      ****                 switch(rx){
 494              		.loc 1 209 0
 495 0154 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 496 0158 0D2B     		cmp	r3, #13
 497 015a 25D0     		beq	.L27
 498 015c 1B2B     		cmp	r3, #27
 499 015e 6DD0     		beq	.L38
 500 0160 082B     		cmp	r3, #8
 501 0162 51D1     		bne	.L37
 210:.\main.c      ****                     case 8://backspace
 211:.\main.c      ****                         if(stringPosition>0){
 502              		.loc 1 211 0
 503 0164 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 504 0168 002B     		cmp	r3, #0
 505 016a 1CD0     		beq	.L30
 212:.\main.c      ****                             stringPosition--;
 506              		.loc 1 212 0
 507 016c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 508 0170 013B     		subs	r3, r3, #1
 509 0172 87F87730 		strb	r3, [r7, #119]
 213:.\main.c      ****                             lineString[stringPosition] = '\0';
 510              		.loc 1 213 0
 511 0176 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 512 017a 07F17802 		add	r2, r7, #120
 513 017e 1344     		add	r3, r3, r2
 514 0180 0022     		movs	r2, #0
 515 0182 03F8702C 		strb	r2, [r3, #-112]
 214:.\main.c      ****                             //backspace space backspace
 215:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u);
 516              		.loc 1 215 0
 517 0186 00BF     		nop
 518              	.L31:
 519              		.loc 1 215 0 is_stmt 0 discriminator 1
 520 0188 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 521 018c 0346     		mov	r3, r0
 522 018e 002B     		cmp	r3, #0
 523 0190 FAD0     		beq	.L31
 216:.\main.c      ****                             USBUART_1_PutChar(8);
 524              		.loc 1 216 0 is_stmt 1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 14


 525 0192 0820     		movs	r0, #8
 526 0194 FFF7FEFF 		bl	USBUART_1_PutChar
 217:.\main.c      ****                             USBUART_1_PutChar(32);
 527              		.loc 1 217 0
 528 0198 2020     		movs	r0, #32
 529 019a FFF7FEFF 		bl	USBUART_1_PutChar
 218:.\main.c      ****                             USBUART_1_PutChar(8);
 530              		.loc 1 218 0
 531 019e 0820     		movs	r0, #8
 532 01a0 FFF7FEFF 		bl	USBUART_1_PutChar
 219:.\main.c      ****                         }
 220:.\main.c      ****                         break;
 533              		.loc 1 220 0
 534 01a4 4BE0     		b	.L25
 535              	.L30:
 536 01a6 4AE0     		b	.L25
 537              	.L27:
 221:.\main.c      ****                     case 13://enter (carriage return)
 222:.\main.c      ****                         initDiffManEncodedArray();
 538              		.loc 1 222 0
 539 01a8 FFF7FEFF 		bl	initDiffManEncodedArray
 223:.\main.c      **** 						lineString[4] = stringPosition - HEADER_POS;
 540              		.loc 1 223 0
 541 01ac 97F87730 		ldrb	r3, [r7, #119]
 542 01b0 073B     		subs	r3, r3, #7
 543 01b2 DBB2     		uxtb	r3, r3
 544 01b4 3B73     		strb	r3, [r7, #12]
 224:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 545              		.loc 1 224 0
 546 01b6 07F10802 		add	r2, r7, #8
 547 01ba 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 548 01be 1046     		mov	r0, r2
 549 01c0 1946     		mov	r1, r3
 550 01c2 FFF7FEFF 		bl	stringToDiffMan
 225:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 551              		.loc 1 225 0
 552 01c6 00BF     		nop
 553              	.L32:
 554              		.loc 1 225 0 is_stmt 0 discriminator 1
 555 01c8 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 556 01cc 0346     		mov	r3, r0
 557 01ce 002B     		cmp	r3, #0
 558 01d0 FAD0     		beq	.L32
 226:.\main.c      ****                         USBUART_1_PutCRLF();
 559              		.loc 1 226 0 is_stmt 1
 560 01d2 FFF7FEFF 		bl	USBUART_1_PutCRLF
 227:.\main.c      **** 
 228:.\main.c      ****                         //keep looping until data is transmitted
 229:.\main.c      **** 
 230:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
 561              		.loc 1 230 0
 562 01d6 03E0     		b	.L33
 563              	.L34:
 231:.\main.c      **** 
 232:.\main.c      ****                             transmitData();
 564              		.loc 1 232 0
 565 01d8 FFF7FEFF 		bl	transmitData
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 15


 233:.\main.c      ****                             setNetworkStateOnLEDs();
 566              		.loc 1 233 0
 567 01dc FFF7FEFF 		bl	setNetworkStateOnLEDs
 568              	.L33:
 230:.\main.c      **** 
 569              		.loc 1 230 0
 570 01e0 184B     		ldr	r3, .L39+4
 571 01e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 572 01e4 83F00103 		eor	r3, r3, #1
 573 01e8 DBB2     		uxtb	r3, r3
 574 01ea 002B     		cmp	r3, #0
 575 01ec F4D1     		bne	.L34
 234:.\main.c      ****                         }
 235:.\main.c      ****                         dataTransmissionComplete = false;
 576              		.loc 1 235 0
 577 01ee 154B     		ldr	r3, .L39+4
 578 01f0 0022     		movs	r2, #0
 579 01f2 1A70     		strb	r2, [r3]
 236:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 580              		.loc 1 236 0
 581 01f4 0120     		movs	r0, #1
 582 01f6 FFF7FEFF 		bl	TX_pin_Write
 237:.\main.c      ****                         //reset index
 238:.\main.c      ****                         halfBitIndex = 0;
 583              		.loc 1 238 0
 584 01fa 204B     		ldr	r3, .L39+60
 585 01fc 0022     		movs	r2, #0
 586 01fe 1A60     		str	r2, [r3]
 239:.\main.c      ****                         stringPosition = HEADER_POS;
 587              		.loc 1 239 0
 588 0200 0723     		movs	r3, #7
 589 0202 87F87730 		strb	r3, [r7, #119]
 240:.\main.c      ****                         break;
 590              		.loc 1 240 0
 591 0206 1AE0     		b	.L25
 592              	.L37:
 241:.\main.c      ****                     case 27://escape
 242:.\main.c      ****                         break;
 243:.\main.c      ****                     default://everything else
 244:.\main.c      ****                         lineString[stringPosition] = rx;
 593              		.loc 1 244 0
 594 0208 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 595 020c 07F17802 		add	r2, r7, #120
 596 0210 1344     		add	r3, r3, r2
 597 0212 97F87620 		ldrb	r2, [r7, #118]
 598 0216 03F8702C 		strb	r2, [r3, #-112]
 245:.\main.c      ****                         stringPosition++;
 599              		.loc 1 245 0
 600 021a 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 601 021e 0133     		adds	r3, r3, #1
 602 0220 87F87730 		strb	r3, [r7, #119]
 246:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 603              		.loc 1 246 0
 604 0224 00BF     		nop
 605              	.L35:
 606              		.loc 1 246 0 is_stmt 0 discriminator 1
 607 0226 FFF7FEFF 		bl	USBUART_1_CDCIsReady
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 16


 608 022a 0346     		mov	r3, r0
 609 022c 002B     		cmp	r3, #0
 610 022e FAD0     		beq	.L35
 247:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 611              		.loc 1 247 0 is_stmt 1
 612 0230 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 613 0234 1846     		mov	r0, r3
 614 0236 FFF7FEFF 		bl	USBUART_1_PutChar
 248:.\main.c      ****                         break;
 615              		.loc 1 248 0
 616 023a 00E0     		b	.L25
 617              	.L38:
 242:.\main.c      ****                     default://everything else
 618              		.loc 1 242 0
 619 023c 00BF     		nop
 620              	.L25:
 249:.\main.c      ****                 }
 250:.\main.c      ****             }
 251:.\main.c      ****         }
 252:.\main.c      ****     }
 621              		.loc 1 252 0 discriminator 1
 622 023e 29E7     		b	.L36
 623              	.L40:
 624              		.align	2
 625              	.L39:
 626 0240 00000000 		.word	timerExpired
 627 0244 00000000 		.word	dataTransmissionComplete
 628 0248 00000000 		.word	messageLength
 629 024c 00000000 		.word	powerOnEdge
 630 0250 00000000 		.word	Idle_Collision_ISR
 631 0254 00000000 		.word	Edge_detect_ISR
 632 0258 00000000 		.word	TimerHandler
 633 025c 00000000 		.word	ReceiveTimerISR
 634 0260 00000000 		.word	receivedDataCount
 635 0264 00000000 		.word	receivedDataIndex
 636 0268 00000000 		.word	TX_DESTINATION_ADDRESS
 637 026c 00000000 		.word	networkState
 638 0270 00000000 		.word	diffManReceivedData
 639 0274 00000000 		.word	receivedChar
 640 0278 00000000 		.word	currentRXCharPosition
 641 027c 00000000 		.word	halfBitIndex
 642              		.cfi_endproc
 643              	.LFE67:
 644              		.size	main, .-main
 645              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 646              		.align	2
 647              		.global	initDiffManEncodedArray
 648              		.thumb
 649              		.thumb_func
 650              		.type	initDiffManEncodedArray, %function
 651              	initDiffManEncodedArray:
 652              	.LFB68:
 253:.\main.c      **** }
 254:.\main.c      **** 
 255:.\main.c      **** /*
 256:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the
 257:.\main.c      **** half bits 01.
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 17


 258:.\main.c      **** Only call when starting to transfer a new string
 259:.\main.c      **** */
 260:.\main.c      **** void initDiffManEncodedArray(){
 653              		.loc 1 260 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 1, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0000 80B4     		push	{r7}
 659              		.cfi_def_cfa_offset 4
 660              		.cfi_offset 7, -4
 661 0002 00AF     		add	r7, sp, #0
 662              		.cfi_def_cfa_register 7
 261:.\main.c      ****     halfBitIndex = 0;
 663              		.loc 1 261 0
 664 0004 0E4B     		ldr	r3, .L42
 665 0006 0022     		movs	r2, #0
 666 0008 1A60     		str	r2, [r3]
 262:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 667              		.loc 1 262 0
 668 000a 0D4B     		ldr	r3, .L42
 669 000c 1B68     		ldr	r3, [r3]
 670 000e 0D4A     		ldr	r2, .L42+4
 671 0010 0021     		movs	r1, #0
 672 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 263:.\main.c      ****     halfBitIndex++;
 673              		.loc 1 263 0
 674 0016 0A4B     		ldr	r3, .L42
 675 0018 1B68     		ldr	r3, [r3]
 676 001a 0133     		adds	r3, r3, #1
 677 001c 084A     		ldr	r2, .L42
 678 001e 1360     		str	r3, [r2]
 264:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 679              		.loc 1 264 0
 680 0020 074B     		ldr	r3, .L42
 681 0022 1B68     		ldr	r3, [r3]
 682 0024 074A     		ldr	r2, .L42+4
 683 0026 0121     		movs	r1, #1
 684 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 265:.\main.c      ****     halfBitIndex++;
 685              		.loc 1 265 0
 686 002c 044B     		ldr	r3, .L42
 687 002e 1B68     		ldr	r3, [r3]
 688 0030 0133     		adds	r3, r3, #1
 689 0032 034A     		ldr	r2, .L42
 690 0034 1360     		str	r3, [r2]
 266:.\main.c      **** }
 691              		.loc 1 266 0
 692 0036 BD46     		mov	sp, r7
 693              		.cfi_def_cfa_register 13
 694              		@ sp needed
 695 0038 5DF8047B 		ldr	r7, [sp], #4
 696              		.cfi_restore 7
 697              		.cfi_def_cfa_offset 0
 698 003c 7047     		bx	lr
 699              	.L43:
 700 003e 00BF     		.align	2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 18


 701              	.L42:
 702 0040 00000000 		.word	halfBitIndex
 703 0044 00000000 		.word	diffManEncodedData
 704              		.cfi_endproc
 705              	.LFE68:
 706              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 707              		.section	.text.stringToDiffMan,"ax",%progbits
 708              		.align	2
 709              		.global	stringToDiffMan
 710              		.thumb
 711              		.thumb_func
 712              		.type	stringToDiffMan, %function
 713              	stringToDiffMan:
 714              	.LFB69:
 267:.\main.c      **** 
 268:.\main.c      **** /*
 269:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 270:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 271:.\main.c      **** */
 272:.\main.c      **** void stringToDiffMan(char *lineString, uint8 stringPosition){
 715              		.loc 1 272 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 16
 718              		@ frame_needed = 1, uses_anonymous_args = 0
 719 0000 80B5     		push	{r7, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 84B0     		sub	sp, sp, #16
 724              		.cfi_def_cfa_offset 24
 725 0004 00AF     		add	r7, sp, #0
 726              		.cfi_def_cfa_register 7
 727 0006 7860     		str	r0, [r7, #4]
 728 0008 0B46     		mov	r3, r1
 729 000a FB70     		strb	r3, [r7, #3]
 273:.\main.c      **** 
 274:.\main.c      ****     unsigned int i = 0;
 730              		.loc 1 274 0
 731 000c 0023     		movs	r3, #0
 732 000e FB60     		str	r3, [r7, #12]
 275:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 733              		.loc 1 275 0
 734 0010 0023     		movs	r3, #0
 735 0012 FB60     		str	r3, [r7, #12]
 736 0014 09E0     		b	.L45
 737              	.L46:
 276:.\main.c      ****         asciiToDiffMan(*(lineString + i));//use to be lineString[i]
 738              		.loc 1 276 0 discriminator 3
 739 0016 7A68     		ldr	r2, [r7, #4]
 740 0018 FB68     		ldr	r3, [r7, #12]
 741 001a 1344     		add	r3, r3, r2
 742 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 743 001e 1846     		mov	r0, r3
 744 0020 FFF7FEFF 		bl	asciiToDiffMan
 275:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 745              		.loc 1 275 0 discriminator 3
 746 0024 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 19


 747 0026 0133     		adds	r3, r3, #1
 748 0028 FB60     		str	r3, [r7, #12]
 749              	.L45:
 275:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 750              		.loc 1 275 0 is_stmt 0 discriminator 1
 751 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 752 002c FB68     		ldr	r3, [r7, #12]
 753 002e 9A42     		cmp	r2, r3
 754 0030 F1D8     		bhi	.L46
 277:.\main.c      ****     }
 278:.\main.c      **** }
 755              		.loc 1 278 0 is_stmt 1
 756 0032 1037     		adds	r7, r7, #16
 757              		.cfi_def_cfa_offset 8
 758 0034 BD46     		mov	sp, r7
 759              		.cfi_def_cfa_register 13
 760              		@ sp needed
 761 0036 80BD     		pop	{r7, pc}
 762              		.cfi_endproc
 763              	.LFE69:
 764              		.size	stringToDiffMan, .-stringToDiffMan
 765              		.section	.text.asciiToDiffMan,"ax",%progbits
 766              		.align	2
 767              		.global	asciiToDiffMan
 768              		.thumb
 769              		.thumb_func
 770              		.type	asciiToDiffMan, %function
 771              	asciiToDiffMan:
 772              	.LFB70:
 279:.\main.c      **** 
 280:.\main.c      **** /*
 281:.\main.c      **** Helper method. Do not call from main.
 282:.\main.c      **** Converts a ascii char to a differental manchester line encoded version
 283:.\main.c      **** */
 284:.\main.c      **** void asciiToDiffMan(char asciiChar)
 285:.\main.c      **** {
 773              		.loc 1 285 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 104
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 0000 80B4     		push	{r7}
 779              		.cfi_def_cfa_offset 4
 780              		.cfi_offset 7, -4
 781 0002 9BB0     		sub	sp, sp, #108
 782              		.cfi_def_cfa_offset 112
 783 0004 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 0006 0346     		mov	r3, r0
 786 0008 FB71     		strb	r3, [r7, #7]
 286:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 787              		.loc 1 286 0
 788 000a 6C4B     		ldr	r3, .L59
 789 000c 1B68     		ldr	r3, [r3]
 790 000e 013B     		subs	r3, r3, #1
 791 0010 6B4A     		ldr	r2, .L59+4
 792 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 20


 793 0016 87F86730 		strb	r3, [r7, #103]
 287:.\main.c      ****     //send starting 1 bit (encoded)
 288:.\main.c      ****     if(previousHalfBit == 1){
 794              		.loc 1 288 0
 795 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 796 001e 012B     		cmp	r3, #1
 797 0020 16D1     		bne	.L48
 289:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 798              		.loc 1 289 0
 799 0022 664B     		ldr	r3, .L59
 800 0024 1B68     		ldr	r3, [r3]
 801 0026 664A     		ldr	r2, .L59+4
 802 0028 0121     		movs	r1, #1
 803 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 290:.\main.c      ****         halfBitIndex++;
 804              		.loc 1 290 0
 805 002e 634B     		ldr	r3, .L59
 806 0030 1B68     		ldr	r3, [r3]
 807 0032 0133     		adds	r3, r3, #1
 808 0034 614A     		ldr	r2, .L59
 809 0036 1360     		str	r3, [r2]
 291:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 810              		.loc 1 291 0
 811 0038 604B     		ldr	r3, .L59
 812 003a 1B68     		ldr	r3, [r3]
 813 003c 604A     		ldr	r2, .L59+4
 814 003e 0021     		movs	r1, #0
 815 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 292:.\main.c      ****         halfBitIndex++;
 816              		.loc 1 292 0
 817 0044 5D4B     		ldr	r3, .L59
 818 0046 1B68     		ldr	r3, [r3]
 819 0048 0133     		adds	r3, r3, #1
 820 004a 5C4A     		ldr	r2, .L59
 821 004c 1360     		str	r3, [r2]
 822 004e 15E0     		b	.L49
 823              	.L48:
 293:.\main.c      ****     }else{
 294:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 824              		.loc 1 294 0
 825 0050 5A4B     		ldr	r3, .L59
 826 0052 1B68     		ldr	r3, [r3]
 827 0054 5A4A     		ldr	r2, .L59+4
 828 0056 0021     		movs	r1, #0
 829 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 295:.\main.c      ****         halfBitIndex++;
 830              		.loc 1 295 0
 831 005c 574B     		ldr	r3, .L59
 832 005e 1B68     		ldr	r3, [r3]
 833 0060 0133     		adds	r3, r3, #1
 834 0062 564A     		ldr	r2, .L59
 835 0064 1360     		str	r3, [r2]
 296:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 836              		.loc 1 296 0
 837 0066 554B     		ldr	r3, .L59
 838 0068 1B68     		ldr	r3, [r3]
 839 006a 554A     		ldr	r2, .L59+4
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 21


 840 006c 0121     		movs	r1, #1
 841 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 297:.\main.c      ****         halfBitIndex++;
 842              		.loc 1 297 0
 843 0072 524B     		ldr	r3, .L59
 844 0074 1B68     		ldr	r3, [r3]
 845 0076 0133     		adds	r3, r3, #1
 846 0078 504A     		ldr	r2, .L59
 847 007a 1360     		str	r3, [r2]
 848              	.L49:
 298:.\main.c      ****     }
 299:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 849              		.loc 1 299 0
 850 007c 4F4B     		ldr	r3, .L59
 851 007e 1B68     		ldr	r3, [r3]
 852 0080 013B     		subs	r3, r3, #1
 853 0082 4F4A     		ldr	r2, .L59+4
 854 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 855 0088 87F86730 		strb	r3, [r7, #103]
 300:.\main.c      **** 
 301:.\main.c      **** 
 302:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 303:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 304:.\main.c      ****     int i;
 305:.\main.c      ****     /*for(i=0; asciiChar>0; i++)
 306:.\main.c      ****     {
 307:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2;
 308:.\main.c      ****         asciiChar=asciiChar/2;
 309:.\main.c      ****     }*/
 310:.\main.c      ****     for (i = 0; i < 8; ++i){//todo test new value
 856              		.loc 1 310 0
 857 008c 0023     		movs	r3, #0
 858 008e 3B66     		str	r3, [r7, #96]
 859 0090 0FE0     		b	.L50
 860              	.L51:
 311:.\main.c      ****         binaryValueOfChar[i] = (asciiChar >> i) & 1;
 861              		.loc 1 311 0 discriminator 3
 862 0092 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 863 0094 3B6E     		ldr	r3, [r7, #96]
 864 0096 42FA03F3 		asr	r3, r2, r3
 865 009a 03F00102 		and	r2, r3, #1
 866 009e 3B6E     		ldr	r3, [r7, #96]
 867 00a0 9B00     		lsls	r3, r3, #2
 868 00a2 07F16801 		add	r1, r7, #104
 869 00a6 0B44     		add	r3, r3, r1
 870 00a8 43F85C2C 		str	r2, [r3, #-92]
 310:.\main.c      ****         binaryValueOfChar[i] = (asciiChar >> i) & 1;
 871              		.loc 1 310 0 discriminator 3
 872 00ac 3B6E     		ldr	r3, [r7, #96]
 873 00ae 0133     		adds	r3, r3, #1
 874 00b0 3B66     		str	r3, [r7, #96]
 875              	.L50:
 310:.\main.c      ****         binaryValueOfChar[i] = (asciiChar >> i) & 1;
 876              		.loc 1 310 0 is_stmt 0 discriminator 1
 877 00b2 3B6E     		ldr	r3, [r7, #96]
 878 00b4 072B     		cmp	r3, #7
 879 00b6 ECDD     		ble	.L51
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 22


 312:.\main.c      ****     }
 313:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 314:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 315:.\main.c      ****     int j;
 316:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--)
 880              		.loc 1 316 0 is_stmt 1
 881 00b8 0623     		movs	r3, #6
 882 00ba FB65     		str	r3, [r7, #92]
 883 00bc 76E0     		b	.L52
 884              	.L58:
 317:.\main.c      ****     {
 318:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 885              		.loc 1 318 0
 886 00be FB6D     		ldr	r3, [r7, #92]
 887 00c0 9B00     		lsls	r3, r3, #2
 888 00c2 07F16802 		add	r2, r7, #104
 889 00c6 1344     		add	r3, r3, r2
 890 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 891 00cc 012B     		cmp	r3, #1
 892 00ce 31D1     		bne	.L53
 319:.\main.c      ****         {
 320:.\main.c      ****             //bit == 1
 321:.\main.c      ****             if(previousHalfBit == 1)
 893              		.loc 1 321 0
 894 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 895 00d4 012B     		cmp	r3, #1
 896 00d6 16D1     		bne	.L54
 322:.\main.c      ****             {
 323:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 897              		.loc 1 323 0
 898 00d8 384B     		ldr	r3, .L59
 899 00da 1B68     		ldr	r3, [r3]
 900 00dc 384A     		ldr	r2, .L59+4
 901 00de 0121     		movs	r1, #1
 902 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 324:.\main.c      ****                 halfBitIndex++;
 903              		.loc 1 324 0
 904 00e4 354B     		ldr	r3, .L59
 905 00e6 1B68     		ldr	r3, [r3]
 906 00e8 0133     		adds	r3, r3, #1
 907 00ea 344A     		ldr	r2, .L59
 908 00ec 1360     		str	r3, [r2]
 325:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 909              		.loc 1 325 0
 910 00ee 334B     		ldr	r3, .L59
 911 00f0 1B68     		ldr	r3, [r3]
 912 00f2 334A     		ldr	r2, .L59+4
 913 00f4 0021     		movs	r1, #0
 914 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 326:.\main.c      ****                 halfBitIndex++;
 915              		.loc 1 326 0
 916 00fa 304B     		ldr	r3, .L59
 917 00fc 1B68     		ldr	r3, [r3]
 918 00fe 0133     		adds	r3, r3, #1
 919 0100 2E4A     		ldr	r2, .L59
 920 0102 1360     		str	r3, [r2]
 921 0104 47E0     		b	.L56
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 23


 922              	.L54:
 327:.\main.c      ****             }
 328:.\main.c      ****             else
 329:.\main.c      ****             {
 330:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 923              		.loc 1 330 0
 924 0106 2D4B     		ldr	r3, .L59
 925 0108 1B68     		ldr	r3, [r3]
 926 010a 2D4A     		ldr	r2, .L59+4
 927 010c 0021     		movs	r1, #0
 928 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 331:.\main.c      ****                 halfBitIndex++;
 929              		.loc 1 331 0
 930 0112 2A4B     		ldr	r3, .L59
 931 0114 1B68     		ldr	r3, [r3]
 932 0116 0133     		adds	r3, r3, #1
 933 0118 284A     		ldr	r2, .L59
 934 011a 1360     		str	r3, [r2]
 332:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 935              		.loc 1 332 0
 936 011c 274B     		ldr	r3, .L59
 937 011e 1B68     		ldr	r3, [r3]
 938 0120 274A     		ldr	r2, .L59+4
 939 0122 0121     		movs	r1, #1
 940 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 333:.\main.c      ****                 halfBitIndex++;
 941              		.loc 1 333 0
 942 0128 244B     		ldr	r3, .L59
 943 012a 1B68     		ldr	r3, [r3]
 944 012c 0133     		adds	r3, r3, #1
 945 012e 234A     		ldr	r2, .L59
 946 0130 1360     		str	r3, [r2]
 947 0132 30E0     		b	.L56
 948              	.L53:
 334:.\main.c      ****             }
 335:.\main.c      **** 
 336:.\main.c      ****         }
 337:.\main.c      ****         else
 338:.\main.c      ****         {
 339:.\main.c      ****             //bit == 0
 340:.\main.c      ****             if(previousHalfBit == 1)
 949              		.loc 1 340 0
 950 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 951 0138 012B     		cmp	r3, #1
 952 013a 16D1     		bne	.L57
 341:.\main.c      ****             {
 342:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 953              		.loc 1 342 0
 954 013c 1F4B     		ldr	r3, .L59
 955 013e 1B68     		ldr	r3, [r3]
 956 0140 1F4A     		ldr	r2, .L59+4
 957 0142 0021     		movs	r1, #0
 958 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 343:.\main.c      ****                 halfBitIndex++;
 959              		.loc 1 343 0
 960 0148 1C4B     		ldr	r3, .L59
 961 014a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 24


 962 014c 0133     		adds	r3, r3, #1
 963 014e 1B4A     		ldr	r2, .L59
 964 0150 1360     		str	r3, [r2]
 344:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 965              		.loc 1 344 0
 966 0152 1A4B     		ldr	r3, .L59
 967 0154 1B68     		ldr	r3, [r3]
 968 0156 1A4A     		ldr	r2, .L59+4
 969 0158 0121     		movs	r1, #1
 970 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 345:.\main.c      ****                 halfBitIndex++;
 971              		.loc 1 345 0
 972 015e 174B     		ldr	r3, .L59
 973 0160 1B68     		ldr	r3, [r3]
 974 0162 0133     		adds	r3, r3, #1
 975 0164 154A     		ldr	r2, .L59
 976 0166 1360     		str	r3, [r2]
 977 0168 15E0     		b	.L56
 978              	.L57:
 346:.\main.c      ****             }
 347:.\main.c      ****             else
 348:.\main.c      ****             {
 349:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 979              		.loc 1 349 0
 980 016a 144B     		ldr	r3, .L59
 981 016c 1B68     		ldr	r3, [r3]
 982 016e 144A     		ldr	r2, .L59+4
 983 0170 0121     		movs	r1, #1
 984 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 350:.\main.c      ****                 halfBitIndex++;
 985              		.loc 1 350 0
 986 0176 114B     		ldr	r3, .L59
 987 0178 1B68     		ldr	r3, [r3]
 988 017a 0133     		adds	r3, r3, #1
 989 017c 0F4A     		ldr	r2, .L59
 990 017e 1360     		str	r3, [r2]
 351:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 991              		.loc 1 351 0
 992 0180 0E4B     		ldr	r3, .L59
 993 0182 1B68     		ldr	r3, [r3]
 994 0184 0E4A     		ldr	r2, .L59+4
 995 0186 0021     		movs	r1, #0
 996 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 352:.\main.c      ****                 halfBitIndex++;
 997              		.loc 1 352 0
 998 018c 0B4B     		ldr	r3, .L59
 999 018e 1B68     		ldr	r3, [r3]
 1000 0190 0133     		adds	r3, r3, #1
 1001 0192 0A4A     		ldr	r2, .L59
 1002 0194 1360     		str	r3, [r2]
 1003              	.L56:
 353:.\main.c      ****             }
 354:.\main.c      ****         }
 355:.\main.c      **** 
 356:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1004              		.loc 1 356 0 discriminator 2
 1005 0196 094B     		ldr	r3, .L59
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 25


 1006 0198 1B68     		ldr	r3, [r3]
 1007 019a 013B     		subs	r3, r3, #1
 1008 019c 084A     		ldr	r2, .L59+4
 1009 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1010 01a2 87F86730 		strb	r3, [r7, #103]
 316:.\main.c      ****     {
 1011              		.loc 1 316 0 discriminator 2
 1012 01a6 FB6D     		ldr	r3, [r7, #92]
 1013 01a8 013B     		subs	r3, r3, #1
 1014 01aa FB65     		str	r3, [r7, #92]
 1015              	.L52:
 316:.\main.c      ****     {
 1016              		.loc 1 316 0 is_stmt 0 discriminator 1
 1017 01ac FB6D     		ldr	r3, [r7, #92]
 1018 01ae 002B     		cmp	r3, #0
 1019 01b0 85DA     		bge	.L58
 357:.\main.c      ****     }//end for
 358:.\main.c      **** 
 359:.\main.c      **** }//end function
 1020              		.loc 1 359 0 is_stmt 1
 1021 01b2 6C37     		adds	r7, r7, #108
 1022              		.cfi_def_cfa_offset 4
 1023 01b4 BD46     		mov	sp, r7
 1024              		.cfi_def_cfa_register 13
 1025              		@ sp needed
 1026 01b6 5DF8047B 		ldr	r7, [sp], #4
 1027              		.cfi_restore 7
 1028              		.cfi_def_cfa_offset 0
 1029 01ba 7047     		bx	lr
 1030              	.L60:
 1031              		.align	2
 1032              	.L59:
 1033 01bc 00000000 		.word	halfBitIndex
 1034 01c0 00000000 		.word	diffManEncodedData
 1035              		.cfi_endproc
 1036              	.LFE70:
 1037              		.size	asciiToDiffMan, .-asciiToDiffMan
 1038              		.global	__aeabi_i2d
 1039              		.global	__aeabi_ddiv
 1040              		.global	__aeabi_dmul
 1041              		.global	__aeabi_d2iz
 1042              		.section	.text.transmitData,"ax",%progbits
 1043              		.align	2
 1044              		.global	transmitData
 1045              		.thumb
 1046              		.thumb_func
 1047              		.type	transmitData, %function
 1048              	transmitData:
 1049              	.LFB71:
 360:.\main.c      **** 
 361:.\main.c      **** /*
 362:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 363:.\main.c      **** Checks network state before transmitting.
 364:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 365:.\main.c      **** */
 366:.\main.c      **** void transmitData(){
 1050              		.loc 1 366 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 26


 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 8
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              		.cfi_def_cfa_offset 8
 1056              		.cfi_offset 7, -8
 1057              		.cfi_offset 14, -4
 1058 0002 82B0     		sub	sp, sp, #8
 1059              		.cfi_def_cfa_offset 16
 1060 0004 00AF     		add	r7, sp, #0
 1061              		.cfi_def_cfa_register 7
 367:.\main.c      ****     int i;
 368:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1062              		.loc 1 368 0
 1063 0006 0023     		movs	r3, #0
 1064 0008 7B60     		str	r3, [r7, #4]
 1065 000a 47E0     		b	.L62
 1066              	.L66:
 369:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 370:.\main.c      ****         //Else break out of transmition and wait random time
 371:.\main.c      ****         if(networkState != idle){
 1067              		.loc 1 371 0
 1068 000c 2B4B     		ldr	r3, .L68
 1069 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1070 0010 002B     		cmp	r3, #0
 1071 0012 2BD0     		beq	.L63
 372:.\main.c      ****             if(networkState == collision){
 1072              		.loc 1 372 0
 1073 0014 294B     		ldr	r3, .L68
 1074 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075 0018 022B     		cmp	r3, #2
 1076 001a 27D1     		bne	.L63
 1077              	.LBB2:
 373:.\main.c      ****                 TX_pin_Write(1);
 1078              		.loc 1 373 0
 1079 001c 0120     		movs	r0, #1
 1080 001e FFF7FEFF 		bl	TX_pin_Write
 374:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1081              		.loc 1 374 0
 1082 0022 FFF7FEFF 		bl	getRandomNumber
 1083 0026 0346     		mov	r3, r0
 1084 0028 1846     		mov	r0, r3
 1085 002a FFF7FEFF 		bl	__aeabi_i2d
 1086 002e 0246     		mov	r2, r0
 1087 0030 0B46     		mov	r3, r1
 1088 0032 1046     		mov	r0, r2
 1089 0034 1946     		mov	r1, r3
 1090 0036 4FF00002 		mov	r2, #0
 1091 003a 214B     		ldr	r3, .L68+4
 1092 003c FFF7FEFF 		bl	__aeabi_ddiv
 1093 0040 0246     		mov	r2, r0
 1094 0042 0B46     		mov	r3, r1
 1095 0044 1046     		mov	r0, r2
 1096 0046 1946     		mov	r1, r3
 1097 0048 4FF00002 		mov	r2, #0
 1098 004c 1D4B     		ldr	r3, .L68+8
 1099 004e FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 27


 1100 0052 0246     		mov	r2, r0
 1101 0054 0B46     		mov	r3, r1
 1102 0056 1046     		mov	r0, r2
 1103 0058 1946     		mov	r1, r3
 1104 005a FFF7FEFF 		bl	__aeabi_d2iz
 1105 005e 0346     		mov	r3, r0
 1106 0060 3B60     		str	r3, [r7]
 375:.\main.c      **** 
 376:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 377:.\main.c      ****                 CyDelay(value);
 1107              		.loc 1 377 0
 1108 0062 3B68     		ldr	r3, [r7]
 1109 0064 1846     		mov	r0, r3
 1110 0066 FFF7FEFF 		bl	CyDelay
 378:.\main.c      ****                 break;
 1111              		.loc 1 378 0
 1112 006a 1CE0     		b	.L64
 1113              	.L63:
 1114              	.LBE2:
 379:.\main.c      ****             }
 380:.\main.c      ****         }
 381:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1115              		.loc 1 381 0
 1116 006c 164A     		ldr	r2, .L68+12
 1117 006e 7B68     		ldr	r3, [r7, #4]
 1118 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1119 0074 DBB2     		uxtb	r3, r3
 1120 0076 1846     		mov	r0, r3
 1121 0078 FFF7FEFF 		bl	TX_pin_Write
 382:.\main.c      ****         Timer_Start();
 1122              		.loc 1 382 0
 1123 007c FFF7FEFF 		bl	Timer_Start
 383:.\main.c      ****         while(!timerExpired);
 1124              		.loc 1 383 0
 1125 0080 00BF     		nop
 1126              	.L65:
 1127              		.loc 1 383 0 is_stmt 0 discriminator 1
 1128 0082 124B     		ldr	r3, .L68+16
 1129 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0086 83F00103 		eor	r3, r3, #1
 1131 008a DBB2     		uxtb	r3, r3
 1132 008c 002B     		cmp	r3, #0
 1133 008e F8D1     		bne	.L65
 384:.\main.c      ****         timerExpired = false;
 1134              		.loc 1 384 0 is_stmt 1 discriminator 2
 1135 0090 0E4B     		ldr	r3, .L68+16
 1136 0092 0022     		movs	r2, #0
 1137 0094 1A70     		strb	r2, [r3]
 368:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1138              		.loc 1 368 0 discriminator 2
 1139 0096 7B68     		ldr	r3, [r7, #4]
 1140 0098 0133     		adds	r3, r3, #1
 1141 009a 7B60     		str	r3, [r7, #4]
 1142              	.L62:
 368:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1143              		.loc 1 368 0 is_stmt 0 discriminator 1
 1144 009c 0C4B     		ldr	r3, .L68+20
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 28


 1145 009e 1B68     		ldr	r3, [r3]
 1146 00a0 7A68     		ldr	r2, [r7, #4]
 1147 00a2 9A42     		cmp	r2, r3
 1148 00a4 B2DB     		blt	.L66
 1149              	.L64:
 385:.\main.c      ****     }
 386:.\main.c      **** 
 387:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag
 388:.\main.c      ****     if(i == halfBitIndex){
 1150              		.loc 1 388 0 is_stmt 1
 1151 00a6 0A4B     		ldr	r3, .L68+20
 1152 00a8 1B68     		ldr	r3, [r3]
 1153 00aa 7A68     		ldr	r2, [r7, #4]
 1154 00ac 9A42     		cmp	r2, r3
 1155 00ae 02D1     		bne	.L61
 389:.\main.c      ****         dataTransmissionComplete = true;
 1156              		.loc 1 389 0
 1157 00b0 084B     		ldr	r3, .L68+24
 1158 00b2 0122     		movs	r2, #1
 1159 00b4 1A70     		strb	r2, [r3]
 1160              	.L61:
 390:.\main.c      ****     }
 391:.\main.c      **** }
 1161              		.loc 1 391 0
 1162 00b6 0837     		adds	r7, r7, #8
 1163              		.cfi_def_cfa_offset 8
 1164 00b8 BD46     		mov	sp, r7
 1165              		.cfi_def_cfa_register 13
 1166              		@ sp needed
 1167 00ba 80BD     		pop	{r7, pc}
 1168              	.L69:
 1169              		.align	2
 1170              	.L68:
 1171 00bc 00000000 		.word	networkState
 1172 00c0 00006040 		.word	1080033280
 1173 00c4 00008940 		.word	1082720256
 1174 00c8 00000000 		.word	diffManEncodedData
 1175 00cc 00000000 		.word	timerExpired
 1176 00d0 00000000 		.word	halfBitIndex
 1177 00d4 00000000 		.word	dataTransmissionComplete
 1178              		.cfi_endproc
 1179              	.LFE71:
 1180              		.size	transmitData, .-transmitData
 1181              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1182              		.align	2
 1183              		.global	setNetworkStateOnLEDs
 1184              		.thumb
 1185              		.thumb_func
 1186              		.type	setNetworkStateOnLEDs, %function
 1187              	setNetworkStateOnLEDs:
 1188              	.LFB72:
 392:.\main.c      **** 
 393:.\main.c      **** void setNetworkStateOnLEDs(){
 1189              		.loc 1 393 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 29


 1193 0000 80B5     		push	{r7, lr}
 1194              		.cfi_def_cfa_offset 8
 1195              		.cfi_offset 7, -8
 1196              		.cfi_offset 14, -4
 1197 0002 00AF     		add	r7, sp, #0
 1198              		.cfi_def_cfa_register 7
 394:.\main.c      **** 	 switch(networkState){
 1199              		.loc 1 394 0
 1200 0004 134B     		ldr	r3, .L76
 1201 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1202 0008 012B     		cmp	r3, #1
 1203 000a 04D0     		beq	.L72
 1204 000c 022B     		cmp	r3, #2
 1205 000e 16D0     		beq	.L73
 1206 0010 002B     		cmp	r3, #0
 1207 0012 0AD0     		beq	.L74
 395:.\main.c      ****         case busy:
 396:.\main.c      ****         {
 397:.\main.c      ****             LED4_Write(1);
 398:.\main.c      ****             LED3_Write(0);
 399:.\main.c      ****             LED2_Write(0);
 400:.\main.c      ****             break;
 401:.\main.c      ****         }
 402:.\main.c      ****         case idle:
 403:.\main.c      ****         {
 404:.\main.c      ****             LED3_Write(1);
 405:.\main.c      ****             LED4_Write(0);
 406:.\main.c      ****             LED2_Write(0);
 407:.\main.c      ****             break;
 408:.\main.c      ****         }
 409:.\main.c      ****         case collision:
 410:.\main.c      ****         {
 411:.\main.c      ****             LED2_Write(1);
 412:.\main.c      ****             LED4_Write(0);
 413:.\main.c      ****             LED3_Write(0);
 414:.\main.c      ****             break;
 415:.\main.c      ****         }
 416:.\main.c      ****         default:
 417:.\main.c      ****         {
 418:.\main.c      ****            //error
 419:.\main.c      ****             break;
 1208              		.loc 1 419 0
 1209 0014 1DE0     		b	.L70
 1210              	.L72:
 397:.\main.c      ****             LED3_Write(0);
 1211              		.loc 1 397 0
 1212 0016 0120     		movs	r0, #1
 1213 0018 FFF7FEFF 		bl	LED4_Write
 398:.\main.c      ****             LED2_Write(0);
 1214              		.loc 1 398 0
 1215 001c 0020     		movs	r0, #0
 1216 001e FFF7FEFF 		bl	LED3_Write
 399:.\main.c      ****             break;
 1217              		.loc 1 399 0
 1218 0022 0020     		movs	r0, #0
 1219 0024 FFF7FEFF 		bl	LED2_Write
 400:.\main.c      ****         }
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 30


 1220              		.loc 1 400 0
 1221 0028 13E0     		b	.L70
 1222              	.L74:
 404:.\main.c      ****             LED4_Write(0);
 1223              		.loc 1 404 0
 1224 002a 0120     		movs	r0, #1
 1225 002c FFF7FEFF 		bl	LED3_Write
 405:.\main.c      ****             LED2_Write(0);
 1226              		.loc 1 405 0
 1227 0030 0020     		movs	r0, #0
 1228 0032 FFF7FEFF 		bl	LED4_Write
 406:.\main.c      ****             break;
 1229              		.loc 1 406 0
 1230 0036 0020     		movs	r0, #0
 1231 0038 FFF7FEFF 		bl	LED2_Write
 407:.\main.c      ****         }
 1232              		.loc 1 407 0
 1233 003c 09E0     		b	.L70
 1234              	.L73:
 411:.\main.c      ****             LED4_Write(0);
 1235              		.loc 1 411 0
 1236 003e 0120     		movs	r0, #1
 1237 0040 FFF7FEFF 		bl	LED2_Write
 412:.\main.c      ****             LED3_Write(0);
 1238              		.loc 1 412 0
 1239 0044 0020     		movs	r0, #0
 1240 0046 FFF7FEFF 		bl	LED4_Write
 413:.\main.c      ****             break;
 1241              		.loc 1 413 0
 1242 004a 0020     		movs	r0, #0
 1243 004c FFF7FEFF 		bl	LED3_Write
 414:.\main.c      ****         }
 1244              		.loc 1 414 0
 1245 0050 00BF     		nop
 1246              	.L70:
 420:.\main.c      ****         }
 421:.\main.c      **** 	}
 422:.\main.c      **** }
 1247              		.loc 1 422 0
 1248 0052 80BD     		pop	{r7, pc}
 1249              	.L77:
 1250              		.align	2
 1251              	.L76:
 1252 0054 00000000 		.word	networkState
 1253              		.cfi_endproc
 1254              	.LFE72:
 1255              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1256              		.section	.text.getRandomNumber,"ax",%progbits
 1257              		.align	2
 1258              		.global	getRandomNumber
 1259              		.thumb
 1260              		.thumb_func
 1261              		.type	getRandomNumber, %function
 1262              	getRandomNumber:
 1263              	.LFB73:
 423:.\main.c      **** 
 424:.\main.c      **** /*
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 31


 425:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 426:.\main.c      **** */
 427:.\main.c      **** int getRandomNumber()
 428:.\main.c      **** {
 1264              		.loc 1 428 0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 16
 1267              		@ frame_needed = 1, uses_anonymous_args = 0
 1268 0000 80B5     		push	{r7, lr}
 1269              		.cfi_def_cfa_offset 8
 1270              		.cfi_offset 7, -8
 1271              		.cfi_offset 14, -4
 1272 0002 84B0     		sub	sp, sp, #16
 1273              		.cfi_def_cfa_offset 24
 1274 0004 00AF     		add	r7, sp, #0
 1275              		.cfi_def_cfa_register 7
 429:.\main.c      ****     const int MIN_N = 1;
 1276              		.loc 1 429 0
 1277 0006 0123     		movs	r3, #1
 1278 0008 FB60     		str	r3, [r7, #12]
 430:.\main.c      ****     const int MAX_N = 128;
 1279              		.loc 1 430 0
 1280 000a 8023     		movs	r3, #128
 1281 000c BB60     		str	r3, [r7, #8]
 431:.\main.c      **** 
 432:.\main.c      ****     int n;
 433:.\main.c      **** /*
 434:.\main.c      ****     Get first and second random numbers.
 435:.\main.c      ****     */
 436:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1282              		.loc 1 436 0
 1283 000e FFF7FEFF 		bl	rand
 1284 0012 0246     		mov	r2, r0
 1285 0014 B968     		ldr	r1, [r7, #8]
 1286 0016 FB68     		ldr	r3, [r7, #12]
 1287 0018 CB1A     		subs	r3, r1, r3
 1288 001a 0133     		adds	r3, r3, #1
 1289 001c 92FBF3F1 		sdiv	r1, r2, r3
 1290 0020 03FB01F3 		mul	r3, r3, r1
 1291 0024 D21A     		subs	r2, r2, r3
 1292 0026 FB68     		ldr	r3, [r7, #12]
 1293 0028 1344     		add	r3, r3, r2
 1294 002a 7B60     		str	r3, [r7, #4]
 437:.\main.c      ****     return n;
 1295              		.loc 1 437 0
 1296 002c 7B68     		ldr	r3, [r7, #4]
 438:.\main.c      **** }
 1297              		.loc 1 438 0
 1298 002e 1846     		mov	r0, r3
 1299 0030 1037     		adds	r7, r7, #16
 1300              		.cfi_def_cfa_offset 8
 1301 0032 BD46     		mov	sp, r7
 1302              		.cfi_def_cfa_register 13
 1303              		@ sp needed
 1304 0034 80BD     		pop	{r7, pc}
 1305              		.cfi_endproc
 1306              	.LFE73:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 32


 1307              		.size	getRandomNumber, .-getRandomNumber
 1308 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1309              		.align	2
 1310              		.global	diffManToASCII
 1311              		.thumb
 1312              		.thumb_func
 1313              		.type	diffManToASCII, %function
 1314              	diffManToASCII:
 1315              	.LFB74:
 439:.\main.c      **** 
 440:.\main.c      **** /*
 441:.\main.c      **** Helper method.
 442:.\main.c      **** Convert differental manchester line encoded byte to ascii char
 443:.\main.c      **** 
 444:.\main.c      **** charPtr = pointer to char
 445:.\main.c      **** */
 446:.\main.c      **** void diffManToASCII()
 447:.\main.c      **** {
 1316              		.loc 1 447 0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 8
 1319              		@ frame_needed = 1, uses_anonymous_args = 0
 1320              		@ link register save eliminated.
 1321 0000 80B4     		push	{r7}
 1322              		.cfi_def_cfa_offset 4
 1323              		.cfi_offset 7, -4
 1324 0002 83B0     		sub	sp, sp, #12
 1325              		.cfi_def_cfa_offset 16
 1326 0004 00AF     		add	r7, sp, #0
 1327              		.cfi_def_cfa_register 7
 448:.\main.c      ****     int i;
 449:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1328              		.loc 1 449 0
 1329 0006 0023     		movs	r3, #0
 1330 0008 7B60     		str	r3, [r7, #4]
 1331 000a 42E0     		b	.L81
 1332              	.L87:
 1333              	.LBB3:
 450:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1334              		.loc 1 450 0
 1335 000c 254B     		ldr	r3, .L88
 1336 000e 1B68     		ldr	r3, [r3]
 1337 0010 013B     		subs	r3, r3, #1
 1338 0012 254A     		ldr	r2, .L88+4
 1339 0014 D35C     		ldrb	r3, [r2, r3]
 1340 0016 FB70     		strb	r3, [r7, #3]
 451:.\main.c      ****         //send starting 1 bit (encoded)
 452:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1341              		.loc 1 452 0
 1342 0018 224B     		ldr	r3, .L88
 1343 001a 1B68     		ldr	r3, [r3]
 1344 001c 224A     		ldr	r2, .L88+4
 1345 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1346 0020 012B     		cmp	r3, #1
 1347 0022 17D1     		bne	.L82
 453:.\main.c      ****             //current half bit is 1
 454:.\main.c      ****             if(previousHalfBit == 1)
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 33


 1348              		.loc 1 454 0
 1349 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1350 0026 012B     		cmp	r3, #1
 1351 0028 0FD1     		bne	.L83
 455:.\main.c      ****             {
 456:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1352              		.loc 1 456 0
 1353 002a 7B68     		ldr	r3, [r7, #4]
 1354 002c C3F10703 		rsb	r3, r3, #7
 1355 0030 0122     		movs	r2, #1
 1356 0032 02FA03F3 		lsl	r3, r2, r3
 1357 0036 DAB2     		uxtb	r2, r3
 1358 0038 1C4B     		ldr	r3, .L88+8
 1359 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1360 003c DBB2     		uxtb	r3, r3
 1361 003e 1343     		orrs	r3, r3, r2
 1362 0040 DBB2     		uxtb	r3, r3
 1363 0042 DAB2     		uxtb	r2, r3
 1364 0044 194B     		ldr	r3, .L88+8
 1365 0046 1A70     		strb	r2, [r3]
 1366 0048 1BE0     		b	.L85
 1367              	.L83:
 457:.\main.c      ****             }
 458:.\main.c      ****             else
 459:.\main.c      ****             {
 460:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1368              		.loc 1 460 0
 1369 004a 184B     		ldr	r3, .L88+8
 1370 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1371 004e 174B     		ldr	r3, .L88+8
 1372 0050 1A70     		strb	r2, [r3]
 1373 0052 16E0     		b	.L85
 1374              	.L82:
 461:.\main.c      ****             }
 462:.\main.c      ****         }
 463:.\main.c      ****         else{
 464:.\main.c      ****             //current half bit is 0
 465:.\main.c      ****             if(previousHalfBit == 1)
 1375              		.loc 1 465 0
 1376 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1377 0056 012B     		cmp	r3, #1
 1378 0058 04D1     		bne	.L86
 466:.\main.c      ****             {
 467:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1379              		.loc 1 467 0
 1380 005a 144B     		ldr	r3, .L88+8
 1381 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1382 005e 134B     		ldr	r3, .L88+8
 1383 0060 1A70     		strb	r2, [r3]
 1384 0062 0EE0     		b	.L85
 1385              	.L86:
 468:.\main.c      ****             }
 469:.\main.c      ****             else
 470:.\main.c      ****             {
 471:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1386              		.loc 1 471 0
 1387 0064 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 34


 1388 0066 C3F10703 		rsb	r3, r3, #7
 1389 006a 0122     		movs	r2, #1
 1390 006c 02FA03F3 		lsl	r3, r2, r3
 1391 0070 DAB2     		uxtb	r2, r3
 1392 0072 0E4B     		ldr	r3, .L88+8
 1393 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1394 0076 DBB2     		uxtb	r3, r3
 1395 0078 1343     		orrs	r3, r3, r2
 1396 007a DBB2     		uxtb	r3, r3
 1397 007c DAB2     		uxtb	r2, r3
 1398 007e 0B4B     		ldr	r3, .L88+8
 1399 0080 1A70     		strb	r2, [r3]
 1400              	.L85:
 472:.\main.c      ****             }
 473:.\main.c      ****         }
 474:.\main.c      ****         receivedDataIndex += 2;
 1401              		.loc 1 474 0 discriminator 2
 1402 0082 084B     		ldr	r3, .L88
 1403 0084 1B68     		ldr	r3, [r3]
 1404 0086 0233     		adds	r3, r3, #2
 1405 0088 064A     		ldr	r2, .L88
 1406 008a 1360     		str	r3, [r2]
 1407              	.LBE3:
 449:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1408              		.loc 1 449 0 discriminator 2
 1409 008c 7B68     		ldr	r3, [r7, #4]
 1410 008e 0133     		adds	r3, r3, #1
 1411 0090 7B60     		str	r3, [r7, #4]
 1412              	.L81:
 449:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1413              		.loc 1 449 0 is_stmt 0 discriminator 1
 1414 0092 7B68     		ldr	r3, [r7, #4]
 1415 0094 072B     		cmp	r3, #7
 1416 0096 B9DD     		ble	.L87
 475:.\main.c      ****     }//end for loop
 476:.\main.c      **** }
 1417              		.loc 1 476 0 is_stmt 1
 1418 0098 0C37     		adds	r7, r7, #12
 1419              		.cfi_def_cfa_offset 4
 1420 009a BD46     		mov	sp, r7
 1421              		.cfi_def_cfa_register 13
 1422              		@ sp needed
 1423 009c 5DF8047B 		ldr	r7, [sp], #4
 1424              		.cfi_restore 7
 1425              		.cfi_def_cfa_offset 0
 1426 00a0 7047     		bx	lr
 1427              	.L89:
 1428 00a2 00BF     		.align	2
 1429              	.L88:
 1430 00a4 00000000 		.word	receivedDataIndex
 1431 00a8 00000000 		.word	diffManReceivedData
 1432 00ac 00000000 		.word	receivedChar
 1433              		.cfi_endproc
 1434              	.LFE74:
 1435              		.size	diffManToASCII, .-diffManToASCII
 1436              		.section	.text.storeChar,"ax",%progbits
 1437              		.align	2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 35


 1438              		.global	storeChar
 1439              		.thumb
 1440              		.thumb_func
 1441              		.type	storeChar, %function
 1442              	storeChar:
 1443              	.LFB75:
 477:.\main.c      **** 
 478:.\main.c      **** //stores char in receive array
 479:.\main.c      **** void storeChar(){
 1444              		.loc 1 479 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 1, uses_anonymous_args = 0
 1448              		@ link register save eliminated.
 1449 0000 80B4     		push	{r7}
 1450              		.cfi_def_cfa_offset 4
 1451              		.cfi_offset 7, -4
 1452 0002 00AF     		add	r7, sp, #0
 1453              		.cfi_def_cfa_register 7
 480:.\main.c      **** 	receivedChar &= ASCII_CHAR_MASK;
 1454              		.loc 1 480 0
 1455 0004 0A4B     		ldr	r3, .L91
 1456 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1457 0008 03F07F03 		and	r3, r3, #127
 1458 000c DAB2     		uxtb	r2, r3
 1459 000e 084B     		ldr	r3, .L91
 1460 0010 1A70     		strb	r2, [r3]
 481:.\main.c      **** 	rxChar[currentRXCharPosition] = receivedChar;
 1461              		.loc 1 481 0
 1462 0012 084B     		ldr	r3, .L91+4
 1463 0014 1B68     		ldr	r3, [r3]
 1464 0016 064A     		ldr	r2, .L91
 1465 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1466 001a 074A     		ldr	r2, .L91+8
 1467 001c D154     		strb	r1, [r2, r3]
 482:.\main.c      **** 	currentRXCharPosition++;
 1468              		.loc 1 482 0
 1469 001e 054B     		ldr	r3, .L91+4
 1470 0020 1B68     		ldr	r3, [r3]
 1471 0022 0133     		adds	r3, r3, #1
 1472 0024 034A     		ldr	r2, .L91+4
 1473 0026 1360     		str	r3, [r2]
 483:.\main.c      **** }
 1474              		.loc 1 483 0
 1475 0028 BD46     		mov	sp, r7
 1476              		.cfi_def_cfa_register 13
 1477              		@ sp needed
 1478 002a 5DF8047B 		ldr	r7, [sp], #4
 1479              		.cfi_restore 7
 1480              		.cfi_def_cfa_offset 0
 1481 002e 7047     		bx	lr
 1482              	.L92:
 1483              		.align	2
 1484              	.L91:
 1485 0030 00000000 		.word	receivedChar
 1486 0034 00000000 		.word	currentRXCharPosition
 1487 0038 00000000 		.word	rxChar
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 36


 1488              		.cfi_endproc
 1489              	.LFE75:
 1490              		.size	storeChar, .-storeChar
 1491              		.section	.text.printChar,"ax",%progbits
 1492              		.align	2
 1493              		.global	printChar
 1494              		.thumb
 1495              		.thumb_func
 1496              		.type	printChar, %function
 1497              	printChar:
 1498              	.LFB76:
 484:.\main.c      **** 
 485:.\main.c      **** //Grabs all chars and prints to LCD
 486:.\main.c      **** void printChar(){
 1499              		.loc 1 486 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 8
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503 0000 80B5     		push	{r7, lr}
 1504              		.cfi_def_cfa_offset 8
 1505              		.cfi_offset 7, -8
 1506              		.cfi_offset 14, -4
 1507 0002 82B0     		sub	sp, sp, #8
 1508              		.cfi_def_cfa_offset 16
 1509 0004 00AF     		add	r7, sp, #0
 1510              		.cfi_def_cfa_register 7
 487:.\main.c      **** 	int i;//char position after array
 488:.\main.c      ****     for(i = 7; i < messageLength; i++){//we are assuming messageLength from the header is valid and
 1511              		.loc 1 488 0
 1512 0006 0723     		movs	r3, #7
 1513 0008 7B60     		str	r3, [r7, #4]
 1514 000a 09E0     		b	.L94
 1515              	.L95:
 489:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1516              		.loc 1 489 0 discriminator 3
 1517 000c 084A     		ldr	r2, .L96
 1518 000e 7B68     		ldr	r3, [r7, #4]
 1519 0010 1344     		add	r3, r3, r2
 1520 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1521 0014 1846     		mov	r0, r3
 1522 0016 FFF7FEFF 		bl	LCD_PutChar
 488:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1523              		.loc 1 488 0 discriminator 3
 1524 001a 7B68     		ldr	r3, [r7, #4]
 1525 001c 0133     		adds	r3, r3, #1
 1526 001e 7B60     		str	r3, [r7, #4]
 1527              	.L94:
 488:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1528              		.loc 1 488 0 is_stmt 0 discriminator 1
 1529 0020 044B     		ldr	r3, .L96+4
 1530 0022 1B68     		ldr	r3, [r3]
 1531 0024 7A68     		ldr	r2, [r7, #4]
 1532 0026 9A42     		cmp	r2, r3
 1533 0028 F0DB     		blt	.L95
 490:.\main.c      **** 		//TODO: implement USB transmit
 491:.\main.c      ****     }
 492:.\main.c      **** }
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 37


 1534              		.loc 1 492 0 is_stmt 1
 1535 002a 0837     		adds	r7, r7, #8
 1536              		.cfi_def_cfa_offset 8
 1537 002c BD46     		mov	sp, r7
 1538              		.cfi_def_cfa_register 13
 1539              		@ sp needed
 1540 002e 80BD     		pop	{r7, pc}
 1541              	.L97:
 1542              		.align	2
 1543              	.L96:
 1544 0030 00000000 		.word	rxChar
 1545 0034 00000000 		.word	messageLength
 1546              		.cfi_endproc
 1547              	.LFE76:
 1548              		.size	printChar, .-printChar
 1549              		.section	.text.headerCheck,"ax",%progbits
 1550              		.align	2
 1551              		.global	headerCheck
 1552              		.thumb
 1553              		.thumb_func
 1554              		.type	headerCheck, %function
 1555              	headerCheck:
 1556              	.LFB77:
 493:.\main.c      **** 
 494:.\main.c      **** //checks received header and strips from array if valid
 495:.\main.c      **** //otherwise, disregard contents
 496:.\main.c      **** bool headerCheck(){
 1557              		.loc 1 496 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 0
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 80B5     		push	{r7, lr}
 1562              		.cfi_def_cfa_offset 8
 1563              		.cfi_offset 7, -8
 1564              		.cfi_offset 14, -4
 1565 0002 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 497:.\main.c      ****     //nested if loops are probably the easiest way to check
 498:.\main.c      **** 	if(rxChar[0] == 'q'){
 1567              		.loc 1 498 0
 1568 0004 124B     		ldr	r3, .L102
 1569 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1570 0008 712B     		cmp	r3, #113
 1571 000a 1ED1     		bne	.L99
 499:.\main.c      **** 		if(rxChar[3] == 0x00 || rxChar[3] == RX_DESTINATION_ADDRESS){
 1572              		.loc 1 499 0
 1573 000c 104B     		ldr	r3, .L102
 1574 000e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1575 0010 002B     		cmp	r3, #0
 1576 0012 03D0     		beq	.L100
 1577              		.loc 1 499 0 is_stmt 0 discriminator 1
 1578 0014 0E4B     		ldr	r3, .L102
 1579 0016 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1580 0018 002B     		cmp	r3, #0
 1581 001a 16D1     		bne	.L99
 1582              	.L100:
 500:.\main.c      **** 			//this is as valid as we go (CRC is optional)
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 38


 501:.\main.c      **** 			messageLength = rxChar[4];
 1583              		.loc 1 501 0 is_stmt 1
 1584 001c 0C4B     		ldr	r3, .L102
 1585 001e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1586 0020 1A46     		mov	r2, r3
 1587 0022 0C4B     		ldr	r3, .L102+4
 1588 0024 1A60     		str	r2, [r3]
 502:.\main.c      ****             LCD_PrintNumber(rxChar[4]);
 1589              		.loc 1 502 0
 1590 0026 0A4B     		ldr	r3, .L102
 1591 0028 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1592 002a 1846     		mov	r0, r3
 1593 002c FFF7FEFF 		bl	LCD_PrintU32Number
 503:.\main.c      **** 			crcState = rxChar[5];
 1594              		.loc 1 503 0
 1595 0030 074B     		ldr	r3, .L102
 1596 0032 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1597 0034 084B     		ldr	r3, .L102+8
 1598 0036 1A70     		strb	r2, [r3]
 504:.\main.c      **** 			headerCRC = rxChar[6];
 1599              		.loc 1 504 0
 1600 0038 054B     		ldr	r3, .L102
 1601 003a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1602 003c 1A46     		mov	r2, r3
 1603 003e 074B     		ldr	r3, .L102+12
 1604 0040 1A60     		str	r2, [r3]
 505:.\main.c      ****             CyDelay(1000);
 1605              		.loc 1 505 0
 1606 0042 4FF47A70 		mov	r0, #1000
 1607 0046 FFF7FEFF 		bl	CyDelay
 1608              	.L99:
 506:.\main.c      **** 			//return true;
 507:.\main.c      **** 		}
 508:.\main.c      **** 	}
 509:.\main.c      **** 	return false;
 1609              		.loc 1 509 0
 1610 004a 0023     		movs	r3, #0
 510:.\main.c      **** }
 1611              		.loc 1 510 0
 1612 004c 1846     		mov	r0, r3
 1613 004e 80BD     		pop	{r7, pc}
 1614              	.L103:
 1615              		.align	2
 1616              	.L102:
 1617 0050 00000000 		.word	rxChar
 1618 0054 00000000 		.word	messageLength
 1619 0058 00000000 		.word	crcState
 1620 005c 00000000 		.word	headerCRC
 1621              		.cfi_endproc
 1622              	.LFE77:
 1623              		.size	headerCheck, .-headerCheck
 1624              		.text
 1625              	.Letext0:
 1626              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1627              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1628              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1629              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 39


 1630              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1631              		.section	.debug_info,"",%progbits
 1632              	.Ldebug_info0:
 1633 0000 20050000 		.4byte	0x520
 1634 0004 0400     		.2byte	0x4
 1635 0006 00000000 		.4byte	.Ldebug_abbrev0
 1636 000a 04       		.byte	0x4
 1637 000b 01       		.uleb128 0x1
 1638 000c 51010000 		.4byte	.LASF72
 1639 0010 01       		.byte	0x1
 1640 0011 AB030000 		.4byte	.LASF73
 1641 0015 46000000 		.4byte	.LASF74
 1642 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1643 001d 00000000 		.4byte	0
 1644 0021 00000000 		.4byte	.Ldebug_line0
 1645 0025 02       		.uleb128 0x2
 1646 0026 01       		.byte	0x1
 1647 0027 06       		.byte	0x6
 1648 0028 61020000 		.4byte	.LASF0
 1649 002c 02       		.uleb128 0x2
 1650 002d 01       		.byte	0x1
 1651 002e 08       		.byte	0x8
 1652 002f 0F020000 		.4byte	.LASF1
 1653 0033 02       		.uleb128 0x2
 1654 0034 02       		.byte	0x2
 1655 0035 05       		.byte	0x5
 1656 0036 C0000000 		.4byte	.LASF2
 1657 003a 02       		.uleb128 0x2
 1658 003b 02       		.byte	0x2
 1659 003c 07       		.byte	0x7
 1660 003d 08030000 		.4byte	.LASF3
 1661 0041 03       		.uleb128 0x3
 1662 0042 B4030000 		.4byte	.LASF9
 1663 0046 02       		.byte	0x2
 1664 0047 3F       		.byte	0x3f
 1665 0048 4C000000 		.4byte	0x4c
 1666 004c 02       		.uleb128 0x2
 1667 004d 04       		.byte	0x4
 1668 004e 05       		.byte	0x5
 1669 004f E8020000 		.4byte	.LASF4
 1670 0053 02       		.uleb128 0x2
 1671 0054 04       		.byte	0x4
 1672 0055 07       		.byte	0x7
 1673 0056 AF020000 		.4byte	.LASF5
 1674 005a 02       		.uleb128 0x2
 1675 005b 08       		.byte	0x8
 1676 005c 05       		.byte	0x5
 1677 005d 15010000 		.4byte	.LASF6
 1678 0061 02       		.uleb128 0x2
 1679 0062 08       		.byte	0x8
 1680 0063 07       		.byte	0x7
 1681 0064 23010000 		.4byte	.LASF7
 1682 0068 04       		.uleb128 0x4
 1683 0069 04       		.byte	0x4
 1684 006a 05       		.byte	0x5
 1685 006b 696E7400 		.ascii	"int\000"
 1686 006f 02       		.uleb128 0x2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 40


 1687 0070 04       		.byte	0x4
 1688 0071 07       		.byte	0x7
 1689 0072 90020000 		.4byte	.LASF8
 1690 0076 03       		.uleb128 0x3
 1691 0077 00030000 		.4byte	.LASF10
 1692 007b 03       		.byte	0x3
 1693 007c 2C       		.byte	0x2c
 1694 007d 41000000 		.4byte	0x41
 1695 0081 03       		.uleb128 0x3
 1696 0082 EE000000 		.4byte	.LASF11
 1697 0086 04       		.byte	0x4
 1698 0087 C2       		.byte	0xc2
 1699 0088 2C000000 		.4byte	0x2c
 1700 008c 03       		.uleb128 0x3
 1701 008d DA000000 		.4byte	.LASF12
 1702 0091 04       		.byte	0x4
 1703 0092 C3       		.byte	0xc3
 1704 0093 3A000000 		.4byte	0x3a
 1705 0097 02       		.uleb128 0x2
 1706 0098 04       		.byte	0x4
 1707 0099 04       		.byte	0x4
 1708 009a 0F010000 		.4byte	.LASF13
 1709 009e 02       		.uleb128 0x2
 1710 009f 08       		.byte	0x8
 1711 00a0 04       		.byte	0x4
 1712 00a1 4D030000 		.4byte	.LASF14
 1713 00a5 02       		.uleb128 0x2
 1714 00a6 01       		.byte	0x1
 1715 00a7 08       		.byte	0x8
 1716 00a8 D6020000 		.4byte	.LASF15
 1717 00ac 05       		.uleb128 0x5
 1718 00ad 40030000 		.4byte	.LASF16
 1719 00b1 04       		.byte	0x4
 1720 00b2 6C01     		.2byte	0x16c
 1721 00b4 B8000000 		.4byte	0xb8
 1722 00b8 06       		.uleb128 0x6
 1723 00b9 81000000 		.4byte	0x81
 1724 00bd 02       		.uleb128 0x2
 1725 00be 04       		.byte	0x4
 1726 00bf 07       		.byte	0x7
 1727 00c0 3D000000 		.4byte	.LASF17
 1728 00c4 07       		.uleb128 0x7
 1729 00c5 04       		.byte	0x4
 1730 00c6 A5000000 		.4byte	0xa5
 1731 00ca 03       		.uleb128 0x3
 1732 00cb 42020000 		.4byte	.LASF18
 1733 00cf 05       		.byte	0x5
 1734 00d0 7A       		.byte	0x7a
 1735 00d1 4C000000 		.4byte	0x4c
 1736 00d5 08       		.uleb128 0x8
 1737 00d6 27000000 		.4byte	.LASF22
 1738 00da 01       		.byte	0x1
 1739 00db 01       		.byte	0x1
 1740 00dc 24       		.byte	0x24
 1741 00dd F4000000 		.4byte	0xf4
 1742 00e1 09       		.uleb128 0x9
 1743 00e2 7C020000 		.4byte	.LASF19
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 41


 1744 00e6 00       		.sleb128 0
 1745 00e7 09       		.uleb128 0x9
 1746 00e8 29030000 		.4byte	.LASF20
 1747 00ec 01       		.sleb128 1
 1748 00ed 09       		.uleb128 0x9
 1749 00ee D0000000 		.4byte	.LASF21
 1750 00f2 02       		.sleb128 2
 1751 00f3 00       		.byte	0
 1752 00f4 0A       		.uleb128 0xa
 1753 00f5 63726300 		.ascii	"crc\000"
 1754 00f9 01       		.byte	0x1
 1755 00fa 01       		.byte	0x1
 1756 00fb 25       		.byte	0x25
 1757 00fc 19010000 		.4byte	0x119
 1758 0100 09       		.uleb128 0x9
 1759 0101 BB000000 		.4byte	.LASF23
 1760 0105 00       		.sleb128 0
 1761 0106 09       		.uleb128 0x9
 1762 0107 00000000 		.4byte	.LASF24
 1763 010b 01       		.sleb128 1
 1764 010c 09       		.uleb128 0x9
 1765 010d 45030000 		.4byte	.LASF25
 1766 0111 02       		.sleb128 2
 1767 0112 09       		.uleb128 0x9
 1768 0113 C1020000 		.4byte	.LASF26
 1769 0117 03       		.sleb128 3
 1770 0118 00       		.byte	0
 1771 0119 0B       		.uleb128 0xb
 1772 011a 14000000 		.4byte	.LASF27
 1773 011e 01       		.byte	0x1
 1774 011f 29       		.byte	0x29
 1775 0120 00000000 		.4byte	.LFB63
 1776 0124 28000000 		.4byte	.LFE63-.LFB63
 1777 0128 01       		.uleb128 0x1
 1778 0129 9C       		.byte	0x9c
 1779 012a 0B       		.uleb128 0xb
 1780 012b FF000000 		.4byte	.LASF28
 1781 012f 01       		.byte	0x1
 1782 0130 33       		.byte	0x33
 1783 0131 00000000 		.4byte	.LFB64
 1784 0135 58000000 		.4byte	.LFE64-.LFB64
 1785 0139 01       		.uleb128 0x1
 1786 013a 9C       		.byte	0x9c
 1787 013b 0B       		.uleb128 0xb
 1788 013c 01040000 		.4byte	.LASF29
 1789 0140 01       		.byte	0x1
 1790 0141 44       		.byte	0x44
 1791 0142 00000000 		.4byte	.LFB65
 1792 0146 1C000000 		.4byte	.LFE65-.LFB65
 1793 014a 01       		.uleb128 0x1
 1794 014b 9C       		.byte	0x9c
 1795 014c 0C       		.uleb128 0xc
 1796 014d 89030000 		.4byte	.LASF30
 1797 0151 01       		.byte	0x1
 1798 0152 4B       		.byte	0x4b
 1799 0153 00000000 		.4byte	.LFB66
 1800 0157 38000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 42


 1801 015b 01       		.uleb128 0x1
 1802 015c 9C       		.byte	0x9c
 1803 015d 0D       		.uleb128 0xd
 1804 015e 97000000 		.4byte	.LASF34
 1805 0162 01       		.byte	0x1
 1806 0163 52       		.byte	0x52
 1807 0164 68000000 		.4byte	0x68
 1808 0168 00000000 		.4byte	.LFB67
 1809 016c 80020000 		.4byte	.LFE67-.LFB67
 1810 0170 01       		.uleb128 0x1
 1811 0171 9C       		.byte	0x9c
 1812 0172 B0010000 		.4byte	0x1b0
 1813 0176 0E       		.uleb128 0xe
 1814 0177 727800   		.ascii	"rx\000"
 1815 017a 01       		.byte	0x1
 1816 017b 54       		.byte	0x54
 1817 017c A5000000 		.4byte	0xa5
 1818 0180 02       		.uleb128 0x2
 1819 0181 91       		.byte	0x91
 1820 0182 76       		.sleb128 -10
 1821 0183 0F       		.uleb128 0xf
 1822 0184 F4000000 		.4byte	.LASF31
 1823 0188 01       		.byte	0x1
 1824 0189 55       		.byte	0x55
 1825 018a B0010000 		.4byte	0x1b0
 1826 018e 03       		.uleb128 0x3
 1827 018f 91       		.byte	0x91
 1828 0190 887F     		.sleb128 -120
 1829 0192 0F       		.uleb128 0xf
 1830 0193 F1020000 		.4byte	.LASF32
 1831 0197 01       		.byte	0x1
 1832 0198 56       		.byte	0x56
 1833 0199 81000000 		.4byte	0x81
 1834 019d 02       		.uleb128 0x2
 1835 019e 91       		.byte	0x91
 1836 019f 77       		.sleb128 -9
 1837 01a0 0F       		.uleb128 0xf
 1838 01a1 1B030000 		.4byte	.LASF33
 1839 01a5 01       		.byte	0x1
 1840 01a6 63       		.byte	0x63
 1841 01a7 CA000000 		.4byte	0xca
 1842 01ab 03       		.uleb128 0x3
 1843 01ac 91       		.byte	0x91
 1844 01ad 847F     		.sleb128 -124
 1845 01af 00       		.byte	0
 1846 01b0 10       		.uleb128 0x10
 1847 01b1 A5000000 		.4byte	0xa5
 1848 01b5 C0010000 		.4byte	0x1c0
 1849 01b9 11       		.uleb128 0x11
 1850 01ba BD000000 		.4byte	0xbd
 1851 01be 6B       		.byte	0x6b
 1852 01bf 00       		.byte	0
 1853 01c0 12       		.uleb128 0x12
 1854 01c1 49020000 		.4byte	.LASF41
 1855 01c5 01       		.byte	0x1
 1856 01c6 0401     		.2byte	0x104
 1857 01c8 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 43


 1858 01cc 48000000 		.4byte	.LFE68-.LFB68
 1859 01d0 01       		.uleb128 0x1
 1860 01d1 9C       		.byte	0x9c
 1861 01d2 13       		.uleb128 0x13
 1862 01d3 FF010000 		.4byte	.LASF35
 1863 01d7 01       		.byte	0x1
 1864 01d8 1001     		.2byte	0x110
 1865 01da 00000000 		.4byte	.LFB69
 1866 01de 38000000 		.4byte	.LFE69-.LFB69
 1867 01e2 01       		.uleb128 0x1
 1868 01e3 9C       		.byte	0x9c
 1869 01e4 14020000 		.4byte	0x214
 1870 01e8 14       		.uleb128 0x14
 1871 01e9 F4000000 		.4byte	.LASF31
 1872 01ed 01       		.byte	0x1
 1873 01ee 1001     		.2byte	0x110
 1874 01f0 C4000000 		.4byte	0xc4
 1875 01f4 02       		.uleb128 0x2
 1876 01f5 91       		.byte	0x91
 1877 01f6 6C       		.sleb128 -20
 1878 01f7 14       		.uleb128 0x14
 1879 01f8 F1020000 		.4byte	.LASF32
 1880 01fc 01       		.byte	0x1
 1881 01fd 1001     		.2byte	0x110
 1882 01ff 81000000 		.4byte	0x81
 1883 0203 02       		.uleb128 0x2
 1884 0204 91       		.byte	0x91
 1885 0205 6B       		.sleb128 -21
 1886 0206 15       		.uleb128 0x15
 1887 0207 6900     		.ascii	"i\000"
 1888 0209 01       		.byte	0x1
 1889 020a 1201     		.2byte	0x112
 1890 020c 6F000000 		.4byte	0x6f
 1891 0210 02       		.uleb128 0x2
 1892 0211 91       		.byte	0x91
 1893 0212 74       		.sleb128 -12
 1894 0213 00       		.byte	0
 1895 0214 16       		.uleb128 0x16
 1896 0215 6D020000 		.4byte	.LASF36
 1897 0219 01       		.byte	0x1
 1898 021a 1C01     		.2byte	0x11c
 1899 021c 00000000 		.4byte	.LFB70
 1900 0220 C4010000 		.4byte	.LFE70-.LFB70
 1901 0224 01       		.uleb128 0x1
 1902 0225 9C       		.byte	0x9c
 1903 0226 74020000 		.4byte	0x274
 1904 022a 14       		.uleb128 0x14
 1905 022b CC020000 		.4byte	.LASF37
 1906 022f 01       		.byte	0x1
 1907 0230 1C01     		.2byte	0x11c
 1908 0232 A5000000 		.4byte	0xa5
 1909 0236 03       		.uleb128 0x3
 1910 0237 91       		.byte	0x91
 1911 0238 977F     		.sleb128 -105
 1912 023a 17       		.uleb128 0x17
 1913 023b 1B040000 		.4byte	.LASF38
 1914 023f 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 44


 1915 0240 1E01     		.2byte	0x11e
 1916 0242 81000000 		.4byte	0x81
 1917 0246 02       		.uleb128 0x2
 1918 0247 91       		.byte	0x91
 1919 0248 77       		.sleb128 -9
 1920 0249 17       		.uleb128 0x17
 1921 024a 99030000 		.4byte	.LASF39
 1922 024e 01       		.byte	0x1
 1923 024f 2F01     		.2byte	0x12f
 1924 0251 74020000 		.4byte	0x274
 1925 0255 03       		.uleb128 0x3
 1926 0256 91       		.byte	0x91
 1927 0257 9C7F     		.sleb128 -100
 1928 0259 15       		.uleb128 0x15
 1929 025a 6900     		.ascii	"i\000"
 1930 025c 01       		.byte	0x1
 1931 025d 3001     		.2byte	0x130
 1932 025f 68000000 		.4byte	0x68
 1933 0263 02       		.uleb128 0x2
 1934 0264 91       		.byte	0x91
 1935 0265 70       		.sleb128 -16
 1936 0266 15       		.uleb128 0x15
 1937 0267 6A00     		.ascii	"j\000"
 1938 0269 01       		.byte	0x1
 1939 026a 3B01     		.2byte	0x13b
 1940 026c 68000000 		.4byte	0x68
 1941 0270 02       		.uleb128 0x2
 1942 0271 91       		.byte	0x91
 1943 0272 6C       		.sleb128 -20
 1944 0273 00       		.byte	0
 1945 0274 10       		.uleb128 0x10
 1946 0275 6F000000 		.4byte	0x6f
 1947 0279 84020000 		.4byte	0x284
 1948 027d 11       		.uleb128 0x11
 1949 027e BD000000 		.4byte	0xbd
 1950 0282 13       		.byte	0x13
 1951 0283 00       		.byte	0
 1952 0284 18       		.uleb128 0x18
 1953 0285 07000000 		.4byte	.LASF46
 1954 0289 01       		.byte	0x1
 1955 028a 6E01     		.2byte	0x16e
 1956 028c 00000000 		.4byte	.LFB71
 1957 0290 D8000000 		.4byte	.LFE71-.LFB71
 1958 0294 01       		.uleb128 0x1
 1959 0295 9C       		.byte	0x9c
 1960 0296 C1020000 		.4byte	0x2c1
 1961 029a 15       		.uleb128 0x15
 1962 029b 6900     		.ascii	"i\000"
 1963 029d 01       		.byte	0x1
 1964 029e 6F01     		.2byte	0x16f
 1965 02a0 68000000 		.4byte	0x68
 1966 02a4 02       		.uleb128 0x2
 1967 02a5 91       		.byte	0x91
 1968 02a6 74       		.sleb128 -12
 1969 02a7 19       		.uleb128 0x19
 1970 02a8 1C000000 		.4byte	.LBB2
 1971 02ac 50000000 		.4byte	.LBE2-.LBB2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 45


 1972 02b0 17       		.uleb128 0x17
 1973 02b1 CA000000 		.4byte	.LASF40
 1974 02b5 01       		.byte	0x1
 1975 02b6 7601     		.2byte	0x176
 1976 02b8 68000000 		.4byte	0x68
 1977 02bc 02       		.uleb128 0x2
 1978 02bd 91       		.byte	0x91
 1979 02be 70       		.sleb128 -16
 1980 02bf 00       		.byte	0
 1981 02c0 00       		.byte	0
 1982 02c1 1A       		.uleb128 0x1a
 1983 02c2 DF010000 		.4byte	.LASF42
 1984 02c6 01       		.byte	0x1
 1985 02c7 8901     		.2byte	0x189
 1986 02c9 00000000 		.4byte	.LFB72
 1987 02cd 58000000 		.4byte	.LFE72-.LFB72
 1988 02d1 01       		.uleb128 0x1
 1989 02d2 9C       		.byte	0x9c
 1990 02d3 1B       		.uleb128 0x1b
 1991 02d4 2D000000 		.4byte	.LASF43
 1992 02d8 01       		.byte	0x1
 1993 02d9 AB01     		.2byte	0x1ab
 1994 02db 68000000 		.4byte	0x68
 1995 02df 00000000 		.4byte	.LFB73
 1996 02e3 36000000 		.4byte	.LFE73-.LFB73
 1997 02e7 01       		.uleb128 0x1
 1998 02e8 9C       		.byte	0x9c
 1999 02e9 19030000 		.4byte	0x319
 2000 02ed 17       		.uleb128 0x17
 2001 02ee C6020000 		.4byte	.LASF44
 2002 02f2 01       		.byte	0x1
 2003 02f3 AD01     		.2byte	0x1ad
 2004 02f5 19030000 		.4byte	0x319
 2005 02f9 02       		.uleb128 0x2
 2006 02fa 91       		.byte	0x91
 2007 02fb 74       		.sleb128 -12
 2008 02fc 17       		.uleb128 0x17
 2009 02fd CB030000 		.4byte	.LASF45
 2010 0301 01       		.byte	0x1
 2011 0302 AE01     		.2byte	0x1ae
 2012 0304 19030000 		.4byte	0x319
 2013 0308 02       		.uleb128 0x2
 2014 0309 91       		.byte	0x91
 2015 030a 70       		.sleb128 -16
 2016 030b 15       		.uleb128 0x15
 2017 030c 6E00     		.ascii	"n\000"
 2018 030e 01       		.byte	0x1
 2019 030f B001     		.2byte	0x1b0
 2020 0311 68000000 		.4byte	0x68
 2021 0315 02       		.uleb128 0x2
 2022 0316 91       		.byte	0x91
 2023 0317 6C       		.sleb128 -20
 2024 0318 00       		.byte	0
 2025 0319 1C       		.uleb128 0x1c
 2026 031a 68000000 		.4byte	0x68
 2027 031e 1D       		.uleb128 0x1d
 2028 031f 81020000 		.4byte	.LASF47
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 46


 2029 0323 01       		.byte	0x1
 2030 0324 BE01     		.2byte	0x1be
 2031 0326 00000000 		.4byte	.LFB74
 2032 032a B0000000 		.4byte	.LFE74-.LFB74
 2033 032e 01       		.uleb128 0x1
 2034 032f 9C       		.byte	0x9c
 2035 0330 5B030000 		.4byte	0x35b
 2036 0334 15       		.uleb128 0x15
 2037 0335 6900     		.ascii	"i\000"
 2038 0337 01       		.byte	0x1
 2039 0338 C001     		.2byte	0x1c0
 2040 033a 68000000 		.4byte	0x68
 2041 033e 02       		.uleb128 0x2
 2042 033f 91       		.byte	0x91
 2043 0340 74       		.sleb128 -12
 2044 0341 19       		.uleb128 0x19
 2045 0342 0C000000 		.4byte	.LBB3
 2046 0346 80000000 		.4byte	.LBE3-.LBB3
 2047 034a 17       		.uleb128 0x17
 2048 034b 1B040000 		.4byte	.LASF38
 2049 034f 01       		.byte	0x1
 2050 0350 C201     		.2byte	0x1c2
 2051 0352 81000000 		.4byte	0x81
 2052 0356 02       		.uleb128 0x2
 2053 0357 91       		.byte	0x91
 2054 0358 73       		.sleb128 -13
 2055 0359 00       		.byte	0
 2056 035a 00       		.byte	0
 2057 035b 12       		.uleb128 0x12
 2058 035c A8000000 		.4byte	.LASF48
 2059 0360 01       		.byte	0x1
 2060 0361 DF01     		.2byte	0x1df
 2061 0363 00000000 		.4byte	.LFB75
 2062 0367 3C000000 		.4byte	.LFE75-.LFB75
 2063 036b 01       		.uleb128 0x1
 2064 036c 9C       		.byte	0x9c
 2065 036d 18       		.uleb128 0x18
 2066 036e F5010000 		.4byte	.LASF49
 2067 0372 01       		.byte	0x1
 2068 0373 E601     		.2byte	0x1e6
 2069 0375 00000000 		.4byte	.LFB76
 2070 0379 38000000 		.4byte	.LFE76-.LFB76
 2071 037d 01       		.uleb128 0x1
 2072 037e 9C       		.byte	0x9c
 2073 037f 91030000 		.4byte	0x391
 2074 0383 15       		.uleb128 0x15
 2075 0384 6900     		.ascii	"i\000"
 2076 0386 01       		.byte	0x1
 2077 0387 E701     		.2byte	0x1e7
 2078 0389 68000000 		.4byte	0x68
 2079 038d 02       		.uleb128 0x2
 2080 038e 91       		.byte	0x91
 2081 038f 74       		.sleb128 -12
 2082 0390 00       		.byte	0
 2083 0391 1E       		.uleb128 0x1e
 2084 0392 9C000000 		.4byte	.LASF50
 2085 0396 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 47


 2086 0397 F001     		.2byte	0x1f0
 2087 0399 A7030000 		.4byte	0x3a7
 2088 039d 00000000 		.4byte	.LFB77
 2089 03a1 60000000 		.4byte	.LFE77-.LFB77
 2090 03a5 01       		.uleb128 0x1
 2091 03a6 9C       		.byte	0x9c
 2092 03a7 02       		.uleb128 0x2
 2093 03a8 01       		.byte	0x1
 2094 03a9 02       		.byte	0x2
 2095 03aa 23030000 		.4byte	.LASF51
 2096 03ae 1F       		.uleb128 0x1f
 2097 03af 0E040000 		.4byte	.LASF52
 2098 03b3 06       		.byte	0x6
 2099 03b4 2A06     		.2byte	0x62a
 2100 03b6 BA030000 		.4byte	0x3ba
 2101 03ba 06       		.uleb128 0x6
 2102 03bb 76000000 		.4byte	0x76
 2103 03bf 10       		.uleb128 0x10
 2104 03c0 68000000 		.4byte	0x68
 2105 03c4 D0030000 		.4byte	0x3d0
 2106 03c8 20       		.uleb128 0x20
 2107 03c9 BD000000 		.4byte	0xbd
 2108 03cd 5F03     		.2byte	0x35f
 2109 03cf 00       		.byte	0
 2110 03d0 21       		.uleb128 0x21
 2111 03d1 84000000 		.4byte	.LASF53
 2112 03d5 01       		.byte	0x1
 2113 03d6 1E       		.byte	0x1e
 2114 03d7 BF030000 		.4byte	0x3bf
 2115 03db 05       		.uleb128 0x5
 2116 03dc 03       		.byte	0x3
 2117 03dd 00000000 		.4byte	diffManEncodedData
 2118 03e1 10       		.uleb128 0x10
 2119 03e2 81000000 		.4byte	0x81
 2120 03e6 F1030000 		.4byte	0x3f1
 2121 03ea 11       		.uleb128 0x11
 2122 03eb BD000000 		.4byte	0xbd
 2123 03ef 6B       		.byte	0x6b
 2124 03f0 00       		.byte	0
 2125 03f1 21       		.uleb128 0x21
 2126 03f2 6E030000 		.4byte	.LASF54
 2127 03f6 01       		.byte	0x1
 2128 03f7 1F       		.byte	0x1f
 2129 03f8 E1030000 		.4byte	0x3e1
 2130 03fc 05       		.uleb128 0x5
 2131 03fd 03       		.byte	0x3
 2132 03fe 00000000 		.4byte	diffManReceivedData
 2133 0402 21       		.uleb128 0x21
 2134 0403 82030000 		.4byte	.LASF55
 2135 0407 01       		.byte	0x1
 2136 0408 20       		.byte	0x20
 2137 0409 B0010000 		.4byte	0x1b0
 2138 040d 05       		.uleb128 0x5
 2139 040e 03       		.byte	0x3
 2140 040f 00000000 		.4byte	rxChar
 2141 0413 21       		.uleb128 0x21
 2142 0414 9D020000 		.4byte	.LASF56
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 48


 2143 0418 01       		.byte	0x1
 2144 0419 21       		.byte	0x21
 2145 041a 68000000 		.4byte	0x68
 2146 041e 05       		.uleb128 0x5
 2147 041f 03       		.byte	0x3
 2148 0420 00000000 		.4byte	receivedDataIndex
 2149 0424 21       		.uleb128 0x21
 2150 0425 2E030000 		.4byte	.LASF57
 2151 0429 01       		.byte	0x1
 2152 042a 21       		.byte	0x21
 2153 042b 68000000 		.4byte	0x68
 2154 042f 05       		.uleb128 0x5
 2155 0430 03       		.byte	0x3
 2156 0431 00000000 		.4byte	receivedDataCount
 2157 0435 21       		.uleb128 0x21
 2158 0436 BE030000 		.4byte	.LASF58
 2159 043a 01       		.byte	0x1
 2160 043b 22       		.byte	0x22
 2161 043c 68000000 		.4byte	0x68
 2162 0440 05       		.uleb128 0x5
 2163 0441 03       		.byte	0x3
 2164 0442 00000000 		.4byte	halfBitIndex
 2165 0446 21       		.uleb128 0x21
 2166 0447 1D020000 		.4byte	.LASF59
 2167 044b 01       		.byte	0x1
 2168 044c 22       		.byte	0x22
 2169 044d 68000000 		.4byte	0x68
 2170 0451 05       		.uleb128 0x5
 2171 0452 03       		.byte	0x3
 2172 0453 00000000 		.4byte	currentDataPos
 2173 0457 21       		.uleb128 0x21
 2174 0458 2C020000 		.4byte	.LASF60
 2175 045c 01       		.byte	0x1
 2176 045d 22       		.byte	0x22
 2177 045e 68000000 		.4byte	0x68
 2178 0462 05       		.uleb128 0x5
 2179 0463 03       		.byte	0x3
 2180 0464 00000000 		.4byte	currentRXCharPosition
 2181 0468 21       		.uleb128 0x21
 2182 0469 DB030000 		.4byte	.LASF61
 2183 046d 01       		.byte	0x1
 2184 046e 22       		.byte	0x22
 2185 046f 68000000 		.4byte	0x68
 2186 0473 05       		.uleb128 0x5
 2187 0474 03       		.byte	0x3
 2188 0475 00000000 		.4byte	lengthOfData
 2189 0479 21       		.uleb128 0x21
 2190 047a 60030000 		.4byte	.LASF62
 2191 047e 01       		.byte	0x1
 2192 047f 22       		.byte	0x22
 2193 0480 68000000 		.4byte	0x68
 2194 0484 05       		.uleb128 0x5
 2195 0485 03       		.byte	0x3
 2196 0486 00000000 		.4byte	messageLength
 2197 048a 21       		.uleb128 0x21
 2198 048b D1030000 		.4byte	.LASF63
 2199 048f 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 49


 2200 0490 22       		.byte	0x22
 2201 0491 68000000 		.4byte	0x68
 2202 0495 05       		.uleb128 0x5
 2203 0496 03       		.byte	0x3
 2204 0497 00000000 		.4byte	headerCRC
 2205 049b 21       		.uleb128 0x21
 2206 049c 3A010000 		.4byte	.LASF64
 2207 04a0 01       		.byte	0x1
 2208 04a1 22       		.byte	0x22
 2209 04a2 68000000 		.4byte	0x68
 2210 04a6 05       		.uleb128 0x5
 2211 04a7 03       		.byte	0x3
 2212 04a8 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2213 04ac 21       		.uleb128 0x21
 2214 04ad 2B040000 		.4byte	.LASF65
 2215 04b1 01       		.byte	0x1
 2216 04b2 23       		.byte	0x23
 2217 04b3 A7030000 		.4byte	0x3a7
 2218 04b7 05       		.uleb128 0x5
 2219 04b8 03       		.byte	0x3
 2220 04b9 00000000 		.4byte	timerExpired
 2221 04bd 21       		.uleb128 0x21
 2222 04be E8030000 		.4byte	.LASF66
 2223 04c2 01       		.byte	0x1
 2224 04c3 23       		.byte	0x23
 2225 04c4 A7030000 		.4byte	0x3a7
 2226 04c8 05       		.uleb128 0x5
 2227 04c9 03       		.byte	0x3
 2228 04ca 00000000 		.4byte	dataTransmissionComplete
 2229 04ce 21       		.uleb128 0x21
 2230 04cf 38040000 		.4byte	.LASF67
 2231 04d3 01       		.byte	0x1
 2232 04d4 23       		.byte	0x23
 2233 04d5 A7030000 		.4byte	0x3a7
 2234 04d9 05       		.uleb128 0x5
 2235 04da 03       		.byte	0x3
 2236 04db 00000000 		.4byte	powerOnEdge
 2237 04df 21       		.uleb128 0x21
 2238 04e0 54030000 		.4byte	.LASF68
 2239 04e4 01       		.byte	0x1
 2240 04e5 23       		.byte	0x23
 2241 04e6 A7030000 		.4byte	0x3a7
 2242 04ea 05       		.uleb128 0x5
 2243 04eb 03       		.byte	0x3
 2244 04ec 00000000 		.4byte	headerValid
 2245 04f0 21       		.uleb128 0x21
 2246 04f1 E1000000 		.4byte	.LASF69
 2247 04f5 01       		.byte	0x1
 2248 04f6 24       		.byte	0x24
 2249 04f7 D5000000 		.4byte	0xd5
 2250 04fb 05       		.uleb128 0x5
 2251 04fc 03       		.byte	0x3
 2252 04fd 00000000 		.4byte	networkState
 2253 0501 21       		.uleb128 0x21
 2254 0502 B2000000 		.4byte	.LASF70
 2255 0506 01       		.byte	0x1
 2256 0507 25       		.byte	0x25
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 50


 2257 0508 F4000000 		.4byte	0xf4
 2258 050c 05       		.uleb128 0x5
 2259 050d 03       		.byte	0x3
 2260 050e 00000000 		.4byte	crcState
 2261 0512 21       		.uleb128 0x21
 2262 0513 DB020000 		.4byte	.LASF71
 2263 0517 01       		.byte	0x1
 2264 0518 27       		.byte	0x27
 2265 0519 A5000000 		.4byte	0xa5
 2266 051d 05       		.uleb128 0x5
 2267 051e 03       		.byte	0x3
 2268 051f 00000000 		.4byte	receivedChar
 2269 0523 00       		.byte	0
 2270              		.section	.debug_abbrev,"",%progbits
 2271              	.Ldebug_abbrev0:
 2272 0000 01       		.uleb128 0x1
 2273 0001 11       		.uleb128 0x11
 2274 0002 01       		.byte	0x1
 2275 0003 25       		.uleb128 0x25
 2276 0004 0E       		.uleb128 0xe
 2277 0005 13       		.uleb128 0x13
 2278 0006 0B       		.uleb128 0xb
 2279 0007 03       		.uleb128 0x3
 2280 0008 0E       		.uleb128 0xe
 2281 0009 1B       		.uleb128 0x1b
 2282 000a 0E       		.uleb128 0xe
 2283 000b 55       		.uleb128 0x55
 2284 000c 17       		.uleb128 0x17
 2285 000d 11       		.uleb128 0x11
 2286 000e 01       		.uleb128 0x1
 2287 000f 10       		.uleb128 0x10
 2288 0010 17       		.uleb128 0x17
 2289 0011 00       		.byte	0
 2290 0012 00       		.byte	0
 2291 0013 02       		.uleb128 0x2
 2292 0014 24       		.uleb128 0x24
 2293 0015 00       		.byte	0
 2294 0016 0B       		.uleb128 0xb
 2295 0017 0B       		.uleb128 0xb
 2296 0018 3E       		.uleb128 0x3e
 2297 0019 0B       		.uleb128 0xb
 2298 001a 03       		.uleb128 0x3
 2299 001b 0E       		.uleb128 0xe
 2300 001c 00       		.byte	0
 2301 001d 00       		.byte	0
 2302 001e 03       		.uleb128 0x3
 2303 001f 16       		.uleb128 0x16
 2304 0020 00       		.byte	0
 2305 0021 03       		.uleb128 0x3
 2306 0022 0E       		.uleb128 0xe
 2307 0023 3A       		.uleb128 0x3a
 2308 0024 0B       		.uleb128 0xb
 2309 0025 3B       		.uleb128 0x3b
 2310 0026 0B       		.uleb128 0xb
 2311 0027 49       		.uleb128 0x49
 2312 0028 13       		.uleb128 0x13
 2313 0029 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 51


 2314 002a 00       		.byte	0
 2315 002b 04       		.uleb128 0x4
 2316 002c 24       		.uleb128 0x24
 2317 002d 00       		.byte	0
 2318 002e 0B       		.uleb128 0xb
 2319 002f 0B       		.uleb128 0xb
 2320 0030 3E       		.uleb128 0x3e
 2321 0031 0B       		.uleb128 0xb
 2322 0032 03       		.uleb128 0x3
 2323 0033 08       		.uleb128 0x8
 2324 0034 00       		.byte	0
 2325 0035 00       		.byte	0
 2326 0036 05       		.uleb128 0x5
 2327 0037 16       		.uleb128 0x16
 2328 0038 00       		.byte	0
 2329 0039 03       		.uleb128 0x3
 2330 003a 0E       		.uleb128 0xe
 2331 003b 3A       		.uleb128 0x3a
 2332 003c 0B       		.uleb128 0xb
 2333 003d 3B       		.uleb128 0x3b
 2334 003e 05       		.uleb128 0x5
 2335 003f 49       		.uleb128 0x49
 2336 0040 13       		.uleb128 0x13
 2337 0041 00       		.byte	0
 2338 0042 00       		.byte	0
 2339 0043 06       		.uleb128 0x6
 2340 0044 35       		.uleb128 0x35
 2341 0045 00       		.byte	0
 2342 0046 49       		.uleb128 0x49
 2343 0047 13       		.uleb128 0x13
 2344 0048 00       		.byte	0
 2345 0049 00       		.byte	0
 2346 004a 07       		.uleb128 0x7
 2347 004b 0F       		.uleb128 0xf
 2348 004c 00       		.byte	0
 2349 004d 0B       		.uleb128 0xb
 2350 004e 0B       		.uleb128 0xb
 2351 004f 49       		.uleb128 0x49
 2352 0050 13       		.uleb128 0x13
 2353 0051 00       		.byte	0
 2354 0052 00       		.byte	0
 2355 0053 08       		.uleb128 0x8
 2356 0054 04       		.uleb128 0x4
 2357 0055 01       		.byte	0x1
 2358 0056 03       		.uleb128 0x3
 2359 0057 0E       		.uleb128 0xe
 2360 0058 0B       		.uleb128 0xb
 2361 0059 0B       		.uleb128 0xb
 2362 005a 3A       		.uleb128 0x3a
 2363 005b 0B       		.uleb128 0xb
 2364 005c 3B       		.uleb128 0x3b
 2365 005d 0B       		.uleb128 0xb
 2366 005e 01       		.uleb128 0x1
 2367 005f 13       		.uleb128 0x13
 2368 0060 00       		.byte	0
 2369 0061 00       		.byte	0
 2370 0062 09       		.uleb128 0x9
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 52


 2371 0063 28       		.uleb128 0x28
 2372 0064 00       		.byte	0
 2373 0065 03       		.uleb128 0x3
 2374 0066 0E       		.uleb128 0xe
 2375 0067 1C       		.uleb128 0x1c
 2376 0068 0D       		.uleb128 0xd
 2377 0069 00       		.byte	0
 2378 006a 00       		.byte	0
 2379 006b 0A       		.uleb128 0xa
 2380 006c 04       		.uleb128 0x4
 2381 006d 01       		.byte	0x1
 2382 006e 03       		.uleb128 0x3
 2383 006f 08       		.uleb128 0x8
 2384 0070 0B       		.uleb128 0xb
 2385 0071 0B       		.uleb128 0xb
 2386 0072 3A       		.uleb128 0x3a
 2387 0073 0B       		.uleb128 0xb
 2388 0074 3B       		.uleb128 0x3b
 2389 0075 0B       		.uleb128 0xb
 2390 0076 01       		.uleb128 0x1
 2391 0077 13       		.uleb128 0x13
 2392 0078 00       		.byte	0
 2393 0079 00       		.byte	0
 2394 007a 0B       		.uleb128 0xb
 2395 007b 2E       		.uleb128 0x2e
 2396 007c 00       		.byte	0
 2397 007d 3F       		.uleb128 0x3f
 2398 007e 19       		.uleb128 0x19
 2399 007f 03       		.uleb128 0x3
 2400 0080 0E       		.uleb128 0xe
 2401 0081 3A       		.uleb128 0x3a
 2402 0082 0B       		.uleb128 0xb
 2403 0083 3B       		.uleb128 0x3b
 2404 0084 0B       		.uleb128 0xb
 2405 0085 27       		.uleb128 0x27
 2406 0086 19       		.uleb128 0x19
 2407 0087 11       		.uleb128 0x11
 2408 0088 01       		.uleb128 0x1
 2409 0089 12       		.uleb128 0x12
 2410 008a 06       		.uleb128 0x6
 2411 008b 40       		.uleb128 0x40
 2412 008c 18       		.uleb128 0x18
 2413 008d 9642     		.uleb128 0x2116
 2414 008f 19       		.uleb128 0x19
 2415 0090 00       		.byte	0
 2416 0091 00       		.byte	0
 2417 0092 0C       		.uleb128 0xc
 2418 0093 2E       		.uleb128 0x2e
 2419 0094 00       		.byte	0
 2420 0095 3F       		.uleb128 0x3f
 2421 0096 19       		.uleb128 0x19
 2422 0097 03       		.uleb128 0x3
 2423 0098 0E       		.uleb128 0xe
 2424 0099 3A       		.uleb128 0x3a
 2425 009a 0B       		.uleb128 0xb
 2426 009b 3B       		.uleb128 0x3b
 2427 009c 0B       		.uleb128 0xb
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 53


 2428 009d 27       		.uleb128 0x27
 2429 009e 19       		.uleb128 0x19
 2430 009f 11       		.uleb128 0x11
 2431 00a0 01       		.uleb128 0x1
 2432 00a1 12       		.uleb128 0x12
 2433 00a2 06       		.uleb128 0x6
 2434 00a3 40       		.uleb128 0x40
 2435 00a4 18       		.uleb128 0x18
 2436 00a5 9742     		.uleb128 0x2117
 2437 00a7 19       		.uleb128 0x19
 2438 00a8 00       		.byte	0
 2439 00a9 00       		.byte	0
 2440 00aa 0D       		.uleb128 0xd
 2441 00ab 2E       		.uleb128 0x2e
 2442 00ac 01       		.byte	0x1
 2443 00ad 3F       		.uleb128 0x3f
 2444 00ae 19       		.uleb128 0x19
 2445 00af 03       		.uleb128 0x3
 2446 00b0 0E       		.uleb128 0xe
 2447 00b1 3A       		.uleb128 0x3a
 2448 00b2 0B       		.uleb128 0xb
 2449 00b3 3B       		.uleb128 0x3b
 2450 00b4 0B       		.uleb128 0xb
 2451 00b5 49       		.uleb128 0x49
 2452 00b6 13       		.uleb128 0x13
 2453 00b7 11       		.uleb128 0x11
 2454 00b8 01       		.uleb128 0x1
 2455 00b9 12       		.uleb128 0x12
 2456 00ba 06       		.uleb128 0x6
 2457 00bb 40       		.uleb128 0x40
 2458 00bc 18       		.uleb128 0x18
 2459 00bd 9642     		.uleb128 0x2116
 2460 00bf 19       		.uleb128 0x19
 2461 00c0 01       		.uleb128 0x1
 2462 00c1 13       		.uleb128 0x13
 2463 00c2 00       		.byte	0
 2464 00c3 00       		.byte	0
 2465 00c4 0E       		.uleb128 0xe
 2466 00c5 34       		.uleb128 0x34
 2467 00c6 00       		.byte	0
 2468 00c7 03       		.uleb128 0x3
 2469 00c8 08       		.uleb128 0x8
 2470 00c9 3A       		.uleb128 0x3a
 2471 00ca 0B       		.uleb128 0xb
 2472 00cb 3B       		.uleb128 0x3b
 2473 00cc 0B       		.uleb128 0xb
 2474 00cd 49       		.uleb128 0x49
 2475 00ce 13       		.uleb128 0x13
 2476 00cf 02       		.uleb128 0x2
 2477 00d0 18       		.uleb128 0x18
 2478 00d1 00       		.byte	0
 2479 00d2 00       		.byte	0
 2480 00d3 0F       		.uleb128 0xf
 2481 00d4 34       		.uleb128 0x34
 2482 00d5 00       		.byte	0
 2483 00d6 03       		.uleb128 0x3
 2484 00d7 0E       		.uleb128 0xe
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 54


 2485 00d8 3A       		.uleb128 0x3a
 2486 00d9 0B       		.uleb128 0xb
 2487 00da 3B       		.uleb128 0x3b
 2488 00db 0B       		.uleb128 0xb
 2489 00dc 49       		.uleb128 0x49
 2490 00dd 13       		.uleb128 0x13
 2491 00de 02       		.uleb128 0x2
 2492 00df 18       		.uleb128 0x18
 2493 00e0 00       		.byte	0
 2494 00e1 00       		.byte	0
 2495 00e2 10       		.uleb128 0x10
 2496 00e3 01       		.uleb128 0x1
 2497 00e4 01       		.byte	0x1
 2498 00e5 49       		.uleb128 0x49
 2499 00e6 13       		.uleb128 0x13
 2500 00e7 01       		.uleb128 0x1
 2501 00e8 13       		.uleb128 0x13
 2502 00e9 00       		.byte	0
 2503 00ea 00       		.byte	0
 2504 00eb 11       		.uleb128 0x11
 2505 00ec 21       		.uleb128 0x21
 2506 00ed 00       		.byte	0
 2507 00ee 49       		.uleb128 0x49
 2508 00ef 13       		.uleb128 0x13
 2509 00f0 2F       		.uleb128 0x2f
 2510 00f1 0B       		.uleb128 0xb
 2511 00f2 00       		.byte	0
 2512 00f3 00       		.byte	0
 2513 00f4 12       		.uleb128 0x12
 2514 00f5 2E       		.uleb128 0x2e
 2515 00f6 00       		.byte	0
 2516 00f7 3F       		.uleb128 0x3f
 2517 00f8 19       		.uleb128 0x19
 2518 00f9 03       		.uleb128 0x3
 2519 00fa 0E       		.uleb128 0xe
 2520 00fb 3A       		.uleb128 0x3a
 2521 00fc 0B       		.uleb128 0xb
 2522 00fd 3B       		.uleb128 0x3b
 2523 00fe 05       		.uleb128 0x5
 2524 00ff 11       		.uleb128 0x11
 2525 0100 01       		.uleb128 0x1
 2526 0101 12       		.uleb128 0x12
 2527 0102 06       		.uleb128 0x6
 2528 0103 40       		.uleb128 0x40
 2529 0104 18       		.uleb128 0x18
 2530 0105 9742     		.uleb128 0x2117
 2531 0107 19       		.uleb128 0x19
 2532 0108 00       		.byte	0
 2533 0109 00       		.byte	0
 2534 010a 13       		.uleb128 0x13
 2535 010b 2E       		.uleb128 0x2e
 2536 010c 01       		.byte	0x1
 2537 010d 3F       		.uleb128 0x3f
 2538 010e 19       		.uleb128 0x19
 2539 010f 03       		.uleb128 0x3
 2540 0110 0E       		.uleb128 0xe
 2541 0111 3A       		.uleb128 0x3a
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 55


 2542 0112 0B       		.uleb128 0xb
 2543 0113 3B       		.uleb128 0x3b
 2544 0114 05       		.uleb128 0x5
 2545 0115 27       		.uleb128 0x27
 2546 0116 19       		.uleb128 0x19
 2547 0117 11       		.uleb128 0x11
 2548 0118 01       		.uleb128 0x1
 2549 0119 12       		.uleb128 0x12
 2550 011a 06       		.uleb128 0x6
 2551 011b 40       		.uleb128 0x40
 2552 011c 18       		.uleb128 0x18
 2553 011d 9642     		.uleb128 0x2116
 2554 011f 19       		.uleb128 0x19
 2555 0120 01       		.uleb128 0x1
 2556 0121 13       		.uleb128 0x13
 2557 0122 00       		.byte	0
 2558 0123 00       		.byte	0
 2559 0124 14       		.uleb128 0x14
 2560 0125 05       		.uleb128 0x5
 2561 0126 00       		.byte	0
 2562 0127 03       		.uleb128 0x3
 2563 0128 0E       		.uleb128 0xe
 2564 0129 3A       		.uleb128 0x3a
 2565 012a 0B       		.uleb128 0xb
 2566 012b 3B       		.uleb128 0x3b
 2567 012c 05       		.uleb128 0x5
 2568 012d 49       		.uleb128 0x49
 2569 012e 13       		.uleb128 0x13
 2570 012f 02       		.uleb128 0x2
 2571 0130 18       		.uleb128 0x18
 2572 0131 00       		.byte	0
 2573 0132 00       		.byte	0
 2574 0133 15       		.uleb128 0x15
 2575 0134 34       		.uleb128 0x34
 2576 0135 00       		.byte	0
 2577 0136 03       		.uleb128 0x3
 2578 0137 08       		.uleb128 0x8
 2579 0138 3A       		.uleb128 0x3a
 2580 0139 0B       		.uleb128 0xb
 2581 013a 3B       		.uleb128 0x3b
 2582 013b 05       		.uleb128 0x5
 2583 013c 49       		.uleb128 0x49
 2584 013d 13       		.uleb128 0x13
 2585 013e 02       		.uleb128 0x2
 2586 013f 18       		.uleb128 0x18
 2587 0140 00       		.byte	0
 2588 0141 00       		.byte	0
 2589 0142 16       		.uleb128 0x16
 2590 0143 2E       		.uleb128 0x2e
 2591 0144 01       		.byte	0x1
 2592 0145 3F       		.uleb128 0x3f
 2593 0146 19       		.uleb128 0x19
 2594 0147 03       		.uleb128 0x3
 2595 0148 0E       		.uleb128 0xe
 2596 0149 3A       		.uleb128 0x3a
 2597 014a 0B       		.uleb128 0xb
 2598 014b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 56


 2599 014c 05       		.uleb128 0x5
 2600 014d 27       		.uleb128 0x27
 2601 014e 19       		.uleb128 0x19
 2602 014f 11       		.uleb128 0x11
 2603 0150 01       		.uleb128 0x1
 2604 0151 12       		.uleb128 0x12
 2605 0152 06       		.uleb128 0x6
 2606 0153 40       		.uleb128 0x40
 2607 0154 18       		.uleb128 0x18
 2608 0155 9742     		.uleb128 0x2117
 2609 0157 19       		.uleb128 0x19
 2610 0158 01       		.uleb128 0x1
 2611 0159 13       		.uleb128 0x13
 2612 015a 00       		.byte	0
 2613 015b 00       		.byte	0
 2614 015c 17       		.uleb128 0x17
 2615 015d 34       		.uleb128 0x34
 2616 015e 00       		.byte	0
 2617 015f 03       		.uleb128 0x3
 2618 0160 0E       		.uleb128 0xe
 2619 0161 3A       		.uleb128 0x3a
 2620 0162 0B       		.uleb128 0xb
 2621 0163 3B       		.uleb128 0x3b
 2622 0164 05       		.uleb128 0x5
 2623 0165 49       		.uleb128 0x49
 2624 0166 13       		.uleb128 0x13
 2625 0167 02       		.uleb128 0x2
 2626 0168 18       		.uleb128 0x18
 2627 0169 00       		.byte	0
 2628 016a 00       		.byte	0
 2629 016b 18       		.uleb128 0x18
 2630 016c 2E       		.uleb128 0x2e
 2631 016d 01       		.byte	0x1
 2632 016e 3F       		.uleb128 0x3f
 2633 016f 19       		.uleb128 0x19
 2634 0170 03       		.uleb128 0x3
 2635 0171 0E       		.uleb128 0xe
 2636 0172 3A       		.uleb128 0x3a
 2637 0173 0B       		.uleb128 0xb
 2638 0174 3B       		.uleb128 0x3b
 2639 0175 05       		.uleb128 0x5
 2640 0176 11       		.uleb128 0x11
 2641 0177 01       		.uleb128 0x1
 2642 0178 12       		.uleb128 0x12
 2643 0179 06       		.uleb128 0x6
 2644 017a 40       		.uleb128 0x40
 2645 017b 18       		.uleb128 0x18
 2646 017c 9642     		.uleb128 0x2116
 2647 017e 19       		.uleb128 0x19
 2648 017f 01       		.uleb128 0x1
 2649 0180 13       		.uleb128 0x13
 2650 0181 00       		.byte	0
 2651 0182 00       		.byte	0
 2652 0183 19       		.uleb128 0x19
 2653 0184 0B       		.uleb128 0xb
 2654 0185 01       		.byte	0x1
 2655 0186 11       		.uleb128 0x11
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 57


 2656 0187 01       		.uleb128 0x1
 2657 0188 12       		.uleb128 0x12
 2658 0189 06       		.uleb128 0x6
 2659 018a 00       		.byte	0
 2660 018b 00       		.byte	0
 2661 018c 1A       		.uleb128 0x1a
 2662 018d 2E       		.uleb128 0x2e
 2663 018e 00       		.byte	0
 2664 018f 3F       		.uleb128 0x3f
 2665 0190 19       		.uleb128 0x19
 2666 0191 03       		.uleb128 0x3
 2667 0192 0E       		.uleb128 0xe
 2668 0193 3A       		.uleb128 0x3a
 2669 0194 0B       		.uleb128 0xb
 2670 0195 3B       		.uleb128 0x3b
 2671 0196 05       		.uleb128 0x5
 2672 0197 11       		.uleb128 0x11
 2673 0198 01       		.uleb128 0x1
 2674 0199 12       		.uleb128 0x12
 2675 019a 06       		.uleb128 0x6
 2676 019b 40       		.uleb128 0x40
 2677 019c 18       		.uleb128 0x18
 2678 019d 9642     		.uleb128 0x2116
 2679 019f 19       		.uleb128 0x19
 2680 01a0 00       		.byte	0
 2681 01a1 00       		.byte	0
 2682 01a2 1B       		.uleb128 0x1b
 2683 01a3 2E       		.uleb128 0x2e
 2684 01a4 01       		.byte	0x1
 2685 01a5 3F       		.uleb128 0x3f
 2686 01a6 19       		.uleb128 0x19
 2687 01a7 03       		.uleb128 0x3
 2688 01a8 0E       		.uleb128 0xe
 2689 01a9 3A       		.uleb128 0x3a
 2690 01aa 0B       		.uleb128 0xb
 2691 01ab 3B       		.uleb128 0x3b
 2692 01ac 05       		.uleb128 0x5
 2693 01ad 49       		.uleb128 0x49
 2694 01ae 13       		.uleb128 0x13
 2695 01af 11       		.uleb128 0x11
 2696 01b0 01       		.uleb128 0x1
 2697 01b1 12       		.uleb128 0x12
 2698 01b2 06       		.uleb128 0x6
 2699 01b3 40       		.uleb128 0x40
 2700 01b4 18       		.uleb128 0x18
 2701 01b5 9642     		.uleb128 0x2116
 2702 01b7 19       		.uleb128 0x19
 2703 01b8 01       		.uleb128 0x1
 2704 01b9 13       		.uleb128 0x13
 2705 01ba 00       		.byte	0
 2706 01bb 00       		.byte	0
 2707 01bc 1C       		.uleb128 0x1c
 2708 01bd 26       		.uleb128 0x26
 2709 01be 00       		.byte	0
 2710 01bf 49       		.uleb128 0x49
 2711 01c0 13       		.uleb128 0x13
 2712 01c1 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 58


 2713 01c2 00       		.byte	0
 2714 01c3 1D       		.uleb128 0x1d
 2715 01c4 2E       		.uleb128 0x2e
 2716 01c5 01       		.byte	0x1
 2717 01c6 3F       		.uleb128 0x3f
 2718 01c7 19       		.uleb128 0x19
 2719 01c8 03       		.uleb128 0x3
 2720 01c9 0E       		.uleb128 0xe
 2721 01ca 3A       		.uleb128 0x3a
 2722 01cb 0B       		.uleb128 0xb
 2723 01cc 3B       		.uleb128 0x3b
 2724 01cd 05       		.uleb128 0x5
 2725 01ce 11       		.uleb128 0x11
 2726 01cf 01       		.uleb128 0x1
 2727 01d0 12       		.uleb128 0x12
 2728 01d1 06       		.uleb128 0x6
 2729 01d2 40       		.uleb128 0x40
 2730 01d3 18       		.uleb128 0x18
 2731 01d4 9742     		.uleb128 0x2117
 2732 01d6 19       		.uleb128 0x19
 2733 01d7 01       		.uleb128 0x1
 2734 01d8 13       		.uleb128 0x13
 2735 01d9 00       		.byte	0
 2736 01da 00       		.byte	0
 2737 01db 1E       		.uleb128 0x1e
 2738 01dc 2E       		.uleb128 0x2e
 2739 01dd 00       		.byte	0
 2740 01de 3F       		.uleb128 0x3f
 2741 01df 19       		.uleb128 0x19
 2742 01e0 03       		.uleb128 0x3
 2743 01e1 0E       		.uleb128 0xe
 2744 01e2 3A       		.uleb128 0x3a
 2745 01e3 0B       		.uleb128 0xb
 2746 01e4 3B       		.uleb128 0x3b
 2747 01e5 05       		.uleb128 0x5
 2748 01e6 49       		.uleb128 0x49
 2749 01e7 13       		.uleb128 0x13
 2750 01e8 11       		.uleb128 0x11
 2751 01e9 01       		.uleb128 0x1
 2752 01ea 12       		.uleb128 0x12
 2753 01eb 06       		.uleb128 0x6
 2754 01ec 40       		.uleb128 0x40
 2755 01ed 18       		.uleb128 0x18
 2756 01ee 9642     		.uleb128 0x2116
 2757 01f0 19       		.uleb128 0x19
 2758 01f1 00       		.byte	0
 2759 01f2 00       		.byte	0
 2760 01f3 1F       		.uleb128 0x1f
 2761 01f4 34       		.uleb128 0x34
 2762 01f5 00       		.byte	0
 2763 01f6 03       		.uleb128 0x3
 2764 01f7 0E       		.uleb128 0xe
 2765 01f8 3A       		.uleb128 0x3a
 2766 01f9 0B       		.uleb128 0xb
 2767 01fa 3B       		.uleb128 0x3b
 2768 01fb 05       		.uleb128 0x5
 2769 01fc 49       		.uleb128 0x49
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 59


 2770 01fd 13       		.uleb128 0x13
 2771 01fe 3F       		.uleb128 0x3f
 2772 01ff 19       		.uleb128 0x19
 2773 0200 3C       		.uleb128 0x3c
 2774 0201 19       		.uleb128 0x19
 2775 0202 00       		.byte	0
 2776 0203 00       		.byte	0
 2777 0204 20       		.uleb128 0x20
 2778 0205 21       		.uleb128 0x21
 2779 0206 00       		.byte	0
 2780 0207 49       		.uleb128 0x49
 2781 0208 13       		.uleb128 0x13
 2782 0209 2F       		.uleb128 0x2f
 2783 020a 05       		.uleb128 0x5
 2784 020b 00       		.byte	0
 2785 020c 00       		.byte	0
 2786 020d 21       		.uleb128 0x21
 2787 020e 34       		.uleb128 0x34
 2788 020f 00       		.byte	0
 2789 0210 03       		.uleb128 0x3
 2790 0211 0E       		.uleb128 0xe
 2791 0212 3A       		.uleb128 0x3a
 2792 0213 0B       		.uleb128 0xb
 2793 0214 3B       		.uleb128 0x3b
 2794 0215 0B       		.uleb128 0xb
 2795 0216 49       		.uleb128 0x49
 2796 0217 13       		.uleb128 0x13
 2797 0218 3F       		.uleb128 0x3f
 2798 0219 19       		.uleb128 0x19
 2799 021a 02       		.uleb128 0x2
 2800 021b 18       		.uleb128 0x18
 2801 021c 00       		.byte	0
 2802 021d 00       		.byte	0
 2803 021e 00       		.byte	0
 2804              		.section	.debug_aranges,"",%progbits
 2805 0000 8C000000 		.4byte	0x8c
 2806 0004 0200     		.2byte	0x2
 2807 0006 00000000 		.4byte	.Ldebug_info0
 2808 000a 04       		.byte	0x4
 2809 000b 00       		.byte	0
 2810 000c 0000     		.2byte	0
 2811 000e 0000     		.2byte	0
 2812 0010 00000000 		.4byte	.LFB63
 2813 0014 28000000 		.4byte	.LFE63-.LFB63
 2814 0018 00000000 		.4byte	.LFB64
 2815 001c 58000000 		.4byte	.LFE64-.LFB64
 2816 0020 00000000 		.4byte	.LFB65
 2817 0024 1C000000 		.4byte	.LFE65-.LFB65
 2818 0028 00000000 		.4byte	.LFB66
 2819 002c 38000000 		.4byte	.LFE66-.LFB66
 2820 0030 00000000 		.4byte	.LFB67
 2821 0034 80020000 		.4byte	.LFE67-.LFB67
 2822 0038 00000000 		.4byte	.LFB68
 2823 003c 48000000 		.4byte	.LFE68-.LFB68
 2824 0040 00000000 		.4byte	.LFB69
 2825 0044 38000000 		.4byte	.LFE69-.LFB69
 2826 0048 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 60


 2827 004c C4010000 		.4byte	.LFE70-.LFB70
 2828 0050 00000000 		.4byte	.LFB71
 2829 0054 D8000000 		.4byte	.LFE71-.LFB71
 2830 0058 00000000 		.4byte	.LFB72
 2831 005c 58000000 		.4byte	.LFE72-.LFB72
 2832 0060 00000000 		.4byte	.LFB73
 2833 0064 36000000 		.4byte	.LFE73-.LFB73
 2834 0068 00000000 		.4byte	.LFB74
 2835 006c B0000000 		.4byte	.LFE74-.LFB74
 2836 0070 00000000 		.4byte	.LFB75
 2837 0074 3C000000 		.4byte	.LFE75-.LFB75
 2838 0078 00000000 		.4byte	.LFB76
 2839 007c 38000000 		.4byte	.LFE76-.LFB76
 2840 0080 00000000 		.4byte	.LFB77
 2841 0084 60000000 		.4byte	.LFE77-.LFB77
 2842 0088 00000000 		.4byte	0
 2843 008c 00000000 		.4byte	0
 2844              		.section	.debug_ranges,"",%progbits
 2845              	.Ldebug_ranges0:
 2846 0000 00000000 		.4byte	.LFB63
 2847 0004 28000000 		.4byte	.LFE63
 2848 0008 00000000 		.4byte	.LFB64
 2849 000c 58000000 		.4byte	.LFE64
 2850 0010 00000000 		.4byte	.LFB65
 2851 0014 1C000000 		.4byte	.LFE65
 2852 0018 00000000 		.4byte	.LFB66
 2853 001c 38000000 		.4byte	.LFE66
 2854 0020 00000000 		.4byte	.LFB67
 2855 0024 80020000 		.4byte	.LFE67
 2856 0028 00000000 		.4byte	.LFB68
 2857 002c 48000000 		.4byte	.LFE68
 2858 0030 00000000 		.4byte	.LFB69
 2859 0034 38000000 		.4byte	.LFE69
 2860 0038 00000000 		.4byte	.LFB70
 2861 003c C4010000 		.4byte	.LFE70
 2862 0040 00000000 		.4byte	.LFB71
 2863 0044 D8000000 		.4byte	.LFE71
 2864 0048 00000000 		.4byte	.LFB72
 2865 004c 58000000 		.4byte	.LFE72
 2866 0050 00000000 		.4byte	.LFB73
 2867 0054 36000000 		.4byte	.LFE73
 2868 0058 00000000 		.4byte	.LFB74
 2869 005c B0000000 		.4byte	.LFE74
 2870 0060 00000000 		.4byte	.LFB75
 2871 0064 3C000000 		.4byte	.LFE75
 2872 0068 00000000 		.4byte	.LFB76
 2873 006c 38000000 		.4byte	.LFE76
 2874 0070 00000000 		.4byte	.LFB77
 2875 0074 60000000 		.4byte	.LFE77
 2876 0078 00000000 		.4byte	0
 2877 007c 00000000 		.4byte	0
 2878              		.section	.debug_line,"",%progbits
 2879              	.Ldebug_line0:
 2880 0000 38040000 		.section	.debug_str,"MS",%progbits,1
 2880      0200C001 
 2880      00000201 
 2880      FB0E0D00 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 61


 2880      01010101 
 2881              	.LASF24:
 2882 0000 68656164 		.ascii	"header\000"
 2882      657200
 2883              	.LASF46:
 2884 0007 7472616E 		.ascii	"transmitData\000"
 2884      736D6974 
 2884      44617461 
 2884      00
 2885              	.LASF27:
 2886 0014 49646C65 		.ascii	"Idle_Collision_ISR\000"
 2886      5F436F6C 
 2886      6C697369 
 2886      6F6E5F49 
 2886      535200
 2887              	.LASF22:
 2888 0027 73746174 		.ascii	"state\000"
 2888      6500
 2889              	.LASF43:
 2890 002d 67657452 		.ascii	"getRandomNumber\000"
 2890      616E646F 
 2890      6D4E756D 
 2890      62657200 
 2891              	.LASF17:
 2892 003d 73697A65 		.ascii	"sizetype\000"
 2892      74797065 
 2892      00
 2893              	.LASF74:
 2894 0046 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\PSoC Creator\\USB_UART01\\"
 2894      635C486F 
 2894      6D655C44 
 2894      6F63756D 
 2894      656E7473 
 2895 0073 5553425F 		.ascii	"USB_UART01.cydsn\000"
 2895      55415254 
 2895      30312E63 
 2895      7964736E 
 2895      00
 2896              	.LASF53:
 2897 0084 64696666 		.ascii	"diffManEncodedData\000"
 2897      4D616E45 
 2897      6E636F64 
 2897      65644461 
 2897      746100
 2898              	.LASF34:
 2899 0097 6D61696E 		.ascii	"main\000"
 2899      00
 2900              	.LASF50:
 2901 009c 68656164 		.ascii	"headerCheck\000"
 2901      65724368 
 2901      65636B00 
 2902              	.LASF48:
 2903 00a8 73746F72 		.ascii	"storeChar\000"
 2903      65436861 
 2903      7200
 2904              	.LASF70:
 2905 00b2 63726353 		.ascii	"crcState\000"
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 62


 2905      74617465 
 2905      00
 2906              	.LASF23:
 2907 00bb 6E6F6E65 		.ascii	"none\000"
 2907      00
 2908              	.LASF2:
 2909 00c0 73686F72 		.ascii	"short int\000"
 2909      7420696E 
 2909      7400
 2910              	.LASF40:
 2911 00ca 76616C75 		.ascii	"value\000"
 2911      6500
 2912              	.LASF21:
 2913 00d0 636F6C6C 		.ascii	"collision\000"
 2913      6973696F 
 2913      6E00
 2914              	.LASF12:
 2915 00da 75696E74 		.ascii	"uint16\000"
 2915      313600
 2916              	.LASF69:
 2917 00e1 6E657477 		.ascii	"networkState\000"
 2917      6F726B53 
 2917      74617465 
 2917      00
 2918              	.LASF11:
 2919 00ee 75696E74 		.ascii	"uint8\000"
 2919      3800
 2920              	.LASF31:
 2921 00f4 6C696E65 		.ascii	"lineString\000"
 2921      53747269 
 2921      6E6700
 2922              	.LASF28:
 2923 00ff 45646765 		.ascii	"Edge_detect_ISR\000"
 2923      5F646574 
 2923      6563745F 
 2923      49535200 
 2924              	.LASF13:
 2925 010f 666C6F61 		.ascii	"float\000"
 2925      7400
 2926              	.LASF6:
 2927 0115 6C6F6E67 		.ascii	"long long int\000"
 2927      206C6F6E 
 2927      6720696E 
 2927      7400
 2928              	.LASF7:
 2929 0123 6C6F6E67 		.ascii	"long long unsigned int\000"
 2929      206C6F6E 
 2929      6720756E 
 2929      7369676E 
 2929      65642069 
 2930              	.LASF64:
 2931 013a 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 2931      45535449 
 2931      4E415449 
 2931      4F4E5F41 
 2931      44445245 
 2932              	.LASF72:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 63


 2933 0151 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2933      4320342E 
 2933      392E3320 
 2933      32303135 
 2933      30333033 
 2934 0184 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2934      20726576 
 2934      6973696F 
 2934      6E203232 
 2934      31323230 
 2935 01b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2935      66756E63 
 2935      74696F6E 
 2935      2D736563 
 2935      74696F6E 
 2936              	.LASF42:
 2937 01df 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 2937      6574776F 
 2937      726B5374 
 2937      6174654F 
 2937      6E4C4544 
 2938              	.LASF49:
 2939 01f5 7072696E 		.ascii	"printChar\000"
 2939      74436861 
 2939      7200
 2940              	.LASF35:
 2941 01ff 73747269 		.ascii	"stringToDiffMan\000"
 2941      6E67546F 
 2941      44696666 
 2941      4D616E00 
 2942              	.LASF1:
 2943 020f 756E7369 		.ascii	"unsigned char\000"
 2943      676E6564 
 2943      20636861 
 2943      7200
 2944              	.LASF59:
 2945 021d 63757272 		.ascii	"currentDataPos\000"
 2945      656E7444 
 2945      61746150 
 2945      6F7300
 2946              	.LASF60:
 2947 022c 63757272 		.ascii	"currentRXCharPosition\000"
 2947      656E7452 
 2947      58436861 
 2947      72506F73 
 2947      6974696F 
 2948              	.LASF18:
 2949 0242 74696D65 		.ascii	"time_t\000"
 2949      5F7400
 2950              	.LASF41:
 2951 0249 696E6974 		.ascii	"initDiffManEncodedArray\000"
 2951      44696666 
 2951      4D616E45 
 2951      6E636F64 
 2951      65644172 
 2952              	.LASF0:
 2953 0261 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 64


 2953      65642063 
 2953      68617200 
 2954              	.LASF36:
 2955 026d 61736369 		.ascii	"asciiToDiffMan\000"
 2955      69546F44 
 2955      6966664D 
 2955      616E00
 2956              	.LASF19:
 2957 027c 69646C65 		.ascii	"idle\000"
 2957      00
 2958              	.LASF47:
 2959 0281 64696666 		.ascii	"diffManToASCII\000"
 2959      4D616E54 
 2959      6F415343 
 2959      494900
 2960              	.LASF8:
 2961 0290 756E7369 		.ascii	"unsigned int\000"
 2961      676E6564 
 2961      20696E74 
 2961      00
 2962              	.LASF56:
 2963 029d 72656365 		.ascii	"receivedDataIndex\000"
 2963      69766564 
 2963      44617461 
 2963      496E6465 
 2963      7800
 2964              	.LASF5:
 2965 02af 6C6F6E67 		.ascii	"long unsigned int\000"
 2965      20756E73 
 2965      69676E65 
 2965      6420696E 
 2965      7400
 2966              	.LASF26:
 2967 02c1 626F7468 		.ascii	"both\000"
 2967      00
 2968              	.LASF44:
 2969 02c6 4D494E5F 		.ascii	"MIN_N\000"
 2969      4E00
 2970              	.LASF37:
 2971 02cc 61736369 		.ascii	"asciiChar\000"
 2971      69436861 
 2971      7200
 2972              	.LASF15:
 2973 02d6 63686172 		.ascii	"char\000"
 2973      00
 2974              	.LASF71:
 2975 02db 72656365 		.ascii	"receivedChar\000"
 2975      69766564 
 2975      43686172 
 2975      00
 2976              	.LASF4:
 2977 02e8 6C6F6E67 		.ascii	"long int\000"
 2977      20696E74 
 2977      00
 2978              	.LASF32:
 2979 02f1 73747269 		.ascii	"stringPosition\000"
 2979      6E67506F 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 65


 2979      73697469 
 2979      6F6E00
 2980              	.LASF10:
 2981 0300 696E7433 		.ascii	"int32_t\000"
 2981      325F7400 
 2982              	.LASF3:
 2983 0308 73686F72 		.ascii	"short unsigned int\000"
 2983      7420756E 
 2983      7369676E 
 2983      65642069 
 2983      6E7400
 2984              	.LASF33:
 2985 031b 7365636F 		.ascii	"seconds\000"
 2985      6E647300 
 2986              	.LASF51:
 2987 0323 5F426F6F 		.ascii	"_Bool\000"
 2987      6C00
 2988              	.LASF20:
 2989 0329 62757379 		.ascii	"busy\000"
 2989      00
 2990              	.LASF57:
 2991 032e 72656365 		.ascii	"receivedDataCount\000"
 2991      69766564 
 2991      44617461 
 2991      436F756E 
 2991      7400
 2992              	.LASF16:
 2993 0340 72656738 		.ascii	"reg8\000"
 2993      00
 2994              	.LASF25:
 2995 0345 6D657373 		.ascii	"message\000"
 2995      61676500 
 2996              	.LASF14:
 2997 034d 646F7562 		.ascii	"double\000"
 2997      6C6500
 2998              	.LASF68:
 2999 0354 68656164 		.ascii	"headerValid\000"
 2999      65725661 
 2999      6C696400 
 3000              	.LASF62:
 3001 0360 6D657373 		.ascii	"messageLength\000"
 3001      6167654C 
 3001      656E6774 
 3001      6800
 3002              	.LASF54:
 3003 036e 64696666 		.ascii	"diffManReceivedData\000"
 3003      4D616E52 
 3003      65636569 
 3003      76656444 
 3003      61746100 
 3004              	.LASF55:
 3005 0382 72784368 		.ascii	"rxChar\000"
 3005      617200
 3006              	.LASF30:
 3007 0389 52656365 		.ascii	"ReceiveTimerISR\000"
 3007      69766554 
 3007      696D6572 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 66


 3007      49535200 
 3008              	.LASF39:
 3009 0399 62696E61 		.ascii	"binaryValueOfChar\000"
 3009      72795661 
 3009      6C75654F 
 3009      66436861 
 3009      7200
 3010              	.LASF73:
 3011 03ab 2E5C6D61 		.ascii	".\\main.c\000"
 3011      696E2E63 
 3011      00
 3012              	.LASF9:
 3013 03b4 5F5F696E 		.ascii	"__int32_t\000"
 3013      7433325F 
 3013      7400
 3014              	.LASF58:
 3015 03be 68616C66 		.ascii	"halfBitIndex\000"
 3015      42697449 
 3015      6E646578 
 3015      00
 3016              	.LASF45:
 3017 03cb 4D41585F 		.ascii	"MAX_N\000"
 3017      4E00
 3018              	.LASF63:
 3019 03d1 68656164 		.ascii	"headerCRC\000"
 3019      65724352 
 3019      4300
 3020              	.LASF61:
 3021 03db 6C656E67 		.ascii	"lengthOfData\000"
 3021      74684F66 
 3021      44617461 
 3021      00
 3022              	.LASF66:
 3023 03e8 64617461 		.ascii	"dataTransmissionComplete\000"
 3023      5472616E 
 3023      736D6973 
 3023      73696F6E 
 3023      436F6D70 
 3024              	.LASF29:
 3025 0401 54696D65 		.ascii	"TimerHandler\000"
 3025      7248616E 
 3025      646C6572 
 3025      00
 3026              	.LASF52:
 3027 040e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3027      52784275 
 3027      66666572 
 3027      00
 3028              	.LASF38:
 3029 041b 70726576 		.ascii	"previousHalfBit\000"
 3029      696F7573 
 3029      48616C66 
 3029      42697400 
 3030              	.LASF65:
 3031 042b 74696D65 		.ascii	"timerExpired\000"
 3031      72457870 
 3031      69726564 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\ccPuDvWG.s 			page 67


 3031      00
 3032              	.LASF67:
 3033 0438 706F7765 		.ascii	"powerOnEdge\000"
 3033      724F6E45 
 3033      64676500 
 3034              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
