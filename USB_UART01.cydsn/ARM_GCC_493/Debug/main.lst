ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.global	rxMessageLength
  43              		.align	2
  44              		.type	rxMessageLength, %object
  45              		.size	rxMessageLength, 4
  46              	rxMessageLength:
  47 000c 00000000 		.space	4
  48              		.global	TX_DESTINATION_ADDRESS
  49              		.align	2
  50              		.type	TX_DESTINATION_ADDRESS, %object
  51              		.size	TX_DESTINATION_ADDRESS, 4
  52              	TX_DESTINATION_ADDRESS:
  53 0010 00000000 		.space	4
  54              		.comm	timerExpired,1,1
  55              		.comm	dataTransmissionComplete,1,1
  56              		.comm	powerOnEdge,1,1
  57              		.comm	networkState,1,1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 2


  58              		.comm	crcState,1,1
  59              		.comm	receivedHexValue,1,1
  60              		.section	.text.Idle_Collision_ISR,"ax",%progbits
  61              		.align	2
  62              		.global	Idle_Collision_ISR
  63              		.thumb
  64              		.thumb_func
  65              		.type	Idle_Collision_ISR, %function
  66              	Idle_Collision_ISR:
  67              	.LFB63:
  68              		.file 1 ".\\main.c"
   1:.\main.c      **** #define START_OF_HEADER 0x71
   2:.\main.c      **** #define HEADER_CRC 0x75
   3:.\main.c      **** #define SOURCE_ADDRESS_0 0x40 
   4:.\main.c      **** #define SOURCE_ADDRESS_1 0x41
   5:.\main.c      **** #define SOURCE_ADDRESS_2 0x42
   6:.\main.c      **** #define INDEX_OF_MSB_ASCII 6
   7:.\main.c      **** #define INDEX_OF_MSB_HEX 7
   8:.\main.c      **** #define LENGTH_OF_HEADER 7
   9:.\main.c      **** #define HIGH 1
  10:.\main.c      **** #define LENGTH_OF_BYTE 8
  11:.\main.c      **** #define START_BIT 2
  12:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
  13:.\main.c      **** #define VERSION_NUMBER 1
  14:.\main.c      **** 
  15:.\main.c      **** 
  16:.\main.c      **** #include <device.h>
  17:.\main.c      **** #include <stdbool.h>
  18:.\main.c      **** #include <stdlib.h> //For random number generator
  19:.\main.c      **** #include <time.h>
  20:.\main.c      **** #include "stdio.h"
  21:.\main.c      **** 
  22:.\main.c      **** 
  23:.\main.c      **** int getRandomNumber();
  24:.\main.c      **** void initDiffManEncodedArray();
  25:.\main.c      **** void headerToDiffMan(uint8 *);
  26:.\main.c      **** void hexToDiffMan(uint8);
  27:.\main.c      **** void stringToDiffMan(char*, uint8);
  28:.\main.c      **** void asciiToDiffMan(char);
  29:.\main.c      **** void transmitData();
  30:.\main.c      **** void setNetworkStateOnLEDs();
  31:.\main.c      **** void diffManToHex();
  32:.\main.c      **** void storeChar();
  33:.\main.c      **** void printChar();
  34:.\main.c      **** bool headerCheck(uint8 *);
  35:.\main.c      **** 
  36:.\main.c      **** int diffManEncodedData[864];
  37:.\main.c      **** uint8 diffManReceivedData[108];
  38:.\main.c      **** char rxChar[108];
  39:.\main.c      **** int receivedDataIndex, receivedDataCount;
  40:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, rxMessageLength=0, TX_DESTINAT
  41:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge;
  42:.\main.c      **** enum state {idle, busy, collision} networkState;
  43:.\main.c      **** enum crc {none, header, message, both} crcState;
  44:.\main.c      **** 
  45:.\main.c      **** char receivedHexValue;
  46:.\main.c      **** 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 3


  47:.\main.c      **** CY_ISR(Idle_Collision_ISR){
  69              		.loc 1 47 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 1, uses_anonymous_args = 0
  73 0000 80B5     		push	{r7, lr}
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 00AF     		add	r7, sp, #0
  78              		.cfi_def_cfa_register 7
  48:.\main.c      ****     networkState = idle;
  79              		.loc 1 48 0
  80 0004 074B     		ldr	r3, .L4
  81 0006 0022     		movs	r2, #0
  82 0008 1A70     		strb	r2, [r3]
  49:.\main.c      ****     if(Receive_Read() == HIGH){
  83              		.loc 1 49 0
  84 000a FFF7FEFF 		bl	Receive_Read
  85 000e 0346     		mov	r3, r0
  86 0010 012B     		cmp	r3, #1
  87 0012 03D1     		bne	.L2
  50:.\main.c      ****         networkState = idle;
  88              		.loc 1 50 0
  89 0014 034B     		ldr	r3, .L4
  90 0016 0022     		movs	r2, #0
  91 0018 1A70     		strb	r2, [r3]
  92 001a 02E0     		b	.L1
  93              	.L2:
  51:.\main.c      ****     }
  52:.\main.c      ****     else{
  53:.\main.c      ****         networkState = collision;
  94              		.loc 1 53 0
  95 001c 014B     		ldr	r3, .L4
  96 001e 0222     		movs	r2, #2
  97 0020 1A70     		strb	r2, [r3]
  98              	.L1:
  54:.\main.c      ****     }
  55:.\main.c      **** }
  99              		.loc 1 55 0
 100 0022 80BD     		pop	{r7, pc}
 101              	.L5:
 102              		.align	2
 103              	.L4:
 104 0024 00000000 		.word	networkState
 105              		.cfi_endproc
 106              	.LFE63:
 107              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 108              		.section	.text.Edge_detect_ISR,"ax",%progbits
 109              		.align	2
 110              		.global	Edge_detect_ISR
 111              		.thumb
 112              		.thumb_func
 113              		.type	Edge_detect_ISR, %function
 114              	Edge_detect_ISR:
 115              	.LFB64:
  56:.\main.c      **** 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 4


  57:.\main.c      **** CY_ISR(Edge_detect_ISR){
 116              		.loc 1 57 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120 0000 98B5     		push	{r3, r4, r7, lr}
 121              		.cfi_def_cfa_offset 16
 122              		.cfi_offset 3, -16
 123              		.cfi_offset 4, -12
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 00AF     		add	r7, sp, #0
 127              		.cfi_def_cfa_register 7
  58:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  59:.\main.c      ****     Idle_Collision_Timer_Start();
 128              		.loc 1 59 0
 129 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  60:.\main.c      **** 
  61:.\main.c      ****     //Ignore power on edge
  62:.\main.c      ****     if(!powerOnEdge){
 130              		.loc 1 62 0
 131 0008 0F4B     		ldr	r3, .L9
 132 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 133 000c 83F00103 		eor	r3, r3, #1
 134 0010 DBB2     		uxtb	r3, r3
 135 0012 002B     		cmp	r3, #0
 136 0014 0FD0     		beq	.L7
  63:.\main.c      ****         Receive_Timer_Start();
 137              		.loc 1 63 0
 138 0016 FFF7FEFF 		bl	Receive_Timer_Start
  64:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 139              		.loc 1 64 0
 140 001a 0C4B     		ldr	r3, .L9+4
 141 001c 1C68     		ldr	r4, [r3]
 142 001e FFF7FEFF 		bl	Receive_Read
 143 0022 0346     		mov	r3, r0
 144 0024 1A46     		mov	r2, r3
 145 0026 0A4B     		ldr	r3, .L9+8
 146 0028 1A55     		strb	r2, [r3, r4]
  65:.\main.c      ****         receivedDataCount++;
 147              		.loc 1 65 0
 148 002a 084B     		ldr	r3, .L9+4
 149 002c 1B68     		ldr	r3, [r3]
 150 002e 0133     		adds	r3, r3, #1
 151 0030 064A     		ldr	r2, .L9+4
 152 0032 1360     		str	r3, [r2]
 153 0034 02E0     		b	.L8
 154              	.L7:
  66:.\main.c      ****     }
  67:.\main.c      ****     else{
  68:.\main.c      ****         powerOnEdge = false;
 155              		.loc 1 68 0
 156 0036 044B     		ldr	r3, .L9
 157 0038 0022     		movs	r2, #0
 158 003a 1A70     		strb	r2, [r3]
 159              	.L8:
  69:.\main.c      ****     }
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 5


  70:.\main.c      ****     networkState = busy;
 160              		.loc 1 70 0
 161 003c 054B     		ldr	r3, .L9+12
 162 003e 0122     		movs	r2, #1
 163 0040 1A70     		strb	r2, [r3]
  71:.\main.c      ****     Receive_ClearInterrupt();
 164              		.loc 1 71 0
 165 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  72:.\main.c      **** }
 166              		.loc 1 72 0
 167 0046 98BD     		pop	{r3, r4, r7, pc}
 168              	.L10:
 169              		.align	2
 170              	.L9:
 171 0048 00000000 		.word	powerOnEdge
 172 004c 00000000 		.word	receivedDataCount
 173 0050 00000000 		.word	diffManReceivedData
 174 0054 00000000 		.word	networkState
 175              		.cfi_endproc
 176              	.LFE64:
 177              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 178              		.section	.text.TimerHandler,"ax",%progbits
 179              		.align	2
 180              		.global	TimerHandler
 181              		.thumb
 182              		.thumb_func
 183              		.type	TimerHandler, %function
 184              	TimerHandler:
 185              	.LFB65:
  73:.\main.c      **** 
  74:.\main.c      **** CY_ISR(TimerHandler){
 186              		.loc 1 74 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190 0000 80B5     		push	{r7, lr}
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 7, -8
 193              		.cfi_offset 14, -4
 194 0002 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
  75:.\main.c      ****     Timer_Stop();
 196              		.loc 1 75 0
 197 0004 FFF7FEFF 		bl	Timer_Stop
  76:.\main.c      ****     timerExpired = true;
 198              		.loc 1 76 0
 199 0008 024B     		ldr	r3, .L12
 200 000a 0122     		movs	r2, #1
 201 000c 1A70     		strb	r2, [r3]
  77:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 202              		.loc 1 77 0
 203 000e 024B     		ldr	r3, .L12+4
 204 0010 1B78     		ldrb	r3, [r3]
  78:.\main.c      **** }
 205              		.loc 1 78 0
 206 0012 80BD     		pop	{r7, pc}
 207              	.L13:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 6


 208              		.align	2
 209              	.L12:
 210 0014 00000000 		.word	timerExpired
 211 0018 6B640040 		.word	1073767531
 212              		.cfi_endproc
 213              	.LFE65:
 214              		.size	TimerHandler, .-TimerHandler
 215              		.section	.text.ReceiveTimerISR,"ax",%progbits
 216              		.align	2
 217              		.global	ReceiveTimerISR
 218              		.thumb
 219              		.thumb_func
 220              		.type	ReceiveTimerISR, %function
 221              	ReceiveTimerISR:
 222              	.LFB66:
  79:.\main.c      **** 
  80:.\main.c      **** //TODO changing from reading to just repeting last data
  81:.\main.c      **** CY_ISR(ReceiveTimerISR){
 223              		.loc 1 81 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 0000 80B4     		push	{r7}
 229              		.cfi_def_cfa_offset 4
 230              		.cfi_offset 7, -4
 231 0002 00AF     		add	r7, sp, #0
 232              		.cfi_def_cfa_register 7
  82:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 233              		.loc 1 82 0
 234 0004 094B     		ldr	r3, .L15
 235 0006 1B68     		ldr	r3, [r3]
 236 0008 084A     		ldr	r2, .L15
 237 000a 1268     		ldr	r2, [r2]
 238 000c 013A     		subs	r2, r2, #1
 239 000e 0849     		ldr	r1, .L15+4
 240 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 241 0012 074A     		ldr	r2, .L15+4
 242 0014 D154     		strb	r1, [r2, r3]
  83:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  84:.\main.c      ****     receivedDataCount++;
 243              		.loc 1 84 0
 244 0016 054B     		ldr	r3, .L15
 245 0018 1B68     		ldr	r3, [r3]
 246 001a 0133     		adds	r3, r3, #1
 247 001c 034A     		ldr	r2, .L15
 248 001e 1360     		str	r3, [r2]
  85:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 249              		.loc 1 85 0
 250 0020 044B     		ldr	r3, .L15+8
 251 0022 1B78     		ldrb	r3, [r3]
  86:.\main.c      **** }
 252              		.loc 1 86 0
 253 0024 BD46     		mov	sp, r7
 254              		.cfi_def_cfa_register 13
 255              		@ sp needed
 256 0026 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 7


 257              		.cfi_restore 7
 258              		.cfi_def_cfa_offset 0
 259 002a 7047     		bx	lr
 260              	.L16:
 261              		.align	2
 262              	.L15:
 263 002c 00000000 		.word	receivedDataCount
 264 0030 00000000 		.word	diffManReceivedData
 265 0034 6F640040 		.word	1073767535
 266              		.cfi_endproc
 267              	.LFE66:
 268              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 269              		.section	.text.main,"ax",%progbits
 270              		.align	2
 271              		.global	main
 272              		.thumb
 273              		.thumb_func
 274              		.type	main, %function
 275              	main:
 276              	.LFB67:
  87:.\main.c      **** 
  88:.\main.c      **** int main()
  89:.\main.c      **** {
 277              		.loc 1 89 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 144
 280              		@ frame_needed = 1, uses_anonymous_args = 0
 281 0000 80B5     		push	{r7, lr}
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 A4B0     		sub	sp, sp, #144
 286              		.cfi_def_cfa_offset 152
 287 0004 00AF     		add	r7, sp, #0
 288              		.cfi_def_cfa_register 7
  90:.\main.c      ****     char rx;
  91:.\main.c      ****     char lineString[108];
  92:.\main.c      ****     uint8 headerBytes[8];
  93:.\main.c      ****     uint8 stringPosition = 0;//after header
 289              		.loc 1 93 0
 290 0006 0023     		movs	r3, #0
 291 0008 87F88F30 		strb	r3, [r7, #143]
  94:.\main.c      ****     timerExpired = false;
 292              		.loc 1 94 0
 293 000c 974B     		ldr	r3, .L40
 294 000e 0022     		movs	r2, #0
 295 0010 1A70     		strb	r2, [r3]
  95:.\main.c      ****     dataTransmissionComplete = false;
 296              		.loc 1 95 0
 297 0012 974B     		ldr	r3, .L40+4
 298 0014 0022     		movs	r2, #0
 299 0016 1A70     		strb	r2, [r3]
  96:.\main.c      **** 
  97:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge.
 300              		.loc 1 97 0
 301 0018 964B     		ldr	r3, .L40+8
 302 001a 0122     		movs	r2, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 8


 303 001c 1A70     		strb	r2, [r3]
  98:.\main.c      ****     //We want to ignore this edge on the rising edge.
  99:.\main.c      **** 
 100:.\main.c      ****     /*
 101:.\main.c      ****     Get value from system clock and
 102:.\main.c      ****     place in seconds variable.
 103:.\main.c      ****     */
 104:.\main.c      ****     time_t seconds;
 105:.\main.c      ****     time(&seconds);
 304              		.loc 1 105 0
 305 001e 07F10C03 		add	r3, r7, #12
 306 0022 1846     		mov	r0, r3
 307 0024 FFF7FEFF 		bl	time
 106:.\main.c      ****     /*
 107:.\main.c      ****     Convert seconds to a unsigned
 108:.\main.c      ****     integer for seed for random number generator
 109:.\main.c      ****     */
 110:.\main.c      ****     srand((unsigned int) seconds);
 308              		.loc 1 110 0
 309 0028 FB68     		ldr	r3, [r7, #12]
 310 002a 1846     		mov	r0, r3
 311 002c FFF7FEFF 		bl	srand
 111:.\main.c      **** 
 112:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 312              		.loc 1 112 0
 313 0030 0120     		movs	r0, #1
 314 0032 FFF7FEFF 		bl	TX_pin_Write
 113:.\main.c      **** 
 114:.\main.c      ****     /* Enable Global Interrupts */
 115:.\main.c      ****     CyGlobalIntEnable;
 315              		.loc 1 115 0
 316              	@ 115 ".\main.c" 1
 317 0036 62B6     		CPSIE   i
 318              	@ 0 "" 2
 116:.\main.c      **** 
 117:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 319              		.loc 1 117 0
 320              		.thumb
 321 0038 FFF7FEFF 		bl	Receive_ClearInterrupt
 118:.\main.c      **** 
 119:.\main.c      ****     LCD_Start();
 322              		.loc 1 119 0
 323 003c FFF7FEFF 		bl	LCD_Start
 120:.\main.c      **** 
 121:.\main.c      ****     //enable collision detection
 122:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 324              		.loc 1 122 0
 325 0040 8D48     		ldr	r0, .L40+12
 326 0042 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 123:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 327              		.loc 1 123 0
 328 0046 8D48     		ldr	r0, .L40+16
 329 0048 FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 124:.\main.c      ****     Idle_Collision_Timer_Start();
 330              		.loc 1 124 0
 331 004c FFF7FEFF 		bl	Idle_Collision_Timer_Start
 125:.\main.c      **** 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 9


 126:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 127:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 332              		.loc 1 127 0
 333 0050 0020     		movs	r0, #0
 334 0052 0021     		movs	r1, #0
 335 0054 FFF7FEFF 		bl	USBUART_1_Start
 128:.\main.c      **** 
 129:.\main.c      ****     //start transmission timer
 130:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 336              		.loc 1 130 0
 337 0058 8948     		ldr	r0, .L40+20
 338 005a FFF7FEFF 		bl	TimerISR_StartEx
 131:.\main.c      **** 
 132:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
 339              		.loc 1 132 0
 340 005e 8948     		ldr	r0, .L40+24
 341 0060 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 133:.\main.c      **** 
 134:.\main.c      ****     receivedDataCount = 0;
 342              		.loc 1 134 0
 343 0064 884B     		ldr	r3, .L40+28
 344 0066 0022     		movs	r2, #0
 345 0068 1A60     		str	r2, [r3]
 135:.\main.c      ****     receivedDataIndex = 0;
 346              		.loc 1 135 0
 347 006a 884B     		ldr	r3, .L40+32
 348 006c 0022     		movs	r2, #0
 349 006e 1A60     		str	r2, [r3]
 136:.\main.c      **** 
 137:.\main.c      ****     headerBytes[0] = START_OF_HEADER;  //Start of header, always 0x71
 350              		.loc 1 137 0
 351 0070 7123     		movs	r3, #113
 352 0072 3B74     		strb	r3, [r7, #16]
 138:.\main.c      **** 	headerBytes[1] = VERSION_NUMBER;    //Always 1
 353              		.loc 1 138 0
 354 0074 0123     		movs	r3, #1
 355 0076 7B74     		strb	r3, [r7, #17]
 139:.\main.c      **** 	headerBytes[2] = SOURCE_ADDRESS_0; //Tells receiver that message is sent from this device
 356              		.loc 1 139 0
 357 0078 4023     		movs	r3, #64
 358 007a BB74     		strb	r3, [r7, #18]
 140:.\main.c      **** 	headerBytes[3] = TX_DESTINATION_ADDRESS;  //set by user, tells where message is to be sent
 359              		.loc 1 140 0
 360 007c 844B     		ldr	r3, .L40+36
 361 007e 1B68     		ldr	r3, [r3]
 362 0080 DBB2     		uxtb	r3, r3
 363 0082 FB74     		strb	r3, [r7, #19]
 141:.\main.c      ****     headerBytes[4] = 0; //message length, will be set after message is entered
 364              		.loc 1 141 0
 365 0084 0023     		movs	r3, #0
 366 0086 3B75     		strb	r3, [r7, #20]
 142:.\main.c      **** 	headerBytes[5] = 0; //CRC usage: 0 = CRC not being used
 367              		.loc 1 142 0
 368 0088 0023     		movs	r3, #0
 369 008a 7B75     		strb	r3, [r7, #21]
 143:.\main.c      **** 	headerBytes[6] = HEADER_CRC;  //Header CRC
 370              		.loc 1 143 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 10


 371 008c 7523     		movs	r3, #117
 372 008e BB75     		strb	r3, [r7, #22]
 373              	.L37:
 144:.\main.c      **** 
 145:.\main.c      ****     /* Main Loop: */
 146:.\main.c      ****     for(;;)
 147:.\main.c      ****     {
 148:.\main.c      ****         setNetworkStateOnLEDs();
 374              		.loc 1 148 0
 375 0090 FFF7FEFF 		bl	setNetworkStateOnLEDs
 149:.\main.c      **** 
 150:.\main.c      ****         /*Receive*/
 151:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 152:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 376              		.loc 1 152 0
 377 0094 7F4B     		ldr	r3, .L40+40
 378 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 379 0098 002B     		cmp	r3, #0
 380 009a 52D1     		bne	.L18
 381              		.loc 1 152 0 is_stmt 0 discriminator 1
 382 009c 7A4B     		ldr	r3, .L40+28
 383 009e 1B68     		ldr	r3, [r3]
 384 00a0 212B     		cmp	r3, #33
 385 00a2 4EDD     		ble	.L18
 153:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 154:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 386              		.loc 1 154 0 is_stmt 1
 387 00a4 7C4B     		ldr	r3, .L40+44
 388 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 389 00a8 002B     		cmp	r3, #0
 390 00aa 41D1     		bne	.L19
 391              		.loc 1 154 0 is_stmt 0 discriminator 1
 392 00ac 7A4B     		ldr	r3, .L40+44
 393 00ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 394 00b0 012B     		cmp	r3, #1
 395 00b2 3DD1     		bne	.L19
 396              	.LBB2:
 155:.\main.c      ****                 //Decodes only the header of the received differential manchester encoded message
 156:.\main.c      ****                 //Each of the 7 bytes of the header are stored in receivedHeaderBytes array
 157:.\main.c      ****                 uint8 receivedHeaderBytes[LENGTH_OF_HEADER];
 158:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 397              		.loc 1 158 0 is_stmt 1
 398 00b4 754B     		ldr	r3, .L40+32
 399 00b6 0222     		movs	r2, #2
 400 00b8 1A60     		str	r2, [r3]
 159:.\main.c      ****                 int i;
 160:.\main.c      ****                 for(i = 0; i < LENGTH_OF_HEADER; i++){
 401              		.loc 1 160 0
 402 00ba 0023     		movs	r3, #0
 403 00bc C7F88830 		str	r3, [r7, #136]
 404 00c0 11E0     		b	.L20
 405              	.L21:
 161:.\main.c      ****                     diffManToHex();
 406              		.loc 1 161 0 discriminator 3
 407 00c2 FFF7FEFF 		bl	diffManToHex
 162:.\main.c      ****                     receivedHeaderBytes[i] = receivedHexValue;
 408              		.loc 1 162 0 discriminator 3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 11


 409 00c6 754B     		ldr	r3, .L40+48
 410 00c8 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 411 00ca 3A1D     		adds	r2, r7, #4
 412 00cc D7F88830 		ldr	r3, [r7, #136]
 413 00d0 1344     		add	r3, r3, r2
 414 00d2 0A46     		mov	r2, r1
 415 00d4 1A70     		strb	r2, [r3]
 163:.\main.c      ****                     receivedHexValue = 0;   //Clears temp variable which was stored 
 416              		.loc 1 163 0 discriminator 3
 417 00d6 714B     		ldr	r3, .L40+48
 418 00d8 0022     		movs	r2, #0
 419 00da 1A70     		strb	r2, [r3]
 160:.\main.c      ****                     diffManToHex();
 420              		.loc 1 160 0 discriminator 3
 421 00dc D7F88830 		ldr	r3, [r7, #136]
 422 00e0 0133     		adds	r3, r3, #1
 423 00e2 C7F88830 		str	r3, [r7, #136]
 424              	.L20:
 160:.\main.c      ****                     diffManToHex();
 425              		.loc 1 160 0 is_stmt 0 discriminator 1
 426 00e6 D7F88830 		ldr	r3, [r7, #136]
 427 00ea 062B     		cmp	r3, #6
 428 00ec E9DD     		ble	.L21
 164:.\main.c      ****                 }
 165:.\main.c      ****                 
 166:.\main.c      ****                 //The received header must be check before continuing with the rest of the received
 167:.\main.c      ****                 bool headerValid = headerCheck(receivedHeaderBytes);
 429              		.loc 1 167 0 is_stmt 1
 430 00ee 3B1D     		adds	r3, r7, #4
 431 00f0 1846     		mov	r0, r3
 432 00f2 FFF7FEFF 		bl	headerCheck
 433 00f6 0346     		mov	r3, r0
 434 00f8 87F88630 		strb	r3, [r7, #134]
 168:.\main.c      ****                 if(headerValid){
 435              		.loc 1 168 0
 436 00fc 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 437 0100 002B     		cmp	r3, #0
 438 0102 15D0     		beq	.L19
 169:.\main.c      ****                     //If header valid, decoded received message
 170:.\main.c      ****                     for(i=0; i < rxMessageLength; i++){
 439              		.loc 1 170 0
 440 0104 0023     		movs	r3, #0
 441 0106 C7F88830 		str	r3, [r7, #136]
 442 010a 0BE0     		b	.L23
 443              	.L24:
 171:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
 444              		.loc 1 171 0 discriminator 3
 445 010c FFF7FEFF 		bl	diffManToHex
 172:.\main.c      ****     					printChar();
 446              		.loc 1 172 0 discriminator 3
 447 0110 FFF7FEFF 		bl	printChar
 173:.\main.c      ****                         receivedHexValue = 0;   //Clears temp variable which was stored 
 448              		.loc 1 173 0 discriminator 3
 449 0114 614B     		ldr	r3, .L40+48
 450 0116 0022     		movs	r2, #0
 451 0118 1A70     		strb	r2, [r3]
 170:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 12


 452              		.loc 1 170 0 discriminator 3
 453 011a D7F88830 		ldr	r3, [r7, #136]
 454 011e 0133     		adds	r3, r3, #1
 455 0120 C7F88830 		str	r3, [r7, #136]
 456              	.L23:
 170:.\main.c      ****                         diffManToHex(); //Note: function updates receivedDataIndex
 457              		.loc 1 170 0 is_stmt 0 discriminator 1
 458 0124 5E4B     		ldr	r3, .L40+52
 459 0126 1B68     		ldr	r3, [r3]
 460 0128 D7F88820 		ldr	r2, [r7, #136]
 461 012c 9A42     		cmp	r2, r3
 462 012e EDDB     		blt	.L24
 463              	.L19:
 464              	.LBE2:
 174:.\main.c      ****                     }
 175:.\main.c      ****                     
 176:.\main.c      ****                 }
 177:.\main.c      ****                 else{
 178:.\main.c      ****                     //If header not valid, disregard received message 
 179:.\main.c      ****                 }
 180:.\main.c      ****             }//end start bit check
 181:.\main.c      ****             receivedDataCount = 0;  //Reset count
 465              		.loc 1 181 0 is_stmt 1
 466 0130 554B     		ldr	r3, .L40+28
 467 0132 0022     		movs	r2, #0
 468 0134 1A60     		str	r2, [r3]
 182:.\main.c      ****             receivedDataIndex = 0;  //Reset index
 469              		.loc 1 182 0
 470 0136 554B     		ldr	r3, .L40+32
 471 0138 0022     		movs	r2, #0
 472 013a 1A60     		str	r2, [r3]
 183:.\main.c      ****             currentRXCharPosition = 0;
 473              		.loc 1 183 0
 474 013c 594B     		ldr	r3, .L40+56
 475 013e 0022     		movs	r2, #0
 476 0140 1A60     		str	r2, [r3]
 477              	.L18:
 184:.\main.c      ****         }
 185:.\main.c      ****         else
 186:.\main.c      ****         {
 187:.\main.c      ****             //TODO prob remove this else
 188:.\main.c      ****         }
 189:.\main.c      ****         /*End Receive*/
 190:.\main.c      **** 
 191:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 478              		.loc 1 191 0
 479 0142 FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 480 0146 0346     		mov	r3, r0
 481 0148 002B     		cmp	r3, #0
 482 014a 06D0     		beq	.L25
 192:.\main.c      ****         {
 193:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 483              		.loc 1 193 0
 484 014c FFF7FEFF 		bl	USBUART_1_GetConfiguration
 485 0150 0346     		mov	r3, r0
 486 0152 002B     		cmp	r3, #0
 487 0154 01D0     		beq	.L25
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 13


 194:.\main.c      ****             {
 195:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 196:.\main.c      ****                 USBUART_1_CDC_Init();
 488              		.loc 1 196 0
 489 0156 FFF7FEFF 		bl	USBUART_1_CDC_Init
 490              	.L25:
 197:.\main.c      ****             }
 198:.\main.c      ****         }
 199:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 491              		.loc 1 199 0
 492 015a FFF7FEFF 		bl	USBUART_1_GetConfiguration
 493 015e 0346     		mov	r3, r0
 494 0160 002B     		cmp	r3, #0
 495 0162 00F08280 		beq	.L26
 200:.\main.c      ****         {
 201:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 496              		.loc 1 201 0
 497 0166 FFF7FEFF 		bl	USBUART_1_DataIsReady
 498 016a 0346     		mov	r3, r0
 499 016c 002B     		cmp	r3, #0
 500 016e 7CD0     		beq	.L26
 202:.\main.c      ****             {
 203:.\main.c      ****                 rx = USBUART_1_GetChar();
 501              		.loc 1 203 0
 502 0170 FFF7FEFF 		bl	USBUART_1_GetChar
 503 0174 0346     		mov	r3, r0
 504 0176 87F88730 		strb	r3, [r7, #135]
 204:.\main.c      ****                 switch(rx){
 505              		.loc 1 204 0
 506 017a 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 507 017e 0D2B     		cmp	r3, #13
 508 0180 25D0     		beq	.L28
 509 0182 1B2B     		cmp	r3, #27
 510 0184 70D0     		beq	.L39
 511 0186 082B     		cmp	r3, #8
 512 0188 54D1     		bne	.L38
 205:.\main.c      ****                     case 8://backspace
 206:.\main.c      ****                         if(stringPosition>0){
 513              		.loc 1 206 0
 514 018a 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 515 018e 002B     		cmp	r3, #0
 516 0190 1CD0     		beq	.L31
 207:.\main.c      ****                             stringPosition--;
 517              		.loc 1 207 0
 518 0192 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 519 0196 013B     		subs	r3, r3, #1
 520 0198 87F88F30 		strb	r3, [r7, #143]
 208:.\main.c      ****                             lineString[stringPosition] = '\0';
 521              		.loc 1 208 0
 522 019c 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 523 01a0 07F19002 		add	r2, r7, #144
 524 01a4 1344     		add	r3, r3, r2
 525 01a6 0022     		movs	r2, #0
 526 01a8 03F8782C 		strb	r2, [r3, #-120]
 209:.\main.c      ****                             //backspace space backspace
 210:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u);
 527              		.loc 1 210 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 14


 528 01ac 00BF     		nop
 529              	.L32:
 530              		.loc 1 210 0 is_stmt 0 discriminator 1
 531 01ae FFF7FEFF 		bl	USBUART_1_CDCIsReady
 532 01b2 0346     		mov	r3, r0
 533 01b4 002B     		cmp	r3, #0
 534 01b6 FAD0     		beq	.L32
 211:.\main.c      ****                             USBUART_1_PutChar(8);
 535              		.loc 1 211 0 is_stmt 1
 536 01b8 0820     		movs	r0, #8
 537 01ba FFF7FEFF 		bl	USBUART_1_PutChar
 212:.\main.c      ****                             USBUART_1_PutChar(32);
 538              		.loc 1 212 0
 539 01be 2020     		movs	r0, #32
 540 01c0 FFF7FEFF 		bl	USBUART_1_PutChar
 213:.\main.c      ****                             USBUART_1_PutChar(8);
 541              		.loc 1 213 0
 542 01c4 0820     		movs	r0, #8
 543 01c6 FFF7FEFF 		bl	USBUART_1_PutChar
 214:.\main.c      ****                         }
 215:.\main.c      ****                         break;
 544              		.loc 1 215 0
 545 01ca 4EE0     		b	.L26
 546              	.L31:
 547 01cc 4DE0     		b	.L26
 548              	.L28:
 216:.\main.c      ****                     case 13://enter (carriage return)
 217:.\main.c      ****                         initDiffManEncodedArray();
 549              		.loc 1 217 0
 550 01ce FFF7FEFF 		bl	initDiffManEncodedArray
 218:.\main.c      **** 						headerBytes[4] = stringPosition;//set message length TODO maybe -1?
 551              		.loc 1 218 0
 552 01d2 97F88F30 		ldrb	r3, [r7, #143]
 553 01d6 3B75     		strb	r3, [r7, #20]
 219:.\main.c      ****                         headerToDiffMan(headerBytes);
 554              		.loc 1 219 0
 555 01d8 07F11003 		add	r3, r7, #16
 556 01dc 1846     		mov	r0, r3
 557 01de FFF7FEFF 		bl	headerToDiffMan
 220:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 558              		.loc 1 220 0
 559 01e2 07F11802 		add	r2, r7, #24
 560 01e6 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 561 01ea 1046     		mov	r0, r2
 562 01ec 1946     		mov	r1, r3
 563 01ee FFF7FEFF 		bl	stringToDiffMan
 221:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 564              		.loc 1 221 0
 565 01f2 00BF     		nop
 566              	.L33:
 567              		.loc 1 221 0 is_stmt 0 discriminator 1
 568 01f4 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 569 01f8 0346     		mov	r3, r0
 570 01fa 002B     		cmp	r3, #0
 571 01fc FAD0     		beq	.L33
 222:.\main.c      ****                         USBUART_1_PutCRLF();
 572              		.loc 1 222 0 is_stmt 1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 15


 573 01fe FFF7FEFF 		bl	USBUART_1_PutCRLF
 223:.\main.c      **** 
 224:.\main.c      ****                         //keep looping until data is transmitted
 225:.\main.c      **** 
 226:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
 574              		.loc 1 226 0
 575 0202 03E0     		b	.L34
 576              	.L35:
 227:.\main.c      **** 
 228:.\main.c      ****                             transmitData();
 577              		.loc 1 228 0
 578 0204 FFF7FEFF 		bl	transmitData
 229:.\main.c      ****                             setNetworkStateOnLEDs();
 579              		.loc 1 229 0
 580 0208 FFF7FEFF 		bl	setNetworkStateOnLEDs
 581              	.L34:
 226:.\main.c      **** 
 582              		.loc 1 226 0
 583 020c 184B     		ldr	r3, .L40+4
 584 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 585 0210 83F00103 		eor	r3, r3, #1
 586 0214 DBB2     		uxtb	r3, r3
 587 0216 002B     		cmp	r3, #0
 588 0218 F4D1     		bne	.L35
 230:.\main.c      ****                         }
 231:.\main.c      ****                         dataTransmissionComplete = false;
 589              		.loc 1 231 0
 590 021a 154B     		ldr	r3, .L40+4
 591 021c 0022     		movs	r2, #0
 592 021e 1A70     		strb	r2, [r3]
 232:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 593              		.loc 1 232 0
 594 0220 0120     		movs	r0, #1
 595 0222 FFF7FEFF 		bl	TX_pin_Write
 233:.\main.c      ****                         //reset index
 234:.\main.c      ****                         halfBitIndex = 0;
 596              		.loc 1 234 0
 597 0226 204B     		ldr	r3, .L40+60
 598 0228 0022     		movs	r2, #0
 599 022a 1A60     		str	r2, [r3]
 235:.\main.c      ****                         stringPosition = 0;
 600              		.loc 1 235 0
 601 022c 0023     		movs	r3, #0
 602 022e 87F88F30 		strb	r3, [r7, #143]
 236:.\main.c      ****                         break;
 603              		.loc 1 236 0
 604 0232 1AE0     		b	.L26
 605              	.L38:
 237:.\main.c      ****                     case 27://escape
 238:.\main.c      ****                         break;
 239:.\main.c      ****                     default://everything else
 240:.\main.c      ****                         lineString[stringPosition] = rx;
 606              		.loc 1 240 0
 607 0234 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 608 0238 07F19002 		add	r2, r7, #144
 609 023c 1344     		add	r3, r3, r2
 610 023e 97F88720 		ldrb	r2, [r7, #135]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 16


 611 0242 03F8782C 		strb	r2, [r3, #-120]
 241:.\main.c      ****                         stringPosition++;
 612              		.loc 1 241 0
 613 0246 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 614 024a 0133     		adds	r3, r3, #1
 615 024c 87F88F30 		strb	r3, [r7, #143]
 242:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 616              		.loc 1 242 0
 617 0250 00BF     		nop
 618              	.L36:
 619              		.loc 1 242 0 is_stmt 0 discriminator 1
 620 0252 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 621 0256 0346     		mov	r3, r0
 622 0258 002B     		cmp	r3, #0
 623 025a FAD0     		beq	.L36
 243:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 624              		.loc 1 243 0 is_stmt 1
 625 025c 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 626 0260 1846     		mov	r0, r3
 627 0262 FFF7FEFF 		bl	USBUART_1_PutChar
 244:.\main.c      ****                         break;
 628              		.loc 1 244 0
 629 0266 00E0     		b	.L26
 630              	.L39:
 238:.\main.c      ****                     default://everything else
 631              		.loc 1 238 0
 632 0268 00BF     		nop
 633              	.L26:
 245:.\main.c      ****                 }
 246:.\main.c      ****             }
 247:.\main.c      ****         }
 248:.\main.c      ****     }
 634              		.loc 1 248 0 discriminator 2
 635 026a 11E7     		b	.L37
 636              	.L41:
 637              		.align	2
 638              	.L40:
 639 026c 00000000 		.word	timerExpired
 640 0270 00000000 		.word	dataTransmissionComplete
 641 0274 00000000 		.word	powerOnEdge
 642 0278 00000000 		.word	Idle_Collision_ISR
 643 027c 00000000 		.word	Edge_detect_ISR
 644 0280 00000000 		.word	TimerHandler
 645 0284 00000000 		.word	ReceiveTimerISR
 646 0288 00000000 		.word	receivedDataCount
 647 028c 00000000 		.word	receivedDataIndex
 648 0290 00000000 		.word	TX_DESTINATION_ADDRESS
 649 0294 00000000 		.word	networkState
 650 0298 00000000 		.word	diffManReceivedData
 651 029c 00000000 		.word	receivedHexValue
 652 02a0 00000000 		.word	rxMessageLength
 653 02a4 00000000 		.word	currentRXCharPosition
 654 02a8 00000000 		.word	halfBitIndex
 655              		.cfi_endproc
 656              	.LFE67:
 657              		.size	main, .-main
 658              		.section	.text.initDiffManEncodedArray,"ax",%progbits
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 17


 659              		.align	2
 660              		.global	initDiffManEncodedArray
 661              		.thumb
 662              		.thumb_func
 663              		.type	initDiffManEncodedArray, %function
 664              	initDiffManEncodedArray:
 665              	.LFB68:
 249:.\main.c      **** }
 250:.\main.c      **** 
 251:.\main.c      **** /*
 252:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the
 253:.\main.c      **** half bits 01.
 254:.\main.c      **** Only call when starting to transfer a new string
 255:.\main.c      **** */
 256:.\main.c      **** void initDiffManEncodedArray(){
 666              		.loc 1 256 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 1, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 671 0000 80B4     		push	{r7}
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 00AF     		add	r7, sp, #0
 675              		.cfi_def_cfa_register 7
 257:.\main.c      ****     halfBitIndex = 0;
 676              		.loc 1 257 0
 677 0004 0E4B     		ldr	r3, .L43
 678 0006 0022     		movs	r2, #0
 679 0008 1A60     		str	r2, [r3]
 258:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 680              		.loc 1 258 0
 681 000a 0D4B     		ldr	r3, .L43
 682 000c 1B68     		ldr	r3, [r3]
 683 000e 0D4A     		ldr	r2, .L43+4
 684 0010 0021     		movs	r1, #0
 685 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 259:.\main.c      ****     halfBitIndex++;
 686              		.loc 1 259 0
 687 0016 0A4B     		ldr	r3, .L43
 688 0018 1B68     		ldr	r3, [r3]
 689 001a 0133     		adds	r3, r3, #1
 690 001c 084A     		ldr	r2, .L43
 691 001e 1360     		str	r3, [r2]
 260:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 692              		.loc 1 260 0
 693 0020 074B     		ldr	r3, .L43
 694 0022 1B68     		ldr	r3, [r3]
 695 0024 074A     		ldr	r2, .L43+4
 696 0026 0121     		movs	r1, #1
 697 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 261:.\main.c      ****     halfBitIndex++;
 698              		.loc 1 261 0
 699 002c 044B     		ldr	r3, .L43
 700 002e 1B68     		ldr	r3, [r3]
 701 0030 0133     		adds	r3, r3, #1
 702 0032 034A     		ldr	r2, .L43
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 18


 703 0034 1360     		str	r3, [r2]
 262:.\main.c      **** }
 704              		.loc 1 262 0
 705 0036 BD46     		mov	sp, r7
 706              		.cfi_def_cfa_register 13
 707              		@ sp needed
 708 0038 5DF8047B 		ldr	r7, [sp], #4
 709              		.cfi_restore 7
 710              		.cfi_def_cfa_offset 0
 711 003c 7047     		bx	lr
 712              	.L44:
 713 003e 00BF     		.align	2
 714              	.L43:
 715 0040 00000000 		.word	halfBitIndex
 716 0044 00000000 		.word	diffManEncodedData
 717              		.cfi_endproc
 718              	.LFE68:
 719              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 720              		.section	.text.headerToDiffMan,"ax",%progbits
 721              		.align	2
 722              		.global	headerToDiffMan
 723              		.thumb
 724              		.thumb_func
 725              		.type	headerToDiffMan, %function
 726              	headerToDiffMan:
 727              	.LFB69:
 263:.\main.c      **** /*
 264:.\main.c      **** Enter key has been pressed, change the 7 header bytes into diff man data.
 265:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 266:.\main.c      **** */
 267:.\main.c      **** void headerToDiffMan(uint8 *headerBytes){
 728              		.loc 1 267 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 16
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732 0000 80B5     		push	{r7, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 7, -8
 735              		.cfi_offset 14, -4
 736 0002 84B0     		sub	sp, sp, #16
 737              		.cfi_def_cfa_offset 24
 738 0004 00AF     		add	r7, sp, #0
 739              		.cfi_def_cfa_register 7
 740 0006 7860     		str	r0, [r7, #4]
 268:.\main.c      **** 
 269:.\main.c      ****     unsigned int i = 0;
 741              		.loc 1 269 0
 742 0008 0023     		movs	r3, #0
 743 000a FB60     		str	r3, [r7, #12]
 270:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 744              		.loc 1 270 0
 745 000c 0023     		movs	r3, #0
 746 000e FB60     		str	r3, [r7, #12]
 747 0010 09E0     		b	.L46
 748              	.L47:
 271:.\main.c      ****         hexToDiffMan(headerBytes[i]);
 749              		.loc 1 271 0 discriminator 3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 19


 750 0012 7A68     		ldr	r2, [r7, #4]
 751 0014 FB68     		ldr	r3, [r7, #12]
 752 0016 1344     		add	r3, r3, r2
 753 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 754 001a 1846     		mov	r0, r3
 755 001c FFF7FEFF 		bl	hexToDiffMan
 270:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 756              		.loc 1 270 0 discriminator 3
 757 0020 FB68     		ldr	r3, [r7, #12]
 758 0022 0133     		adds	r3, r3, #1
 759 0024 FB60     		str	r3, [r7, #12]
 760              	.L46:
 270:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 761              		.loc 1 270 0 is_stmt 0 discriminator 1
 762 0026 FB68     		ldr	r3, [r7, #12]
 763 0028 062B     		cmp	r3, #6
 764 002a F2D9     		bls	.L47
 272:.\main.c      ****     }
 273:.\main.c      **** }
 765              		.loc 1 273 0 is_stmt 1
 766 002c 1037     		adds	r7, r7, #16
 767              		.cfi_def_cfa_offset 8
 768 002e BD46     		mov	sp, r7
 769              		.cfi_def_cfa_register 13
 770              		@ sp needed
 771 0030 80BD     		pop	{r7, pc}
 772              		.cfi_endproc
 773              	.LFE69:
 774              		.size	headerToDiffMan, .-headerToDiffMan
 775 0032 00BF     		.section	.text.hexToDiffMan,"ax",%progbits
 776              		.align	2
 777              		.global	hexToDiffMan
 778              		.thumb
 779              		.thumb_func
 780              		.type	hexToDiffMan, %function
 781              	hexToDiffMan:
 782              	.LFB70:
 274:.\main.c      **** 
 275:.\main.c      **** /*
 276:.\main.c      **** Helper method. Call only from headerToDiffMan
 277:.\main.c      **** Converts a hexadecimal value to a differental manchester line encoded version. 
 278:.\main.c      **** Used for the header b/c does not added a leading 1 like asciiToDiffMan() method.
 279:.\main.c      **** */
 280:.\main.c      **** void hexToDiffMan(uint8 hexValue){
 783              		.loc 1 280 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 56
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787              		@ link register save eliminated.
 788 0000 80B4     		push	{r7}
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0002 8FB0     		sub	sp, sp, #60
 792              		.cfi_def_cfa_offset 64
 793 0004 00AF     		add	r7, sp, #0
 794              		.cfi_def_cfa_register 7
 795 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 20


 796 0008 FB71     		strb	r3, [r7, #7]
 281:.\main.c      ****     unsigned int binaryValueOfHex[8];//index zero is LSB
 282:.\main.c      ****     
 283:.\main.c      ****     //Coverts the hexadecimal value into binary
 284:.\main.c      ****     int i;
 285:.\main.c      ****     for (i = 0; i < 8; ++i){
 797              		.loc 1 285 0
 798 000a 0023     		movs	r3, #0
 799 000c 7B63     		str	r3, [r7, #52]
 800 000e 0FE0     		b	.L49
 801              	.L50:
 286:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 802              		.loc 1 286 0 discriminator 3
 803 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 804 0012 7B6B     		ldr	r3, [r7, #52]
 805 0014 42FA03F3 		asr	r3, r2, r3
 806 0018 03F00102 		and	r2, r3, #1
 807 001c 7B6B     		ldr	r3, [r7, #52]
 808 001e 9B00     		lsls	r3, r3, #2
 809 0020 07F13801 		add	r1, r7, #56
 810 0024 0B44     		add	r3, r3, r1
 811 0026 43F82C2C 		str	r2, [r3, #-44]
 285:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 812              		.loc 1 285 0 discriminator 3
 813 002a 7B6B     		ldr	r3, [r7, #52]
 814 002c 0133     		adds	r3, r3, #1
 815 002e 7B63     		str	r3, [r7, #52]
 816              	.L49:
 285:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 817              		.loc 1 285 0 is_stmt 0 discriminator 1
 818 0030 7B6B     		ldr	r3, [r7, #52]
 819 0032 072B     		cmp	r3, #7
 820 0034 ECDD     		ble	.L50
 287:.\main.c      ****     }
 288:.\main.c      ****     
 289:.\main.c      ****     //Differential manchester encodes the 8 bits (the binary version of the hexadecimal value).
 290:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 291:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 821              		.loc 1 291 0 is_stmt 1
 822 0036 454B     		ldr	r3, .L58
 823 0038 1B68     		ldr	r3, [r3]
 824 003a 013B     		subs	r3, r3, #1
 825 003c 444A     		ldr	r2, .L58+4
 826 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 827 0042 87F83330 		strb	r3, [r7, #51]
 292:.\main.c      ****     int j;
 293:.\main.c      ****     for(j=INDEX_OF_MSB_HEX;j>=0;j--)
 828              		.loc 1 293 0
 829 0046 0723     		movs	r3, #7
 830 0048 FB62     		str	r3, [r7, #44]
 831 004a 76E0     		b	.L51
 832              	.L57:
 294:.\main.c      ****     {
 295:.\main.c      ****         if(binaryValueOfHex[j] == 1)
 833              		.loc 1 295 0
 834 004c FB6A     		ldr	r3, [r7, #44]
 835 004e 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 21


 836 0050 07F13802 		add	r2, r7, #56
 837 0054 1344     		add	r3, r3, r2
 838 0056 53F82C3C 		ldr	r3, [r3, #-44]
 839 005a 012B     		cmp	r3, #1
 840 005c 31D1     		bne	.L52
 296:.\main.c      ****         {
 297:.\main.c      ****             //bit == 1
 298:.\main.c      ****             if(previousHalfBit == 1)
 841              		.loc 1 298 0
 842 005e 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 843 0062 012B     		cmp	r3, #1
 844 0064 16D1     		bne	.L53
 299:.\main.c      ****             {
 300:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 845              		.loc 1 300 0
 846 0066 394B     		ldr	r3, .L58
 847 0068 1B68     		ldr	r3, [r3]
 848 006a 394A     		ldr	r2, .L58+4
 849 006c 0121     		movs	r1, #1
 850 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 301:.\main.c      ****                 halfBitIndex++;
 851              		.loc 1 301 0
 852 0072 364B     		ldr	r3, .L58
 853 0074 1B68     		ldr	r3, [r3]
 854 0076 0133     		adds	r3, r3, #1
 855 0078 344A     		ldr	r2, .L58
 856 007a 1360     		str	r3, [r2]
 302:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 857              		.loc 1 302 0
 858 007c 334B     		ldr	r3, .L58
 859 007e 1B68     		ldr	r3, [r3]
 860 0080 334A     		ldr	r2, .L58+4
 861 0082 0021     		movs	r1, #0
 862 0084 42F82310 		str	r1, [r2, r3, lsl #2]
 303:.\main.c      ****                 halfBitIndex++;
 863              		.loc 1 303 0
 864 0088 304B     		ldr	r3, .L58
 865 008a 1B68     		ldr	r3, [r3]
 866 008c 0133     		adds	r3, r3, #1
 867 008e 2F4A     		ldr	r2, .L58
 868 0090 1360     		str	r3, [r2]
 869 0092 47E0     		b	.L55
 870              	.L53:
 304:.\main.c      ****             }
 305:.\main.c      ****             else
 306:.\main.c      ****             {
 307:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 871              		.loc 1 307 0
 872 0094 2D4B     		ldr	r3, .L58
 873 0096 1B68     		ldr	r3, [r3]
 874 0098 2D4A     		ldr	r2, .L58+4
 875 009a 0021     		movs	r1, #0
 876 009c 42F82310 		str	r1, [r2, r3, lsl #2]
 308:.\main.c      ****                 halfBitIndex++;
 877              		.loc 1 308 0
 878 00a0 2A4B     		ldr	r3, .L58
 879 00a2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 22


 880 00a4 0133     		adds	r3, r3, #1
 881 00a6 294A     		ldr	r2, .L58
 882 00a8 1360     		str	r3, [r2]
 309:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 883              		.loc 1 309 0
 884 00aa 284B     		ldr	r3, .L58
 885 00ac 1B68     		ldr	r3, [r3]
 886 00ae 284A     		ldr	r2, .L58+4
 887 00b0 0121     		movs	r1, #1
 888 00b2 42F82310 		str	r1, [r2, r3, lsl #2]
 310:.\main.c      ****                 halfBitIndex++;
 889              		.loc 1 310 0
 890 00b6 254B     		ldr	r3, .L58
 891 00b8 1B68     		ldr	r3, [r3]
 892 00ba 0133     		adds	r3, r3, #1
 893 00bc 234A     		ldr	r2, .L58
 894 00be 1360     		str	r3, [r2]
 895 00c0 30E0     		b	.L55
 896              	.L52:
 311:.\main.c      ****             }
 312:.\main.c      **** 
 313:.\main.c      ****         }
 314:.\main.c      ****         else
 315:.\main.c      ****         {
 316:.\main.c      ****             //bit == 0
 317:.\main.c      ****             if(previousHalfBit == 1)
 897              		.loc 1 317 0
 898 00c2 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 899 00c6 012B     		cmp	r3, #1
 900 00c8 16D1     		bne	.L56
 318:.\main.c      ****             {
 319:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 901              		.loc 1 319 0
 902 00ca 204B     		ldr	r3, .L58
 903 00cc 1B68     		ldr	r3, [r3]
 904 00ce 204A     		ldr	r2, .L58+4
 905 00d0 0021     		movs	r1, #0
 906 00d2 42F82310 		str	r1, [r2, r3, lsl #2]
 320:.\main.c      ****                 halfBitIndex++;
 907              		.loc 1 320 0
 908 00d6 1D4B     		ldr	r3, .L58
 909 00d8 1B68     		ldr	r3, [r3]
 910 00da 0133     		adds	r3, r3, #1
 911 00dc 1B4A     		ldr	r2, .L58
 912 00de 1360     		str	r3, [r2]
 321:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 913              		.loc 1 321 0
 914 00e0 1A4B     		ldr	r3, .L58
 915 00e2 1B68     		ldr	r3, [r3]
 916 00e4 1A4A     		ldr	r2, .L58+4
 917 00e6 0121     		movs	r1, #1
 918 00e8 42F82310 		str	r1, [r2, r3, lsl #2]
 322:.\main.c      ****                 halfBitIndex++;
 919              		.loc 1 322 0
 920 00ec 174B     		ldr	r3, .L58
 921 00ee 1B68     		ldr	r3, [r3]
 922 00f0 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 23


 923 00f2 164A     		ldr	r2, .L58
 924 00f4 1360     		str	r3, [r2]
 925 00f6 15E0     		b	.L55
 926              	.L56:
 323:.\main.c      ****             }
 324:.\main.c      ****             else
 325:.\main.c      ****             {
 326:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 927              		.loc 1 326 0
 928 00f8 144B     		ldr	r3, .L58
 929 00fa 1B68     		ldr	r3, [r3]
 930 00fc 144A     		ldr	r2, .L58+4
 931 00fe 0121     		movs	r1, #1
 932 0100 42F82310 		str	r1, [r2, r3, lsl #2]
 327:.\main.c      ****                 halfBitIndex++;
 933              		.loc 1 327 0
 934 0104 114B     		ldr	r3, .L58
 935 0106 1B68     		ldr	r3, [r3]
 936 0108 0133     		adds	r3, r3, #1
 937 010a 104A     		ldr	r2, .L58
 938 010c 1360     		str	r3, [r2]
 328:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 939              		.loc 1 328 0
 940 010e 0F4B     		ldr	r3, .L58
 941 0110 1B68     		ldr	r3, [r3]
 942 0112 0F4A     		ldr	r2, .L58+4
 943 0114 0021     		movs	r1, #0
 944 0116 42F82310 		str	r1, [r2, r3, lsl #2]
 329:.\main.c      ****                 halfBitIndex++;
 945              		.loc 1 329 0
 946 011a 0C4B     		ldr	r3, .L58
 947 011c 1B68     		ldr	r3, [r3]
 948 011e 0133     		adds	r3, r3, #1
 949 0120 0A4A     		ldr	r2, .L58
 950 0122 1360     		str	r3, [r2]
 951              	.L55:
 330:.\main.c      ****             }
 331:.\main.c      ****         }
 332:.\main.c      **** 
 333:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 952              		.loc 1 333 0 discriminator 2
 953 0124 094B     		ldr	r3, .L58
 954 0126 1B68     		ldr	r3, [r3]
 955 0128 013B     		subs	r3, r3, #1
 956 012a 094A     		ldr	r2, .L58+4
 957 012c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 958 0130 87F83330 		strb	r3, [r7, #51]
 293:.\main.c      ****     {
 959              		.loc 1 293 0 discriminator 2
 960 0134 FB6A     		ldr	r3, [r7, #44]
 961 0136 013B     		subs	r3, r3, #1
 962 0138 FB62     		str	r3, [r7, #44]
 963              	.L51:
 293:.\main.c      ****     {
 964              		.loc 1 293 0 is_stmt 0 discriminator 1
 965 013a FB6A     		ldr	r3, [r7, #44]
 966 013c 002B     		cmp	r3, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 24


 967 013e 85DA     		bge	.L57
 334:.\main.c      ****     }//end for
 335:.\main.c      **** }//end hexToDiffMan function
 968              		.loc 1 335 0 is_stmt 1
 969 0140 3C37     		adds	r7, r7, #60
 970              		.cfi_def_cfa_offset 4
 971 0142 BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 0144 5DF8047B 		ldr	r7, [sp], #4
 975              		.cfi_restore 7
 976              		.cfi_def_cfa_offset 0
 977 0148 7047     		bx	lr
 978              	.L59:
 979 014a 00BF     		.align	2
 980              	.L58:
 981 014c 00000000 		.word	halfBitIndex
 982 0150 00000000 		.word	diffManEncodedData
 983              		.cfi_endproc
 984              	.LFE70:
 985              		.size	hexToDiffMan, .-hexToDiffMan
 986              		.section	.text.stringToDiffMan,"ax",%progbits
 987              		.align	2
 988              		.global	stringToDiffMan
 989              		.thumb
 990              		.thumb_func
 991              		.type	stringToDiffMan, %function
 992              	stringToDiffMan:
 993              	.LFB71:
 336:.\main.c      **** 
 337:.\main.c      **** /*
 338:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 339:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 340:.\main.c      **** */
 341:.\main.c      **** void stringToDiffMan(char *lineString, uint8 stringPosition){
 994              		.loc 1 341 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 16
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998 0000 80B5     		push	{r7, lr}
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 84B0     		sub	sp, sp, #16
 1003              		.cfi_def_cfa_offset 24
 1004 0004 00AF     		add	r7, sp, #0
 1005              		.cfi_def_cfa_register 7
 1006 0006 7860     		str	r0, [r7, #4]
 1007 0008 0B46     		mov	r3, r1
 1008 000a FB70     		strb	r3, [r7, #3]
 342:.\main.c      **** 
 343:.\main.c      ****     unsigned int i = 0;
 1009              		.loc 1 343 0
 1010 000c 0023     		movs	r3, #0
 1011 000e FB60     		str	r3, [r7, #12]
 344:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1012              		.loc 1 344 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 25


 1013 0010 0023     		movs	r3, #0
 1014 0012 FB60     		str	r3, [r7, #12]
 1015 0014 09E0     		b	.L61
 1016              	.L62:
 345:.\main.c      ****         asciiToDiffMan(lineString[i]);
 1017              		.loc 1 345 0 discriminator 3
 1018 0016 7A68     		ldr	r2, [r7, #4]
 1019 0018 FB68     		ldr	r3, [r7, #12]
 1020 001a 1344     		add	r3, r3, r2
 1021 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1022 001e 1846     		mov	r0, r3
 1023 0020 FFF7FEFF 		bl	asciiToDiffMan
 344:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1024              		.loc 1 344 0 discriminator 3
 1025 0024 FB68     		ldr	r3, [r7, #12]
 1026 0026 0133     		adds	r3, r3, #1
 1027 0028 FB60     		str	r3, [r7, #12]
 1028              	.L61:
 344:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1029              		.loc 1 344 0 is_stmt 0 discriminator 1
 1030 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1031 002c FB68     		ldr	r3, [r7, #12]
 1032 002e 9A42     		cmp	r2, r3
 1033 0030 F1D8     		bhi	.L62
 346:.\main.c      ****     }
 347:.\main.c      **** }
 1034              		.loc 1 347 0 is_stmt 1
 1035 0032 1037     		adds	r7, r7, #16
 1036              		.cfi_def_cfa_offset 8
 1037 0034 BD46     		mov	sp, r7
 1038              		.cfi_def_cfa_register 13
 1039              		@ sp needed
 1040 0036 80BD     		pop	{r7, pc}
 1041              		.cfi_endproc
 1042              	.LFE71:
 1043              		.size	stringToDiffMan, .-stringToDiffMan
 1044              		.section	.text.asciiToDiffMan,"ax",%progbits
 1045              		.align	2
 1046              		.global	asciiToDiffMan
 1047              		.thumb
 1048              		.thumb_func
 1049              		.type	asciiToDiffMan, %function
 1050              	asciiToDiffMan:
 1051              	.LFB72:
 348:.\main.c      **** 
 349:.\main.c      **** /*
 350:.\main.c      **** Helper method. Call only from stringToDiffMan.
 351:.\main.c      **** Converts a ascii char to a differental manchester line encoded version. 
 352:.\main.c      **** Will add leading 1, so only use for characters, not the header.
 353:.\main.c      **** */
 354:.\main.c      **** void asciiToDiffMan(char asciiChar)
 355:.\main.c      **** {
 1052              		.loc 1 355 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 104
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 26


 1057 0000 80B4     		push	{r7}
 1058              		.cfi_def_cfa_offset 4
 1059              		.cfi_offset 7, -4
 1060 0002 9BB0     		sub	sp, sp, #108
 1061              		.cfi_def_cfa_offset 112
 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 1064 0006 0346     		mov	r3, r0
 1065 0008 FB71     		strb	r3, [r7, #7]
 356:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1066              		.loc 1 356 0
 1067 000a 6C4B     		ldr	r3, .L75
 1068 000c 1B68     		ldr	r3, [r3]
 1069 000e 013B     		subs	r3, r3, #1
 1070 0010 6B4A     		ldr	r2, .L75+4
 1071 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1072 0016 87F86730 		strb	r3, [r7, #103]
 357:.\main.c      ****     //send starting 1 bit (encoded)
 358:.\main.c      ****     if(previousHalfBit == 1){
 1073              		.loc 1 358 0
 1074 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1075 001e 012B     		cmp	r3, #1
 1076 0020 16D1     		bne	.L64
 359:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1077              		.loc 1 359 0
 1078 0022 664B     		ldr	r3, .L75
 1079 0024 1B68     		ldr	r3, [r3]
 1080 0026 664A     		ldr	r2, .L75+4
 1081 0028 0121     		movs	r1, #1
 1082 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 360:.\main.c      ****         halfBitIndex++;
 1083              		.loc 1 360 0
 1084 002e 634B     		ldr	r3, .L75
 1085 0030 1B68     		ldr	r3, [r3]
 1086 0032 0133     		adds	r3, r3, #1
 1087 0034 614A     		ldr	r2, .L75
 1088 0036 1360     		str	r3, [r2]
 361:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1089              		.loc 1 361 0
 1090 0038 604B     		ldr	r3, .L75
 1091 003a 1B68     		ldr	r3, [r3]
 1092 003c 604A     		ldr	r2, .L75+4
 1093 003e 0021     		movs	r1, #0
 1094 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 362:.\main.c      ****         halfBitIndex++;
 1095              		.loc 1 362 0
 1096 0044 5D4B     		ldr	r3, .L75
 1097 0046 1B68     		ldr	r3, [r3]
 1098 0048 0133     		adds	r3, r3, #1
 1099 004a 5C4A     		ldr	r2, .L75
 1100 004c 1360     		str	r3, [r2]
 1101 004e 15E0     		b	.L65
 1102              	.L64:
 363:.\main.c      ****     }else{
 364:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1103              		.loc 1 364 0
 1104 0050 5A4B     		ldr	r3, .L75
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 27


 1105 0052 1B68     		ldr	r3, [r3]
 1106 0054 5A4A     		ldr	r2, .L75+4
 1107 0056 0021     		movs	r1, #0
 1108 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 365:.\main.c      ****         halfBitIndex++;
 1109              		.loc 1 365 0
 1110 005c 574B     		ldr	r3, .L75
 1111 005e 1B68     		ldr	r3, [r3]
 1112 0060 0133     		adds	r3, r3, #1
 1113 0062 564A     		ldr	r2, .L75
 1114 0064 1360     		str	r3, [r2]
 366:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1115              		.loc 1 366 0
 1116 0066 554B     		ldr	r3, .L75
 1117 0068 1B68     		ldr	r3, [r3]
 1118 006a 554A     		ldr	r2, .L75+4
 1119 006c 0121     		movs	r1, #1
 1120 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 367:.\main.c      ****         halfBitIndex++;
 1121              		.loc 1 367 0
 1122 0072 524B     		ldr	r3, .L75
 1123 0074 1B68     		ldr	r3, [r3]
 1124 0076 0133     		adds	r3, r3, #1
 1125 0078 504A     		ldr	r2, .L75
 1126 007a 1360     		str	r3, [r2]
 1127              	.L65:
 368:.\main.c      ****     }
 369:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1128              		.loc 1 369 0
 1129 007c 4F4B     		ldr	r3, .L75
 1130 007e 1B68     		ldr	r3, [r3]
 1131 0080 013B     		subs	r3, r3, #1
 1132 0082 4F4A     		ldr	r2, .L75+4
 1133 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1134 0088 87F86730 		strb	r3, [r7, #103]
 370:.\main.c      **** 
 371:.\main.c      **** 
 372:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 373:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 374:.\main.c      ****     int i;
 375:.\main.c      ****     for(i=0; asciiChar>0; i++)
 1135              		.loc 1 375 0
 1136 008c 0023     		movs	r3, #0
 1137 008e 3B66     		str	r3, [r7, #96]
 1138 0090 0FE0     		b	.L66
 1139              	.L67:
 376:.\main.c      ****     {
 377:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2;
 1140              		.loc 1 377 0 discriminator 3
 1141 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1142 0094 03F00102 		and	r2, r3, #1
 1143 0098 3B6E     		ldr	r3, [r7, #96]
 1144 009a 9B00     		lsls	r3, r3, #2
 1145 009c 07F16801 		add	r1, r7, #104
 1146 00a0 0B44     		add	r3, r3, r1
 1147 00a2 43F85C2C 		str	r2, [r3, #-92]
 378:.\main.c      ****         asciiChar=asciiChar/2;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 28


 1148              		.loc 1 378 0 discriminator 3
 1149 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1150 00a8 5B08     		lsrs	r3, r3, #1
 1151 00aa FB71     		strb	r3, [r7, #7]
 375:.\main.c      ****     {
 1152              		.loc 1 375 0 discriminator 3
 1153 00ac 3B6E     		ldr	r3, [r7, #96]
 1154 00ae 0133     		adds	r3, r3, #1
 1155 00b0 3B66     		str	r3, [r7, #96]
 1156              	.L66:
 375:.\main.c      ****     {
 1157              		.loc 1 375 0 is_stmt 0 discriminator 1
 1158 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1159 00b4 002B     		cmp	r3, #0
 1160 00b6 ECD1     		bne	.L67
 379:.\main.c      ****     }
 380:.\main.c      ****     
 381:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 382:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 383:.\main.c      ****     int j;
 384:.\main.c      ****     for(j=INDEX_OF_MSB_ASCII;j>=0;j--)
 1161              		.loc 1 384 0 is_stmt 1
 1162 00b8 0623     		movs	r3, #6
 1163 00ba FB65     		str	r3, [r7, #92]
 1164 00bc 76E0     		b	.L68
 1165              	.L74:
 385:.\main.c      ****     {
 386:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 1166              		.loc 1 386 0
 1167 00be FB6D     		ldr	r3, [r7, #92]
 1168 00c0 9B00     		lsls	r3, r3, #2
 1169 00c2 07F16802 		add	r2, r7, #104
 1170 00c6 1344     		add	r3, r3, r2
 1171 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 1172 00cc 012B     		cmp	r3, #1
 1173 00ce 31D1     		bne	.L69
 387:.\main.c      ****         {
 388:.\main.c      ****             //bit == 1
 389:.\main.c      ****             if(previousHalfBit == 1)
 1174              		.loc 1 389 0
 1175 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1176 00d4 012B     		cmp	r3, #1
 1177 00d6 16D1     		bne	.L70
 390:.\main.c      ****             {
 391:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1178              		.loc 1 391 0
 1179 00d8 384B     		ldr	r3, .L75
 1180 00da 1B68     		ldr	r3, [r3]
 1181 00dc 384A     		ldr	r2, .L75+4
 1182 00de 0121     		movs	r1, #1
 1183 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 392:.\main.c      ****                 halfBitIndex++;
 1184              		.loc 1 392 0
 1185 00e4 354B     		ldr	r3, .L75
 1186 00e6 1B68     		ldr	r3, [r3]
 1187 00e8 0133     		adds	r3, r3, #1
 1188 00ea 344A     		ldr	r2, .L75
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 29


 1189 00ec 1360     		str	r3, [r2]
 393:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1190              		.loc 1 393 0
 1191 00ee 334B     		ldr	r3, .L75
 1192 00f0 1B68     		ldr	r3, [r3]
 1193 00f2 334A     		ldr	r2, .L75+4
 1194 00f4 0021     		movs	r1, #0
 1195 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 394:.\main.c      ****                 halfBitIndex++;
 1196              		.loc 1 394 0
 1197 00fa 304B     		ldr	r3, .L75
 1198 00fc 1B68     		ldr	r3, [r3]
 1199 00fe 0133     		adds	r3, r3, #1
 1200 0100 2E4A     		ldr	r2, .L75
 1201 0102 1360     		str	r3, [r2]
 1202 0104 47E0     		b	.L72
 1203              	.L70:
 395:.\main.c      ****             }
 396:.\main.c      ****             else
 397:.\main.c      ****             {
 398:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1204              		.loc 1 398 0
 1205 0106 2D4B     		ldr	r3, .L75
 1206 0108 1B68     		ldr	r3, [r3]
 1207 010a 2D4A     		ldr	r2, .L75+4
 1208 010c 0021     		movs	r1, #0
 1209 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 399:.\main.c      ****                 halfBitIndex++;
 1210              		.loc 1 399 0
 1211 0112 2A4B     		ldr	r3, .L75
 1212 0114 1B68     		ldr	r3, [r3]
 1213 0116 0133     		adds	r3, r3, #1
 1214 0118 284A     		ldr	r2, .L75
 1215 011a 1360     		str	r3, [r2]
 400:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1216              		.loc 1 400 0
 1217 011c 274B     		ldr	r3, .L75
 1218 011e 1B68     		ldr	r3, [r3]
 1219 0120 274A     		ldr	r2, .L75+4
 1220 0122 0121     		movs	r1, #1
 1221 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 401:.\main.c      ****                 halfBitIndex++;
 1222              		.loc 1 401 0
 1223 0128 244B     		ldr	r3, .L75
 1224 012a 1B68     		ldr	r3, [r3]
 1225 012c 0133     		adds	r3, r3, #1
 1226 012e 234A     		ldr	r2, .L75
 1227 0130 1360     		str	r3, [r2]
 1228 0132 30E0     		b	.L72
 1229              	.L69:
 402:.\main.c      ****             }
 403:.\main.c      **** 
 404:.\main.c      ****         }
 405:.\main.c      ****         else
 406:.\main.c      ****         {
 407:.\main.c      ****             //bit == 0
 408:.\main.c      ****             if(previousHalfBit == 1)
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 30


 1230              		.loc 1 408 0
 1231 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1232 0138 012B     		cmp	r3, #1
 1233 013a 16D1     		bne	.L73
 409:.\main.c      ****             {
 410:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1234              		.loc 1 410 0
 1235 013c 1F4B     		ldr	r3, .L75
 1236 013e 1B68     		ldr	r3, [r3]
 1237 0140 1F4A     		ldr	r2, .L75+4
 1238 0142 0021     		movs	r1, #0
 1239 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 411:.\main.c      ****                 halfBitIndex++;
 1240              		.loc 1 411 0
 1241 0148 1C4B     		ldr	r3, .L75
 1242 014a 1B68     		ldr	r3, [r3]
 1243 014c 0133     		adds	r3, r3, #1
 1244 014e 1B4A     		ldr	r2, .L75
 1245 0150 1360     		str	r3, [r2]
 412:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1246              		.loc 1 412 0
 1247 0152 1A4B     		ldr	r3, .L75
 1248 0154 1B68     		ldr	r3, [r3]
 1249 0156 1A4A     		ldr	r2, .L75+4
 1250 0158 0121     		movs	r1, #1
 1251 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 413:.\main.c      ****                 halfBitIndex++;
 1252              		.loc 1 413 0
 1253 015e 174B     		ldr	r3, .L75
 1254 0160 1B68     		ldr	r3, [r3]
 1255 0162 0133     		adds	r3, r3, #1
 1256 0164 154A     		ldr	r2, .L75
 1257 0166 1360     		str	r3, [r2]
 1258 0168 15E0     		b	.L72
 1259              	.L73:
 414:.\main.c      ****             }
 415:.\main.c      ****             else
 416:.\main.c      ****             {
 417:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1260              		.loc 1 417 0
 1261 016a 144B     		ldr	r3, .L75
 1262 016c 1B68     		ldr	r3, [r3]
 1263 016e 144A     		ldr	r2, .L75+4
 1264 0170 0121     		movs	r1, #1
 1265 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 418:.\main.c      ****                 halfBitIndex++;
 1266              		.loc 1 418 0
 1267 0176 114B     		ldr	r3, .L75
 1268 0178 1B68     		ldr	r3, [r3]
 1269 017a 0133     		adds	r3, r3, #1
 1270 017c 0F4A     		ldr	r2, .L75
 1271 017e 1360     		str	r3, [r2]
 419:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1272              		.loc 1 419 0
 1273 0180 0E4B     		ldr	r3, .L75
 1274 0182 1B68     		ldr	r3, [r3]
 1275 0184 0E4A     		ldr	r2, .L75+4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 31


 1276 0186 0021     		movs	r1, #0
 1277 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 420:.\main.c      ****                 halfBitIndex++;
 1278              		.loc 1 420 0
 1279 018c 0B4B     		ldr	r3, .L75
 1280 018e 1B68     		ldr	r3, [r3]
 1281 0190 0133     		adds	r3, r3, #1
 1282 0192 0A4A     		ldr	r2, .L75
 1283 0194 1360     		str	r3, [r2]
 1284              	.L72:
 421:.\main.c      ****             }
 422:.\main.c      ****         }
 423:.\main.c      **** 
 424:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1285              		.loc 1 424 0 discriminator 2
 1286 0196 094B     		ldr	r3, .L75
 1287 0198 1B68     		ldr	r3, [r3]
 1288 019a 013B     		subs	r3, r3, #1
 1289 019c 084A     		ldr	r2, .L75+4
 1290 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1291 01a2 87F86730 		strb	r3, [r7, #103]
 384:.\main.c      ****     {
 1292              		.loc 1 384 0 discriminator 2
 1293 01a6 FB6D     		ldr	r3, [r7, #92]
 1294 01a8 013B     		subs	r3, r3, #1
 1295 01aa FB65     		str	r3, [r7, #92]
 1296              	.L68:
 384:.\main.c      ****     {
 1297              		.loc 1 384 0 is_stmt 0 discriminator 1
 1298 01ac FB6D     		ldr	r3, [r7, #92]
 1299 01ae 002B     		cmp	r3, #0
 1300 01b0 85DA     		bge	.L74
 425:.\main.c      ****     }//end for
 426:.\main.c      **** 
 427:.\main.c      **** }//end function
 1301              		.loc 1 427 0 is_stmt 1
 1302 01b2 6C37     		adds	r7, r7, #108
 1303              		.cfi_def_cfa_offset 4
 1304 01b4 BD46     		mov	sp, r7
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 01b6 5DF8047B 		ldr	r7, [sp], #4
 1308              		.cfi_restore 7
 1309              		.cfi_def_cfa_offset 0
 1310 01ba 7047     		bx	lr
 1311              	.L76:
 1312              		.align	2
 1313              	.L75:
 1314 01bc 00000000 		.word	halfBitIndex
 1315 01c0 00000000 		.word	diffManEncodedData
 1316              		.cfi_endproc
 1317              	.LFE72:
 1318              		.size	asciiToDiffMan, .-asciiToDiffMan
 1319              		.global	__aeabi_i2d
 1320              		.global	__aeabi_ddiv
 1321              		.global	__aeabi_dmul
 1322              		.global	__aeabi_d2iz
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 32


 1323              		.section	.text.transmitData,"ax",%progbits
 1324              		.align	2
 1325              		.global	transmitData
 1326              		.thumb
 1327              		.thumb_func
 1328              		.type	transmitData, %function
 1329              	transmitData:
 1330              	.LFB73:
 428:.\main.c      **** 
 429:.\main.c      **** /*
 430:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 431:.\main.c      **** Checks network state before transmitting.
 432:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 433:.\main.c      **** */
 434:.\main.c      **** void transmitData(){
 1331              		.loc 1 434 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 8
 1334              		@ frame_needed = 1, uses_anonymous_args = 0
 1335 0000 80B5     		push	{r7, lr}
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 7, -8
 1338              		.cfi_offset 14, -4
 1339 0002 82B0     		sub	sp, sp, #8
 1340              		.cfi_def_cfa_offset 16
 1341 0004 00AF     		add	r7, sp, #0
 1342              		.cfi_def_cfa_register 7
 435:.\main.c      ****     int i;
 436:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1343              		.loc 1 436 0
 1344 0006 0023     		movs	r3, #0
 1345 0008 7B60     		str	r3, [r7, #4]
 1346 000a 47E0     		b	.L78
 1347              	.L82:
 437:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 438:.\main.c      ****         //Else break out of transmition and wait random time
 439:.\main.c      ****         if(networkState != idle){
 1348              		.loc 1 439 0
 1349 000c 2B4B     		ldr	r3, .L84
 1350 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1351 0010 002B     		cmp	r3, #0
 1352 0012 2BD0     		beq	.L79
 440:.\main.c      ****             if(networkState == collision){
 1353              		.loc 1 440 0
 1354 0014 294B     		ldr	r3, .L84
 1355 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1356 0018 022B     		cmp	r3, #2
 1357 001a 27D1     		bne	.L79
 1358              	.LBB3:
 441:.\main.c      ****                 TX_pin_Write(1);
 1359              		.loc 1 441 0
 1360 001c 0120     		movs	r0, #1
 1361 001e FFF7FEFF 		bl	TX_pin_Write
 442:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1362              		.loc 1 442 0
 1363 0022 FFF7FEFF 		bl	getRandomNumber
 1364 0026 0346     		mov	r3, r0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 33


 1365 0028 1846     		mov	r0, r3
 1366 002a FFF7FEFF 		bl	__aeabi_i2d
 1367 002e 0246     		mov	r2, r0
 1368 0030 0B46     		mov	r3, r1
 1369 0032 1046     		mov	r0, r2
 1370 0034 1946     		mov	r1, r3
 1371 0036 4FF00002 		mov	r2, #0
 1372 003a 214B     		ldr	r3, .L84+4
 1373 003c FFF7FEFF 		bl	__aeabi_ddiv
 1374 0040 0246     		mov	r2, r0
 1375 0042 0B46     		mov	r3, r1
 1376 0044 1046     		mov	r0, r2
 1377 0046 1946     		mov	r1, r3
 1378 0048 4FF00002 		mov	r2, #0
 1379 004c 1D4B     		ldr	r3, .L84+8
 1380 004e FFF7FEFF 		bl	__aeabi_dmul
 1381 0052 0246     		mov	r2, r0
 1382 0054 0B46     		mov	r3, r1
 1383 0056 1046     		mov	r0, r2
 1384 0058 1946     		mov	r1, r3
 1385 005a FFF7FEFF 		bl	__aeabi_d2iz
 1386 005e 0346     		mov	r3, r0
 1387 0060 3B60     		str	r3, [r7]
 443:.\main.c      **** 
 444:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 445:.\main.c      ****                 CyDelay(value);
 1388              		.loc 1 445 0
 1389 0062 3B68     		ldr	r3, [r7]
 1390 0064 1846     		mov	r0, r3
 1391 0066 FFF7FEFF 		bl	CyDelay
 446:.\main.c      ****                 break;
 1392              		.loc 1 446 0
 1393 006a 1CE0     		b	.L80
 1394              	.L79:
 1395              	.LBE3:
 447:.\main.c      ****             }
 448:.\main.c      ****         }
 449:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1396              		.loc 1 449 0
 1397 006c 164A     		ldr	r2, .L84+12
 1398 006e 7B68     		ldr	r3, [r7, #4]
 1399 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1400 0074 DBB2     		uxtb	r3, r3
 1401 0076 1846     		mov	r0, r3
 1402 0078 FFF7FEFF 		bl	TX_pin_Write
 450:.\main.c      ****         Timer_Start();
 1403              		.loc 1 450 0
 1404 007c FFF7FEFF 		bl	Timer_Start
 451:.\main.c      ****         while(!timerExpired);
 1405              		.loc 1 451 0
 1406 0080 00BF     		nop
 1407              	.L81:
 1408              		.loc 1 451 0 is_stmt 0 discriminator 1
 1409 0082 124B     		ldr	r3, .L84+16
 1410 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1411 0086 83F00103 		eor	r3, r3, #1
 1412 008a DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 34


 1413 008c 002B     		cmp	r3, #0
 1414 008e F8D1     		bne	.L81
 452:.\main.c      ****         timerExpired = false;
 1415              		.loc 1 452 0 is_stmt 1 discriminator 2
 1416 0090 0E4B     		ldr	r3, .L84+16
 1417 0092 0022     		movs	r2, #0
 1418 0094 1A70     		strb	r2, [r3]
 436:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1419              		.loc 1 436 0 discriminator 2
 1420 0096 7B68     		ldr	r3, [r7, #4]
 1421 0098 0133     		adds	r3, r3, #1
 1422 009a 7B60     		str	r3, [r7, #4]
 1423              	.L78:
 436:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1424              		.loc 1 436 0 is_stmt 0 discriminator 1
 1425 009c 0C4B     		ldr	r3, .L84+20
 1426 009e 1B68     		ldr	r3, [r3]
 1427 00a0 7A68     		ldr	r2, [r7, #4]
 1428 00a2 9A42     		cmp	r2, r3
 1429 00a4 B2DB     		blt	.L82
 1430              	.L80:
 453:.\main.c      ****     }
 454:.\main.c      **** 
 455:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag
 456:.\main.c      ****     if(i == halfBitIndex){
 1431              		.loc 1 456 0 is_stmt 1
 1432 00a6 0A4B     		ldr	r3, .L84+20
 1433 00a8 1B68     		ldr	r3, [r3]
 1434 00aa 7A68     		ldr	r2, [r7, #4]
 1435 00ac 9A42     		cmp	r2, r3
 1436 00ae 02D1     		bne	.L77
 457:.\main.c      ****         dataTransmissionComplete = true;
 1437              		.loc 1 457 0
 1438 00b0 084B     		ldr	r3, .L84+24
 1439 00b2 0122     		movs	r2, #1
 1440 00b4 1A70     		strb	r2, [r3]
 1441              	.L77:
 458:.\main.c      ****     }
 459:.\main.c      **** }
 1442              		.loc 1 459 0
 1443 00b6 0837     		adds	r7, r7, #8
 1444              		.cfi_def_cfa_offset 8
 1445 00b8 BD46     		mov	sp, r7
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 00ba 80BD     		pop	{r7, pc}
 1449              	.L85:
 1450              		.align	2
 1451              	.L84:
 1452 00bc 00000000 		.word	networkState
 1453 00c0 00006040 		.word	1080033280
 1454 00c4 00008940 		.word	1082720256
 1455 00c8 00000000 		.word	diffManEncodedData
 1456 00cc 00000000 		.word	timerExpired
 1457 00d0 00000000 		.word	halfBitIndex
 1458 00d4 00000000 		.word	dataTransmissionComplete
 1459              		.cfi_endproc
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 35


 1460              	.LFE73:
 1461              		.size	transmitData, .-transmitData
 1462              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1463              		.align	2
 1464              		.global	setNetworkStateOnLEDs
 1465              		.thumb
 1466              		.thumb_func
 1467              		.type	setNetworkStateOnLEDs, %function
 1468              	setNetworkStateOnLEDs:
 1469              	.LFB74:
 460:.\main.c      **** 
 461:.\main.c      **** void setNetworkStateOnLEDs(){
 1470              		.loc 1 461 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474 0000 80B5     		push	{r7, lr}
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 7, -8
 1477              		.cfi_offset 14, -4
 1478 0002 00AF     		add	r7, sp, #0
 1479              		.cfi_def_cfa_register 7
 462:.\main.c      **** 	 switch(networkState){
 1480              		.loc 1 462 0
 1481 0004 134B     		ldr	r3, .L92
 1482 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1483 0008 012B     		cmp	r3, #1
 1484 000a 04D0     		beq	.L88
 1485 000c 022B     		cmp	r3, #2
 1486 000e 16D0     		beq	.L89
 1487 0010 002B     		cmp	r3, #0
 1488 0012 0AD0     		beq	.L90
 463:.\main.c      ****         case busy:
 464:.\main.c      ****         {
 465:.\main.c      ****             LED4_Write(1);
 466:.\main.c      ****             LED3_Write(0);
 467:.\main.c      ****             LED2_Write(0);
 468:.\main.c      ****             break;
 469:.\main.c      ****         }
 470:.\main.c      ****         case idle:
 471:.\main.c      ****         {
 472:.\main.c      ****             LED3_Write(1);
 473:.\main.c      ****             LED4_Write(0);
 474:.\main.c      ****             LED2_Write(0);
 475:.\main.c      ****             break;
 476:.\main.c      ****         }
 477:.\main.c      ****         case collision:
 478:.\main.c      ****         {
 479:.\main.c      ****             LED2_Write(1);
 480:.\main.c      ****             LED4_Write(0);
 481:.\main.c      ****             LED3_Write(0);
 482:.\main.c      ****             break;
 483:.\main.c      ****         }
 484:.\main.c      ****         default:
 485:.\main.c      ****         {
 486:.\main.c      ****            //error
 487:.\main.c      ****             break;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 36


 1489              		.loc 1 487 0
 1490 0014 1DE0     		b	.L86
 1491              	.L88:
 465:.\main.c      ****             LED3_Write(0);
 1492              		.loc 1 465 0
 1493 0016 0120     		movs	r0, #1
 1494 0018 FFF7FEFF 		bl	LED4_Write
 466:.\main.c      ****             LED2_Write(0);
 1495              		.loc 1 466 0
 1496 001c 0020     		movs	r0, #0
 1497 001e FFF7FEFF 		bl	LED3_Write
 467:.\main.c      ****             break;
 1498              		.loc 1 467 0
 1499 0022 0020     		movs	r0, #0
 1500 0024 FFF7FEFF 		bl	LED2_Write
 468:.\main.c      ****         }
 1501              		.loc 1 468 0
 1502 0028 13E0     		b	.L86
 1503              	.L90:
 472:.\main.c      ****             LED4_Write(0);
 1504              		.loc 1 472 0
 1505 002a 0120     		movs	r0, #1
 1506 002c FFF7FEFF 		bl	LED3_Write
 473:.\main.c      ****             LED2_Write(0);
 1507              		.loc 1 473 0
 1508 0030 0020     		movs	r0, #0
 1509 0032 FFF7FEFF 		bl	LED4_Write
 474:.\main.c      ****             break;
 1510              		.loc 1 474 0
 1511 0036 0020     		movs	r0, #0
 1512 0038 FFF7FEFF 		bl	LED2_Write
 475:.\main.c      ****         }
 1513              		.loc 1 475 0
 1514 003c 09E0     		b	.L86
 1515              	.L89:
 479:.\main.c      ****             LED4_Write(0);
 1516              		.loc 1 479 0
 1517 003e 0120     		movs	r0, #1
 1518 0040 FFF7FEFF 		bl	LED2_Write
 480:.\main.c      ****             LED3_Write(0);
 1519              		.loc 1 480 0
 1520 0044 0020     		movs	r0, #0
 1521 0046 FFF7FEFF 		bl	LED4_Write
 481:.\main.c      ****             break;
 1522              		.loc 1 481 0
 1523 004a 0020     		movs	r0, #0
 1524 004c FFF7FEFF 		bl	LED3_Write
 482:.\main.c      ****         }
 1525              		.loc 1 482 0
 1526 0050 00BF     		nop
 1527              	.L86:
 488:.\main.c      ****         }
 489:.\main.c      **** 	}
 490:.\main.c      **** }
 1528              		.loc 1 490 0
 1529 0052 80BD     		pop	{r7, pc}
 1530              	.L93:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 37


 1531              		.align	2
 1532              	.L92:
 1533 0054 00000000 		.word	networkState
 1534              		.cfi_endproc
 1535              	.LFE74:
 1536              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1537              		.section	.text.getRandomNumber,"ax",%progbits
 1538              		.align	2
 1539              		.global	getRandomNumber
 1540              		.thumb
 1541              		.thumb_func
 1542              		.type	getRandomNumber, %function
 1543              	getRandomNumber:
 1544              	.LFB75:
 491:.\main.c      **** 
 492:.\main.c      **** /*
 493:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 494:.\main.c      **** */
 495:.\main.c      **** int getRandomNumber()
 496:.\main.c      **** {
 1545              		.loc 1 496 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 16
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549 0000 80B5     		push	{r7, lr}
 1550              		.cfi_def_cfa_offset 8
 1551              		.cfi_offset 7, -8
 1552              		.cfi_offset 14, -4
 1553 0002 84B0     		sub	sp, sp, #16
 1554              		.cfi_def_cfa_offset 24
 1555 0004 00AF     		add	r7, sp, #0
 1556              		.cfi_def_cfa_register 7
 497:.\main.c      ****     const int MIN_N = 1;
 1557              		.loc 1 497 0
 1558 0006 0123     		movs	r3, #1
 1559 0008 FB60     		str	r3, [r7, #12]
 498:.\main.c      ****     const int MAX_N = 128;
 1560              		.loc 1 498 0
 1561 000a 8023     		movs	r3, #128
 1562 000c BB60     		str	r3, [r7, #8]
 499:.\main.c      **** 
 500:.\main.c      ****     int n;
 501:.\main.c      **** /*
 502:.\main.c      ****     Get first and second random numbers.
 503:.\main.c      ****     */
 504:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1563              		.loc 1 504 0
 1564 000e FFF7FEFF 		bl	rand
 1565 0012 0246     		mov	r2, r0
 1566 0014 B968     		ldr	r1, [r7, #8]
 1567 0016 FB68     		ldr	r3, [r7, #12]
 1568 0018 CB1A     		subs	r3, r1, r3
 1569 001a 0133     		adds	r3, r3, #1
 1570 001c 92FBF3F1 		sdiv	r1, r2, r3
 1571 0020 03FB01F3 		mul	r3, r3, r1
 1572 0024 D21A     		subs	r2, r2, r3
 1573 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 38


 1574 0028 1344     		add	r3, r3, r2
 1575 002a 7B60     		str	r3, [r7, #4]
 505:.\main.c      ****     return n;
 1576              		.loc 1 505 0
 1577 002c 7B68     		ldr	r3, [r7, #4]
 506:.\main.c      **** }
 1578              		.loc 1 506 0
 1579 002e 1846     		mov	r0, r3
 1580 0030 1037     		adds	r7, r7, #16
 1581              		.cfi_def_cfa_offset 8
 1582 0032 BD46     		mov	sp, r7
 1583              		.cfi_def_cfa_register 13
 1584              		@ sp needed
 1585 0034 80BD     		pop	{r7, pc}
 1586              		.cfi_endproc
 1587              	.LFE75:
 1588              		.size	getRandomNumber, .-getRandomNumber
 1589 0036 00BF     		.section	.text.diffManToHex,"ax",%progbits
 1590              		.align	2
 1591              		.global	diffManToHex
 1592              		.thumb
 1593              		.thumb_func
 1594              		.type	diffManToHex, %function
 1595              	diffManToHex:
 1596              	.LFB76:
 507:.\main.c      **** 
 508:.\main.c      **** /*
 509:.\main.c      **** Helper method.
 510:.\main.c      **** Convert differental manchester line encoded byte to hexadecimal value (which 
 511:.\main.c      **** includes header and ACSII chars)
 512:.\main.c      **** */
 513:.\main.c      **** void diffManToHex()
 514:.\main.c      **** {
 1597              		.loc 1 514 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 8
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 0000 80B4     		push	{r7}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 0002 83B0     		sub	sp, sp, #12
 1606              		.cfi_def_cfa_offset 16
 1607 0004 00AF     		add	r7, sp, #0
 1608              		.cfi_def_cfa_register 7
 515:.\main.c      ****     int i;
 516:.\main.c      ****     for(i = 0; i < LENGTH_OF_BYTE; i++){
 1609              		.loc 1 516 0
 1610 0006 0023     		movs	r3, #0
 1611 0008 7B60     		str	r3, [r7, #4]
 1612 000a 42E0     		b	.L97
 1613              	.L103:
 1614              	.LBB4:
 517:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1615              		.loc 1 517 0
 1616 000c 254B     		ldr	r3, .L104
 1617 000e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 39


 1618 0010 013B     		subs	r3, r3, #1
 1619 0012 254A     		ldr	r2, .L104+4
 1620 0014 D35C     		ldrb	r3, [r2, r3]
 1621 0016 FB70     		strb	r3, [r7, #3]
 518:.\main.c      ****         //send starting 1 bit (encoded)
 519:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1622              		.loc 1 519 0
 1623 0018 224B     		ldr	r3, .L104
 1624 001a 1B68     		ldr	r3, [r3]
 1625 001c 224A     		ldr	r2, .L104+4
 1626 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1627 0020 012B     		cmp	r3, #1
 1628 0022 17D1     		bne	.L98
 520:.\main.c      ****             //current half bit is 1
 521:.\main.c      ****             if(previousHalfBit == 1)
 1629              		.loc 1 521 0
 1630 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1631 0026 012B     		cmp	r3, #1
 1632 0028 0FD1     		bne	.L99
 522:.\main.c      ****             {
 523:.\main.c      ****                 receivedHexValue |= (1 << (7 - i));
 1633              		.loc 1 523 0
 1634 002a 7B68     		ldr	r3, [r7, #4]
 1635 002c C3F10703 		rsb	r3, r3, #7
 1636 0030 0122     		movs	r2, #1
 1637 0032 02FA03F3 		lsl	r3, r2, r3
 1638 0036 DAB2     		uxtb	r2, r3
 1639 0038 1C4B     		ldr	r3, .L104+8
 1640 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1641 003c DBB2     		uxtb	r3, r3
 1642 003e 1343     		orrs	r3, r3, r2
 1643 0040 DBB2     		uxtb	r3, r3
 1644 0042 DAB2     		uxtb	r2, r3
 1645 0044 194B     		ldr	r3, .L104+8
 1646 0046 1A70     		strb	r2, [r3]
 1647 0048 1BE0     		b	.L101
 1648              	.L99:
 524:.\main.c      ****             }
 525:.\main.c      ****             else
 526:.\main.c      ****             {
 527:.\main.c      ****                 receivedHexValue |= (0 << (7 - i));
 1649              		.loc 1 527 0
 1650 004a 184B     		ldr	r3, .L104+8
 1651 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1652 004e 174B     		ldr	r3, .L104+8
 1653 0050 1A70     		strb	r2, [r3]
 1654 0052 16E0     		b	.L101
 1655              	.L98:
 528:.\main.c      ****             }
 529:.\main.c      ****         }
 530:.\main.c      ****         else{
 531:.\main.c      ****             //current half bit is 0
 532:.\main.c      ****             if(previousHalfBit == 1)
 1656              		.loc 1 532 0
 1657 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1658 0056 012B     		cmp	r3, #1
 1659 0058 04D1     		bne	.L102
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 40


 533:.\main.c      ****             {
 534:.\main.c      ****                 receivedHexValue |= (0 << (7 - i));
 1660              		.loc 1 534 0
 1661 005a 144B     		ldr	r3, .L104+8
 1662 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1663 005e 134B     		ldr	r3, .L104+8
 1664 0060 1A70     		strb	r2, [r3]
 1665 0062 0EE0     		b	.L101
 1666              	.L102:
 535:.\main.c      ****             }
 536:.\main.c      ****             else
 537:.\main.c      ****             {
 538:.\main.c      ****                 receivedHexValue |= (1 << (7 - i));
 1667              		.loc 1 538 0
 1668 0064 7B68     		ldr	r3, [r7, #4]
 1669 0066 C3F10703 		rsb	r3, r3, #7
 1670 006a 0122     		movs	r2, #1
 1671 006c 02FA03F3 		lsl	r3, r2, r3
 1672 0070 DAB2     		uxtb	r2, r3
 1673 0072 0E4B     		ldr	r3, .L104+8
 1674 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1675 0076 DBB2     		uxtb	r3, r3
 1676 0078 1343     		orrs	r3, r3, r2
 1677 007a DBB2     		uxtb	r3, r3
 1678 007c DAB2     		uxtb	r2, r3
 1679 007e 0B4B     		ldr	r3, .L104+8
 1680 0080 1A70     		strb	r2, [r3]
 1681              	.L101:
 539:.\main.c      ****             }
 540:.\main.c      ****         }
 541:.\main.c      ****         receivedDataIndex += 2;
 1682              		.loc 1 541 0 discriminator 2
 1683 0082 084B     		ldr	r3, .L104
 1684 0084 1B68     		ldr	r3, [r3]
 1685 0086 0233     		adds	r3, r3, #2
 1686 0088 064A     		ldr	r2, .L104
 1687 008a 1360     		str	r3, [r2]
 1688              	.LBE4:
 516:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1689              		.loc 1 516 0 discriminator 2
 1690 008c 7B68     		ldr	r3, [r7, #4]
 1691 008e 0133     		adds	r3, r3, #1
 1692 0090 7B60     		str	r3, [r7, #4]
 1693              	.L97:
 516:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1694              		.loc 1 516 0 is_stmt 0 discriminator 1
 1695 0092 7B68     		ldr	r3, [r7, #4]
 1696 0094 072B     		cmp	r3, #7
 1697 0096 B9DD     		ble	.L103
 542:.\main.c      ****     }//end for loop
 543:.\main.c      **** }
 1698              		.loc 1 543 0 is_stmt 1
 1699 0098 0C37     		adds	r7, r7, #12
 1700              		.cfi_def_cfa_offset 4
 1701 009a BD46     		mov	sp, r7
 1702              		.cfi_def_cfa_register 13
 1703              		@ sp needed
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 41


 1704 009c 5DF8047B 		ldr	r7, [sp], #4
 1705              		.cfi_restore 7
 1706              		.cfi_def_cfa_offset 0
 1707 00a0 7047     		bx	lr
 1708              	.L105:
 1709 00a2 00BF     		.align	2
 1710              	.L104:
 1711 00a4 00000000 		.word	receivedDataIndex
 1712 00a8 00000000 		.word	diffManReceivedData
 1713 00ac 00000000 		.word	receivedHexValue
 1714              		.cfi_endproc
 1715              	.LFE76:
 1716              		.size	diffManToHex, .-diffManToHex
 1717              		.section	.text.printChar,"ax",%progbits
 1718              		.align	2
 1719              		.global	printChar
 1720              		.thumb
 1721              		.thumb_func
 1722              		.type	printChar, %function
 1723              	printChar:
 1724              	.LFB77:
 544:.\main.c      **** 
 545:.\main.c      **** //Prints char to LCD
 546:.\main.c      **** void printChar(){
 1725              		.loc 1 546 0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 1, uses_anonymous_args = 0
 1729 0000 80B5     		push	{r7, lr}
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 7, -8
 1732              		.cfi_offset 14, -4
 1733 0002 00AF     		add	r7, sp, #0
 1734              		.cfi_def_cfa_register 7
 547:.\main.c      ****     ///Remove leading 1 bit of char
 548:.\main.c      ****     receivedHexValue &= ASCII_CHAR_MASK; 
 1735              		.loc 1 548 0
 1736 0004 064B     		ldr	r3, .L107
 1737 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1738 0008 03F07F03 		and	r3, r3, #127
 1739 000c DAB2     		uxtb	r2, r3
 1740 000e 044B     		ldr	r3, .L107
 1741 0010 1A70     		strb	r2, [r3]
 549:.\main.c      ****     LCD_PutChar(receivedHexValue); 
 1742              		.loc 1 549 0
 1743 0012 034B     		ldr	r3, .L107
 1744 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 0016 1846     		mov	r0, r3
 1746 0018 FFF7FEFF 		bl	LCD_PutChar
 550:.\main.c      **** }
 1747              		.loc 1 550 0
 1748 001c 80BD     		pop	{r7, pc}
 1749              	.L108:
 1750 001e 00BF     		.align	2
 1751              	.L107:
 1752 0020 00000000 		.word	receivedHexValue
 1753              		.cfi_endproc
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 42


 1754              	.LFE77:
 1755              		.size	printChar, .-printChar
 1756              		.section	.text.headerCheck,"ax",%progbits
 1757              		.align	2
 1758              		.global	headerCheck
 1759              		.thumb
 1760              		.thumb_func
 1761              		.type	headerCheck, %function
 1762              	headerCheck:
 1763              	.LFB78:
 551:.\main.c      **** 
 552:.\main.c      **** /*
 553:.\main.c      **** Checks received header
 554:.\main.c      **** Header must contain the following 7 bytes:
 555:.\main.c      **** receivedHeaderBytes[0] = START_OF_HEADER -- Start of header, always 0x71
 556:.\main.c      **** receivedHeaderBytes[1] = VERSION_NUMBER -- Always 1
 557:.\main.c      **** receivedHeaderBytes[3] = Destination address of this device (SOURCE_ADDRESS 0 to 2) OR a value of 0
 558:.\main.c      ****                             This value can be 0 (which mean the recieve message goes to all nodes),
 559:.\main.c      ****                             or must be one of the 3 node addresses this deivce owns (SOURCE_ADDRESS
 560:.\main.c      ****                             See Table A.I.1 of CE4950 Interoperability Standards.
 561:.\main.c      **** 
 562:.\main.c      **** Note:
 563:.\main.c      **** receivedHeaderBytes[2] is the receive source address. Tells where messege is from.
 564:.\main.c      **** receivedHeaderBytes[4] is message length 
 565:.\main.c      **** receivedHeaderBytes[5] Tells that CRC in used, since optional, do not check
 566:.\main.c      **** receivedHeaderBytes[6] is HEADER_CRC, since CRC optional, do not check
 567:.\main.c      **** */
 568:.\main.c      **** bool headerCheck(uint8 *receivedHeaderBytes)
 569:.\main.c      **** {
 1764              		.loc 1 569 0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 16
 1767              		@ frame_needed = 1, uses_anonymous_args = 0
 1768              		@ link register save eliminated.
 1769 0000 80B4     		push	{r7}
 1770              		.cfi_def_cfa_offset 4
 1771              		.cfi_offset 7, -4
 1772 0002 85B0     		sub	sp, sp, #20
 1773              		.cfi_def_cfa_offset 24
 1774 0004 00AF     		add	r7, sp, #0
 1775              		.cfi_def_cfa_register 7
 1776 0006 7860     		str	r0, [r7, #4]
 570:.\main.c      ****     bool validHeader = false;
 1777              		.loc 1 570 0
 1778 0008 0023     		movs	r3, #0
 1779 000a FB73     		strb	r3, [r7, #15]
 571:.\main.c      ****     //Check START_OF_HEADER and VERSION_NUMBER
 572:.\main.c      **** 	if(receivedHeaderBytes[0]==START_OF_HEADER &&  receivedHeaderBytes[1]==VERSION_NUMBER)
 1780              		.loc 1 572 0
 1781 000c 7B68     		ldr	r3, [r7, #4]
 1782 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1783 0010 712B     		cmp	r3, #113
 1784 0012 20D1     		bne	.L110
 1785              		.loc 1 572 0 is_stmt 0 discriminator 1
 1786 0014 7B68     		ldr	r3, [r7, #4]
 1787 0016 0133     		adds	r3, r3, #1
 1788 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 43


 1789 001a 012B     		cmp	r3, #1
 1790 001c 1BD1     		bne	.L110
 573:.\main.c      ****     {
 574:.\main.c      ****         //If valid, check that the destination address of the received message is valid
 575:.\main.c      ****         if(receivedHeaderBytes[3]==0 || receivedHeaderBytes[3]==SOURCE_ADDRESS_0
 1791              		.loc 1 575 0 is_stmt 1
 1792 001e 7B68     		ldr	r3, [r7, #4]
 1793 0020 0333     		adds	r3, r3, #3
 1794 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1795 0024 002B     		cmp	r3, #0
 1796 0026 0ED0     		beq	.L111
 1797              		.loc 1 575 0 is_stmt 0 discriminator 1
 1798 0028 7B68     		ldr	r3, [r7, #4]
 1799 002a 0333     		adds	r3, r3, #3
 1800 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1801 002e 402B     		cmp	r3, #64
 1802 0030 09D0     		beq	.L111
 576:.\main.c      ****           || receivedHeaderBytes[3]==SOURCE_ADDRESS_1 || receivedHeaderBytes[3]==SOURCE_ADDRESS_2)
 1803              		.loc 1 576 0 is_stmt 1
 1804 0032 7B68     		ldr	r3, [r7, #4]
 1805 0034 0333     		adds	r3, r3, #3
 1806 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1807 0038 412B     		cmp	r3, #65
 1808 003a 04D0     		beq	.L111
 1809              		.loc 1 576 0 is_stmt 0 discriminator 1
 1810 003c 7B68     		ldr	r3, [r7, #4]
 1811 003e 0333     		adds	r3, r3, #3
 1812 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1813 0042 422B     		cmp	r3, #66
 1814 0044 07D1     		bne	.L110
 1815              	.L111:
 577:.\main.c      ****         {
 578:.\main.c      ****             rxMessageLength = receivedHeaderBytes[4]; //saves message length from header
 1816              		.loc 1 578 0 is_stmt 1
 1817 0046 7B68     		ldr	r3, [r7, #4]
 1818 0048 0433     		adds	r3, r3, #4
 1819 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1820 004c 1A46     		mov	r2, r3
 1821 004e 054B     		ldr	r3, .L113
 1822 0050 1A60     		str	r2, [r3]
 579:.\main.c      **** 			validHeader = true;
 1823              		.loc 1 579 0
 1824 0052 0123     		movs	r3, #1
 1825 0054 FB73     		strb	r3, [r7, #15]
 1826              	.L110:
 580:.\main.c      **** 		}
 581:.\main.c      **** 	}
 582:.\main.c      **** 	return validHeader;
 1827              		.loc 1 582 0
 1828 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 583:.\main.c      **** }
 1829              		.loc 1 583 0
 1830 0058 1846     		mov	r0, r3
 1831 005a 1437     		adds	r7, r7, #20
 1832              		.cfi_def_cfa_offset 4
 1833 005c BD46     		mov	sp, r7
 1834              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 44


 1835              		@ sp needed
 1836 005e 5DF8047B 		ldr	r7, [sp], #4
 1837              		.cfi_restore 7
 1838              		.cfi_def_cfa_offset 0
 1839 0062 7047     		bx	lr
 1840              	.L114:
 1841              		.align	2
 1842              	.L113:
 1843 0064 00000000 		.word	rxMessageLength
 1844              		.cfi_endproc
 1845              	.LFE78:
 1846              		.size	headerCheck, .-headerCheck
 1847              		.text
 1848              	.Letext0:
 1849              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1850              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1851              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1852              		.file 5 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1853              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1854              		.section	.debug_info,"",%progbits
 1855              	.Ldebug_info0:
 1856 0000 EA050000 		.4byte	0x5ea
 1857 0004 0400     		.2byte	0x4
 1858 0006 00000000 		.4byte	.Ldebug_abbrev0
 1859 000a 04       		.byte	0x4
 1860 000b 01       		.uleb128 0x1
 1861 000c 7B010000 		.4byte	.LASF74
 1862 0010 01       		.byte	0x1
 1863 0011 D0030000 		.4byte	.LASF75
 1864 0015 F9000000 		.4byte	.LASF76
 1865 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1866 001d 00000000 		.4byte	0
 1867 0021 00000000 		.4byte	.Ldebug_line0
 1868 0025 02       		.uleb128 0x2
 1869 0026 01       		.byte	0x1
 1870 0027 06       		.byte	0x6
 1871 0028 A4020000 		.4byte	.LASF0
 1872 002c 02       		.uleb128 0x2
 1873 002d 01       		.byte	0x1
 1874 002e 08       		.byte	0x8
 1875 002f 49020000 		.4byte	.LASF1
 1876 0033 02       		.uleb128 0x2
 1877 0034 02       		.byte	0x2
 1878 0035 05       		.byte	0x5
 1879 0036 89000000 		.4byte	.LASF2
 1880 003a 02       		.uleb128 0x2
 1881 003b 02       		.byte	0x2
 1882 003c 07       		.byte	0x7
 1883 003d 2F030000 		.4byte	.LASF3
 1884 0041 03       		.uleb128 0x3
 1885 0042 D9030000 		.4byte	.LASF9
 1886 0046 02       		.byte	0x2
 1887 0047 3F       		.byte	0x3f
 1888 0048 4C000000 		.4byte	0x4c
 1889 004c 02       		.uleb128 0x2
 1890 004d 04       		.byte	0x4
 1891 004e 05       		.byte	0x5
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 45


 1892 004f 0F030000 		.4byte	.LASF4
 1893 0053 02       		.uleb128 0x2
 1894 0054 04       		.byte	0x4
 1895 0055 07       		.byte	0x7
 1896 0056 E3020000 		.4byte	.LASF5
 1897 005a 02       		.uleb128 0x2
 1898 005b 08       		.byte	0x8
 1899 005c 05       		.byte	0x5
 1900 005d 3F010000 		.4byte	.LASF6
 1901 0061 02       		.uleb128 0x2
 1902 0062 08       		.byte	0x8
 1903 0063 07       		.byte	0x7
 1904 0064 4D010000 		.4byte	.LASF7
 1905 0068 04       		.uleb128 0x4
 1906 0069 04       		.byte	0x4
 1907 006a 05       		.byte	0x5
 1908 006b 696E7400 		.ascii	"int\000"
 1909 006f 02       		.uleb128 0x2
 1910 0070 04       		.byte	0x4
 1911 0071 07       		.byte	0x7
 1912 0072 C4020000 		.4byte	.LASF8
 1913 0076 03       		.uleb128 0x3
 1914 0077 27030000 		.4byte	.LASF10
 1915 007b 03       		.byte	0x3
 1916 007c 2C       		.byte	0x2c
 1917 007d 41000000 		.4byte	0x41
 1918 0081 03       		.uleb128 0x3
 1919 0082 D8000000 		.4byte	.LASF11
 1920 0086 04       		.byte	0x4
 1921 0087 C2       		.byte	0xc2
 1922 0088 2C000000 		.4byte	0x2c
 1923 008c 02       		.uleb128 0x2
 1924 008d 04       		.byte	0x4
 1925 008e 04       		.byte	0x4
 1926 008f 30010000 		.4byte	.LASF12
 1927 0093 02       		.uleb128 0x2
 1928 0094 08       		.byte	0x8
 1929 0095 04       		.byte	0x4
 1930 0096 80030000 		.4byte	.LASF13
 1931 009a 02       		.uleb128 0x2
 1932 009b 01       		.byte	0x1
 1933 009c 08       		.byte	0x8
 1934 009d 0A030000 		.4byte	.LASF14
 1935 00a1 05       		.uleb128 0x5
 1936 00a2 73030000 		.4byte	.LASF15
 1937 00a6 04       		.byte	0x4
 1938 00a7 6C01     		.2byte	0x16c
 1939 00a9 AD000000 		.4byte	0xad
 1940 00ad 06       		.uleb128 0x6
 1941 00ae 81000000 		.4byte	0x81
 1942 00b2 02       		.uleb128 0x2
 1943 00b3 04       		.byte	0x4
 1944 00b4 07       		.byte	0x7
 1945 00b5 49000000 		.4byte	.LASF16
 1946 00b9 07       		.uleb128 0x7
 1947 00ba 04       		.byte	0x4
 1948 00bb 9A000000 		.4byte	0x9a
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 46


 1949 00bf 03       		.uleb128 0x3
 1950 00c0 A3000000 		.4byte	.LASF17
 1951 00c4 05       		.byte	0x5
 1952 00c5 7A       		.byte	0x7a
 1953 00c6 4C000000 		.4byte	0x4c
 1954 00ca 08       		.uleb128 0x8
 1955 00cb 33000000 		.4byte	.LASF21
 1956 00cf 01       		.byte	0x1
 1957 00d0 01       		.byte	0x1
 1958 00d1 2A       		.byte	0x2a
 1959 00d2 E9000000 		.4byte	0xe9
 1960 00d6 09       		.uleb128 0x9
 1961 00d7 BF020000 		.4byte	.LASF18
 1962 00db 00       		.sleb128 0
 1963 00dc 09       		.uleb128 0x9
 1964 00dd 50030000 		.4byte	.LASF19
 1965 00e1 01       		.sleb128 1
 1966 00e2 09       		.uleb128 0x9
 1967 00e3 99000000 		.4byte	.LASF20
 1968 00e7 02       		.sleb128 2
 1969 00e8 00       		.byte	0
 1970 00e9 0A       		.uleb128 0xa
 1971 00ea 63726300 		.ascii	"crc\000"
 1972 00ee 01       		.byte	0x1
 1973 00ef 01       		.byte	0x1
 1974 00f0 2B       		.byte	0x2b
 1975 00f1 0E010000 		.4byte	0x10e
 1976 00f5 09       		.uleb128 0x9
 1977 00f6 84000000 		.4byte	.LASF22
 1978 00fa 00       		.sleb128 0
 1979 00fb 09       		.uleb128 0x9
 1980 00fc 00000000 		.4byte	.LASF23
 1981 0100 01       		.sleb128 1
 1982 0101 09       		.uleb128 0x9
 1983 0102 78030000 		.4byte	.LASF24
 1984 0106 02       		.sleb128 2
 1985 0107 09       		.uleb128 0x9
 1986 0108 F5020000 		.4byte	.LASF25
 1987 010c 03       		.sleb128 3
 1988 010d 00       		.byte	0
 1989 010e 0B       		.uleb128 0xb
 1990 010f 20000000 		.4byte	.LASF26
 1991 0113 01       		.byte	0x1
 1992 0114 2F       		.byte	0x2f
 1993 0115 00000000 		.4byte	.LFB63
 1994 0119 28000000 		.4byte	.LFE63-.LFB63
 1995 011d 01       		.uleb128 0x1
 1996 011e 9C       		.byte	0x9c
 1997 011f 0B       		.uleb128 0xb
 1998 0120 E9000000 		.4byte	.LASF27
 1999 0124 01       		.byte	0x1
 2000 0125 39       		.byte	0x39
 2001 0126 00000000 		.4byte	.LFB64
 2002 012a 58000000 		.4byte	.LFE64-.LFB64
 2003 012e 01       		.uleb128 0x1
 2004 012f 9C       		.byte	0x9c
 2005 0130 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 47


 2006 0131 28040000 		.4byte	.LASF28
 2007 0135 01       		.byte	0x1
 2008 0136 4A       		.byte	0x4a
 2009 0137 00000000 		.4byte	.LFB65
 2010 013b 1C000000 		.4byte	.LFE65-.LFB65
 2011 013f 01       		.uleb128 0x1
 2012 0140 9C       		.byte	0x9c
 2013 0141 0C       		.uleb128 0xc
 2014 0142 AE030000 		.4byte	.LASF29
 2015 0146 01       		.byte	0x1
 2016 0147 51       		.byte	0x51
 2017 0148 00000000 		.4byte	.LFB66
 2018 014c 38000000 		.4byte	.LFE66-.LFB66
 2019 0150 01       		.uleb128 0x1
 2020 0151 9C       		.byte	0x9c
 2021 0152 0D       		.uleb128 0xd
 2022 0153 65000000 		.4byte	.LASF37
 2023 0157 01       		.byte	0x1
 2024 0158 58       		.byte	0x58
 2025 0159 68000000 		.4byte	0x68
 2026 015d 00000000 		.4byte	.LFB67
 2027 0161 AC020000 		.4byte	.LFE67-.LFB67
 2028 0165 01       		.uleb128 0x1
 2029 0166 9C       		.byte	0x9c
 2030 0167 E7010000 		.4byte	0x1e7
 2031 016b 0E       		.uleb128 0xe
 2032 016c 727800   		.ascii	"rx\000"
 2033 016f 01       		.byte	0x1
 2034 0170 5A       		.byte	0x5a
 2035 0171 9A000000 		.4byte	0x9a
 2036 0175 02       		.uleb128 0x2
 2037 0176 91       		.byte	0x91
 2038 0177 6F       		.sleb128 -17
 2039 0178 0F       		.uleb128 0xf
 2040 0179 DE000000 		.4byte	.LASF30
 2041 017d 01       		.byte	0x1
 2042 017e 5B       		.byte	0x5b
 2043 017f E7010000 		.4byte	0x1e7
 2044 0183 03       		.uleb128 0x3
 2045 0184 91       		.byte	0x91
 2046 0185 807F     		.sleb128 -128
 2047 0187 0F       		.uleb128 0xf
 2048 0188 14000000 		.4byte	.LASF31
 2049 018c 01       		.byte	0x1
 2050 018d 5C       		.byte	0x5c
 2051 018e F7010000 		.4byte	0x1f7
 2052 0192 03       		.uleb128 0x3
 2053 0193 91       		.byte	0x91
 2054 0194 F87E     		.sleb128 -136
 2055 0196 0F       		.uleb128 0xf
 2056 0197 18030000 		.4byte	.LASF32
 2057 019b 01       		.byte	0x1
 2058 019c 5D       		.byte	0x5d
 2059 019d 81000000 		.4byte	0x81
 2060 01a1 02       		.uleb128 0x2
 2061 01a2 91       		.byte	0x91
 2062 01a3 77       		.sleb128 -9
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 48


 2063 01a4 0F       		.uleb128 0xf
 2064 01a5 42030000 		.4byte	.LASF33
 2065 01a9 01       		.byte	0x1
 2066 01aa 68       		.byte	0x68
 2067 01ab BF000000 		.4byte	0xbf
 2068 01af 03       		.uleb128 0x3
 2069 01b0 91       		.byte	0x91
 2070 01b1 F47E     		.sleb128 -140
 2071 01b3 10       		.uleb128 0x10
 2072 01b4 B4000000 		.4byte	.LBB2
 2073 01b8 7C000000 		.4byte	.LBE2-.LBB2
 2074 01bc 0F       		.uleb128 0xf
 2075 01bd B7000000 		.4byte	.LASF34
 2076 01c1 01       		.byte	0x1
 2077 01c2 9D       		.byte	0x9d
 2078 01c3 07020000 		.4byte	0x207
 2079 01c7 03       		.uleb128 0x3
 2080 01c8 91       		.byte	0x91
 2081 01c9 EC7E     		.sleb128 -148
 2082 01cb 0E       		.uleb128 0xe
 2083 01cc 6900     		.ascii	"i\000"
 2084 01ce 01       		.byte	0x1
 2085 01cf 9F       		.byte	0x9f
 2086 01d0 68000000 		.4byte	0x68
 2087 01d4 02       		.uleb128 0x2
 2088 01d5 91       		.byte	0x91
 2089 01d6 70       		.sleb128 -16
 2090 01d7 0F       		.uleb128 0xf
 2091 01d8 87030000 		.4byte	.LASF35
 2092 01dc 01       		.byte	0x1
 2093 01dd A7       		.byte	0xa7
 2094 01de 17020000 		.4byte	0x217
 2095 01e2 02       		.uleb128 0x2
 2096 01e3 91       		.byte	0x91
 2097 01e4 6E       		.sleb128 -18
 2098 01e5 00       		.byte	0
 2099 01e6 00       		.byte	0
 2100 01e7 11       		.uleb128 0x11
 2101 01e8 9A000000 		.4byte	0x9a
 2102 01ec F7010000 		.4byte	0x1f7
 2103 01f0 12       		.uleb128 0x12
 2104 01f1 B2000000 		.4byte	0xb2
 2105 01f5 6B       		.byte	0x6b
 2106 01f6 00       		.byte	0
 2107 01f7 11       		.uleb128 0x11
 2108 01f8 81000000 		.4byte	0x81
 2109 01fc 07020000 		.4byte	0x207
 2110 0200 12       		.uleb128 0x12
 2111 0201 B2000000 		.4byte	0xb2
 2112 0205 07       		.byte	0x7
 2113 0206 00       		.byte	0
 2114 0207 11       		.uleb128 0x11
 2115 0208 81000000 		.4byte	0x81
 2116 020c 17020000 		.4byte	0x217
 2117 0210 12       		.uleb128 0x12
 2118 0211 B2000000 		.4byte	0xb2
 2119 0215 06       		.byte	0x6
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 49


 2120 0216 00       		.byte	0
 2121 0217 02       		.uleb128 0x2
 2122 0218 01       		.byte	0x1
 2123 0219 02       		.byte	0x2
 2124 021a 4A030000 		.4byte	.LASF36
 2125 021e 13       		.uleb128 0x13
 2126 021f 8C020000 		.4byte	.LASF48
 2127 0223 01       		.byte	0x1
 2128 0224 0001     		.2byte	0x100
 2129 0226 00000000 		.4byte	.LFB68
 2130 022a 48000000 		.4byte	.LFE68-.LFB68
 2131 022e 01       		.uleb128 0x1
 2132 022f 9C       		.byte	0x9c
 2133 0230 14       		.uleb128 0x14
 2134 0231 1F020000 		.4byte	.LASF38
 2135 0235 01       		.byte	0x1
 2136 0236 0B01     		.2byte	0x10b
 2137 0238 00000000 		.4byte	.LFB69
 2138 023c 32000000 		.4byte	.LFE69-.LFB69
 2139 0240 01       		.uleb128 0x1
 2140 0241 9C       		.byte	0x9c
 2141 0242 63020000 		.4byte	0x263
 2142 0246 15       		.uleb128 0x15
 2143 0247 14000000 		.4byte	.LASF31
 2144 024b 01       		.byte	0x1
 2145 024c 0B01     		.2byte	0x10b
 2146 024e 63020000 		.4byte	0x263
 2147 0252 02       		.uleb128 0x2
 2148 0253 91       		.byte	0x91
 2149 0254 6C       		.sleb128 -20
 2150 0255 16       		.uleb128 0x16
 2151 0256 6900     		.ascii	"i\000"
 2152 0258 01       		.byte	0x1
 2153 0259 0D01     		.2byte	0x10d
 2154 025b 6F000000 		.4byte	0x6f
 2155 025f 02       		.uleb128 0x2
 2156 0260 91       		.byte	0x91
 2157 0261 74       		.sleb128 -12
 2158 0262 00       		.byte	0
 2159 0263 07       		.uleb128 0x7
 2160 0264 04       		.byte	0x4
 2161 0265 81000000 		.4byte	0x81
 2162 0269 17       		.uleb128 0x17
 2163 026a CB000000 		.4byte	.LASF39
 2164 026e 01       		.byte	0x1
 2165 026f 1801     		.2byte	0x118
 2166 0271 00000000 		.4byte	.LFB70
 2167 0275 54010000 		.4byte	.LFE70-.LFB70
 2168 0279 01       		.uleb128 0x1
 2169 027a 9C       		.byte	0x9c
 2170 027b C7020000 		.4byte	0x2c7
 2171 027f 15       		.uleb128 0x15
 2172 0280 36010000 		.4byte	.LASF40
 2173 0284 01       		.byte	0x1
 2174 0285 1801     		.2byte	0x118
 2175 0287 81000000 		.4byte	0x81
 2176 028b 02       		.uleb128 0x2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 50


 2177 028c 91       		.byte	0x91
 2178 028d 47       		.sleb128 -57
 2179 028e 18       		.uleb128 0x18
 2180 028f 52040000 		.4byte	.LASF41
 2181 0293 01       		.byte	0x1
 2182 0294 1901     		.2byte	0x119
 2183 0296 C7020000 		.4byte	0x2c7
 2184 029a 02       		.uleb128 0x2
 2185 029b 91       		.byte	0x91
 2186 029c 4C       		.sleb128 -52
 2187 029d 16       		.uleb128 0x16
 2188 029e 6900     		.ascii	"i\000"
 2189 02a0 01       		.byte	0x1
 2190 02a1 1C01     		.2byte	0x11c
 2191 02a3 68000000 		.4byte	0x68
 2192 02a7 02       		.uleb128 0x2
 2193 02a8 91       		.byte	0x91
 2194 02a9 74       		.sleb128 -12
 2195 02aa 18       		.uleb128 0x18
 2196 02ab 42040000 		.4byte	.LASF42
 2197 02af 01       		.byte	0x1
 2198 02b0 2301     		.2byte	0x123
 2199 02b2 81000000 		.4byte	0x81
 2200 02b6 02       		.uleb128 0x2
 2201 02b7 91       		.byte	0x91
 2202 02b8 73       		.sleb128 -13
 2203 02b9 16       		.uleb128 0x16
 2204 02ba 6A00     		.ascii	"j\000"
 2205 02bc 01       		.byte	0x1
 2206 02bd 2401     		.2byte	0x124
 2207 02bf 68000000 		.4byte	0x68
 2208 02c3 02       		.uleb128 0x2
 2209 02c4 91       		.byte	0x91
 2210 02c5 6C       		.sleb128 -20
 2211 02c6 00       		.byte	0
 2212 02c7 11       		.uleb128 0x11
 2213 02c8 6F000000 		.4byte	0x6f
 2214 02cc D7020000 		.4byte	0x2d7
 2215 02d0 12       		.uleb128 0x12
 2216 02d1 B2000000 		.4byte	0xb2
 2217 02d5 07       		.byte	0x7
 2218 02d6 00       		.byte	0
 2219 02d7 14       		.uleb128 0x14
 2220 02d8 39020000 		.4byte	.LASF43
 2221 02dc 01       		.byte	0x1
 2222 02dd 5501     		.2byte	0x155
 2223 02df 00000000 		.4byte	.LFB71
 2224 02e3 38000000 		.4byte	.LFE71-.LFB71
 2225 02e7 01       		.uleb128 0x1
 2226 02e8 9C       		.byte	0x9c
 2227 02e9 19030000 		.4byte	0x319
 2228 02ed 15       		.uleb128 0x15
 2229 02ee DE000000 		.4byte	.LASF30
 2230 02f2 01       		.byte	0x1
 2231 02f3 5501     		.2byte	0x155
 2232 02f5 B9000000 		.4byte	0xb9
 2233 02f9 02       		.uleb128 0x2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 51


 2234 02fa 91       		.byte	0x91
 2235 02fb 6C       		.sleb128 -20
 2236 02fc 15       		.uleb128 0x15
 2237 02fd 18030000 		.4byte	.LASF32
 2238 0301 01       		.byte	0x1
 2239 0302 5501     		.2byte	0x155
 2240 0304 81000000 		.4byte	0x81
 2241 0308 02       		.uleb128 0x2
 2242 0309 91       		.byte	0x91
 2243 030a 6B       		.sleb128 -21
 2244 030b 16       		.uleb128 0x16
 2245 030c 6900     		.ascii	"i\000"
 2246 030e 01       		.byte	0x1
 2247 030f 5701     		.2byte	0x157
 2248 0311 6F000000 		.4byte	0x6f
 2249 0315 02       		.uleb128 0x2
 2250 0316 91       		.byte	0x91
 2251 0317 74       		.sleb128 -12
 2252 0318 00       		.byte	0
 2253 0319 17       		.uleb128 0x17
 2254 031a B0020000 		.4byte	.LASF44
 2255 031e 01       		.byte	0x1
 2256 031f 6201     		.2byte	0x162
 2257 0321 00000000 		.4byte	.LFB72
 2258 0325 C4010000 		.4byte	.LFE72-.LFB72
 2259 0329 01       		.uleb128 0x1
 2260 032a 9C       		.byte	0x9c
 2261 032b 79030000 		.4byte	0x379
 2262 032f 15       		.uleb128 0x15
 2263 0330 00030000 		.4byte	.LASF45
 2264 0334 01       		.byte	0x1
 2265 0335 6201     		.2byte	0x162
 2266 0337 9A000000 		.4byte	0x9a
 2267 033b 03       		.uleb128 0x3
 2268 033c 91       		.byte	0x91
 2269 033d 977F     		.sleb128 -105
 2270 033f 18       		.uleb128 0x18
 2271 0340 42040000 		.4byte	.LASF42
 2272 0344 01       		.byte	0x1
 2273 0345 6401     		.2byte	0x164
 2274 0347 81000000 		.4byte	0x81
 2275 034b 02       		.uleb128 0x2
 2276 034c 91       		.byte	0x91
 2277 034d 77       		.sleb128 -9
 2278 034e 18       		.uleb128 0x18
 2279 034f BE030000 		.4byte	.LASF46
 2280 0353 01       		.byte	0x1
 2281 0354 7501     		.2byte	0x175
 2282 0356 79030000 		.4byte	0x379
 2283 035a 03       		.uleb128 0x3
 2284 035b 91       		.byte	0x91
 2285 035c 9C7F     		.sleb128 -100
 2286 035e 16       		.uleb128 0x16
 2287 035f 6900     		.ascii	"i\000"
 2288 0361 01       		.byte	0x1
 2289 0362 7601     		.2byte	0x176
 2290 0364 68000000 		.4byte	0x68
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 52


 2291 0368 02       		.uleb128 0x2
 2292 0369 91       		.byte	0x91
 2293 036a 70       		.sleb128 -16
 2294 036b 16       		.uleb128 0x16
 2295 036c 6A00     		.ascii	"j\000"
 2296 036e 01       		.byte	0x1
 2297 036f 7F01     		.2byte	0x17f
 2298 0371 68000000 		.4byte	0x68
 2299 0375 02       		.uleb128 0x2
 2300 0376 91       		.byte	0x91
 2301 0377 6C       		.sleb128 -20
 2302 0378 00       		.byte	0
 2303 0379 11       		.uleb128 0x11
 2304 037a 6F000000 		.4byte	0x6f
 2305 037e 89030000 		.4byte	0x389
 2306 0382 12       		.uleb128 0x12
 2307 0383 B2000000 		.4byte	0xb2
 2308 0387 13       		.byte	0x13
 2309 0388 00       		.byte	0
 2310 0389 19       		.uleb128 0x19
 2311 038a 07000000 		.4byte	.LASF53
 2312 038e 01       		.byte	0x1
 2313 038f B201     		.2byte	0x1b2
 2314 0391 00000000 		.4byte	.LFB73
 2315 0395 D8000000 		.4byte	.LFE73-.LFB73
 2316 0399 01       		.uleb128 0x1
 2317 039a 9C       		.byte	0x9c
 2318 039b C6030000 		.4byte	0x3c6
 2319 039f 16       		.uleb128 0x16
 2320 03a0 6900     		.ascii	"i\000"
 2321 03a2 01       		.byte	0x1
 2322 03a3 B301     		.2byte	0x1b3
 2323 03a5 68000000 		.4byte	0x68
 2324 03a9 02       		.uleb128 0x2
 2325 03aa 91       		.byte	0x91
 2326 03ab 74       		.sleb128 -12
 2327 03ac 10       		.uleb128 0x10
 2328 03ad 1C000000 		.4byte	.LBB3
 2329 03b1 50000000 		.4byte	.LBE3-.LBB3
 2330 03b5 18       		.uleb128 0x18
 2331 03b6 93000000 		.4byte	.LASF47
 2332 03ba 01       		.byte	0x1
 2333 03bb BA01     		.2byte	0x1ba
 2334 03bd 68000000 		.4byte	0x68
 2335 03c1 02       		.uleb128 0x2
 2336 03c2 91       		.byte	0x91
 2337 03c3 70       		.sleb128 -16
 2338 03c4 00       		.byte	0
 2339 03c5 00       		.byte	0
 2340 03c6 1A       		.uleb128 0x1a
 2341 03c7 09020000 		.4byte	.LASF49
 2342 03cb 01       		.byte	0x1
 2343 03cc CD01     		.2byte	0x1cd
 2344 03ce 00000000 		.4byte	.LFB74
 2345 03d2 58000000 		.4byte	.LFE74-.LFB74
 2346 03d6 01       		.uleb128 0x1
 2347 03d7 9C       		.byte	0x9c
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 53


 2348 03d8 1B       		.uleb128 0x1b
 2349 03d9 39000000 		.4byte	.LASF50
 2350 03dd 01       		.byte	0x1
 2351 03de EF01     		.2byte	0x1ef
 2352 03e0 68000000 		.4byte	0x68
 2353 03e4 00000000 		.4byte	.LFB75
 2354 03e8 36000000 		.4byte	.LFE75-.LFB75
 2355 03ec 01       		.uleb128 0x1
 2356 03ed 9C       		.byte	0x9c
 2357 03ee 1E040000 		.4byte	0x41e
 2358 03f2 18       		.uleb128 0x18
 2359 03f3 FA020000 		.4byte	.LASF51
 2360 03f7 01       		.byte	0x1
 2361 03f8 F101     		.2byte	0x1f1
 2362 03fa 1E040000 		.4byte	0x41e
 2363 03fe 02       		.uleb128 0x2
 2364 03ff 91       		.byte	0x91
 2365 0400 74       		.sleb128 -12
 2366 0401 18       		.uleb128 0x18
 2367 0402 FC030000 		.4byte	.LASF52
 2368 0406 01       		.byte	0x1
 2369 0407 F201     		.2byte	0x1f2
 2370 0409 1E040000 		.4byte	0x41e
 2371 040d 02       		.uleb128 0x2
 2372 040e 91       		.byte	0x91
 2373 040f 70       		.sleb128 -16
 2374 0410 16       		.uleb128 0x16
 2375 0411 6E00     		.ascii	"n\000"
 2376 0413 01       		.byte	0x1
 2377 0414 F401     		.2byte	0x1f4
 2378 0416 68000000 		.4byte	0x68
 2379 041a 02       		.uleb128 0x2
 2380 041b 91       		.byte	0x91
 2381 041c 6C       		.sleb128 -20
 2382 041d 00       		.byte	0
 2383 041e 1C       		.uleb128 0x1c
 2384 041f 68000000 		.4byte	0x68
 2385 0423 1D       		.uleb128 0x1d
 2386 0424 02040000 		.4byte	.LASF54
 2387 0428 01       		.byte	0x1
 2388 0429 0102     		.2byte	0x201
 2389 042b 00000000 		.4byte	.LFB76
 2390 042f B0000000 		.4byte	.LFE76-.LFB76
 2391 0433 01       		.uleb128 0x1
 2392 0434 9C       		.byte	0x9c
 2393 0435 60040000 		.4byte	0x460
 2394 0439 16       		.uleb128 0x16
 2395 043a 6900     		.ascii	"i\000"
 2396 043c 01       		.byte	0x1
 2397 043d 0302     		.2byte	0x203
 2398 043f 68000000 		.4byte	0x68
 2399 0443 02       		.uleb128 0x2
 2400 0444 91       		.byte	0x91
 2401 0445 74       		.sleb128 -12
 2402 0446 10       		.uleb128 0x10
 2403 0447 0C000000 		.4byte	.LBB4
 2404 044b 80000000 		.4byte	.LBE4-.LBB4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 54


 2405 044f 18       		.uleb128 0x18
 2406 0450 42040000 		.4byte	.LASF42
 2407 0454 01       		.byte	0x1
 2408 0455 0502     		.2byte	0x205
 2409 0457 81000000 		.4byte	0x81
 2410 045b 02       		.uleb128 0x2
 2411 045c 91       		.byte	0x91
 2412 045d 73       		.sleb128 -13
 2413 045e 00       		.byte	0
 2414 045f 00       		.byte	0
 2415 0460 1A       		.uleb128 0x1a
 2416 0461 2F020000 		.4byte	.LASF55
 2417 0465 01       		.byte	0x1
 2418 0466 2202     		.2byte	0x222
 2419 0468 00000000 		.4byte	.LFB77
 2420 046c 24000000 		.4byte	.LFE77-.LFB77
 2421 0470 01       		.uleb128 0x1
 2422 0471 9C       		.byte	0x9c
 2423 0472 1E       		.uleb128 0x1e
 2424 0473 55030000 		.4byte	.LASF77
 2425 0477 01       		.byte	0x1
 2426 0478 3802     		.2byte	0x238
 2427 047a 17020000 		.4byte	0x217
 2428 047e 00000000 		.4byte	.LFB78
 2429 0482 68000000 		.4byte	.LFE78-.LFB78
 2430 0486 01       		.uleb128 0x1
 2431 0487 9C       		.byte	0x9c
 2432 0488 AB040000 		.4byte	0x4ab
 2433 048c 15       		.uleb128 0x15
 2434 048d B7000000 		.4byte	.LASF34
 2435 0491 01       		.byte	0x1
 2436 0492 3802     		.2byte	0x238
 2437 0494 63020000 		.4byte	0x263
 2438 0498 02       		.uleb128 0x2
 2439 0499 91       		.byte	0x91
 2440 049a 6C       		.sleb128 -20
 2441 049b 18       		.uleb128 0x18
 2442 049c F0030000 		.4byte	.LASF56
 2443 04a0 01       		.byte	0x1
 2444 04a1 3A02     		.2byte	0x23a
 2445 04a3 17020000 		.4byte	0x217
 2446 04a7 02       		.uleb128 0x2
 2447 04a8 91       		.byte	0x91
 2448 04a9 77       		.sleb128 -9
 2449 04aa 00       		.byte	0
 2450 04ab 1F       		.uleb128 0x1f
 2451 04ac 35040000 		.4byte	.LASF57
 2452 04b0 06       		.byte	0x6
 2453 04b1 2A06     		.2byte	0x62a
 2454 04b3 B7040000 		.4byte	0x4b7
 2455 04b7 06       		.uleb128 0x6
 2456 04b8 76000000 		.4byte	0x76
 2457 04bc 11       		.uleb128 0x11
 2458 04bd 68000000 		.4byte	0x68
 2459 04c1 CD040000 		.4byte	0x4cd
 2460 04c5 20       		.uleb128 0x20
 2461 04c6 B2000000 		.4byte	0xb2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 55


 2462 04ca 5F03     		.2byte	0x35f
 2463 04cc 00       		.byte	0
 2464 04cd 21       		.uleb128 0x21
 2465 04ce 52000000 		.4byte	.LASF58
 2466 04d2 01       		.byte	0x1
 2467 04d3 24       		.byte	0x24
 2468 04d4 BC040000 		.4byte	0x4bc
 2469 04d8 05       		.uleb128 0x5
 2470 04d9 03       		.byte	0x3
 2471 04da 00000000 		.4byte	diffManEncodedData
 2472 04de 11       		.uleb128 0x11
 2473 04df 81000000 		.4byte	0x81
 2474 04e3 EE040000 		.4byte	0x4ee
 2475 04e7 12       		.uleb128 0x12
 2476 04e8 B2000000 		.4byte	0xb2
 2477 04ec 6B       		.byte	0x6b
 2478 04ed 00       		.byte	0
 2479 04ee 21       		.uleb128 0x21
 2480 04ef 93030000 		.4byte	.LASF59
 2481 04f3 01       		.byte	0x1
 2482 04f4 25       		.byte	0x25
 2483 04f5 DE040000 		.4byte	0x4de
 2484 04f9 05       		.uleb128 0x5
 2485 04fa 03       		.byte	0x3
 2486 04fb 00000000 		.4byte	diffManReceivedData
 2487 04ff 21       		.uleb128 0x21
 2488 0500 A7030000 		.4byte	.LASF60
 2489 0504 01       		.byte	0x1
 2490 0505 26       		.byte	0x26
 2491 0506 E7010000 		.4byte	0x1e7
 2492 050a 05       		.uleb128 0x5
 2493 050b 03       		.byte	0x3
 2494 050c 00000000 		.4byte	rxChar
 2495 0510 21       		.uleb128 0x21
 2496 0511 D1020000 		.4byte	.LASF61
 2497 0515 01       		.byte	0x1
 2498 0516 27       		.byte	0x27
 2499 0517 68000000 		.4byte	0x68
 2500 051b 05       		.uleb128 0x5
 2501 051c 03       		.byte	0x3
 2502 051d 00000000 		.4byte	receivedDataIndex
 2503 0521 21       		.uleb128 0x21
 2504 0522 61030000 		.4byte	.LASF62
 2505 0526 01       		.byte	0x1
 2506 0527 27       		.byte	0x27
 2507 0528 68000000 		.4byte	0x68
 2508 052c 05       		.uleb128 0x5
 2509 052d 03       		.byte	0x3
 2510 052e 00000000 		.4byte	receivedDataCount
 2511 0532 21       		.uleb128 0x21
 2512 0533 E3030000 		.4byte	.LASF63
 2513 0537 01       		.byte	0x1
 2514 0538 28       		.byte	0x28
 2515 0539 68000000 		.4byte	0x68
 2516 053d 05       		.uleb128 0x5
 2517 053e 03       		.byte	0x3
 2518 053f 00000000 		.4byte	halfBitIndex
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 56


 2519 0543 21       		.uleb128 0x21
 2520 0544 57020000 		.4byte	.LASF64
 2521 0548 01       		.byte	0x1
 2522 0549 28       		.byte	0x28
 2523 054a 68000000 		.4byte	0x68
 2524 054e 05       		.uleb128 0x5
 2525 054f 03       		.byte	0x3
 2526 0550 00000000 		.4byte	currentDataPos
 2527 0554 21       		.uleb128 0x21
 2528 0555 66020000 		.4byte	.LASF65
 2529 0559 01       		.byte	0x1
 2530 055a 28       		.byte	0x28
 2531 055b 68000000 		.4byte	0x68
 2532 055f 05       		.uleb128 0x5
 2533 0560 03       		.byte	0x3
 2534 0561 00000000 		.4byte	currentRXCharPosition
 2535 0565 21       		.uleb128 0x21
 2536 0566 7C020000 		.4byte	.LASF66
 2537 056a 01       		.byte	0x1
 2538 056b 28       		.byte	0x28
 2539 056c 68000000 		.4byte	0x68
 2540 0570 05       		.uleb128 0x5
 2541 0571 03       		.byte	0x3
 2542 0572 00000000 		.4byte	rxMessageLength
 2543 0576 21       		.uleb128 0x21
 2544 0577 64010000 		.4byte	.LASF67
 2545 057b 01       		.byte	0x1
 2546 057c 28       		.byte	0x28
 2547 057d 68000000 		.4byte	0x68
 2548 0581 05       		.uleb128 0x5
 2549 0582 03       		.byte	0x3
 2550 0583 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2551 0587 21       		.uleb128 0x21
 2552 0588 63040000 		.4byte	.LASF68
 2553 058c 01       		.byte	0x1
 2554 058d 29       		.byte	0x29
 2555 058e 17020000 		.4byte	0x217
 2556 0592 05       		.uleb128 0x5
 2557 0593 03       		.byte	0x3
 2558 0594 00000000 		.4byte	timerExpired
 2559 0598 21       		.uleb128 0x21
 2560 0599 0F040000 		.4byte	.LASF69
 2561 059d 01       		.byte	0x1
 2562 059e 29       		.byte	0x29
 2563 059f 17020000 		.4byte	0x217
 2564 05a3 05       		.uleb128 0x5
 2565 05a4 03       		.byte	0x3
 2566 05a5 00000000 		.4byte	dataTransmissionComplete
 2567 05a9 21       		.uleb128 0x21
 2568 05aa 70040000 		.4byte	.LASF70
 2569 05ae 01       		.byte	0x1
 2570 05af 29       		.byte	0x29
 2571 05b0 17020000 		.4byte	0x217
 2572 05b4 05       		.uleb128 0x5
 2573 05b5 03       		.byte	0x3
 2574 05b6 00000000 		.4byte	powerOnEdge
 2575 05ba 21       		.uleb128 0x21
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 57


 2576 05bb AA000000 		.4byte	.LASF71
 2577 05bf 01       		.byte	0x1
 2578 05c0 2A       		.byte	0x2a
 2579 05c1 CA000000 		.4byte	0xca
 2580 05c5 05       		.uleb128 0x5
 2581 05c6 03       		.byte	0x3
 2582 05c7 00000000 		.4byte	networkState
 2583 05cb 21       		.uleb128 0x21
 2584 05cc 7B000000 		.4byte	.LASF72
 2585 05d0 01       		.byte	0x1
 2586 05d1 2B       		.byte	0x2b
 2587 05d2 E9000000 		.4byte	0xe9
 2588 05d6 05       		.uleb128 0x5
 2589 05d7 03       		.byte	0x3
 2590 05d8 00000000 		.4byte	crcState
 2591 05dc 21       		.uleb128 0x21
 2592 05dd 6A000000 		.4byte	.LASF73
 2593 05e1 01       		.byte	0x1
 2594 05e2 2D       		.byte	0x2d
 2595 05e3 9A000000 		.4byte	0x9a
 2596 05e7 05       		.uleb128 0x5
 2597 05e8 03       		.byte	0x3
 2598 05e9 00000000 		.4byte	receivedHexValue
 2599 05ed 00       		.byte	0
 2600              		.section	.debug_abbrev,"",%progbits
 2601              	.Ldebug_abbrev0:
 2602 0000 01       		.uleb128 0x1
 2603 0001 11       		.uleb128 0x11
 2604 0002 01       		.byte	0x1
 2605 0003 25       		.uleb128 0x25
 2606 0004 0E       		.uleb128 0xe
 2607 0005 13       		.uleb128 0x13
 2608 0006 0B       		.uleb128 0xb
 2609 0007 03       		.uleb128 0x3
 2610 0008 0E       		.uleb128 0xe
 2611 0009 1B       		.uleb128 0x1b
 2612 000a 0E       		.uleb128 0xe
 2613 000b 55       		.uleb128 0x55
 2614 000c 17       		.uleb128 0x17
 2615 000d 11       		.uleb128 0x11
 2616 000e 01       		.uleb128 0x1
 2617 000f 10       		.uleb128 0x10
 2618 0010 17       		.uleb128 0x17
 2619 0011 00       		.byte	0
 2620 0012 00       		.byte	0
 2621 0013 02       		.uleb128 0x2
 2622 0014 24       		.uleb128 0x24
 2623 0015 00       		.byte	0
 2624 0016 0B       		.uleb128 0xb
 2625 0017 0B       		.uleb128 0xb
 2626 0018 3E       		.uleb128 0x3e
 2627 0019 0B       		.uleb128 0xb
 2628 001a 03       		.uleb128 0x3
 2629 001b 0E       		.uleb128 0xe
 2630 001c 00       		.byte	0
 2631 001d 00       		.byte	0
 2632 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 58


 2633 001f 16       		.uleb128 0x16
 2634 0020 00       		.byte	0
 2635 0021 03       		.uleb128 0x3
 2636 0022 0E       		.uleb128 0xe
 2637 0023 3A       		.uleb128 0x3a
 2638 0024 0B       		.uleb128 0xb
 2639 0025 3B       		.uleb128 0x3b
 2640 0026 0B       		.uleb128 0xb
 2641 0027 49       		.uleb128 0x49
 2642 0028 13       		.uleb128 0x13
 2643 0029 00       		.byte	0
 2644 002a 00       		.byte	0
 2645 002b 04       		.uleb128 0x4
 2646 002c 24       		.uleb128 0x24
 2647 002d 00       		.byte	0
 2648 002e 0B       		.uleb128 0xb
 2649 002f 0B       		.uleb128 0xb
 2650 0030 3E       		.uleb128 0x3e
 2651 0031 0B       		.uleb128 0xb
 2652 0032 03       		.uleb128 0x3
 2653 0033 08       		.uleb128 0x8
 2654 0034 00       		.byte	0
 2655 0035 00       		.byte	0
 2656 0036 05       		.uleb128 0x5
 2657 0037 16       		.uleb128 0x16
 2658 0038 00       		.byte	0
 2659 0039 03       		.uleb128 0x3
 2660 003a 0E       		.uleb128 0xe
 2661 003b 3A       		.uleb128 0x3a
 2662 003c 0B       		.uleb128 0xb
 2663 003d 3B       		.uleb128 0x3b
 2664 003e 05       		.uleb128 0x5
 2665 003f 49       		.uleb128 0x49
 2666 0040 13       		.uleb128 0x13
 2667 0041 00       		.byte	0
 2668 0042 00       		.byte	0
 2669 0043 06       		.uleb128 0x6
 2670 0044 35       		.uleb128 0x35
 2671 0045 00       		.byte	0
 2672 0046 49       		.uleb128 0x49
 2673 0047 13       		.uleb128 0x13
 2674 0048 00       		.byte	0
 2675 0049 00       		.byte	0
 2676 004a 07       		.uleb128 0x7
 2677 004b 0F       		.uleb128 0xf
 2678 004c 00       		.byte	0
 2679 004d 0B       		.uleb128 0xb
 2680 004e 0B       		.uleb128 0xb
 2681 004f 49       		.uleb128 0x49
 2682 0050 13       		.uleb128 0x13
 2683 0051 00       		.byte	0
 2684 0052 00       		.byte	0
 2685 0053 08       		.uleb128 0x8
 2686 0054 04       		.uleb128 0x4
 2687 0055 01       		.byte	0x1
 2688 0056 03       		.uleb128 0x3
 2689 0057 0E       		.uleb128 0xe
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 59


 2690 0058 0B       		.uleb128 0xb
 2691 0059 0B       		.uleb128 0xb
 2692 005a 3A       		.uleb128 0x3a
 2693 005b 0B       		.uleb128 0xb
 2694 005c 3B       		.uleb128 0x3b
 2695 005d 0B       		.uleb128 0xb
 2696 005e 01       		.uleb128 0x1
 2697 005f 13       		.uleb128 0x13
 2698 0060 00       		.byte	0
 2699 0061 00       		.byte	0
 2700 0062 09       		.uleb128 0x9
 2701 0063 28       		.uleb128 0x28
 2702 0064 00       		.byte	0
 2703 0065 03       		.uleb128 0x3
 2704 0066 0E       		.uleb128 0xe
 2705 0067 1C       		.uleb128 0x1c
 2706 0068 0D       		.uleb128 0xd
 2707 0069 00       		.byte	0
 2708 006a 00       		.byte	0
 2709 006b 0A       		.uleb128 0xa
 2710 006c 04       		.uleb128 0x4
 2711 006d 01       		.byte	0x1
 2712 006e 03       		.uleb128 0x3
 2713 006f 08       		.uleb128 0x8
 2714 0070 0B       		.uleb128 0xb
 2715 0071 0B       		.uleb128 0xb
 2716 0072 3A       		.uleb128 0x3a
 2717 0073 0B       		.uleb128 0xb
 2718 0074 3B       		.uleb128 0x3b
 2719 0075 0B       		.uleb128 0xb
 2720 0076 01       		.uleb128 0x1
 2721 0077 13       		.uleb128 0x13
 2722 0078 00       		.byte	0
 2723 0079 00       		.byte	0
 2724 007a 0B       		.uleb128 0xb
 2725 007b 2E       		.uleb128 0x2e
 2726 007c 00       		.byte	0
 2727 007d 3F       		.uleb128 0x3f
 2728 007e 19       		.uleb128 0x19
 2729 007f 03       		.uleb128 0x3
 2730 0080 0E       		.uleb128 0xe
 2731 0081 3A       		.uleb128 0x3a
 2732 0082 0B       		.uleb128 0xb
 2733 0083 3B       		.uleb128 0x3b
 2734 0084 0B       		.uleb128 0xb
 2735 0085 27       		.uleb128 0x27
 2736 0086 19       		.uleb128 0x19
 2737 0087 11       		.uleb128 0x11
 2738 0088 01       		.uleb128 0x1
 2739 0089 12       		.uleb128 0x12
 2740 008a 06       		.uleb128 0x6
 2741 008b 40       		.uleb128 0x40
 2742 008c 18       		.uleb128 0x18
 2743 008d 9642     		.uleb128 0x2116
 2744 008f 19       		.uleb128 0x19
 2745 0090 00       		.byte	0
 2746 0091 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 60


 2747 0092 0C       		.uleb128 0xc
 2748 0093 2E       		.uleb128 0x2e
 2749 0094 00       		.byte	0
 2750 0095 3F       		.uleb128 0x3f
 2751 0096 19       		.uleb128 0x19
 2752 0097 03       		.uleb128 0x3
 2753 0098 0E       		.uleb128 0xe
 2754 0099 3A       		.uleb128 0x3a
 2755 009a 0B       		.uleb128 0xb
 2756 009b 3B       		.uleb128 0x3b
 2757 009c 0B       		.uleb128 0xb
 2758 009d 27       		.uleb128 0x27
 2759 009e 19       		.uleb128 0x19
 2760 009f 11       		.uleb128 0x11
 2761 00a0 01       		.uleb128 0x1
 2762 00a1 12       		.uleb128 0x12
 2763 00a2 06       		.uleb128 0x6
 2764 00a3 40       		.uleb128 0x40
 2765 00a4 18       		.uleb128 0x18
 2766 00a5 9742     		.uleb128 0x2117
 2767 00a7 19       		.uleb128 0x19
 2768 00a8 00       		.byte	0
 2769 00a9 00       		.byte	0
 2770 00aa 0D       		.uleb128 0xd
 2771 00ab 2E       		.uleb128 0x2e
 2772 00ac 01       		.byte	0x1
 2773 00ad 3F       		.uleb128 0x3f
 2774 00ae 19       		.uleb128 0x19
 2775 00af 03       		.uleb128 0x3
 2776 00b0 0E       		.uleb128 0xe
 2777 00b1 3A       		.uleb128 0x3a
 2778 00b2 0B       		.uleb128 0xb
 2779 00b3 3B       		.uleb128 0x3b
 2780 00b4 0B       		.uleb128 0xb
 2781 00b5 49       		.uleb128 0x49
 2782 00b6 13       		.uleb128 0x13
 2783 00b7 11       		.uleb128 0x11
 2784 00b8 01       		.uleb128 0x1
 2785 00b9 12       		.uleb128 0x12
 2786 00ba 06       		.uleb128 0x6
 2787 00bb 40       		.uleb128 0x40
 2788 00bc 18       		.uleb128 0x18
 2789 00bd 9642     		.uleb128 0x2116
 2790 00bf 19       		.uleb128 0x19
 2791 00c0 01       		.uleb128 0x1
 2792 00c1 13       		.uleb128 0x13
 2793 00c2 00       		.byte	0
 2794 00c3 00       		.byte	0
 2795 00c4 0E       		.uleb128 0xe
 2796 00c5 34       		.uleb128 0x34
 2797 00c6 00       		.byte	0
 2798 00c7 03       		.uleb128 0x3
 2799 00c8 08       		.uleb128 0x8
 2800 00c9 3A       		.uleb128 0x3a
 2801 00ca 0B       		.uleb128 0xb
 2802 00cb 3B       		.uleb128 0x3b
 2803 00cc 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 61


 2804 00cd 49       		.uleb128 0x49
 2805 00ce 13       		.uleb128 0x13
 2806 00cf 02       		.uleb128 0x2
 2807 00d0 18       		.uleb128 0x18
 2808 00d1 00       		.byte	0
 2809 00d2 00       		.byte	0
 2810 00d3 0F       		.uleb128 0xf
 2811 00d4 34       		.uleb128 0x34
 2812 00d5 00       		.byte	0
 2813 00d6 03       		.uleb128 0x3
 2814 00d7 0E       		.uleb128 0xe
 2815 00d8 3A       		.uleb128 0x3a
 2816 00d9 0B       		.uleb128 0xb
 2817 00da 3B       		.uleb128 0x3b
 2818 00db 0B       		.uleb128 0xb
 2819 00dc 49       		.uleb128 0x49
 2820 00dd 13       		.uleb128 0x13
 2821 00de 02       		.uleb128 0x2
 2822 00df 18       		.uleb128 0x18
 2823 00e0 00       		.byte	0
 2824 00e1 00       		.byte	0
 2825 00e2 10       		.uleb128 0x10
 2826 00e3 0B       		.uleb128 0xb
 2827 00e4 01       		.byte	0x1
 2828 00e5 11       		.uleb128 0x11
 2829 00e6 01       		.uleb128 0x1
 2830 00e7 12       		.uleb128 0x12
 2831 00e8 06       		.uleb128 0x6
 2832 00e9 00       		.byte	0
 2833 00ea 00       		.byte	0
 2834 00eb 11       		.uleb128 0x11
 2835 00ec 01       		.uleb128 0x1
 2836 00ed 01       		.byte	0x1
 2837 00ee 49       		.uleb128 0x49
 2838 00ef 13       		.uleb128 0x13
 2839 00f0 01       		.uleb128 0x1
 2840 00f1 13       		.uleb128 0x13
 2841 00f2 00       		.byte	0
 2842 00f3 00       		.byte	0
 2843 00f4 12       		.uleb128 0x12
 2844 00f5 21       		.uleb128 0x21
 2845 00f6 00       		.byte	0
 2846 00f7 49       		.uleb128 0x49
 2847 00f8 13       		.uleb128 0x13
 2848 00f9 2F       		.uleb128 0x2f
 2849 00fa 0B       		.uleb128 0xb
 2850 00fb 00       		.byte	0
 2851 00fc 00       		.byte	0
 2852 00fd 13       		.uleb128 0x13
 2853 00fe 2E       		.uleb128 0x2e
 2854 00ff 00       		.byte	0
 2855 0100 3F       		.uleb128 0x3f
 2856 0101 19       		.uleb128 0x19
 2857 0102 03       		.uleb128 0x3
 2858 0103 0E       		.uleb128 0xe
 2859 0104 3A       		.uleb128 0x3a
 2860 0105 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 62


 2861 0106 3B       		.uleb128 0x3b
 2862 0107 05       		.uleb128 0x5
 2863 0108 11       		.uleb128 0x11
 2864 0109 01       		.uleb128 0x1
 2865 010a 12       		.uleb128 0x12
 2866 010b 06       		.uleb128 0x6
 2867 010c 40       		.uleb128 0x40
 2868 010d 18       		.uleb128 0x18
 2869 010e 9742     		.uleb128 0x2117
 2870 0110 19       		.uleb128 0x19
 2871 0111 00       		.byte	0
 2872 0112 00       		.byte	0
 2873 0113 14       		.uleb128 0x14
 2874 0114 2E       		.uleb128 0x2e
 2875 0115 01       		.byte	0x1
 2876 0116 3F       		.uleb128 0x3f
 2877 0117 19       		.uleb128 0x19
 2878 0118 03       		.uleb128 0x3
 2879 0119 0E       		.uleb128 0xe
 2880 011a 3A       		.uleb128 0x3a
 2881 011b 0B       		.uleb128 0xb
 2882 011c 3B       		.uleb128 0x3b
 2883 011d 05       		.uleb128 0x5
 2884 011e 27       		.uleb128 0x27
 2885 011f 19       		.uleb128 0x19
 2886 0120 11       		.uleb128 0x11
 2887 0121 01       		.uleb128 0x1
 2888 0122 12       		.uleb128 0x12
 2889 0123 06       		.uleb128 0x6
 2890 0124 40       		.uleb128 0x40
 2891 0125 18       		.uleb128 0x18
 2892 0126 9642     		.uleb128 0x2116
 2893 0128 19       		.uleb128 0x19
 2894 0129 01       		.uleb128 0x1
 2895 012a 13       		.uleb128 0x13
 2896 012b 00       		.byte	0
 2897 012c 00       		.byte	0
 2898 012d 15       		.uleb128 0x15
 2899 012e 05       		.uleb128 0x5
 2900 012f 00       		.byte	0
 2901 0130 03       		.uleb128 0x3
 2902 0131 0E       		.uleb128 0xe
 2903 0132 3A       		.uleb128 0x3a
 2904 0133 0B       		.uleb128 0xb
 2905 0134 3B       		.uleb128 0x3b
 2906 0135 05       		.uleb128 0x5
 2907 0136 49       		.uleb128 0x49
 2908 0137 13       		.uleb128 0x13
 2909 0138 02       		.uleb128 0x2
 2910 0139 18       		.uleb128 0x18
 2911 013a 00       		.byte	0
 2912 013b 00       		.byte	0
 2913 013c 16       		.uleb128 0x16
 2914 013d 34       		.uleb128 0x34
 2915 013e 00       		.byte	0
 2916 013f 03       		.uleb128 0x3
 2917 0140 08       		.uleb128 0x8
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 63


 2918 0141 3A       		.uleb128 0x3a
 2919 0142 0B       		.uleb128 0xb
 2920 0143 3B       		.uleb128 0x3b
 2921 0144 05       		.uleb128 0x5
 2922 0145 49       		.uleb128 0x49
 2923 0146 13       		.uleb128 0x13
 2924 0147 02       		.uleb128 0x2
 2925 0148 18       		.uleb128 0x18
 2926 0149 00       		.byte	0
 2927 014a 00       		.byte	0
 2928 014b 17       		.uleb128 0x17
 2929 014c 2E       		.uleb128 0x2e
 2930 014d 01       		.byte	0x1
 2931 014e 3F       		.uleb128 0x3f
 2932 014f 19       		.uleb128 0x19
 2933 0150 03       		.uleb128 0x3
 2934 0151 0E       		.uleb128 0xe
 2935 0152 3A       		.uleb128 0x3a
 2936 0153 0B       		.uleb128 0xb
 2937 0154 3B       		.uleb128 0x3b
 2938 0155 05       		.uleb128 0x5
 2939 0156 27       		.uleb128 0x27
 2940 0157 19       		.uleb128 0x19
 2941 0158 11       		.uleb128 0x11
 2942 0159 01       		.uleb128 0x1
 2943 015a 12       		.uleb128 0x12
 2944 015b 06       		.uleb128 0x6
 2945 015c 40       		.uleb128 0x40
 2946 015d 18       		.uleb128 0x18
 2947 015e 9742     		.uleb128 0x2117
 2948 0160 19       		.uleb128 0x19
 2949 0161 01       		.uleb128 0x1
 2950 0162 13       		.uleb128 0x13
 2951 0163 00       		.byte	0
 2952 0164 00       		.byte	0
 2953 0165 18       		.uleb128 0x18
 2954 0166 34       		.uleb128 0x34
 2955 0167 00       		.byte	0
 2956 0168 03       		.uleb128 0x3
 2957 0169 0E       		.uleb128 0xe
 2958 016a 3A       		.uleb128 0x3a
 2959 016b 0B       		.uleb128 0xb
 2960 016c 3B       		.uleb128 0x3b
 2961 016d 05       		.uleb128 0x5
 2962 016e 49       		.uleb128 0x49
 2963 016f 13       		.uleb128 0x13
 2964 0170 02       		.uleb128 0x2
 2965 0171 18       		.uleb128 0x18
 2966 0172 00       		.byte	0
 2967 0173 00       		.byte	0
 2968 0174 19       		.uleb128 0x19
 2969 0175 2E       		.uleb128 0x2e
 2970 0176 01       		.byte	0x1
 2971 0177 3F       		.uleb128 0x3f
 2972 0178 19       		.uleb128 0x19
 2973 0179 03       		.uleb128 0x3
 2974 017a 0E       		.uleb128 0xe
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 64


 2975 017b 3A       		.uleb128 0x3a
 2976 017c 0B       		.uleb128 0xb
 2977 017d 3B       		.uleb128 0x3b
 2978 017e 05       		.uleb128 0x5
 2979 017f 11       		.uleb128 0x11
 2980 0180 01       		.uleb128 0x1
 2981 0181 12       		.uleb128 0x12
 2982 0182 06       		.uleb128 0x6
 2983 0183 40       		.uleb128 0x40
 2984 0184 18       		.uleb128 0x18
 2985 0185 9642     		.uleb128 0x2116
 2986 0187 19       		.uleb128 0x19
 2987 0188 01       		.uleb128 0x1
 2988 0189 13       		.uleb128 0x13
 2989 018a 00       		.byte	0
 2990 018b 00       		.byte	0
 2991 018c 1A       		.uleb128 0x1a
 2992 018d 2E       		.uleb128 0x2e
 2993 018e 00       		.byte	0
 2994 018f 3F       		.uleb128 0x3f
 2995 0190 19       		.uleb128 0x19
 2996 0191 03       		.uleb128 0x3
 2997 0192 0E       		.uleb128 0xe
 2998 0193 3A       		.uleb128 0x3a
 2999 0194 0B       		.uleb128 0xb
 3000 0195 3B       		.uleb128 0x3b
 3001 0196 05       		.uleb128 0x5
 3002 0197 11       		.uleb128 0x11
 3003 0198 01       		.uleb128 0x1
 3004 0199 12       		.uleb128 0x12
 3005 019a 06       		.uleb128 0x6
 3006 019b 40       		.uleb128 0x40
 3007 019c 18       		.uleb128 0x18
 3008 019d 9642     		.uleb128 0x2116
 3009 019f 19       		.uleb128 0x19
 3010 01a0 00       		.byte	0
 3011 01a1 00       		.byte	0
 3012 01a2 1B       		.uleb128 0x1b
 3013 01a3 2E       		.uleb128 0x2e
 3014 01a4 01       		.byte	0x1
 3015 01a5 3F       		.uleb128 0x3f
 3016 01a6 19       		.uleb128 0x19
 3017 01a7 03       		.uleb128 0x3
 3018 01a8 0E       		.uleb128 0xe
 3019 01a9 3A       		.uleb128 0x3a
 3020 01aa 0B       		.uleb128 0xb
 3021 01ab 3B       		.uleb128 0x3b
 3022 01ac 05       		.uleb128 0x5
 3023 01ad 49       		.uleb128 0x49
 3024 01ae 13       		.uleb128 0x13
 3025 01af 11       		.uleb128 0x11
 3026 01b0 01       		.uleb128 0x1
 3027 01b1 12       		.uleb128 0x12
 3028 01b2 06       		.uleb128 0x6
 3029 01b3 40       		.uleb128 0x40
 3030 01b4 18       		.uleb128 0x18
 3031 01b5 9642     		.uleb128 0x2116
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 65


 3032 01b7 19       		.uleb128 0x19
 3033 01b8 01       		.uleb128 0x1
 3034 01b9 13       		.uleb128 0x13
 3035 01ba 00       		.byte	0
 3036 01bb 00       		.byte	0
 3037 01bc 1C       		.uleb128 0x1c
 3038 01bd 26       		.uleb128 0x26
 3039 01be 00       		.byte	0
 3040 01bf 49       		.uleb128 0x49
 3041 01c0 13       		.uleb128 0x13
 3042 01c1 00       		.byte	0
 3043 01c2 00       		.byte	0
 3044 01c3 1D       		.uleb128 0x1d
 3045 01c4 2E       		.uleb128 0x2e
 3046 01c5 01       		.byte	0x1
 3047 01c6 3F       		.uleb128 0x3f
 3048 01c7 19       		.uleb128 0x19
 3049 01c8 03       		.uleb128 0x3
 3050 01c9 0E       		.uleb128 0xe
 3051 01ca 3A       		.uleb128 0x3a
 3052 01cb 0B       		.uleb128 0xb
 3053 01cc 3B       		.uleb128 0x3b
 3054 01cd 05       		.uleb128 0x5
 3055 01ce 11       		.uleb128 0x11
 3056 01cf 01       		.uleb128 0x1
 3057 01d0 12       		.uleb128 0x12
 3058 01d1 06       		.uleb128 0x6
 3059 01d2 40       		.uleb128 0x40
 3060 01d3 18       		.uleb128 0x18
 3061 01d4 9742     		.uleb128 0x2117
 3062 01d6 19       		.uleb128 0x19
 3063 01d7 01       		.uleb128 0x1
 3064 01d8 13       		.uleb128 0x13
 3065 01d9 00       		.byte	0
 3066 01da 00       		.byte	0
 3067 01db 1E       		.uleb128 0x1e
 3068 01dc 2E       		.uleb128 0x2e
 3069 01dd 01       		.byte	0x1
 3070 01de 3F       		.uleb128 0x3f
 3071 01df 19       		.uleb128 0x19
 3072 01e0 03       		.uleb128 0x3
 3073 01e1 0E       		.uleb128 0xe
 3074 01e2 3A       		.uleb128 0x3a
 3075 01e3 0B       		.uleb128 0xb
 3076 01e4 3B       		.uleb128 0x3b
 3077 01e5 05       		.uleb128 0x5
 3078 01e6 27       		.uleb128 0x27
 3079 01e7 19       		.uleb128 0x19
 3080 01e8 49       		.uleb128 0x49
 3081 01e9 13       		.uleb128 0x13
 3082 01ea 11       		.uleb128 0x11
 3083 01eb 01       		.uleb128 0x1
 3084 01ec 12       		.uleb128 0x12
 3085 01ed 06       		.uleb128 0x6
 3086 01ee 40       		.uleb128 0x40
 3087 01ef 18       		.uleb128 0x18
 3088 01f0 9742     		.uleb128 0x2117
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 66


 3089 01f2 19       		.uleb128 0x19
 3090 01f3 01       		.uleb128 0x1
 3091 01f4 13       		.uleb128 0x13
 3092 01f5 00       		.byte	0
 3093 01f6 00       		.byte	0
 3094 01f7 1F       		.uleb128 0x1f
 3095 01f8 34       		.uleb128 0x34
 3096 01f9 00       		.byte	0
 3097 01fa 03       		.uleb128 0x3
 3098 01fb 0E       		.uleb128 0xe
 3099 01fc 3A       		.uleb128 0x3a
 3100 01fd 0B       		.uleb128 0xb
 3101 01fe 3B       		.uleb128 0x3b
 3102 01ff 05       		.uleb128 0x5
 3103 0200 49       		.uleb128 0x49
 3104 0201 13       		.uleb128 0x13
 3105 0202 3F       		.uleb128 0x3f
 3106 0203 19       		.uleb128 0x19
 3107 0204 3C       		.uleb128 0x3c
 3108 0205 19       		.uleb128 0x19
 3109 0206 00       		.byte	0
 3110 0207 00       		.byte	0
 3111 0208 20       		.uleb128 0x20
 3112 0209 21       		.uleb128 0x21
 3113 020a 00       		.byte	0
 3114 020b 49       		.uleb128 0x49
 3115 020c 13       		.uleb128 0x13
 3116 020d 2F       		.uleb128 0x2f
 3117 020e 05       		.uleb128 0x5
 3118 020f 00       		.byte	0
 3119 0210 00       		.byte	0
 3120 0211 21       		.uleb128 0x21
 3121 0212 34       		.uleb128 0x34
 3122 0213 00       		.byte	0
 3123 0214 03       		.uleb128 0x3
 3124 0215 0E       		.uleb128 0xe
 3125 0216 3A       		.uleb128 0x3a
 3126 0217 0B       		.uleb128 0xb
 3127 0218 3B       		.uleb128 0x3b
 3128 0219 0B       		.uleb128 0xb
 3129 021a 49       		.uleb128 0x49
 3130 021b 13       		.uleb128 0x13
 3131 021c 3F       		.uleb128 0x3f
 3132 021d 19       		.uleb128 0x19
 3133 021e 02       		.uleb128 0x2
 3134 021f 18       		.uleb128 0x18
 3135 0220 00       		.byte	0
 3136 0221 00       		.byte	0
 3137 0222 00       		.byte	0
 3138              		.section	.debug_aranges,"",%progbits
 3139 0000 94000000 		.4byte	0x94
 3140 0004 0200     		.2byte	0x2
 3141 0006 00000000 		.4byte	.Ldebug_info0
 3142 000a 04       		.byte	0x4
 3143 000b 00       		.byte	0
 3144 000c 0000     		.2byte	0
 3145 000e 0000     		.2byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 67


 3146 0010 00000000 		.4byte	.LFB63
 3147 0014 28000000 		.4byte	.LFE63-.LFB63
 3148 0018 00000000 		.4byte	.LFB64
 3149 001c 58000000 		.4byte	.LFE64-.LFB64
 3150 0020 00000000 		.4byte	.LFB65
 3151 0024 1C000000 		.4byte	.LFE65-.LFB65
 3152 0028 00000000 		.4byte	.LFB66
 3153 002c 38000000 		.4byte	.LFE66-.LFB66
 3154 0030 00000000 		.4byte	.LFB67
 3155 0034 AC020000 		.4byte	.LFE67-.LFB67
 3156 0038 00000000 		.4byte	.LFB68
 3157 003c 48000000 		.4byte	.LFE68-.LFB68
 3158 0040 00000000 		.4byte	.LFB69
 3159 0044 32000000 		.4byte	.LFE69-.LFB69
 3160 0048 00000000 		.4byte	.LFB70
 3161 004c 54010000 		.4byte	.LFE70-.LFB70
 3162 0050 00000000 		.4byte	.LFB71
 3163 0054 38000000 		.4byte	.LFE71-.LFB71
 3164 0058 00000000 		.4byte	.LFB72
 3165 005c C4010000 		.4byte	.LFE72-.LFB72
 3166 0060 00000000 		.4byte	.LFB73
 3167 0064 D8000000 		.4byte	.LFE73-.LFB73
 3168 0068 00000000 		.4byte	.LFB74
 3169 006c 58000000 		.4byte	.LFE74-.LFB74
 3170 0070 00000000 		.4byte	.LFB75
 3171 0074 36000000 		.4byte	.LFE75-.LFB75
 3172 0078 00000000 		.4byte	.LFB76
 3173 007c B0000000 		.4byte	.LFE76-.LFB76
 3174 0080 00000000 		.4byte	.LFB77
 3175 0084 24000000 		.4byte	.LFE77-.LFB77
 3176 0088 00000000 		.4byte	.LFB78
 3177 008c 68000000 		.4byte	.LFE78-.LFB78
 3178 0090 00000000 		.4byte	0
 3179 0094 00000000 		.4byte	0
 3180              		.section	.debug_ranges,"",%progbits
 3181              	.Ldebug_ranges0:
 3182 0000 00000000 		.4byte	.LFB63
 3183 0004 28000000 		.4byte	.LFE63
 3184 0008 00000000 		.4byte	.LFB64
 3185 000c 58000000 		.4byte	.LFE64
 3186 0010 00000000 		.4byte	.LFB65
 3187 0014 1C000000 		.4byte	.LFE65
 3188 0018 00000000 		.4byte	.LFB66
 3189 001c 38000000 		.4byte	.LFE66
 3190 0020 00000000 		.4byte	.LFB67
 3191 0024 AC020000 		.4byte	.LFE67
 3192 0028 00000000 		.4byte	.LFB68
 3193 002c 48000000 		.4byte	.LFE68
 3194 0030 00000000 		.4byte	.LFB69
 3195 0034 32000000 		.4byte	.LFE69
 3196 0038 00000000 		.4byte	.LFB70
 3197 003c 54010000 		.4byte	.LFE70
 3198 0040 00000000 		.4byte	.LFB71
 3199 0044 38000000 		.4byte	.LFE71
 3200 0048 00000000 		.4byte	.LFB72
 3201 004c C4010000 		.4byte	.LFE72
 3202 0050 00000000 		.4byte	.LFB73
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 68


 3203 0054 D8000000 		.4byte	.LFE73
 3204 0058 00000000 		.4byte	.LFB74
 3205 005c 58000000 		.4byte	.LFE74
 3206 0060 00000000 		.4byte	.LFB75
 3207 0064 36000000 		.4byte	.LFE75
 3208 0068 00000000 		.4byte	.LFB76
 3209 006c B0000000 		.4byte	.LFE76
 3210 0070 00000000 		.4byte	.LFB77
 3211 0074 24000000 		.4byte	.LFE77
 3212 0078 00000000 		.4byte	.LFB78
 3213 007c 68000000 		.4byte	.LFE78
 3214 0080 00000000 		.4byte	0
 3215 0084 00000000 		.4byte	0
 3216              		.section	.debug_line,"",%progbits
 3217              	.Ldebug_line0:
 3218 0000 AD040000 		.section	.debug_str,"MS",%progbits,1
 3218      0200AE01 
 3218      00000201 
 3218      FB0E0D00 
 3218      01010101 
 3219              	.LASF23:
 3220 0000 68656164 		.ascii	"header\000"
 3220      657200
 3221              	.LASF53:
 3222 0007 7472616E 		.ascii	"transmitData\000"
 3222      736D6974 
 3222      44617461 
 3222      00
 3223              	.LASF31:
 3224 0014 68656164 		.ascii	"headerBytes\000"
 3224      65724279 
 3224      74657300 
 3225              	.LASF26:
 3226 0020 49646C65 		.ascii	"Idle_Collision_ISR\000"
 3226      5F436F6C 
 3226      6C697369 
 3226      6F6E5F49 
 3226      535200
 3227              	.LASF21:
 3228 0033 73746174 		.ascii	"state\000"
 3228      6500
 3229              	.LASF50:
 3230 0039 67657452 		.ascii	"getRandomNumber\000"
 3230      616E646F 
 3230      6D4E756D 
 3230      62657200 
 3231              	.LASF16:
 3232 0049 73697A65 		.ascii	"sizetype\000"
 3232      74797065 
 3232      00
 3233              	.LASF58:
 3234 0052 64696666 		.ascii	"diffManEncodedData\000"
 3234      4D616E45 
 3234      6E636F64 
 3234      65644461 
 3234      746100
 3235              	.LASF37:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 69


 3236 0065 6D61696E 		.ascii	"main\000"
 3236      00
 3237              	.LASF73:
 3238 006a 72656365 		.ascii	"receivedHexValue\000"
 3238      69766564 
 3238      48657856 
 3238      616C7565 
 3238      00
 3239              	.LASF72:
 3240 007b 63726353 		.ascii	"crcState\000"
 3240      74617465 
 3240      00
 3241              	.LASF22:
 3242 0084 6E6F6E65 		.ascii	"none\000"
 3242      00
 3243              	.LASF2:
 3244 0089 73686F72 		.ascii	"short int\000"
 3244      7420696E 
 3244      7400
 3245              	.LASF47:
 3246 0093 76616C75 		.ascii	"value\000"
 3246      6500
 3247              	.LASF20:
 3248 0099 636F6C6C 		.ascii	"collision\000"
 3248      6973696F 
 3248      6E00
 3249              	.LASF17:
 3250 00a3 74696D65 		.ascii	"time_t\000"
 3250      5F7400
 3251              	.LASF71:
 3252 00aa 6E657477 		.ascii	"networkState\000"
 3252      6F726B53 
 3252      74617465 
 3252      00
 3253              	.LASF34:
 3254 00b7 72656365 		.ascii	"receivedHeaderBytes\000"
 3254      69766564 
 3254      48656164 
 3254      65724279 
 3254      74657300 
 3255              	.LASF39:
 3256 00cb 68657854 		.ascii	"hexToDiffMan\000"
 3256      6F446966 
 3256      664D616E 
 3256      00
 3257              	.LASF11:
 3258 00d8 75696E74 		.ascii	"uint8\000"
 3258      3800
 3259              	.LASF30:
 3260 00de 6C696E65 		.ascii	"lineString\000"
 3260      53747269 
 3260      6E6700
 3261              	.LASF27:
 3262 00e9 45646765 		.ascii	"Edge_detect_ISR\000"
 3262      5F646574 
 3262      6563745F 
 3262      49535200 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 70


 3263              	.LASF76:
 3264 00f9 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
 3264      79446F63 
 3264      735C446F 
 3264      63756D65 
 3264      6E74735C 
 3265 0127 30312E63 		.ascii	"01.cydsn\000"
 3265      7964736E 
 3265      00
 3266              	.LASF12:
 3267 0130 666C6F61 		.ascii	"float\000"
 3267      7400
 3268              	.LASF40:
 3269 0136 68657856 		.ascii	"hexValue\000"
 3269      616C7565 
 3269      00
 3270              	.LASF6:
 3271 013f 6C6F6E67 		.ascii	"long long int\000"
 3271      206C6F6E 
 3271      6720696E 
 3271      7400
 3272              	.LASF7:
 3273 014d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3273      206C6F6E 
 3273      6720756E 
 3273      7369676E 
 3273      65642069 
 3274              	.LASF67:
 3275 0164 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 3275      45535449 
 3275      4E415449 
 3275      4F4E5F41 
 3275      44445245 
 3276              	.LASF74:
 3277 017b 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3277      4320342E 
 3277      392E3320 
 3277      32303135 
 3277      30333033 
 3278 01ae 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3278      20726576 
 3278      6973696F 
 3278      6E203232 
 3278      31323230 
 3279 01e1 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3279      66756E63 
 3279      74696F6E 
 3279      2D736563 
 3279      74696F6E 
 3280              	.LASF49:
 3281 0209 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 3281      6574776F 
 3281      726B5374 
 3281      6174654F 
 3281      6E4C4544 
 3282              	.LASF38:
 3283 021f 68656164 		.ascii	"headerToDiffMan\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 71


 3283      6572546F 
 3283      44696666 
 3283      4D616E00 
 3284              	.LASF55:
 3285 022f 7072696E 		.ascii	"printChar\000"
 3285      74436861 
 3285      7200
 3286              	.LASF43:
 3287 0239 73747269 		.ascii	"stringToDiffMan\000"
 3287      6E67546F 
 3287      44696666 
 3287      4D616E00 
 3288              	.LASF1:
 3289 0249 756E7369 		.ascii	"unsigned char\000"
 3289      676E6564 
 3289      20636861 
 3289      7200
 3290              	.LASF64:
 3291 0257 63757272 		.ascii	"currentDataPos\000"
 3291      656E7444 
 3291      61746150 
 3291      6F7300
 3292              	.LASF65:
 3293 0266 63757272 		.ascii	"currentRXCharPosition\000"
 3293      656E7452 
 3293      58436861 
 3293      72506F73 
 3293      6974696F 
 3294              	.LASF66:
 3295 027c 72784D65 		.ascii	"rxMessageLength\000"
 3295      73736167 
 3295      654C656E 
 3295      67746800 
 3296              	.LASF48:
 3297 028c 696E6974 		.ascii	"initDiffManEncodedArray\000"
 3297      44696666 
 3297      4D616E45 
 3297      6E636F64 
 3297      65644172 
 3298              	.LASF0:
 3299 02a4 7369676E 		.ascii	"signed char\000"
 3299      65642063 
 3299      68617200 
 3300              	.LASF44:
 3301 02b0 61736369 		.ascii	"asciiToDiffMan\000"
 3301      69546F44 
 3301      6966664D 
 3301      616E00
 3302              	.LASF18:
 3303 02bf 69646C65 		.ascii	"idle\000"
 3303      00
 3304              	.LASF8:
 3305 02c4 756E7369 		.ascii	"unsigned int\000"
 3305      676E6564 
 3305      20696E74 
 3305      00
 3306              	.LASF61:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 72


 3307 02d1 72656365 		.ascii	"receivedDataIndex\000"
 3307      69766564 
 3307      44617461 
 3307      496E6465 
 3307      7800
 3308              	.LASF5:
 3309 02e3 6C6F6E67 		.ascii	"long unsigned int\000"
 3309      20756E73 
 3309      69676E65 
 3309      6420696E 
 3309      7400
 3310              	.LASF25:
 3311 02f5 626F7468 		.ascii	"both\000"
 3311      00
 3312              	.LASF51:
 3313 02fa 4D494E5F 		.ascii	"MIN_N\000"
 3313      4E00
 3314              	.LASF45:
 3315 0300 61736369 		.ascii	"asciiChar\000"
 3315      69436861 
 3315      7200
 3316              	.LASF14:
 3317 030a 63686172 		.ascii	"char\000"
 3317      00
 3318              	.LASF4:
 3319 030f 6C6F6E67 		.ascii	"long int\000"
 3319      20696E74 
 3319      00
 3320              	.LASF32:
 3321 0318 73747269 		.ascii	"stringPosition\000"
 3321      6E67506F 
 3321      73697469 
 3321      6F6E00
 3322              	.LASF10:
 3323 0327 696E7433 		.ascii	"int32_t\000"
 3323      325F7400 
 3324              	.LASF3:
 3325 032f 73686F72 		.ascii	"short unsigned int\000"
 3325      7420756E 
 3325      7369676E 
 3325      65642069 
 3325      6E7400
 3326              	.LASF33:
 3327 0342 7365636F 		.ascii	"seconds\000"
 3327      6E647300 
 3328              	.LASF36:
 3329 034a 5F426F6F 		.ascii	"_Bool\000"
 3329      6C00
 3330              	.LASF19:
 3331 0350 62757379 		.ascii	"busy\000"
 3331      00
 3332              	.LASF77:
 3333 0355 68656164 		.ascii	"headerCheck\000"
 3333      65724368 
 3333      65636B00 
 3334              	.LASF62:
 3335 0361 72656365 		.ascii	"receivedDataCount\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 73


 3335      69766564 
 3335      44617461 
 3335      436F756E 
 3335      7400
 3336              	.LASF15:
 3337 0373 72656738 		.ascii	"reg8\000"
 3337      00
 3338              	.LASF24:
 3339 0378 6D657373 		.ascii	"message\000"
 3339      61676500 
 3340              	.LASF13:
 3341 0380 646F7562 		.ascii	"double\000"
 3341      6C6500
 3342              	.LASF35:
 3343 0387 68656164 		.ascii	"headerValid\000"
 3343      65725661 
 3343      6C696400 
 3344              	.LASF59:
 3345 0393 64696666 		.ascii	"diffManReceivedData\000"
 3345      4D616E52 
 3345      65636569 
 3345      76656444 
 3345      61746100 
 3346              	.LASF60:
 3347 03a7 72784368 		.ascii	"rxChar\000"
 3347      617200
 3348              	.LASF29:
 3349 03ae 52656365 		.ascii	"ReceiveTimerISR\000"
 3349      69766554 
 3349      696D6572 
 3349      49535200 
 3350              	.LASF46:
 3351 03be 62696E61 		.ascii	"binaryValueOfChar\000"
 3351      72795661 
 3351      6C75654F 
 3351      66436861 
 3351      7200
 3352              	.LASF75:
 3353 03d0 2E5C6D61 		.ascii	".\\main.c\000"
 3353      696E2E63 
 3353      00
 3354              	.LASF9:
 3355 03d9 5F5F696E 		.ascii	"__int32_t\000"
 3355      7433325F 
 3355      7400
 3356              	.LASF63:
 3357 03e3 68616C66 		.ascii	"halfBitIndex\000"
 3357      42697449 
 3357      6E646578 
 3357      00
 3358              	.LASF56:
 3359 03f0 76616C69 		.ascii	"validHeader\000"
 3359      64486561 
 3359      64657200 
 3360              	.LASF52:
 3361 03fc 4D41585F 		.ascii	"MAX_N\000"
 3361      4E00
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccILVMYu.s 			page 74


 3362              	.LASF54:
 3363 0402 64696666 		.ascii	"diffManToHex\000"
 3363      4D616E54 
 3363      6F486578 
 3363      00
 3364              	.LASF69:
 3365 040f 64617461 		.ascii	"dataTransmissionComplete\000"
 3365      5472616E 
 3365      736D6973 
 3365      73696F6E 
 3365      436F6D70 
 3366              	.LASF28:
 3367 0428 54696D65 		.ascii	"TimerHandler\000"
 3367      7248616E 
 3367      646C6572 
 3367      00
 3368              	.LASF57:
 3369 0435 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3369      52784275 
 3369      66666572 
 3369      00
 3370              	.LASF42:
 3371 0442 70726576 		.ascii	"previousHalfBit\000"
 3371      696F7573 
 3371      48616C66 
 3371      42697400 
 3372              	.LASF41:
 3373 0452 62696E61 		.ascii	"binaryValueOfHex\000"
 3373      72795661 
 3373      6C75654F 
 3373      66486578 
 3373      00
 3374              	.LASF68:
 3375 0463 74696D65 		.ascii	"timerExpired\000"
 3375      72457870 
 3375      69726564 
 3375      00
 3376              	.LASF70:
 3377 0470 706F7765 		.ascii	"powerOnEdge\000"
 3377      724F6E45 
 3377      64676500 
 3378              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
