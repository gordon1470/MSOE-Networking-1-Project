ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.comm	lengthOfData,4,4
  43              		.comm	messageLength,4,4
  44              		.comm	headerCRC,4,4
  45              		.global	TX_DESTINATION_ADDRESS
  46              		.align	2
  47              		.type	TX_DESTINATION_ADDRESS, %object
  48              		.size	TX_DESTINATION_ADDRESS, 4
  49              	TX_DESTINATION_ADDRESS:
  50 000c 00000000 		.space	4
  51              		.comm	timerExpired,1,1
  52              		.comm	dataTransmissionComplete,1,1
  53              		.comm	powerOnEdge,1,1
  54              		.global	headerValid
  55              		.type	headerValid, %object
  56              		.size	headerValid, 1
  57              	headerValid:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 2


  58 0010 00       		.space	1
  59              		.comm	networkState,1,1
  60              		.comm	crcState,1,1
  61              		.comm	receivedChar,1,1
  62 0011 000000   		.section	.text.Idle_Collision_ISR,"ax",%progbits
  63              		.align	2
  64              		.global	Idle_Collision_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	Idle_Collision_ISR, %function
  68              	Idle_Collision_ISR:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** #define INDEX_OF_MSB 6
   2:.\main.c      **** #define HIGH 1
   3:.\main.c      **** #define EIGHT_BITS 8
   4:.\main.c      **** #define START_BIT 2
   5:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   6:.\main.c      **** #define TX_SOURCE_ADDRESS 0
   7:.\main.c      **** #define RX_DESTINATION_ADDRESS 0//these 2 are supposed to be the same
   8:.\main.c      **** #define VERSION_NUMBER 1
   9:.\main.c      **** #define HEADER_POS 7
  10:.\main.c      **** 
  11:.\main.c      **** 
  12:.\main.c      **** #include <device.h>
  13:.\main.c      **** #include <stdbool.h>
  14:.\main.c      **** #include <stdlib.h> //For random number generator
  15:.\main.c      **** #include <time.h>
  16:.\main.c      **** #include "stdio.h"
  17:.\main.c      **** 
  18:.\main.c      **** 
  19:.\main.c      **** int getRandomNumber();
  20:.\main.c      **** void initDiffManEncodedArray();
  21:.\main.c      **** void stringToDiffMan(char*, uint8);
  22:.\main.c      **** void hexToDiffMan(uint8);
  23:.\main.c      **** void asciiToDiffMan(char);
  24:.\main.c      **** void transmitData();
  25:.\main.c      **** void setNetworkStateOnLEDs();
  26:.\main.c      **** void diffManToASCII();
  27:.\main.c      **** void storeChar();
  28:.\main.c      **** void printChar();
  29:.\main.c      **** bool headerCheck();
  30:.\main.c      **** 
  31:.\main.c      **** int diffManEncodedData[864];
  32:.\main.c      **** uint8 diffManReceivedData[108];
  33:.\main.c      **** char rxChar[108];
  34:.\main.c      **** int receivedDataIndex, receivedDataCount;
  35:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, lengthOfData, messageLength, h
  36:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge, headerValid = false;
  37:.\main.c      **** enum state {idle, busy, collision} networkState;
  38:.\main.c      **** enum crc {none, header, message, both} crcState;
  39:.\main.c      **** 
  40:.\main.c      **** char receivedChar;
  41:.\main.c      **** 
  42:.\main.c      **** CY_ISR(Idle_Collision_ISR){
  71              		.loc 1 42 0
  72              		.cfi_startproc
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 3


  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  43:.\main.c      ****     networkState = idle;
  81              		.loc 1 43 0
  82 0004 074B     		ldr	r3, .L4
  83 0006 0022     		movs	r2, #0
  84 0008 1A70     		strb	r2, [r3]
  44:.\main.c      ****     if(Receive_Read() == HIGH){
  85              		.loc 1 44 0
  86 000a FFF7FEFF 		bl	Receive_Read
  87 000e 0346     		mov	r3, r0
  88 0010 012B     		cmp	r3, #1
  89 0012 03D1     		bne	.L2
  45:.\main.c      ****         networkState = idle;
  90              		.loc 1 45 0
  91 0014 034B     		ldr	r3, .L4
  92 0016 0022     		movs	r2, #0
  93 0018 1A70     		strb	r2, [r3]
  94 001a 02E0     		b	.L1
  95              	.L2:
  46:.\main.c      ****     }
  47:.\main.c      ****     else{
  48:.\main.c      ****         networkState = collision;
  96              		.loc 1 48 0
  97 001c 014B     		ldr	r3, .L4
  98 001e 0222     		movs	r2, #2
  99 0020 1A70     		strb	r2, [r3]
 100              	.L1:
  49:.\main.c      ****     }
  50:.\main.c      **** }
 101              		.loc 1 50 0
 102 0022 80BD     		pop	{r7, pc}
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0024 00000000 		.word	networkState
 107              		.cfi_endproc
 108              	.LFE63:
 109              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 110              		.section	.text.Edge_detect_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	Edge_detect_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	Edge_detect_ISR, %function
 116              	Edge_detect_ISR:
 117              	.LFB64:
  51:.\main.c      **** 
  52:.\main.c      **** CY_ISR(Edge_detect_ISR){
 118              		.loc 1 52 0
 119              		.cfi_startproc
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 4


 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 98B5     		push	{r3, r4, r7, lr}
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  53:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  54:.\main.c      ****     Idle_Collision_Timer_Start();
 130              		.loc 1 54 0
 131 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  55:.\main.c      **** 
  56:.\main.c      ****     //Ignore power on edge
  57:.\main.c      ****     if(!powerOnEdge){
 132              		.loc 1 57 0
 133 0008 0F4B     		ldr	r3, .L9
 134 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000c 83F00103 		eor	r3, r3, #1
 136 0010 DBB2     		uxtb	r3, r3
 137 0012 002B     		cmp	r3, #0
 138 0014 0FD0     		beq	.L7
  58:.\main.c      ****         Receive_Timer_Start();
 139              		.loc 1 58 0
 140 0016 FFF7FEFF 		bl	Receive_Timer_Start
  59:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 141              		.loc 1 59 0
 142 001a 0C4B     		ldr	r3, .L9+4
 143 001c 1C68     		ldr	r4, [r3]
 144 001e FFF7FEFF 		bl	Receive_Read
 145 0022 0346     		mov	r3, r0
 146 0024 1A46     		mov	r2, r3
 147 0026 0A4B     		ldr	r3, .L9+8
 148 0028 1A55     		strb	r2, [r3, r4]
  60:.\main.c      ****         receivedDataCount++;
 149              		.loc 1 60 0
 150 002a 084B     		ldr	r3, .L9+4
 151 002c 1B68     		ldr	r3, [r3]
 152 002e 0133     		adds	r3, r3, #1
 153 0030 064A     		ldr	r2, .L9+4
 154 0032 1360     		str	r3, [r2]
 155 0034 02E0     		b	.L8
 156              	.L7:
  61:.\main.c      ****     }
  62:.\main.c      ****     else{
  63:.\main.c      ****         powerOnEdge = false;
 157              		.loc 1 63 0
 158 0036 044B     		ldr	r3, .L9
 159 0038 0022     		movs	r2, #0
 160 003a 1A70     		strb	r2, [r3]
 161              	.L8:
  64:.\main.c      ****     }
  65:.\main.c      ****     networkState = busy;
 162              		.loc 1 65 0
 163 003c 054B     		ldr	r3, .L9+12
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 5


 164 003e 0122     		movs	r2, #1
 165 0040 1A70     		strb	r2, [r3]
  66:.\main.c      ****     Receive_ClearInterrupt();
 166              		.loc 1 66 0
 167 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  67:.\main.c      **** }
 168              		.loc 1 67 0
 169 0046 98BD     		pop	{r3, r4, r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 0048 00000000 		.word	powerOnEdge
 174 004c 00000000 		.word	receivedDataCount
 175 0050 00000000 		.word	diffManReceivedData
 176 0054 00000000 		.word	networkState
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 180              		.section	.text.TimerHandler,"ax",%progbits
 181              		.align	2
 182              		.global	TimerHandler
 183              		.thumb
 184              		.thumb_func
 185              		.type	TimerHandler, %function
 186              	TimerHandler:
 187              	.LFB65:
  68:.\main.c      **** 
  69:.\main.c      **** CY_ISR(TimerHandler){
 188              		.loc 1 69 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
  70:.\main.c      ****     Timer_Stop();
 198              		.loc 1 70 0
 199 0004 FFF7FEFF 		bl	Timer_Stop
  71:.\main.c      ****     timerExpired = true;
 200              		.loc 1 71 0
 201 0008 024B     		ldr	r3, .L12
 202 000a 0122     		movs	r2, #1
 203 000c 1A70     		strb	r2, [r3]
  72:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 204              		.loc 1 72 0
 205 000e 024B     		ldr	r3, .L12+4
 206 0010 1B78     		ldrb	r3, [r3]
  73:.\main.c      **** }
 207              		.loc 1 73 0
 208 0012 80BD     		pop	{r7, pc}
 209              	.L13:
 210              		.align	2
 211              	.L12:
 212 0014 00000000 		.word	timerExpired
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 6


 213 0018 6B640040 		.word	1073767531
 214              		.cfi_endproc
 215              	.LFE65:
 216              		.size	TimerHandler, .-TimerHandler
 217              		.section	.text.ReceiveTimerISR,"ax",%progbits
 218              		.align	2
 219              		.global	ReceiveTimerISR
 220              		.thumb
 221              		.thumb_func
 222              		.type	ReceiveTimerISR, %function
 223              	ReceiveTimerISR:
 224              	.LFB66:
  74:.\main.c      **** 
  75:.\main.c      **** //TODO changing from reading to just repeting last data
  76:.\main.c      **** CY_ISR(ReceiveTimerISR){
 225              		.loc 1 76 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
  77:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 235              		.loc 1 77 0
 236 0004 094B     		ldr	r3, .L15
 237 0006 1B68     		ldr	r3, [r3]
 238 0008 084A     		ldr	r2, .L15
 239 000a 1268     		ldr	r2, [r2]
 240 000c 013A     		subs	r2, r2, #1
 241 000e 0849     		ldr	r1, .L15+4
 242 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 243 0012 074A     		ldr	r2, .L15+4
 244 0014 D154     		strb	r1, [r2, r3]
  78:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  79:.\main.c      ****     receivedDataCount++;
 245              		.loc 1 79 0
 246 0016 054B     		ldr	r3, .L15
 247 0018 1B68     		ldr	r3, [r3]
 248 001a 0133     		adds	r3, r3, #1
 249 001c 034A     		ldr	r2, .L15
 250 001e 1360     		str	r3, [r2]
  80:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 251              		.loc 1 80 0
 252 0020 044B     		ldr	r3, .L15+8
 253 0022 1B78     		ldrb	r3, [r3]
  81:.\main.c      **** }
 254              		.loc 1 81 0
 255 0024 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0026 5DF8047B 		ldr	r7, [sp], #4
 259              		.cfi_restore 7
 260              		.cfi_def_cfa_offset 0
 261 002a 7047     		bx	lr
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 7


 262              	.L16:
 263              		.align	2
 264              	.L15:
 265 002c 00000000 		.word	receivedDataCount
 266 0030 00000000 		.word	diffManReceivedData
 267 0034 6F640040 		.word	1073767535
 268              		.cfi_endproc
 269              	.LFE66:
 270              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 271              		.section	.text.main,"ax",%progbits
 272              		.align	2
 273              		.global	main
 274              		.thumb
 275              		.thumb_func
 276              		.type	main, %function
 277              	main:
 278              	.LFB67:
  82:.\main.c      **** 
  83:.\main.c      **** int main()
  84:.\main.c      **** {
 279              		.loc 1 84 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 120
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 9EB0     		sub	sp, sp, #120
 288              		.cfi_def_cfa_offset 128
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  85:.\main.c      ****     char rx;
  86:.\main.c      ****     char lineString[108];
  87:.\main.c      ****     uint8 stringPosition = HEADER_POS;//after header
 291              		.loc 1 87 0
 292 0006 0723     		movs	r3, #7
 293 0008 87F87730 		strb	r3, [r7, #119]
  88:.\main.c      ****     timerExpired = false;
 294              		.loc 1 88 0
 295 000c 894B     		ldr	r3, .L39
 296 000e 0022     		movs	r2, #0
 297 0010 1A70     		strb	r2, [r3]
  89:.\main.c      ****     dataTransmissionComplete = false;
 298              		.loc 1 89 0
 299 0012 894B     		ldr	r3, .L39+4
 300 0014 0022     		movs	r2, #0
 301 0016 1A70     		strb	r2, [r3]
  90:.\main.c      **** 
  91:.\main.c      **** 	messageLength = 0;
 302              		.loc 1 91 0
 303 0018 884B     		ldr	r3, .L39+8
 304 001a 0022     		movs	r2, #0
 305 001c 1A60     		str	r2, [r3]
  92:.\main.c      **** 
  93:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge.
 306              		.loc 1 93 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 8


 307 001e 884B     		ldr	r3, .L39+12
 308 0020 0122     		movs	r2, #1
 309 0022 1A70     		strb	r2, [r3]
  94:.\main.c      ****     //We want to ignore this edge on the rising edge.
  95:.\main.c      **** 
  96:.\main.c      ****     /*
  97:.\main.c      ****     Get value from system clock and
  98:.\main.c      ****     place in seconds variable.
  99:.\main.c      ****     */
 100:.\main.c      ****     time_t seconds;
 101:.\main.c      ****     time(&seconds);
 310              		.loc 1 101 0
 311 0024 3B1D     		adds	r3, r7, #4
 312 0026 1846     		mov	r0, r3
 313 0028 FFF7FEFF 		bl	time
 102:.\main.c      ****     /*
 103:.\main.c      ****     Convert seconds to a unsigned
 104:.\main.c      ****     integer for seed for random number generator
 105:.\main.c      ****     */
 106:.\main.c      ****     srand((unsigned int) seconds);
 314              		.loc 1 106 0
 315 002c 7B68     		ldr	r3, [r7, #4]
 316 002e 1846     		mov	r0, r3
 317 0030 FFF7FEFF 		bl	srand
 107:.\main.c      **** 
 108:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 318              		.loc 1 108 0
 319 0034 0120     		movs	r0, #1
 320 0036 FFF7FEFF 		bl	TX_pin_Write
 109:.\main.c      **** 
 110:.\main.c      ****     /* Enable Global Interrupts */
 111:.\main.c      ****     CyGlobalIntEnable;
 321              		.loc 1 111 0
 322              	@ 111 ".\main.c" 1
 323 003a 62B6     		CPSIE   i
 324              	@ 0 "" 2
 112:.\main.c      **** 
 113:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 325              		.loc 1 113 0
 326              		.thumb
 327 003c FFF7FEFF 		bl	Receive_ClearInterrupt
 114:.\main.c      **** 
 115:.\main.c      ****     LCD_Start();
 328              		.loc 1 115 0
 329 0040 FFF7FEFF 		bl	LCD_Start
 116:.\main.c      **** 
 117:.\main.c      ****     //enable collision detection
 118:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 330              		.loc 1 118 0
 331 0044 7F48     		ldr	r0, .L39+16
 332 0046 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 119:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 333              		.loc 1 119 0
 334 004a 7F48     		ldr	r0, .L39+20
 335 004c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 120:.\main.c      ****     Idle_Collision_Timer_Start();
 336              		.loc 1 120 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 9


 337 0050 FFF7FEFF 		bl	Idle_Collision_Timer_Start
 121:.\main.c      **** 
 122:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 123:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 338              		.loc 1 123 0
 339 0054 0020     		movs	r0, #0
 340 0056 0021     		movs	r1, #0
 341 0058 FFF7FEFF 		bl	USBUART_1_Start
 124:.\main.c      **** 
 125:.\main.c      ****     //start transmission timer
 126:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 342              		.loc 1 126 0
 343 005c 7B48     		ldr	r0, .L39+24
 344 005e FFF7FEFF 		bl	TimerISR_StartEx
 127:.\main.c      **** 
 128:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
 345              		.loc 1 128 0
 346 0062 7B48     		ldr	r0, .L39+28
 347 0064 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 129:.\main.c      **** 
 130:.\main.c      ****     receivedDataCount = 0;
 348              		.loc 1 130 0
 349 0068 7A4B     		ldr	r3, .L39+32
 350 006a 0022     		movs	r2, #0
 351 006c 1A60     		str	r2, [r3]
 131:.\main.c      ****     receivedDataIndex = 0;
 352              		.loc 1 131 0
 353 006e 7A4B     		ldr	r3, .L39+36
 354 0070 0022     		movs	r2, #0
 355 0072 1A60     		str	r2, [r3]
 132:.\main.c      **** 
 133:.\main.c      ****     lineString[0] = 0x71;
 356              		.loc 1 133 0
 357 0074 7123     		movs	r3, #113
 358 0076 3B72     		strb	r3, [r7, #8]
 134:.\main.c      **** 	lineString[1] = VERSION_NUMBER;
 359              		.loc 1 134 0
 360 0078 0123     		movs	r3, #1
 361 007a 7B72     		strb	r3, [r7, #9]
 135:.\main.c      **** 	lineString[2] = TX_SOURCE_ADDRESS;
 362              		.loc 1 135 0
 363 007c 0023     		movs	r3, #0
 364 007e BB72     		strb	r3, [r7, #10]
 136:.\main.c      **** 	lineString[3] = TX_DESTINATION_ADDRESS;
 365              		.loc 1 136 0
 366 0080 764B     		ldr	r3, .L39+40
 367 0082 1B68     		ldr	r3, [r3]
 368 0084 DBB2     		uxtb	r3, r3
 369 0086 FB72     		strb	r3, [r7, #11]
 137:.\main.c      ****     lineString[4] = 0;
 370              		.loc 1 137 0
 371 0088 0023     		movs	r3, #0
 372 008a 3B73     		strb	r3, [r7, #12]
 138:.\main.c      **** 	lineString[5] = 0;
 373              		.loc 1 138 0
 374 008c 0023     		movs	r3, #0
 375 008e 7B73     		strb	r3, [r7, #13]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 10


 139:.\main.c      **** 	lineString[6] = 0x75;
 376              		.loc 1 139 0
 377 0090 7523     		movs	r3, #117
 378 0092 BB73     		strb	r3, [r7, #14]
 379              	.L36:
 140:.\main.c      **** 
 141:.\main.c      ****     /* Main Loop: */
 142:.\main.c      ****     for(;;)
 143:.\main.c      ****     {
 144:.\main.c      ****         setNetworkStateOnLEDs();
 380              		.loc 1 144 0
 381 0094 FFF7FEFF 		bl	setNetworkStateOnLEDs
 145:.\main.c      **** 
 146:.\main.c      ****         /*Receive*/
 147:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 148:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 382              		.loc 1 148 0
 383 0098 714B     		ldr	r3, .L39+44
 384 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 009c 002B     		cmp	r3, #0
 386 009e 37D1     		bne	.L18
 387              		.loc 1 148 0 is_stmt 0 discriminator 1
 388 00a0 6C4B     		ldr	r3, .L39+32
 389 00a2 1B68     		ldr	r3, [r3]
 390 00a4 212B     		cmp	r3, #33
 391 00a6 33DD     		ble	.L18
 149:.\main.c      **** 
 150:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 151:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 392              		.loc 1 151 0 is_stmt 1
 393 00a8 6E4B     		ldr	r3, .L39+48
 394 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 395 00ac 002B     		cmp	r3, #0
 396 00ae 26D1     		bne	.L19
 397              		.loc 1 151 0 is_stmt 0 discriminator 1
 398 00b0 6C4B     		ldr	r3, .L39+48
 399 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 400 00b4 012B     		cmp	r3, #1
 401 00b6 22D1     		bne	.L19
 152:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 402              		.loc 1 152 0 is_stmt 1
 403 00b8 674B     		ldr	r3, .L39+36
 404 00ba 0222     		movs	r2, #2
 405 00bc 1A60     		str	r2, [r3]
 153:.\main.c      ****                 while(receivedDataIndex < receivedDataCount-1){     //Note: receivedDataCount-1 b/c
 406              		.loc 1 153 0
 407 00be 06E0     		b	.L20
 408              	.L21:
 154:.\main.c      ****                     diffManToASCII();
 409              		.loc 1 154 0
 410 00c0 FFF7FEFF 		bl	diffManToASCII
 155:.\main.c      **** 					storeChar();
 411              		.loc 1 155 0
 412 00c4 FFF7FEFF 		bl	storeChar
 156:.\main.c      ****                     receivedChar = 0;       //Reset the char
 413              		.loc 1 156 0
 414 00c8 674B     		ldr	r3, .L39+52
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 11


 415 00ca 0022     		movs	r2, #0
 416 00cc 1A70     		strb	r2, [r3]
 417              	.L20:
 153:.\main.c      ****                     diffManToASCII();
 418              		.loc 1 153 0
 419 00ce 614B     		ldr	r3, .L39+32
 420 00d0 1B68     		ldr	r3, [r3]
 421 00d2 5A1E     		subs	r2, r3, #1
 422 00d4 604B     		ldr	r3, .L39+36
 423 00d6 1B68     		ldr	r3, [r3]
 424 00d8 9A42     		cmp	r2, r3
 425 00da F1DC     		bgt	.L21
 157:.\main.c      ****                 }
 158:.\main.c      **** 				if(headerCheck()){
 426              		.loc 1 158 0
 427 00dc FFF7FEFF 		bl	headerCheck
 428 00e0 0346     		mov	r3, r0
 429 00e2 002B     		cmp	r3, #0
 430 00e4 01D0     		beq	.L22
 159:.\main.c      ****                     printChar();
 431              		.loc 1 159 0
 432 00e6 FFF7FEFF 		bl	printChar
 433              	.L22:
 160:.\main.c      ****                 }
 161:.\main.c      **** 
 162:.\main.c      ****                 receivedDataCount = 0;  //Reset count
 434              		.loc 1 162 0
 435 00ea 5A4B     		ldr	r3, .L39+32
 436 00ec 0022     		movs	r2, #0
 437 00ee 1A60     		str	r2, [r3]
 163:.\main.c      ****                 receivedDataIndex = 0;  //Reset index
 438              		.loc 1 163 0
 439 00f0 594B     		ldr	r3, .L39+36
 440 00f2 0022     		movs	r2, #0
 441 00f4 1A60     		str	r2, [r3]
 164:.\main.c      ****                 currentRXCharPosition = 0;
 442              		.loc 1 164 0
 443 00f6 5D4B     		ldr	r3, .L39+56
 444 00f8 0022     		movs	r2, #0
 445 00fa 1A60     		str	r2, [r3]
 446 00fc 08E0     		b	.L18
 447              	.L19:
 165:.\main.c      ****             }
 166:.\main.c      ****             else{
 167:.\main.c      ****                 //Receive data did not start with the start bit
 168:.\main.c      ****                 receivedDataCount = 0;
 448              		.loc 1 168 0
 449 00fe 554B     		ldr	r3, .L39+32
 450 0100 0022     		movs	r2, #0
 451 0102 1A60     		str	r2, [r3]
 169:.\main.c      ****                 receivedDataIndex = 0;
 452              		.loc 1 169 0
 453 0104 544B     		ldr	r3, .L39+36
 454 0106 0022     		movs	r2, #0
 455 0108 1A60     		str	r2, [r3]
 170:.\main.c      ****                 currentRXCharPosition = 0;
 456              		.loc 1 170 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 12


 457 010a 584B     		ldr	r3, .L39+56
 458 010c 0022     		movs	r2, #0
 459 010e 1A60     		str	r2, [r3]
 460              	.L18:
 171:.\main.c      ****             }
 172:.\main.c      ****         }
 173:.\main.c      ****         else
 174:.\main.c      ****         {
 175:.\main.c      ****             //TODO prob remove this else
 176:.\main.c      ****         }
 177:.\main.c      ****         /*End Receive*/
 178:.\main.c      **** 
 179:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 461              		.loc 1 179 0
 462 0110 FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 463 0114 0346     		mov	r3, r0
 464 0116 002B     		cmp	r3, #0
 465 0118 06D0     		beq	.L24
 180:.\main.c      ****         {
 181:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 466              		.loc 1 181 0
 467 011a FFF7FEFF 		bl	USBUART_1_GetConfiguration
 468 011e 0346     		mov	r3, r0
 469 0120 002B     		cmp	r3, #0
 470 0122 01D0     		beq	.L24
 182:.\main.c      ****             {
 183:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 184:.\main.c      ****                 USBUART_1_CDC_Init();
 471              		.loc 1 184 0
 472 0124 FFF7FEFF 		bl	USBUART_1_CDC_Init
 473              	.L24:
 185:.\main.c      ****             }
 186:.\main.c      ****         }
 187:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 474              		.loc 1 187 0
 475 0128 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 476 012c 0346     		mov	r3, r0
 477 012e 002B     		cmp	r3, #0
 478 0130 7ED0     		beq	.L25
 188:.\main.c      ****         {
 189:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 479              		.loc 1 189 0
 480 0132 FFF7FEFF 		bl	USBUART_1_DataIsReady
 481 0136 0346     		mov	r3, r0
 482 0138 002B     		cmp	r3, #0
 483 013a 79D0     		beq	.L25
 190:.\main.c      ****             {
 191:.\main.c      ****                 rx = USBUART_1_GetChar();
 484              		.loc 1 191 0
 485 013c FFF7FEFF 		bl	USBUART_1_GetChar
 486 0140 0346     		mov	r3, r0
 487 0142 87F87630 		strb	r3, [r7, #118]
 192:.\main.c      ****                 switch(rx){
 488              		.loc 1 192 0
 489 0146 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 490 014a 0D2B     		cmp	r3, #13
 491 014c 25D0     		beq	.L27
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 13


 492 014e 1B2B     		cmp	r3, #27
 493 0150 6DD0     		beq	.L38
 494 0152 082B     		cmp	r3, #8
 495 0154 51D1     		bne	.L37
 193:.\main.c      ****                     case 8://backspace
 194:.\main.c      ****                         if(stringPosition>0){
 496              		.loc 1 194 0
 497 0156 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 498 015a 002B     		cmp	r3, #0
 499 015c 1CD0     		beq	.L30
 195:.\main.c      ****                             stringPosition--;
 500              		.loc 1 195 0
 501 015e 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 502 0162 013B     		subs	r3, r3, #1
 503 0164 87F87730 		strb	r3, [r7, #119]
 196:.\main.c      ****                             lineString[stringPosition] = '\0';
 504              		.loc 1 196 0
 505 0168 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 506 016c 07F17802 		add	r2, r7, #120
 507 0170 1344     		add	r3, r3, r2
 508 0172 0022     		movs	r2, #0
 509 0174 03F8702C 		strb	r2, [r3, #-112]
 197:.\main.c      ****                             //backspace space backspace
 198:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u);
 510              		.loc 1 198 0
 511 0178 00BF     		nop
 512              	.L31:
 513              		.loc 1 198 0 is_stmt 0 discriminator 1
 514 017a FFF7FEFF 		bl	USBUART_1_CDCIsReady
 515 017e 0346     		mov	r3, r0
 516 0180 002B     		cmp	r3, #0
 517 0182 FAD0     		beq	.L31
 199:.\main.c      ****                             USBUART_1_PutChar(8);
 518              		.loc 1 199 0 is_stmt 1
 519 0184 0820     		movs	r0, #8
 520 0186 FFF7FEFF 		bl	USBUART_1_PutChar
 200:.\main.c      ****                             USBUART_1_PutChar(32);
 521              		.loc 1 200 0
 522 018a 2020     		movs	r0, #32
 523 018c FFF7FEFF 		bl	USBUART_1_PutChar
 201:.\main.c      ****                             USBUART_1_PutChar(8);
 524              		.loc 1 201 0
 525 0190 0820     		movs	r0, #8
 526 0192 FFF7FEFF 		bl	USBUART_1_PutChar
 202:.\main.c      ****                         }
 203:.\main.c      ****                         break;
 527              		.loc 1 203 0
 528 0196 4BE0     		b	.L25
 529              	.L30:
 530 0198 4AE0     		b	.L25
 531              	.L27:
 204:.\main.c      ****                     case 13://enter (carriage return)
 205:.\main.c      ****                         initDiffManEncodedArray();
 532              		.loc 1 205 0
 533 019a FFF7FEFF 		bl	initDiffManEncodedArray
 206:.\main.c      **** 						lineString[4] = stringPosition - HEADER_POS;
 534              		.loc 1 206 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 14


 535 019e 97F87730 		ldrb	r3, [r7, #119]
 536 01a2 073B     		subs	r3, r3, #7
 537 01a4 DBB2     		uxtb	r3, r3
 538 01a6 3B73     		strb	r3, [r7, #12]
 207:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 539              		.loc 1 207 0
 540 01a8 07F10802 		add	r2, r7, #8
 541 01ac 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 542 01b0 1046     		mov	r0, r2
 543 01b2 1946     		mov	r1, r3
 544 01b4 FFF7FEFF 		bl	stringToDiffMan
 208:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 545              		.loc 1 208 0
 546 01b8 00BF     		nop
 547              	.L32:
 548              		.loc 1 208 0 is_stmt 0 discriminator 1
 549 01ba FFF7FEFF 		bl	USBUART_1_CDCIsReady
 550 01be 0346     		mov	r3, r0
 551 01c0 002B     		cmp	r3, #0
 552 01c2 FAD0     		beq	.L32
 209:.\main.c      ****                         USBUART_1_PutCRLF();
 553              		.loc 1 209 0 is_stmt 1
 554 01c4 FFF7FEFF 		bl	USBUART_1_PutCRLF
 210:.\main.c      **** 
 211:.\main.c      ****                         //keep looping until data is transmitted
 212:.\main.c      **** 
 213:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
 555              		.loc 1 213 0
 556 01c8 03E0     		b	.L33
 557              	.L34:
 214:.\main.c      **** 
 215:.\main.c      ****                             transmitData();
 558              		.loc 1 215 0
 559 01ca FFF7FEFF 		bl	transmitData
 216:.\main.c      ****                             setNetworkStateOnLEDs();
 560              		.loc 1 216 0
 561 01ce FFF7FEFF 		bl	setNetworkStateOnLEDs
 562              	.L33:
 213:.\main.c      **** 
 563              		.loc 1 213 0
 564 01d2 194B     		ldr	r3, .L39+4
 565 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 566 01d6 83F00103 		eor	r3, r3, #1
 567 01da DBB2     		uxtb	r3, r3
 568 01dc 002B     		cmp	r3, #0
 569 01de F4D1     		bne	.L34
 217:.\main.c      ****                         }
 218:.\main.c      ****                         dataTransmissionComplete = false;
 570              		.loc 1 218 0
 571 01e0 154B     		ldr	r3, .L39+4
 572 01e2 0022     		movs	r2, #0
 573 01e4 1A70     		strb	r2, [r3]
 219:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 574              		.loc 1 219 0
 575 01e6 0120     		movs	r0, #1
 576 01e8 FFF7FEFF 		bl	TX_pin_Write
 220:.\main.c      ****                         //reset index
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 15


 221:.\main.c      ****                         halfBitIndex = 0;
 577              		.loc 1 221 0
 578 01ec 204B     		ldr	r3, .L39+60
 579 01ee 0022     		movs	r2, #0
 580 01f0 1A60     		str	r2, [r3]
 222:.\main.c      ****                         stringPosition = HEADER_POS;
 581              		.loc 1 222 0
 582 01f2 0723     		movs	r3, #7
 583 01f4 87F87730 		strb	r3, [r7, #119]
 223:.\main.c      ****                         break;
 584              		.loc 1 223 0
 585 01f8 1AE0     		b	.L25
 586              	.L37:
 224:.\main.c      ****                     case 27://escape
 225:.\main.c      ****                         break;
 226:.\main.c      ****                     default://everything else
 227:.\main.c      ****                         lineString[stringPosition] = rx;
 587              		.loc 1 227 0
 588 01fa 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 589 01fe 07F17802 		add	r2, r7, #120
 590 0202 1344     		add	r3, r3, r2
 591 0204 97F87620 		ldrb	r2, [r7, #118]
 592 0208 03F8702C 		strb	r2, [r3, #-112]
 228:.\main.c      ****                         stringPosition++;
 593              		.loc 1 228 0
 594 020c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 595 0210 0133     		adds	r3, r3, #1
 596 0212 87F87730 		strb	r3, [r7, #119]
 229:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 597              		.loc 1 229 0
 598 0216 00BF     		nop
 599              	.L35:
 600              		.loc 1 229 0 is_stmt 0 discriminator 1
 601 0218 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 602 021c 0346     		mov	r3, r0
 603 021e 002B     		cmp	r3, #0
 604 0220 FAD0     		beq	.L35
 230:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 605              		.loc 1 230 0 is_stmt 1
 606 0222 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 607 0226 1846     		mov	r0, r3
 608 0228 FFF7FEFF 		bl	USBUART_1_PutChar
 231:.\main.c      ****                         break;
 609              		.loc 1 231 0
 610 022c 00E0     		b	.L25
 611              	.L38:
 225:.\main.c      ****                     default://everything else
 612              		.loc 1 225 0
 613 022e 00BF     		nop
 614              	.L25:
 232:.\main.c      ****                 }
 233:.\main.c      ****             }
 234:.\main.c      ****         }
 235:.\main.c      ****     }
 615              		.loc 1 235 0 discriminator 1
 616 0230 30E7     		b	.L36
 617              	.L40:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 16


 618 0232 00BF     		.align	2
 619              	.L39:
 620 0234 00000000 		.word	timerExpired
 621 0238 00000000 		.word	dataTransmissionComplete
 622 023c 00000000 		.word	messageLength
 623 0240 00000000 		.word	powerOnEdge
 624 0244 00000000 		.word	Idle_Collision_ISR
 625 0248 00000000 		.word	Edge_detect_ISR
 626 024c 00000000 		.word	TimerHandler
 627 0250 00000000 		.word	ReceiveTimerISR
 628 0254 00000000 		.word	receivedDataCount
 629 0258 00000000 		.word	receivedDataIndex
 630 025c 00000000 		.word	TX_DESTINATION_ADDRESS
 631 0260 00000000 		.word	networkState
 632 0264 00000000 		.word	diffManReceivedData
 633 0268 00000000 		.word	receivedChar
 634 026c 00000000 		.word	currentRXCharPosition
 635 0270 00000000 		.word	halfBitIndex
 636              		.cfi_endproc
 637              	.LFE67:
 638              		.size	main, .-main
 639              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 640              		.align	2
 641              		.global	initDiffManEncodedArray
 642              		.thumb
 643              		.thumb_func
 644              		.type	initDiffManEncodedArray, %function
 645              	initDiffManEncodedArray:
 646              	.LFB68:
 236:.\main.c      **** }
 237:.\main.c      **** 
 238:.\main.c      **** /*
 239:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the
 240:.\main.c      **** half bits 01.
 241:.\main.c      **** Only call when starting to transfer a new string
 242:.\main.c      **** */
 243:.\main.c      **** void initDiffManEncodedArray(){
 647              		.loc 1 243 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0000 80B4     		push	{r7}
 653              		.cfi_def_cfa_offset 4
 654              		.cfi_offset 7, -4
 655 0002 00AF     		add	r7, sp, #0
 656              		.cfi_def_cfa_register 7
 244:.\main.c      ****     halfBitIndex = 0;
 657              		.loc 1 244 0
 658 0004 0E4B     		ldr	r3, .L42
 659 0006 0022     		movs	r2, #0
 660 0008 1A60     		str	r2, [r3]
 245:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 661              		.loc 1 245 0
 662 000a 0D4B     		ldr	r3, .L42
 663 000c 1B68     		ldr	r3, [r3]
 664 000e 0D4A     		ldr	r2, .L42+4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 17


 665 0010 0021     		movs	r1, #0
 666 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 246:.\main.c      ****     halfBitIndex++;
 667              		.loc 1 246 0
 668 0016 0A4B     		ldr	r3, .L42
 669 0018 1B68     		ldr	r3, [r3]
 670 001a 0133     		adds	r3, r3, #1
 671 001c 084A     		ldr	r2, .L42
 672 001e 1360     		str	r3, [r2]
 247:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 673              		.loc 1 247 0
 674 0020 074B     		ldr	r3, .L42
 675 0022 1B68     		ldr	r3, [r3]
 676 0024 074A     		ldr	r2, .L42+4
 677 0026 0121     		movs	r1, #1
 678 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 248:.\main.c      ****     halfBitIndex++;
 679              		.loc 1 248 0
 680 002c 044B     		ldr	r3, .L42
 681 002e 1B68     		ldr	r3, [r3]
 682 0030 0133     		adds	r3, r3, #1
 683 0032 034A     		ldr	r2, .L42
 684 0034 1360     		str	r3, [r2]
 249:.\main.c      **** }
 685              		.loc 1 249 0
 686 0036 BD46     		mov	sp, r7
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0038 5DF8047B 		ldr	r7, [sp], #4
 690              		.cfi_restore 7
 691              		.cfi_def_cfa_offset 0
 692 003c 7047     		bx	lr
 693              	.L43:
 694 003e 00BF     		.align	2
 695              	.L42:
 696 0040 00000000 		.word	halfBitIndex
 697 0044 00000000 		.word	diffManEncodedData
 698              		.cfi_endproc
 699              	.LFE68:
 700              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 701              		.section	.text.stringToDiffMan,"ax",%progbits
 702              		.align	2
 703              		.global	stringToDiffMan
 704              		.thumb
 705              		.thumb_func
 706              		.type	stringToDiffMan, %function
 707              	stringToDiffMan:
 708              	.LFB69:
 250:.\main.c      **** 
 251:.\main.c      **** /*
 252:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 253:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 254:.\main.c      **** */
 255:.\main.c      **** void stringToDiffMan(char *lineString, uint8 stringPosition){
 709              		.loc 1 255 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 18


 712              		@ frame_needed = 1, uses_anonymous_args = 0
 713 0000 80B5     		push	{r7, lr}
 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
 717 0002 84B0     		sub	sp, sp, #16
 718              		.cfi_def_cfa_offset 24
 719 0004 00AF     		add	r7, sp, #0
 720              		.cfi_def_cfa_register 7
 721 0006 7860     		str	r0, [r7, #4]
 722 0008 0B46     		mov	r3, r1
 723 000a FB70     		strb	r3, [r7, #3]
 256:.\main.c      **** 
 257:.\main.c      ****     unsigned int i = 0;
 724              		.loc 1 257 0
 725 000c 0023     		movs	r3, #0
 726 000e FB60     		str	r3, [r7, #12]
 258:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 727              		.loc 1 258 0
 728 0010 0023     		movs	r3, #0
 729 0012 FB60     		str	r3, [r7, #12]
 730 0014 09E0     		b	.L45
 731              	.L46:
 259:.\main.c      ****         asciiToDiffMan(lineString[i]);//use to be lineString[i]
 732              		.loc 1 259 0 discriminator 3
 733 0016 7A68     		ldr	r2, [r7, #4]
 734 0018 FB68     		ldr	r3, [r7, #12]
 735 001a 1344     		add	r3, r3, r2
 736 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 737 001e 1846     		mov	r0, r3
 738 0020 FFF7FEFF 		bl	asciiToDiffMan
 258:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 739              		.loc 1 258 0 discriminator 3
 740 0024 FB68     		ldr	r3, [r7, #12]
 741 0026 0133     		adds	r3, r3, #1
 742 0028 FB60     		str	r3, [r7, #12]
 743              	.L45:
 258:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 744              		.loc 1 258 0 is_stmt 0 discriminator 1
 745 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 746 002c FB68     		ldr	r3, [r7, #12]
 747 002e 9A42     		cmp	r2, r3
 748 0030 F1D8     		bhi	.L46
 260:.\main.c      ****     }
 261:.\main.c      **** }
 749              		.loc 1 261 0 is_stmt 1
 750 0032 1037     		adds	r7, r7, #16
 751              		.cfi_def_cfa_offset 8
 752 0034 BD46     		mov	sp, r7
 753              		.cfi_def_cfa_register 13
 754              		@ sp needed
 755 0036 80BD     		pop	{r7, pc}
 756              		.cfi_endproc
 757              	.LFE69:
 758              		.size	stringToDiffMan, .-stringToDiffMan
 759              		.section	.text.hexToDiffMan,"ax",%progbits
 760              		.align	2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 19


 761              		.global	hexToDiffMan
 762              		.thumb
 763              		.thumb_func
 764              		.type	hexToDiffMan, %function
 765              	hexToDiffMan:
 766              	.LFB70:
 262:.\main.c      **** 
 263:.\main.c      **** /*
 264:.\main.c      **** Helper method. 
 265:.\main.c      **** Converts a hexadecimal value to a differental manchester line encoded version. 
 266:.\main.c      **** Used for the header b/c does not added a leading 1 like asciiToDiffMan() method.
 267:.\main.c      **** */
 268:.\main.c      **** void hexToDiffMan(uint8 hexValue){
 767              		.loc 1 268 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 96
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 772 0000 80B4     		push	{r7}
 773              		.cfi_def_cfa_offset 4
 774              		.cfi_offset 7, -4
 775 0002 99B0     		sub	sp, sp, #100
 776              		.cfi_def_cfa_offset 104
 777 0004 00AF     		add	r7, sp, #0
 778              		.cfi_def_cfa_register 7
 779 0006 0346     		mov	r3, r0
 780 0008 FB71     		strb	r3, [r7, #7]
 269:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 270:.\main.c      ****     int i;
 271:.\main.c      ****     for (i = 0; i < 8; ++i){//todo test new value
 781              		.loc 1 271 0
 782 000a 0023     		movs	r3, #0
 783 000c FB65     		str	r3, [r7, #92]
 784 000e 0FE0     		b	.L48
 785              	.L49:
 272:.\main.c      ****         binaryValueOfChar[i] = (hexValue >> i) & 1;
 786              		.loc 1 272 0 discriminator 3
 787 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 788 0012 FB6D     		ldr	r3, [r7, #92]
 789 0014 42FA03F3 		asr	r3, r2, r3
 790 0018 03F00102 		and	r2, r3, #1
 791 001c FB6D     		ldr	r3, [r7, #92]
 792 001e 9B00     		lsls	r3, r3, #2
 793 0020 07F16001 		add	r1, r7, #96
 794 0024 0B44     		add	r3, r3, r1
 795 0026 43F8542C 		str	r2, [r3, #-84]
 271:.\main.c      ****         binaryValueOfChar[i] = (hexValue >> i) & 1;
 796              		.loc 1 271 0 discriminator 3
 797 002a FB6D     		ldr	r3, [r7, #92]
 798 002c 0133     		adds	r3, r3, #1
 799 002e FB65     		str	r3, [r7, #92]
 800              	.L48:
 271:.\main.c      ****         binaryValueOfChar[i] = (hexValue >> i) & 1;
 801              		.loc 1 271 0 is_stmt 0 discriminator 1
 802 0030 FB6D     		ldr	r3, [r7, #92]
 803 0032 072B     		cmp	r3, #7
 804 0034 ECDD     		ble	.L49
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 20


 273:.\main.c      ****     }
 274:.\main.c      **** }
 805              		.loc 1 274 0 is_stmt 1
 806 0036 6437     		adds	r7, r7, #100
 807              		.cfi_def_cfa_offset 4
 808 0038 BD46     		mov	sp, r7
 809              		.cfi_def_cfa_register 13
 810              		@ sp needed
 811 003a 5DF8047B 		ldr	r7, [sp], #4
 812              		.cfi_restore 7
 813              		.cfi_def_cfa_offset 0
 814 003e 7047     		bx	lr
 815              		.cfi_endproc
 816              	.LFE70:
 817              		.size	hexToDiffMan, .-hexToDiffMan
 818              		.section	.text.asciiToDiffMan,"ax",%progbits
 819              		.align	2
 820              		.global	asciiToDiffMan
 821              		.thumb
 822              		.thumb_func
 823              		.type	asciiToDiffMan, %function
 824              	asciiToDiffMan:
 825              	.LFB71:
 275:.\main.c      **** 
 276:.\main.c      **** /*
 277:.\main.c      **** Helper method. Do not call from main.
 278:.\main.c      **** Converts a ascii char to a differental manchester line encoded version. 
 279:.\main.c      **** Will add leading 1, so only use for characters, not the header.
 280:.\main.c      **** */
 281:.\main.c      **** void asciiToDiffMan(char asciiChar)
 282:.\main.c      **** {
 826              		.loc 1 282 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 104
 829              		@ frame_needed = 1, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 831 0000 80B4     		push	{r7}
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 7, -4
 834 0002 9BB0     		sub	sp, sp, #108
 835              		.cfi_def_cfa_offset 112
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0006 0346     		mov	r3, r0
 839 0008 FB71     		strb	r3, [r7, #7]
 283:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 840              		.loc 1 283 0
 841 000a 6C4B     		ldr	r3, .L62
 842 000c 1B68     		ldr	r3, [r3]
 843 000e 013B     		subs	r3, r3, #1
 844 0010 6B4A     		ldr	r2, .L62+4
 845 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 846 0016 87F86730 		strb	r3, [r7, #103]
 284:.\main.c      ****     //send starting 1 bit (encoded)
 285:.\main.c      ****     if(previousHalfBit == 1){
 847              		.loc 1 285 0
 848 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 21


 849 001e 012B     		cmp	r3, #1
 850 0020 16D1     		bne	.L51
 286:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 851              		.loc 1 286 0
 852 0022 664B     		ldr	r3, .L62
 853 0024 1B68     		ldr	r3, [r3]
 854 0026 664A     		ldr	r2, .L62+4
 855 0028 0121     		movs	r1, #1
 856 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 287:.\main.c      ****         halfBitIndex++;
 857              		.loc 1 287 0
 858 002e 634B     		ldr	r3, .L62
 859 0030 1B68     		ldr	r3, [r3]
 860 0032 0133     		adds	r3, r3, #1
 861 0034 614A     		ldr	r2, .L62
 862 0036 1360     		str	r3, [r2]
 288:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 863              		.loc 1 288 0
 864 0038 604B     		ldr	r3, .L62
 865 003a 1B68     		ldr	r3, [r3]
 866 003c 604A     		ldr	r2, .L62+4
 867 003e 0021     		movs	r1, #0
 868 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 289:.\main.c      ****         halfBitIndex++;
 869              		.loc 1 289 0
 870 0044 5D4B     		ldr	r3, .L62
 871 0046 1B68     		ldr	r3, [r3]
 872 0048 0133     		adds	r3, r3, #1
 873 004a 5C4A     		ldr	r2, .L62
 874 004c 1360     		str	r3, [r2]
 875 004e 15E0     		b	.L52
 876              	.L51:
 290:.\main.c      ****     }else{
 291:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 877              		.loc 1 291 0
 878 0050 5A4B     		ldr	r3, .L62
 879 0052 1B68     		ldr	r3, [r3]
 880 0054 5A4A     		ldr	r2, .L62+4
 881 0056 0021     		movs	r1, #0
 882 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 292:.\main.c      ****         halfBitIndex++;
 883              		.loc 1 292 0
 884 005c 574B     		ldr	r3, .L62
 885 005e 1B68     		ldr	r3, [r3]
 886 0060 0133     		adds	r3, r3, #1
 887 0062 564A     		ldr	r2, .L62
 888 0064 1360     		str	r3, [r2]
 293:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 889              		.loc 1 293 0
 890 0066 554B     		ldr	r3, .L62
 891 0068 1B68     		ldr	r3, [r3]
 892 006a 554A     		ldr	r2, .L62+4
 893 006c 0121     		movs	r1, #1
 894 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 294:.\main.c      ****         halfBitIndex++;
 895              		.loc 1 294 0
 896 0072 524B     		ldr	r3, .L62
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 22


 897 0074 1B68     		ldr	r3, [r3]
 898 0076 0133     		adds	r3, r3, #1
 899 0078 504A     		ldr	r2, .L62
 900 007a 1360     		str	r3, [r2]
 901              	.L52:
 295:.\main.c      ****     }
 296:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 902              		.loc 1 296 0
 903 007c 4F4B     		ldr	r3, .L62
 904 007e 1B68     		ldr	r3, [r3]
 905 0080 013B     		subs	r3, r3, #1
 906 0082 4F4A     		ldr	r2, .L62+4
 907 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 908 0088 87F86730 		strb	r3, [r7, #103]
 297:.\main.c      **** 
 298:.\main.c      **** 
 299:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 300:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 301:.\main.c      ****     int i;
 302:.\main.c      ****     for(i=0; asciiChar>0; i++)
 909              		.loc 1 302 0
 910 008c 0023     		movs	r3, #0
 911 008e 3B66     		str	r3, [r7, #96]
 912 0090 0FE0     		b	.L53
 913              	.L54:
 303:.\main.c      ****     {
 304:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2;
 914              		.loc 1 304 0 discriminator 3
 915 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 916 0094 03F00102 		and	r2, r3, #1
 917 0098 3B6E     		ldr	r3, [r7, #96]
 918 009a 9B00     		lsls	r3, r3, #2
 919 009c 07F16801 		add	r1, r7, #104
 920 00a0 0B44     		add	r3, r3, r1
 921 00a2 43F85C2C 		str	r2, [r3, #-92]
 305:.\main.c      ****         asciiChar=asciiChar/2;
 922              		.loc 1 305 0 discriminator 3
 923 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 924 00a8 5B08     		lsrs	r3, r3, #1
 925 00aa FB71     		strb	r3, [r7, #7]
 302:.\main.c      ****     {
 926              		.loc 1 302 0 discriminator 3
 927 00ac 3B6E     		ldr	r3, [r7, #96]
 928 00ae 0133     		adds	r3, r3, #1
 929 00b0 3B66     		str	r3, [r7, #96]
 930              	.L53:
 302:.\main.c      ****     {
 931              		.loc 1 302 0 is_stmt 0 discriminator 1
 932 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 933 00b4 002B     		cmp	r3, #0
 934 00b6 ECD1     		bne	.L54
 306:.\main.c      ****     }
 307:.\main.c      ****     
 308:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 309:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 310:.\main.c      ****     int j;
 311:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--)
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 23


 935              		.loc 1 311 0 is_stmt 1
 936 00b8 0623     		movs	r3, #6
 937 00ba FB65     		str	r3, [r7, #92]
 938 00bc 76E0     		b	.L55
 939              	.L61:
 312:.\main.c      ****     {
 313:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 940              		.loc 1 313 0
 941 00be FB6D     		ldr	r3, [r7, #92]
 942 00c0 9B00     		lsls	r3, r3, #2
 943 00c2 07F16802 		add	r2, r7, #104
 944 00c6 1344     		add	r3, r3, r2
 945 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 946 00cc 012B     		cmp	r3, #1
 947 00ce 31D1     		bne	.L56
 314:.\main.c      ****         {
 315:.\main.c      ****             //bit == 1
 316:.\main.c      ****             if(previousHalfBit == 1)
 948              		.loc 1 316 0
 949 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 950 00d4 012B     		cmp	r3, #1
 951 00d6 16D1     		bne	.L57
 317:.\main.c      ****             {
 318:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 952              		.loc 1 318 0
 953 00d8 384B     		ldr	r3, .L62
 954 00da 1B68     		ldr	r3, [r3]
 955 00dc 384A     		ldr	r2, .L62+4
 956 00de 0121     		movs	r1, #1
 957 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 319:.\main.c      ****                 halfBitIndex++;
 958              		.loc 1 319 0
 959 00e4 354B     		ldr	r3, .L62
 960 00e6 1B68     		ldr	r3, [r3]
 961 00e8 0133     		adds	r3, r3, #1
 962 00ea 344A     		ldr	r2, .L62
 963 00ec 1360     		str	r3, [r2]
 320:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 964              		.loc 1 320 0
 965 00ee 334B     		ldr	r3, .L62
 966 00f0 1B68     		ldr	r3, [r3]
 967 00f2 334A     		ldr	r2, .L62+4
 968 00f4 0021     		movs	r1, #0
 969 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 321:.\main.c      ****                 halfBitIndex++;
 970              		.loc 1 321 0
 971 00fa 304B     		ldr	r3, .L62
 972 00fc 1B68     		ldr	r3, [r3]
 973 00fe 0133     		adds	r3, r3, #1
 974 0100 2E4A     		ldr	r2, .L62
 975 0102 1360     		str	r3, [r2]
 976 0104 47E0     		b	.L59
 977              	.L57:
 322:.\main.c      ****             }
 323:.\main.c      ****             else
 324:.\main.c      ****             {
 325:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 24


 978              		.loc 1 325 0
 979 0106 2D4B     		ldr	r3, .L62
 980 0108 1B68     		ldr	r3, [r3]
 981 010a 2D4A     		ldr	r2, .L62+4
 982 010c 0021     		movs	r1, #0
 983 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 326:.\main.c      ****                 halfBitIndex++;
 984              		.loc 1 326 0
 985 0112 2A4B     		ldr	r3, .L62
 986 0114 1B68     		ldr	r3, [r3]
 987 0116 0133     		adds	r3, r3, #1
 988 0118 284A     		ldr	r2, .L62
 989 011a 1360     		str	r3, [r2]
 327:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 990              		.loc 1 327 0
 991 011c 274B     		ldr	r3, .L62
 992 011e 1B68     		ldr	r3, [r3]
 993 0120 274A     		ldr	r2, .L62+4
 994 0122 0121     		movs	r1, #1
 995 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 328:.\main.c      ****                 halfBitIndex++;
 996              		.loc 1 328 0
 997 0128 244B     		ldr	r3, .L62
 998 012a 1B68     		ldr	r3, [r3]
 999 012c 0133     		adds	r3, r3, #1
 1000 012e 234A     		ldr	r2, .L62
 1001 0130 1360     		str	r3, [r2]
 1002 0132 30E0     		b	.L59
 1003              	.L56:
 329:.\main.c      ****             }
 330:.\main.c      **** 
 331:.\main.c      ****         }
 332:.\main.c      ****         else
 333:.\main.c      ****         {
 334:.\main.c      ****             //bit == 0
 335:.\main.c      ****             if(previousHalfBit == 1)
 1004              		.loc 1 335 0
 1005 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1006 0138 012B     		cmp	r3, #1
 1007 013a 16D1     		bne	.L60
 336:.\main.c      ****             {
 337:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1008              		.loc 1 337 0
 1009 013c 1F4B     		ldr	r3, .L62
 1010 013e 1B68     		ldr	r3, [r3]
 1011 0140 1F4A     		ldr	r2, .L62+4
 1012 0142 0021     		movs	r1, #0
 1013 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 338:.\main.c      ****                 halfBitIndex++;
 1014              		.loc 1 338 0
 1015 0148 1C4B     		ldr	r3, .L62
 1016 014a 1B68     		ldr	r3, [r3]
 1017 014c 0133     		adds	r3, r3, #1
 1018 014e 1B4A     		ldr	r2, .L62
 1019 0150 1360     		str	r3, [r2]
 339:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1020              		.loc 1 339 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 25


 1021 0152 1A4B     		ldr	r3, .L62
 1022 0154 1B68     		ldr	r3, [r3]
 1023 0156 1A4A     		ldr	r2, .L62+4
 1024 0158 0121     		movs	r1, #1
 1025 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 340:.\main.c      ****                 halfBitIndex++;
 1026              		.loc 1 340 0
 1027 015e 174B     		ldr	r3, .L62
 1028 0160 1B68     		ldr	r3, [r3]
 1029 0162 0133     		adds	r3, r3, #1
 1030 0164 154A     		ldr	r2, .L62
 1031 0166 1360     		str	r3, [r2]
 1032 0168 15E0     		b	.L59
 1033              	.L60:
 341:.\main.c      ****             }
 342:.\main.c      ****             else
 343:.\main.c      ****             {
 344:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1034              		.loc 1 344 0
 1035 016a 144B     		ldr	r3, .L62
 1036 016c 1B68     		ldr	r3, [r3]
 1037 016e 144A     		ldr	r2, .L62+4
 1038 0170 0121     		movs	r1, #1
 1039 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 345:.\main.c      ****                 halfBitIndex++;
 1040              		.loc 1 345 0
 1041 0176 114B     		ldr	r3, .L62
 1042 0178 1B68     		ldr	r3, [r3]
 1043 017a 0133     		adds	r3, r3, #1
 1044 017c 0F4A     		ldr	r2, .L62
 1045 017e 1360     		str	r3, [r2]
 346:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1046              		.loc 1 346 0
 1047 0180 0E4B     		ldr	r3, .L62
 1048 0182 1B68     		ldr	r3, [r3]
 1049 0184 0E4A     		ldr	r2, .L62+4
 1050 0186 0021     		movs	r1, #0
 1051 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 347:.\main.c      ****                 halfBitIndex++;
 1052              		.loc 1 347 0
 1053 018c 0B4B     		ldr	r3, .L62
 1054 018e 1B68     		ldr	r3, [r3]
 1055 0190 0133     		adds	r3, r3, #1
 1056 0192 0A4A     		ldr	r2, .L62
 1057 0194 1360     		str	r3, [r2]
 1058              	.L59:
 348:.\main.c      ****             }
 349:.\main.c      ****         }
 350:.\main.c      **** 
 351:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1059              		.loc 1 351 0 discriminator 2
 1060 0196 094B     		ldr	r3, .L62
 1061 0198 1B68     		ldr	r3, [r3]
 1062 019a 013B     		subs	r3, r3, #1
 1063 019c 084A     		ldr	r2, .L62+4
 1064 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1065 01a2 87F86730 		strb	r3, [r7, #103]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 26


 311:.\main.c      ****     {
 1066              		.loc 1 311 0 discriminator 2
 1067 01a6 FB6D     		ldr	r3, [r7, #92]
 1068 01a8 013B     		subs	r3, r3, #1
 1069 01aa FB65     		str	r3, [r7, #92]
 1070              	.L55:
 311:.\main.c      ****     {
 1071              		.loc 1 311 0 is_stmt 0 discriminator 1
 1072 01ac FB6D     		ldr	r3, [r7, #92]
 1073 01ae 002B     		cmp	r3, #0
 1074 01b0 85DA     		bge	.L61
 352:.\main.c      ****     }//end for
 353:.\main.c      **** 
 354:.\main.c      **** }//end function
 1075              		.loc 1 354 0 is_stmt 1
 1076 01b2 6C37     		adds	r7, r7, #108
 1077              		.cfi_def_cfa_offset 4
 1078 01b4 BD46     		mov	sp, r7
 1079              		.cfi_def_cfa_register 13
 1080              		@ sp needed
 1081 01b6 5DF8047B 		ldr	r7, [sp], #4
 1082              		.cfi_restore 7
 1083              		.cfi_def_cfa_offset 0
 1084 01ba 7047     		bx	lr
 1085              	.L63:
 1086              		.align	2
 1087              	.L62:
 1088 01bc 00000000 		.word	halfBitIndex
 1089 01c0 00000000 		.word	diffManEncodedData
 1090              		.cfi_endproc
 1091              	.LFE71:
 1092              		.size	asciiToDiffMan, .-asciiToDiffMan
 1093              		.global	__aeabi_i2d
 1094              		.global	__aeabi_ddiv
 1095              		.global	__aeabi_dmul
 1096              		.global	__aeabi_d2iz
 1097              		.section	.text.transmitData,"ax",%progbits
 1098              		.align	2
 1099              		.global	transmitData
 1100              		.thumb
 1101              		.thumb_func
 1102              		.type	transmitData, %function
 1103              	transmitData:
 1104              	.LFB72:
 355:.\main.c      **** 
 356:.\main.c      **** /*
 357:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 358:.\main.c      **** Checks network state before transmitting.
 359:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 360:.\main.c      **** */
 361:.\main.c      **** void transmitData(){
 1105              		.loc 1 361 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 8
 1108              		@ frame_needed = 1, uses_anonymous_args = 0
 1109 0000 80B5     		push	{r7, lr}
 1110              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 27


 1111              		.cfi_offset 7, -8
 1112              		.cfi_offset 14, -4
 1113 0002 82B0     		sub	sp, sp, #8
 1114              		.cfi_def_cfa_offset 16
 1115 0004 00AF     		add	r7, sp, #0
 1116              		.cfi_def_cfa_register 7
 362:.\main.c      ****     int i;
 363:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1117              		.loc 1 363 0
 1118 0006 0023     		movs	r3, #0
 1119 0008 7B60     		str	r3, [r7, #4]
 1120 000a 47E0     		b	.L65
 1121              	.L69:
 364:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 365:.\main.c      ****         //Else break out of transmition and wait random time
 366:.\main.c      ****         if(networkState != idle){
 1122              		.loc 1 366 0
 1123 000c 2B4B     		ldr	r3, .L71
 1124 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1125 0010 002B     		cmp	r3, #0
 1126 0012 2BD0     		beq	.L66
 367:.\main.c      ****             if(networkState == collision){
 1127              		.loc 1 367 0
 1128 0014 294B     		ldr	r3, .L71
 1129 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1130 0018 022B     		cmp	r3, #2
 1131 001a 27D1     		bne	.L66
 1132              	.LBB2:
 368:.\main.c      ****                 TX_pin_Write(1);
 1133              		.loc 1 368 0
 1134 001c 0120     		movs	r0, #1
 1135 001e FFF7FEFF 		bl	TX_pin_Write
 369:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1136              		.loc 1 369 0
 1137 0022 FFF7FEFF 		bl	getRandomNumber
 1138 0026 0346     		mov	r3, r0
 1139 0028 1846     		mov	r0, r3
 1140 002a FFF7FEFF 		bl	__aeabi_i2d
 1141 002e 0246     		mov	r2, r0
 1142 0030 0B46     		mov	r3, r1
 1143 0032 1046     		mov	r0, r2
 1144 0034 1946     		mov	r1, r3
 1145 0036 4FF00002 		mov	r2, #0
 1146 003a 214B     		ldr	r3, .L71+4
 1147 003c FFF7FEFF 		bl	__aeabi_ddiv
 1148 0040 0246     		mov	r2, r0
 1149 0042 0B46     		mov	r3, r1
 1150 0044 1046     		mov	r0, r2
 1151 0046 1946     		mov	r1, r3
 1152 0048 4FF00002 		mov	r2, #0
 1153 004c 1D4B     		ldr	r3, .L71+8
 1154 004e FFF7FEFF 		bl	__aeabi_dmul
 1155 0052 0246     		mov	r2, r0
 1156 0054 0B46     		mov	r3, r1
 1157 0056 1046     		mov	r0, r2
 1158 0058 1946     		mov	r1, r3
 1159 005a FFF7FEFF 		bl	__aeabi_d2iz
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 28


 1160 005e 0346     		mov	r3, r0
 1161 0060 3B60     		str	r3, [r7]
 370:.\main.c      **** 
 371:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 372:.\main.c      ****                 CyDelay(value);
 1162              		.loc 1 372 0
 1163 0062 3B68     		ldr	r3, [r7]
 1164 0064 1846     		mov	r0, r3
 1165 0066 FFF7FEFF 		bl	CyDelay
 373:.\main.c      ****                 break;
 1166              		.loc 1 373 0
 1167 006a 1CE0     		b	.L67
 1168              	.L66:
 1169              	.LBE2:
 374:.\main.c      ****             }
 375:.\main.c      ****         }
 376:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1170              		.loc 1 376 0
 1171 006c 164A     		ldr	r2, .L71+12
 1172 006e 7B68     		ldr	r3, [r7, #4]
 1173 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1174 0074 DBB2     		uxtb	r3, r3
 1175 0076 1846     		mov	r0, r3
 1176 0078 FFF7FEFF 		bl	TX_pin_Write
 377:.\main.c      ****         Timer_Start();
 1177              		.loc 1 377 0
 1178 007c FFF7FEFF 		bl	Timer_Start
 378:.\main.c      ****         while(!timerExpired);
 1179              		.loc 1 378 0
 1180 0080 00BF     		nop
 1181              	.L68:
 1182              		.loc 1 378 0 is_stmt 0 discriminator 1
 1183 0082 124B     		ldr	r3, .L71+16
 1184 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1185 0086 83F00103 		eor	r3, r3, #1
 1186 008a DBB2     		uxtb	r3, r3
 1187 008c 002B     		cmp	r3, #0
 1188 008e F8D1     		bne	.L68
 379:.\main.c      ****         timerExpired = false;
 1189              		.loc 1 379 0 is_stmt 1 discriminator 2
 1190 0090 0E4B     		ldr	r3, .L71+16
 1191 0092 0022     		movs	r2, #0
 1192 0094 1A70     		strb	r2, [r3]
 363:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1193              		.loc 1 363 0 discriminator 2
 1194 0096 7B68     		ldr	r3, [r7, #4]
 1195 0098 0133     		adds	r3, r3, #1
 1196 009a 7B60     		str	r3, [r7, #4]
 1197              	.L65:
 363:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1198              		.loc 1 363 0 is_stmt 0 discriminator 1
 1199 009c 0C4B     		ldr	r3, .L71+20
 1200 009e 1B68     		ldr	r3, [r3]
 1201 00a0 7A68     		ldr	r2, [r7, #4]
 1202 00a2 9A42     		cmp	r2, r3
 1203 00a4 B2DB     		blt	.L69
 1204              	.L67:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 29


 380:.\main.c      ****     }
 381:.\main.c      **** 
 382:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag
 383:.\main.c      ****     if(i == halfBitIndex){
 1205              		.loc 1 383 0 is_stmt 1
 1206 00a6 0A4B     		ldr	r3, .L71+20
 1207 00a8 1B68     		ldr	r3, [r3]
 1208 00aa 7A68     		ldr	r2, [r7, #4]
 1209 00ac 9A42     		cmp	r2, r3
 1210 00ae 02D1     		bne	.L64
 384:.\main.c      ****         dataTransmissionComplete = true;
 1211              		.loc 1 384 0
 1212 00b0 084B     		ldr	r3, .L71+24
 1213 00b2 0122     		movs	r2, #1
 1214 00b4 1A70     		strb	r2, [r3]
 1215              	.L64:
 385:.\main.c      ****     }
 386:.\main.c      **** }
 1216              		.loc 1 386 0
 1217 00b6 0837     		adds	r7, r7, #8
 1218              		.cfi_def_cfa_offset 8
 1219 00b8 BD46     		mov	sp, r7
 1220              		.cfi_def_cfa_register 13
 1221              		@ sp needed
 1222 00ba 80BD     		pop	{r7, pc}
 1223              	.L72:
 1224              		.align	2
 1225              	.L71:
 1226 00bc 00000000 		.word	networkState
 1227 00c0 00006040 		.word	1080033280
 1228 00c4 00008940 		.word	1082720256
 1229 00c8 00000000 		.word	diffManEncodedData
 1230 00cc 00000000 		.word	timerExpired
 1231 00d0 00000000 		.word	halfBitIndex
 1232 00d4 00000000 		.word	dataTransmissionComplete
 1233              		.cfi_endproc
 1234              	.LFE72:
 1235              		.size	transmitData, .-transmitData
 1236              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1237              		.align	2
 1238              		.global	setNetworkStateOnLEDs
 1239              		.thumb
 1240              		.thumb_func
 1241              		.type	setNetworkStateOnLEDs, %function
 1242              	setNetworkStateOnLEDs:
 1243              	.LFB73:
 387:.\main.c      **** 
 388:.\main.c      **** void setNetworkStateOnLEDs(){
 1244              		.loc 1 388 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248 0000 80B5     		push	{r7, lr}
 1249              		.cfi_def_cfa_offset 8
 1250              		.cfi_offset 7, -8
 1251              		.cfi_offset 14, -4
 1252 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 30


 1253              		.cfi_def_cfa_register 7
 389:.\main.c      **** 	 switch(networkState){
 1254              		.loc 1 389 0
 1255 0004 134B     		ldr	r3, .L79
 1256 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1257 0008 012B     		cmp	r3, #1
 1258 000a 04D0     		beq	.L75
 1259 000c 022B     		cmp	r3, #2
 1260 000e 16D0     		beq	.L76
 1261 0010 002B     		cmp	r3, #0
 1262 0012 0AD0     		beq	.L77
 390:.\main.c      ****         case busy:
 391:.\main.c      ****         {
 392:.\main.c      ****             LED4_Write(1);
 393:.\main.c      ****             LED3_Write(0);
 394:.\main.c      ****             LED2_Write(0);
 395:.\main.c      ****             break;
 396:.\main.c      ****         }
 397:.\main.c      ****         case idle:
 398:.\main.c      ****         {
 399:.\main.c      ****             LED3_Write(1);
 400:.\main.c      ****             LED4_Write(0);
 401:.\main.c      ****             LED2_Write(0);
 402:.\main.c      ****             break;
 403:.\main.c      ****         }
 404:.\main.c      ****         case collision:
 405:.\main.c      ****         {
 406:.\main.c      ****             LED2_Write(1);
 407:.\main.c      ****             LED4_Write(0);
 408:.\main.c      ****             LED3_Write(0);
 409:.\main.c      ****             break;
 410:.\main.c      ****         }
 411:.\main.c      ****         default:
 412:.\main.c      ****         {
 413:.\main.c      ****            //error
 414:.\main.c      ****             break;
 1263              		.loc 1 414 0
 1264 0014 1DE0     		b	.L73
 1265              	.L75:
 392:.\main.c      ****             LED3_Write(0);
 1266              		.loc 1 392 0
 1267 0016 0120     		movs	r0, #1
 1268 0018 FFF7FEFF 		bl	LED4_Write
 393:.\main.c      ****             LED2_Write(0);
 1269              		.loc 1 393 0
 1270 001c 0020     		movs	r0, #0
 1271 001e FFF7FEFF 		bl	LED3_Write
 394:.\main.c      ****             break;
 1272              		.loc 1 394 0
 1273 0022 0020     		movs	r0, #0
 1274 0024 FFF7FEFF 		bl	LED2_Write
 395:.\main.c      ****         }
 1275              		.loc 1 395 0
 1276 0028 13E0     		b	.L73
 1277              	.L77:
 399:.\main.c      ****             LED4_Write(0);
 1278              		.loc 1 399 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 31


 1279 002a 0120     		movs	r0, #1
 1280 002c FFF7FEFF 		bl	LED3_Write
 400:.\main.c      ****             LED2_Write(0);
 1281              		.loc 1 400 0
 1282 0030 0020     		movs	r0, #0
 1283 0032 FFF7FEFF 		bl	LED4_Write
 401:.\main.c      ****             break;
 1284              		.loc 1 401 0
 1285 0036 0020     		movs	r0, #0
 1286 0038 FFF7FEFF 		bl	LED2_Write
 402:.\main.c      ****         }
 1287              		.loc 1 402 0
 1288 003c 09E0     		b	.L73
 1289              	.L76:
 406:.\main.c      ****             LED4_Write(0);
 1290              		.loc 1 406 0
 1291 003e 0120     		movs	r0, #1
 1292 0040 FFF7FEFF 		bl	LED2_Write
 407:.\main.c      ****             LED3_Write(0);
 1293              		.loc 1 407 0
 1294 0044 0020     		movs	r0, #0
 1295 0046 FFF7FEFF 		bl	LED4_Write
 408:.\main.c      ****             break;
 1296              		.loc 1 408 0
 1297 004a 0020     		movs	r0, #0
 1298 004c FFF7FEFF 		bl	LED3_Write
 409:.\main.c      ****         }
 1299              		.loc 1 409 0
 1300 0050 00BF     		nop
 1301              	.L73:
 415:.\main.c      ****         }
 416:.\main.c      **** 	}
 417:.\main.c      **** }
 1302              		.loc 1 417 0
 1303 0052 80BD     		pop	{r7, pc}
 1304              	.L80:
 1305              		.align	2
 1306              	.L79:
 1307 0054 00000000 		.word	networkState
 1308              		.cfi_endproc
 1309              	.LFE73:
 1310              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1311              		.section	.text.getRandomNumber,"ax",%progbits
 1312              		.align	2
 1313              		.global	getRandomNumber
 1314              		.thumb
 1315              		.thumb_func
 1316              		.type	getRandomNumber, %function
 1317              	getRandomNumber:
 1318              	.LFB74:
 418:.\main.c      **** 
 419:.\main.c      **** /*
 420:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 421:.\main.c      **** */
 422:.\main.c      **** int getRandomNumber()
 423:.\main.c      **** {
 1319              		.loc 1 423 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 32


 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 16
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 84B0     		sub	sp, sp, #16
 1328              		.cfi_def_cfa_offset 24
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 424:.\main.c      ****     const int MIN_N = 1;
 1331              		.loc 1 424 0
 1332 0006 0123     		movs	r3, #1
 1333 0008 FB60     		str	r3, [r7, #12]
 425:.\main.c      ****     const int MAX_N = 128;
 1334              		.loc 1 425 0
 1335 000a 8023     		movs	r3, #128
 1336 000c BB60     		str	r3, [r7, #8]
 426:.\main.c      **** 
 427:.\main.c      ****     int n;
 428:.\main.c      **** /*
 429:.\main.c      ****     Get first and second random numbers.
 430:.\main.c      ****     */
 431:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1337              		.loc 1 431 0
 1338 000e FFF7FEFF 		bl	rand
 1339 0012 0246     		mov	r2, r0
 1340 0014 B968     		ldr	r1, [r7, #8]
 1341 0016 FB68     		ldr	r3, [r7, #12]
 1342 0018 CB1A     		subs	r3, r1, r3
 1343 001a 0133     		adds	r3, r3, #1
 1344 001c 92FBF3F1 		sdiv	r1, r2, r3
 1345 0020 03FB01F3 		mul	r3, r3, r1
 1346 0024 D21A     		subs	r2, r2, r3
 1347 0026 FB68     		ldr	r3, [r7, #12]
 1348 0028 1344     		add	r3, r3, r2
 1349 002a 7B60     		str	r3, [r7, #4]
 432:.\main.c      ****     return n;
 1350              		.loc 1 432 0
 1351 002c 7B68     		ldr	r3, [r7, #4]
 433:.\main.c      **** }
 1352              		.loc 1 433 0
 1353 002e 1846     		mov	r0, r3
 1354 0030 1037     		adds	r7, r7, #16
 1355              		.cfi_def_cfa_offset 8
 1356 0032 BD46     		mov	sp, r7
 1357              		.cfi_def_cfa_register 13
 1358              		@ sp needed
 1359 0034 80BD     		pop	{r7, pc}
 1360              		.cfi_endproc
 1361              	.LFE74:
 1362              		.size	getRandomNumber, .-getRandomNumber
 1363 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1364              		.align	2
 1365              		.global	diffManToASCII
 1366              		.thumb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 33


 1367              		.thumb_func
 1368              		.type	diffManToASCII, %function
 1369              	diffManToASCII:
 1370              	.LFB75:
 434:.\main.c      **** 
 435:.\main.c      **** /*
 436:.\main.c      **** Helper method.
 437:.\main.c      **** Convert differental manchester line encoded byte to ascii char
 438:.\main.c      **** */
 439:.\main.c      **** void diffManToASCII()
 440:.\main.c      **** {
 1371              		.loc 1 440 0
 1372              		.cfi_startproc
 1373              		@ args = 0, pretend = 0, frame = 8
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375              		@ link register save eliminated.
 1376 0000 80B4     		push	{r7}
 1377              		.cfi_def_cfa_offset 4
 1378              		.cfi_offset 7, -4
 1379 0002 83B0     		sub	sp, sp, #12
 1380              		.cfi_def_cfa_offset 16
 1381 0004 00AF     		add	r7, sp, #0
 1382              		.cfi_def_cfa_register 7
 441:.\main.c      ****     int i;
 442:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1383              		.loc 1 442 0
 1384 0006 0023     		movs	r3, #0
 1385 0008 7B60     		str	r3, [r7, #4]
 1386 000a 42E0     		b	.L84
 1387              	.L90:
 1388              	.LBB3:
 443:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1389              		.loc 1 443 0
 1390 000c 254B     		ldr	r3, .L91
 1391 000e 1B68     		ldr	r3, [r3]
 1392 0010 013B     		subs	r3, r3, #1
 1393 0012 254A     		ldr	r2, .L91+4
 1394 0014 D35C     		ldrb	r3, [r2, r3]
 1395 0016 FB70     		strb	r3, [r7, #3]
 444:.\main.c      ****         //send starting 1 bit (encoded)
 445:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1396              		.loc 1 445 0
 1397 0018 224B     		ldr	r3, .L91
 1398 001a 1B68     		ldr	r3, [r3]
 1399 001c 224A     		ldr	r2, .L91+4
 1400 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1401 0020 012B     		cmp	r3, #1
 1402 0022 17D1     		bne	.L85
 446:.\main.c      ****             //current half bit is 1
 447:.\main.c      ****             if(previousHalfBit == 1)
 1403              		.loc 1 447 0
 1404 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1405 0026 012B     		cmp	r3, #1
 1406 0028 0FD1     		bne	.L86
 448:.\main.c      ****             {
 449:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1407              		.loc 1 449 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 34


 1408 002a 7B68     		ldr	r3, [r7, #4]
 1409 002c C3F10703 		rsb	r3, r3, #7
 1410 0030 0122     		movs	r2, #1
 1411 0032 02FA03F3 		lsl	r3, r2, r3
 1412 0036 DAB2     		uxtb	r2, r3
 1413 0038 1C4B     		ldr	r3, .L91+8
 1414 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1415 003c DBB2     		uxtb	r3, r3
 1416 003e 1343     		orrs	r3, r3, r2
 1417 0040 DBB2     		uxtb	r3, r3
 1418 0042 DAB2     		uxtb	r2, r3
 1419 0044 194B     		ldr	r3, .L91+8
 1420 0046 1A70     		strb	r2, [r3]
 1421 0048 1BE0     		b	.L88
 1422              	.L86:
 450:.\main.c      ****             }
 451:.\main.c      ****             else
 452:.\main.c      ****             {
 453:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1423              		.loc 1 453 0
 1424 004a 184B     		ldr	r3, .L91+8
 1425 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1426 004e 174B     		ldr	r3, .L91+8
 1427 0050 1A70     		strb	r2, [r3]
 1428 0052 16E0     		b	.L88
 1429              	.L85:
 454:.\main.c      ****             }
 455:.\main.c      ****         }
 456:.\main.c      ****         else{
 457:.\main.c      ****             //current half bit is 0
 458:.\main.c      ****             if(previousHalfBit == 1)
 1430              		.loc 1 458 0
 1431 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1432 0056 012B     		cmp	r3, #1
 1433 0058 04D1     		bne	.L89
 459:.\main.c      ****             {
 460:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1434              		.loc 1 460 0
 1435 005a 144B     		ldr	r3, .L91+8
 1436 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1437 005e 134B     		ldr	r3, .L91+8
 1438 0060 1A70     		strb	r2, [r3]
 1439 0062 0EE0     		b	.L88
 1440              	.L89:
 461:.\main.c      ****             }
 462:.\main.c      ****             else
 463:.\main.c      ****             {
 464:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1441              		.loc 1 464 0
 1442 0064 7B68     		ldr	r3, [r7, #4]
 1443 0066 C3F10703 		rsb	r3, r3, #7
 1444 006a 0122     		movs	r2, #1
 1445 006c 02FA03F3 		lsl	r3, r2, r3
 1446 0070 DAB2     		uxtb	r2, r3
 1447 0072 0E4B     		ldr	r3, .L91+8
 1448 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1449 0076 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 35


 1450 0078 1343     		orrs	r3, r3, r2
 1451 007a DBB2     		uxtb	r3, r3
 1452 007c DAB2     		uxtb	r2, r3
 1453 007e 0B4B     		ldr	r3, .L91+8
 1454 0080 1A70     		strb	r2, [r3]
 1455              	.L88:
 465:.\main.c      ****             }
 466:.\main.c      ****         }
 467:.\main.c      ****         receivedDataIndex += 2;
 1456              		.loc 1 467 0 discriminator 2
 1457 0082 084B     		ldr	r3, .L91
 1458 0084 1B68     		ldr	r3, [r3]
 1459 0086 0233     		adds	r3, r3, #2
 1460 0088 064A     		ldr	r2, .L91
 1461 008a 1360     		str	r3, [r2]
 1462              	.LBE3:
 442:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1463              		.loc 1 442 0 discriminator 2
 1464 008c 7B68     		ldr	r3, [r7, #4]
 1465 008e 0133     		adds	r3, r3, #1
 1466 0090 7B60     		str	r3, [r7, #4]
 1467              	.L84:
 442:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1468              		.loc 1 442 0 is_stmt 0 discriminator 1
 1469 0092 7B68     		ldr	r3, [r7, #4]
 1470 0094 072B     		cmp	r3, #7
 1471 0096 B9DD     		ble	.L90
 468:.\main.c      ****     }//end for loop
 469:.\main.c      **** }
 1472              		.loc 1 469 0 is_stmt 1
 1473 0098 0C37     		adds	r7, r7, #12
 1474              		.cfi_def_cfa_offset 4
 1475 009a BD46     		mov	sp, r7
 1476              		.cfi_def_cfa_register 13
 1477              		@ sp needed
 1478 009c 5DF8047B 		ldr	r7, [sp], #4
 1479              		.cfi_restore 7
 1480              		.cfi_def_cfa_offset 0
 1481 00a0 7047     		bx	lr
 1482              	.L92:
 1483 00a2 00BF     		.align	2
 1484              	.L91:
 1485 00a4 00000000 		.word	receivedDataIndex
 1486 00a8 00000000 		.word	diffManReceivedData
 1487 00ac 00000000 		.word	receivedChar
 1488              		.cfi_endproc
 1489              	.LFE75:
 1490              		.size	diffManToASCII, .-diffManToASCII
 1491              		.section	.text.storeChar,"ax",%progbits
 1492              		.align	2
 1493              		.global	storeChar
 1494              		.thumb
 1495              		.thumb_func
 1496              		.type	storeChar, %function
 1497              	storeChar:
 1498              	.LFB76:
 470:.\main.c      **** 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 36


 471:.\main.c      **** //stores char in receive array
 472:.\main.c      **** void storeChar(){
 1499              		.loc 1 472 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 1504 0000 80B4     		push	{r7}
 1505              		.cfi_def_cfa_offset 4
 1506              		.cfi_offset 7, -4
 1507 0002 00AF     		add	r7, sp, #0
 1508              		.cfi_def_cfa_register 7
 473:.\main.c      **** 	receivedChar &= ASCII_CHAR_MASK;
 1509              		.loc 1 473 0
 1510 0004 0A4B     		ldr	r3, .L94
 1511 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1512 0008 03F07F03 		and	r3, r3, #127
 1513 000c DAB2     		uxtb	r2, r3
 1514 000e 084B     		ldr	r3, .L94
 1515 0010 1A70     		strb	r2, [r3]
 474:.\main.c      **** 	rxChar[currentRXCharPosition] = receivedChar;
 1516              		.loc 1 474 0
 1517 0012 084B     		ldr	r3, .L94+4
 1518 0014 1B68     		ldr	r3, [r3]
 1519 0016 064A     		ldr	r2, .L94
 1520 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1521 001a 074A     		ldr	r2, .L94+8
 1522 001c D154     		strb	r1, [r2, r3]
 475:.\main.c      **** 	currentRXCharPosition++;
 1523              		.loc 1 475 0
 1524 001e 054B     		ldr	r3, .L94+4
 1525 0020 1B68     		ldr	r3, [r3]
 1526 0022 0133     		adds	r3, r3, #1
 1527 0024 034A     		ldr	r2, .L94+4
 1528 0026 1360     		str	r3, [r2]
 476:.\main.c      **** }
 1529              		.loc 1 476 0
 1530 0028 BD46     		mov	sp, r7
 1531              		.cfi_def_cfa_register 13
 1532              		@ sp needed
 1533 002a 5DF8047B 		ldr	r7, [sp], #4
 1534              		.cfi_restore 7
 1535              		.cfi_def_cfa_offset 0
 1536 002e 7047     		bx	lr
 1537              	.L95:
 1538              		.align	2
 1539              	.L94:
 1540 0030 00000000 		.word	receivedChar
 1541 0034 00000000 		.word	currentRXCharPosition
 1542 0038 00000000 		.word	rxChar
 1543              		.cfi_endproc
 1544              	.LFE76:
 1545              		.size	storeChar, .-storeChar
 1546              		.section	.text.printChar,"ax",%progbits
 1547              		.align	2
 1548              		.global	printChar
 1549              		.thumb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 37


 1550              		.thumb_func
 1551              		.type	printChar, %function
 1552              	printChar:
 1553              	.LFB77:
 477:.\main.c      **** 
 478:.\main.c      **** //Grabs all chars and prints to LCD
 479:.\main.c      **** void printChar(){
 1554              		.loc 1 479 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 8
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558 0000 80B5     		push	{r7, lr}
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 7, -8
 1561              		.cfi_offset 14, -4
 1562 0002 82B0     		sub	sp, sp, #8
 1563              		.cfi_def_cfa_offset 16
 1564 0004 00AF     		add	r7, sp, #0
 1565              		.cfi_def_cfa_register 7
 480:.\main.c      **** 	int i;//char position after array
 481:.\main.c      ****     for(i = 7; i < messageLength; i++){//we are assuming messageLength from the header is valid and
 1566              		.loc 1 481 0
 1567 0006 0723     		movs	r3, #7
 1568 0008 7B60     		str	r3, [r7, #4]
 1569 000a 09E0     		b	.L97
 1570              	.L98:
 482:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1571              		.loc 1 482 0 discriminator 3
 1572 000c 084A     		ldr	r2, .L99
 1573 000e 7B68     		ldr	r3, [r7, #4]
 1574 0010 1344     		add	r3, r3, r2
 1575 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1576 0014 1846     		mov	r0, r3
 1577 0016 FFF7FEFF 		bl	LCD_PutChar
 481:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1578              		.loc 1 481 0 discriminator 3
 1579 001a 7B68     		ldr	r3, [r7, #4]
 1580 001c 0133     		adds	r3, r3, #1
 1581 001e 7B60     		str	r3, [r7, #4]
 1582              	.L97:
 481:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1583              		.loc 1 481 0 is_stmt 0 discriminator 1
 1584 0020 044B     		ldr	r3, .L99+4
 1585 0022 1B68     		ldr	r3, [r3]
 1586 0024 7A68     		ldr	r2, [r7, #4]
 1587 0026 9A42     		cmp	r2, r3
 1588 0028 F0DB     		blt	.L98
 483:.\main.c      **** 		//TODO: implement USB transmit
 484:.\main.c      ****     }
 485:.\main.c      **** }
 1589              		.loc 1 485 0 is_stmt 1
 1590 002a 0837     		adds	r7, r7, #8
 1591              		.cfi_def_cfa_offset 8
 1592 002c BD46     		mov	sp, r7
 1593              		.cfi_def_cfa_register 13
 1594              		@ sp needed
 1595 002e 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 38


 1596              	.L100:
 1597              		.align	2
 1598              	.L99:
 1599 0030 00000000 		.word	rxChar
 1600 0034 00000000 		.word	messageLength
 1601              		.cfi_endproc
 1602              	.LFE77:
 1603              		.size	printChar, .-printChar
 1604              		.section	.text.headerCheck,"ax",%progbits
 1605              		.align	2
 1606              		.global	headerCheck
 1607              		.thumb
 1608              		.thumb_func
 1609              		.type	headerCheck, %function
 1610              	headerCheck:
 1611              	.LFB78:
 486:.\main.c      **** 
 487:.\main.c      **** //checks received header and strips from array if valid
 488:.\main.c      **** //otherwise, disregard contents
 489:.\main.c      **** bool headerCheck(){
 1612              		.loc 1 489 0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 0
 1615              		@ frame_needed = 1, uses_anonymous_args = 0
 1616 0000 80B5     		push	{r7, lr}
 1617              		.cfi_def_cfa_offset 8
 1618              		.cfi_offset 7, -8
 1619              		.cfi_offset 14, -4
 1620 0002 00AF     		add	r7, sp, #0
 1621              		.cfi_def_cfa_register 7
 490:.\main.c      ****     //nested if loops are probably the easiest way to check
 491:.\main.c      **** 	if(rxChar[0] == 'q'){
 1622              		.loc 1 491 0
 1623 0004 124B     		ldr	r3, .L105
 1624 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1625 0008 712B     		cmp	r3, #113
 1626 000a 1ED1     		bne	.L102
 492:.\main.c      **** 		if(rxChar[3] == 0x00 || rxChar[3] == RX_DESTINATION_ADDRESS){
 1627              		.loc 1 492 0
 1628 000c 104B     		ldr	r3, .L105
 1629 000e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1630 0010 002B     		cmp	r3, #0
 1631 0012 03D0     		beq	.L103
 1632              		.loc 1 492 0 is_stmt 0 discriminator 1
 1633 0014 0E4B     		ldr	r3, .L105
 1634 0016 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1635 0018 002B     		cmp	r3, #0
 1636 001a 16D1     		bne	.L102
 1637              	.L103:
 493:.\main.c      **** 			//this is as valid as we go (CRC is optional)
 494:.\main.c      **** 			messageLength = rxChar[4];
 1638              		.loc 1 494 0 is_stmt 1
 1639 001c 0C4B     		ldr	r3, .L105
 1640 001e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1641 0020 1A46     		mov	r2, r3
 1642 0022 0C4B     		ldr	r3, .L105+4
 1643 0024 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 39


 495:.\main.c      ****             LCD_PrintNumber(rxChar[4]);
 1644              		.loc 1 495 0
 1645 0026 0A4B     		ldr	r3, .L105
 1646 0028 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1647 002a 1846     		mov	r0, r3
 1648 002c FFF7FEFF 		bl	LCD_PrintU32Number
 496:.\main.c      **** 			crcState = rxChar[5];
 1649              		.loc 1 496 0
 1650 0030 074B     		ldr	r3, .L105
 1651 0032 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1652 0034 084B     		ldr	r3, .L105+8
 1653 0036 1A70     		strb	r2, [r3]
 497:.\main.c      **** 			headerCRC = rxChar[6];
 1654              		.loc 1 497 0
 1655 0038 054B     		ldr	r3, .L105
 1656 003a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1657 003c 1A46     		mov	r2, r3
 1658 003e 074B     		ldr	r3, .L105+12
 1659 0040 1A60     		str	r2, [r3]
 498:.\main.c      ****             CyDelay(1000);
 1660              		.loc 1 498 0
 1661 0042 4FF47A70 		mov	r0, #1000
 1662 0046 FFF7FEFF 		bl	CyDelay
 1663              	.L102:
 499:.\main.c      **** 			//return true;
 500:.\main.c      **** 		}
 501:.\main.c      **** 	}
 502:.\main.c      **** 	return false;
 1664              		.loc 1 502 0
 1665 004a 0023     		movs	r3, #0
 503:.\main.c      **** }
 1666              		.loc 1 503 0
 1667 004c 1846     		mov	r0, r3
 1668 004e 80BD     		pop	{r7, pc}
 1669              	.L106:
 1670              		.align	2
 1671              	.L105:
 1672 0050 00000000 		.word	rxChar
 1673 0054 00000000 		.word	messageLength
 1674 0058 00000000 		.word	crcState
 1675 005c 00000000 		.word	headerCRC
 1676              		.cfi_endproc
 1677              	.LFE78:
 1678              		.size	headerCheck, .-headerCheck
 1679              		.text
 1680              	.Letext0:
 1681              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1682              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1683              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1684              		.file 5 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1685              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1686              		.section	.debug_info,"",%progbits
 1687              	.Ldebug_info0:
 1688 0000 60050000 		.4byte	0x560
 1689 0004 0400     		.2byte	0x4
 1690 0006 00000000 		.4byte	.Ldebug_abbrev0
 1691 000a 04       		.byte	0x4
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 40


 1692 000b 01       		.uleb128 0x1
 1693 000c 60010000 		.4byte	.LASF74
 1694 0010 01       		.byte	0x1
 1695 0011 BA030000 		.4byte	.LASF75
 1696 0015 DE000000 		.4byte	.LASF76
 1697 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1698 001d 00000000 		.4byte	0
 1699 0021 00000000 		.4byte	.Ldebug_line0
 1700 0025 02       		.uleb128 0x2
 1701 0026 01       		.byte	0x1
 1702 0027 06       		.byte	0x6
 1703 0028 70020000 		.4byte	.LASF0
 1704 002c 02       		.uleb128 0x2
 1705 002d 01       		.byte	0x1
 1706 002e 08       		.byte	0x8
 1707 002f 1E020000 		.4byte	.LASF1
 1708 0033 02       		.uleb128 0x2
 1709 0034 02       		.byte	0x2
 1710 0035 05       		.byte	0x5
 1711 0036 82000000 		.4byte	.LASF2
 1712 003a 02       		.uleb128 0x2
 1713 003b 02       		.byte	0x2
 1714 003c 07       		.byte	0x7
 1715 003d 17030000 		.4byte	.LASF3
 1716 0041 03       		.uleb128 0x3
 1717 0042 C3030000 		.4byte	.LASF9
 1718 0046 02       		.byte	0x2
 1719 0047 3F       		.byte	0x3f
 1720 0048 4C000000 		.4byte	0x4c
 1721 004c 02       		.uleb128 0x2
 1722 004d 04       		.byte	0x4
 1723 004e 05       		.byte	0x5
 1724 004f F7020000 		.4byte	.LASF4
 1725 0053 02       		.uleb128 0x2
 1726 0054 04       		.byte	0x4
 1727 0055 07       		.byte	0x7
 1728 0056 BE020000 		.4byte	.LASF5
 1729 005a 02       		.uleb128 0x2
 1730 005b 08       		.byte	0x8
 1731 005c 05       		.byte	0x5
 1732 005d 24010000 		.4byte	.LASF6
 1733 0061 02       		.uleb128 0x2
 1734 0062 08       		.byte	0x8
 1735 0063 07       		.byte	0x7
 1736 0064 32010000 		.4byte	.LASF7
 1737 0068 04       		.uleb128 0x4
 1738 0069 04       		.byte	0x4
 1739 006a 05       		.byte	0x5
 1740 006b 696E7400 		.ascii	"int\000"
 1741 006f 02       		.uleb128 0x2
 1742 0070 04       		.byte	0x4
 1743 0071 07       		.byte	0x7
 1744 0072 9F020000 		.4byte	.LASF8
 1745 0076 03       		.uleb128 0x3
 1746 0077 0F030000 		.4byte	.LASF10
 1747 007b 03       		.byte	0x3
 1748 007c 2C       		.byte	0x2c
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 41


 1749 007d 41000000 		.4byte	0x41
 1750 0081 03       		.uleb128 0x3
 1751 0082 BD000000 		.4byte	.LASF11
 1752 0086 04       		.byte	0x4
 1753 0087 C2       		.byte	0xc2
 1754 0088 2C000000 		.4byte	0x2c
 1755 008c 03       		.uleb128 0x3
 1756 008d 9C000000 		.4byte	.LASF12
 1757 0091 04       		.byte	0x4
 1758 0092 C3       		.byte	0xc3
 1759 0093 3A000000 		.4byte	0x3a
 1760 0097 02       		.uleb128 0x2
 1761 0098 04       		.byte	0x4
 1762 0099 04       		.byte	0x4
 1763 009a 15010000 		.4byte	.LASF13
 1764 009e 02       		.uleb128 0x2
 1765 009f 08       		.byte	0x8
 1766 00a0 04       		.byte	0x4
 1767 00a1 5C030000 		.4byte	.LASF14
 1768 00a5 02       		.uleb128 0x2
 1769 00a6 01       		.byte	0x1
 1770 00a7 08       		.byte	0x8
 1771 00a8 E5020000 		.4byte	.LASF15
 1772 00ac 05       		.uleb128 0x5
 1773 00ad 4F030000 		.4byte	.LASF16
 1774 00b1 04       		.byte	0x4
 1775 00b2 6C01     		.2byte	0x16c
 1776 00b4 B8000000 		.4byte	0xb8
 1777 00b8 06       		.uleb128 0x6
 1778 00b9 81000000 		.4byte	0x81
 1779 00bd 02       		.uleb128 0x2
 1780 00be 04       		.byte	0x4
 1781 00bf 07       		.byte	0x7
 1782 00c0 3D000000 		.4byte	.LASF17
 1783 00c4 07       		.uleb128 0x7
 1784 00c5 04       		.byte	0x4
 1785 00c6 A5000000 		.4byte	0xa5
 1786 00ca 03       		.uleb128 0x3
 1787 00cb 51020000 		.4byte	.LASF18
 1788 00cf 05       		.byte	0x5
 1789 00d0 7A       		.byte	0x7a
 1790 00d1 4C000000 		.4byte	0x4c
 1791 00d5 08       		.uleb128 0x8
 1792 00d6 27000000 		.4byte	.LASF22
 1793 00da 01       		.byte	0x1
 1794 00db 01       		.byte	0x1
 1795 00dc 25       		.byte	0x25
 1796 00dd F4000000 		.4byte	0xf4
 1797 00e1 09       		.uleb128 0x9
 1798 00e2 8B020000 		.4byte	.LASF19
 1799 00e6 00       		.sleb128 0
 1800 00e7 09       		.uleb128 0x9
 1801 00e8 38030000 		.4byte	.LASF20
 1802 00ec 01       		.sleb128 1
 1803 00ed 09       		.uleb128 0x9
 1804 00ee 92000000 		.4byte	.LASF21
 1805 00f2 02       		.sleb128 2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 42


 1806 00f3 00       		.byte	0
 1807 00f4 0A       		.uleb128 0xa
 1808 00f5 63726300 		.ascii	"crc\000"
 1809 00f9 01       		.byte	0x1
 1810 00fa 01       		.byte	0x1
 1811 00fb 26       		.byte	0x26
 1812 00fc 19010000 		.4byte	0x119
 1813 0100 09       		.uleb128 0x9
 1814 0101 7D000000 		.4byte	.LASF23
 1815 0105 00       		.sleb128 0
 1816 0106 09       		.uleb128 0x9
 1817 0107 00000000 		.4byte	.LASF24
 1818 010b 01       		.sleb128 1
 1819 010c 09       		.uleb128 0x9
 1820 010d 54030000 		.4byte	.LASF25
 1821 0111 02       		.sleb128 2
 1822 0112 09       		.uleb128 0x9
 1823 0113 D0020000 		.4byte	.LASF26
 1824 0117 03       		.sleb128 3
 1825 0118 00       		.byte	0
 1826 0119 0B       		.uleb128 0xb
 1827 011a 14000000 		.4byte	.LASF27
 1828 011e 01       		.byte	0x1
 1829 011f 2A       		.byte	0x2a
 1830 0120 00000000 		.4byte	.LFB63
 1831 0124 28000000 		.4byte	.LFE63-.LFB63
 1832 0128 01       		.uleb128 0x1
 1833 0129 9C       		.byte	0x9c
 1834 012a 0B       		.uleb128 0xb
 1835 012b CE000000 		.4byte	.LASF28
 1836 012f 01       		.byte	0x1
 1837 0130 34       		.byte	0x34
 1838 0131 00000000 		.4byte	.LFB64
 1839 0135 58000000 		.4byte	.LFE64-.LFB64
 1840 0139 01       		.uleb128 0x1
 1841 013a 9C       		.byte	0x9c
 1842 013b 0B       		.uleb128 0xb
 1843 013c 10040000 		.4byte	.LASF29
 1844 0140 01       		.byte	0x1
 1845 0141 45       		.byte	0x45
 1846 0142 00000000 		.4byte	.LFB65
 1847 0146 1C000000 		.4byte	.LFE65-.LFB65
 1848 014a 01       		.uleb128 0x1
 1849 014b 9C       		.byte	0x9c
 1850 014c 0C       		.uleb128 0xc
 1851 014d 98030000 		.4byte	.LASF30
 1852 0151 01       		.byte	0x1
 1853 0152 4C       		.byte	0x4c
 1854 0153 00000000 		.4byte	.LFB66
 1855 0157 38000000 		.4byte	.LFE66-.LFB66
 1856 015b 01       		.uleb128 0x1
 1857 015c 9C       		.byte	0x9c
 1858 015d 0D       		.uleb128 0xd
 1859 015e 59000000 		.4byte	.LASF34
 1860 0162 01       		.byte	0x1
 1861 0163 53       		.byte	0x53
 1862 0164 68000000 		.4byte	0x68
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 43


 1863 0168 00000000 		.4byte	.LFB67
 1864 016c 74020000 		.4byte	.LFE67-.LFB67
 1865 0170 01       		.uleb128 0x1
 1866 0171 9C       		.byte	0x9c
 1867 0172 B0010000 		.4byte	0x1b0
 1868 0176 0E       		.uleb128 0xe
 1869 0177 727800   		.ascii	"rx\000"
 1870 017a 01       		.byte	0x1
 1871 017b 55       		.byte	0x55
 1872 017c A5000000 		.4byte	0xa5
 1873 0180 02       		.uleb128 0x2
 1874 0181 91       		.byte	0x91
 1875 0182 76       		.sleb128 -10
 1876 0183 0F       		.uleb128 0xf
 1877 0184 C3000000 		.4byte	.LASF31
 1878 0188 01       		.byte	0x1
 1879 0189 56       		.byte	0x56
 1880 018a B0010000 		.4byte	0x1b0
 1881 018e 03       		.uleb128 0x3
 1882 018f 91       		.byte	0x91
 1883 0190 887F     		.sleb128 -120
 1884 0192 0F       		.uleb128 0xf
 1885 0193 00030000 		.4byte	.LASF32
 1886 0197 01       		.byte	0x1
 1887 0198 57       		.byte	0x57
 1888 0199 81000000 		.4byte	0x81
 1889 019d 02       		.uleb128 0x2
 1890 019e 91       		.byte	0x91
 1891 019f 77       		.sleb128 -9
 1892 01a0 0F       		.uleb128 0xf
 1893 01a1 2A030000 		.4byte	.LASF33
 1894 01a5 01       		.byte	0x1
 1895 01a6 64       		.byte	0x64
 1896 01a7 CA000000 		.4byte	0xca
 1897 01ab 03       		.uleb128 0x3
 1898 01ac 91       		.byte	0x91
 1899 01ad 847F     		.sleb128 -124
 1900 01af 00       		.byte	0
 1901 01b0 10       		.uleb128 0x10
 1902 01b1 A5000000 		.4byte	0xa5
 1903 01b5 C0010000 		.4byte	0x1c0
 1904 01b9 11       		.uleb128 0x11
 1905 01ba BD000000 		.4byte	0xbd
 1906 01be 6B       		.byte	0x6b
 1907 01bf 00       		.byte	0
 1908 01c0 12       		.uleb128 0x12
 1909 01c1 58020000 		.4byte	.LASF43
 1910 01c5 01       		.byte	0x1
 1911 01c6 F3       		.byte	0xf3
 1912 01c7 00000000 		.4byte	.LFB68
 1913 01cb 48000000 		.4byte	.LFE68-.LFB68
 1914 01cf 01       		.uleb128 0x1
 1915 01d0 9C       		.byte	0x9c
 1916 01d1 13       		.uleb128 0x13
 1917 01d2 0E020000 		.4byte	.LASF35
 1918 01d6 01       		.byte	0x1
 1919 01d7 FF       		.byte	0xff
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 44


 1920 01d8 00000000 		.4byte	.LFB69
 1921 01dc 38000000 		.4byte	.LFE69-.LFB69
 1922 01e0 01       		.uleb128 0x1
 1923 01e1 9C       		.byte	0x9c
 1924 01e2 10020000 		.4byte	0x210
 1925 01e6 14       		.uleb128 0x14
 1926 01e7 C3000000 		.4byte	.LASF31
 1927 01eb 01       		.byte	0x1
 1928 01ec FF       		.byte	0xff
 1929 01ed C4000000 		.4byte	0xc4
 1930 01f1 02       		.uleb128 0x2
 1931 01f2 91       		.byte	0x91
 1932 01f3 6C       		.sleb128 -20
 1933 01f4 14       		.uleb128 0x14
 1934 01f5 00030000 		.4byte	.LASF32
 1935 01f9 01       		.byte	0x1
 1936 01fa FF       		.byte	0xff
 1937 01fb 81000000 		.4byte	0x81
 1938 01ff 02       		.uleb128 0x2
 1939 0200 91       		.byte	0x91
 1940 0201 6B       		.sleb128 -21
 1941 0202 15       		.uleb128 0x15
 1942 0203 6900     		.ascii	"i\000"
 1943 0205 01       		.byte	0x1
 1944 0206 0101     		.2byte	0x101
 1945 0208 6F000000 		.4byte	0x6f
 1946 020c 02       		.uleb128 0x2
 1947 020d 91       		.byte	0x91
 1948 020e 74       		.sleb128 -12
 1949 020f 00       		.byte	0
 1950 0210 16       		.uleb128 0x16
 1951 0211 B0000000 		.4byte	.LASF36
 1952 0215 01       		.byte	0x1
 1953 0216 0C01     		.2byte	0x10c
 1954 0218 00000000 		.4byte	.LFB70
 1955 021c 40000000 		.4byte	.LFE70-.LFB70
 1956 0220 01       		.uleb128 0x1
 1957 0221 9C       		.byte	0x9c
 1958 0222 54020000 		.4byte	0x254
 1959 0226 17       		.uleb128 0x17
 1960 0227 1B010000 		.4byte	.LASF37
 1961 022b 01       		.byte	0x1
 1962 022c 0C01     		.2byte	0x10c
 1963 022e 81000000 		.4byte	0x81
 1964 0232 03       		.uleb128 0x3
 1965 0233 91       		.byte	0x91
 1966 0234 9F7F     		.sleb128 -97
 1967 0236 18       		.uleb128 0x18
 1968 0237 A8030000 		.4byte	.LASF38
 1969 023b 01       		.byte	0x1
 1970 023c 0D01     		.2byte	0x10d
 1971 023e 54020000 		.4byte	0x254
 1972 0242 03       		.uleb128 0x3
 1973 0243 91       		.byte	0x91
 1974 0244 A47F     		.sleb128 -92
 1975 0246 15       		.uleb128 0x15
 1976 0247 6900     		.ascii	"i\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 45


 1977 0249 01       		.byte	0x1
 1978 024a 0E01     		.2byte	0x10e
 1979 024c 68000000 		.4byte	0x68
 1980 0250 02       		.uleb128 0x2
 1981 0251 91       		.byte	0x91
 1982 0252 74       		.sleb128 -12
 1983 0253 00       		.byte	0
 1984 0254 10       		.uleb128 0x10
 1985 0255 6F000000 		.4byte	0x6f
 1986 0259 64020000 		.4byte	0x264
 1987 025d 11       		.uleb128 0x11
 1988 025e BD000000 		.4byte	0xbd
 1989 0262 13       		.byte	0x13
 1990 0263 00       		.byte	0
 1991 0264 16       		.uleb128 0x16
 1992 0265 7C020000 		.4byte	.LASF39
 1993 0269 01       		.byte	0x1
 1994 026a 1901     		.2byte	0x119
 1995 026c 00000000 		.4byte	.LFB71
 1996 0270 C4010000 		.4byte	.LFE71-.LFB71
 1997 0274 01       		.uleb128 0x1
 1998 0275 9C       		.byte	0x9c
 1999 0276 C4020000 		.4byte	0x2c4
 2000 027a 17       		.uleb128 0x17
 2001 027b DB020000 		.4byte	.LASF40
 2002 027f 01       		.byte	0x1
 2003 0280 1901     		.2byte	0x119
 2004 0282 A5000000 		.4byte	0xa5
 2005 0286 03       		.uleb128 0x3
 2006 0287 91       		.byte	0x91
 2007 0288 977F     		.sleb128 -105
 2008 028a 18       		.uleb128 0x18
 2009 028b 2A040000 		.4byte	.LASF41
 2010 028f 01       		.byte	0x1
 2011 0290 1B01     		.2byte	0x11b
 2012 0292 81000000 		.4byte	0x81
 2013 0296 02       		.uleb128 0x2
 2014 0297 91       		.byte	0x91
 2015 0298 77       		.sleb128 -9
 2016 0299 18       		.uleb128 0x18
 2017 029a A8030000 		.4byte	.LASF38
 2018 029e 01       		.byte	0x1
 2019 029f 2C01     		.2byte	0x12c
 2020 02a1 54020000 		.4byte	0x254
 2021 02a5 03       		.uleb128 0x3
 2022 02a6 91       		.byte	0x91
 2023 02a7 9C7F     		.sleb128 -100
 2024 02a9 15       		.uleb128 0x15
 2025 02aa 6900     		.ascii	"i\000"
 2026 02ac 01       		.byte	0x1
 2027 02ad 2D01     		.2byte	0x12d
 2028 02af 68000000 		.4byte	0x68
 2029 02b3 02       		.uleb128 0x2
 2030 02b4 91       		.byte	0x91
 2031 02b5 70       		.sleb128 -16
 2032 02b6 15       		.uleb128 0x15
 2033 02b7 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 46


 2034 02b9 01       		.byte	0x1
 2035 02ba 3601     		.2byte	0x136
 2036 02bc 68000000 		.4byte	0x68
 2037 02c0 02       		.uleb128 0x2
 2038 02c1 91       		.byte	0x91
 2039 02c2 6C       		.sleb128 -20
 2040 02c3 00       		.byte	0
 2041 02c4 19       		.uleb128 0x19
 2042 02c5 07000000 		.4byte	.LASF48
 2043 02c9 01       		.byte	0x1
 2044 02ca 6901     		.2byte	0x169
 2045 02cc 00000000 		.4byte	.LFB72
 2046 02d0 D8000000 		.4byte	.LFE72-.LFB72
 2047 02d4 01       		.uleb128 0x1
 2048 02d5 9C       		.byte	0x9c
 2049 02d6 01030000 		.4byte	0x301
 2050 02da 15       		.uleb128 0x15
 2051 02db 6900     		.ascii	"i\000"
 2052 02dd 01       		.byte	0x1
 2053 02de 6A01     		.2byte	0x16a
 2054 02e0 68000000 		.4byte	0x68
 2055 02e4 02       		.uleb128 0x2
 2056 02e5 91       		.byte	0x91
 2057 02e6 74       		.sleb128 -12
 2058 02e7 1A       		.uleb128 0x1a
 2059 02e8 1C000000 		.4byte	.LBB2
 2060 02ec 50000000 		.4byte	.LBE2-.LBB2
 2061 02f0 18       		.uleb128 0x18
 2062 02f1 8C000000 		.4byte	.LASF42
 2063 02f5 01       		.byte	0x1
 2064 02f6 7101     		.2byte	0x171
 2065 02f8 68000000 		.4byte	0x68
 2066 02fc 02       		.uleb128 0x2
 2067 02fd 91       		.byte	0x91
 2068 02fe 70       		.sleb128 -16
 2069 02ff 00       		.byte	0
 2070 0300 00       		.byte	0
 2071 0301 1B       		.uleb128 0x1b
 2072 0302 EE010000 		.4byte	.LASF44
 2073 0306 01       		.byte	0x1
 2074 0307 8401     		.2byte	0x184
 2075 0309 00000000 		.4byte	.LFB73
 2076 030d 58000000 		.4byte	.LFE73-.LFB73
 2077 0311 01       		.uleb128 0x1
 2078 0312 9C       		.byte	0x9c
 2079 0313 1C       		.uleb128 0x1c
 2080 0314 2D000000 		.4byte	.LASF45
 2081 0318 01       		.byte	0x1
 2082 0319 A601     		.2byte	0x1a6
 2083 031b 68000000 		.4byte	0x68
 2084 031f 00000000 		.4byte	.LFB74
 2085 0323 36000000 		.4byte	.LFE74-.LFB74
 2086 0327 01       		.uleb128 0x1
 2087 0328 9C       		.byte	0x9c
 2088 0329 59030000 		.4byte	0x359
 2089 032d 18       		.uleb128 0x18
 2090 032e D5020000 		.4byte	.LASF46
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 47


 2091 0332 01       		.byte	0x1
 2092 0333 A801     		.2byte	0x1a8
 2093 0335 59030000 		.4byte	0x359
 2094 0339 02       		.uleb128 0x2
 2095 033a 91       		.byte	0x91
 2096 033b 74       		.sleb128 -12
 2097 033c 18       		.uleb128 0x18
 2098 033d DA030000 		.4byte	.LASF47
 2099 0341 01       		.byte	0x1
 2100 0342 A901     		.2byte	0x1a9
 2101 0344 59030000 		.4byte	0x359
 2102 0348 02       		.uleb128 0x2
 2103 0349 91       		.byte	0x91
 2104 034a 70       		.sleb128 -16
 2105 034b 15       		.uleb128 0x15
 2106 034c 6E00     		.ascii	"n\000"
 2107 034e 01       		.byte	0x1
 2108 034f AB01     		.2byte	0x1ab
 2109 0351 68000000 		.4byte	0x68
 2110 0355 02       		.uleb128 0x2
 2111 0356 91       		.byte	0x91
 2112 0357 6C       		.sleb128 -20
 2113 0358 00       		.byte	0
 2114 0359 1D       		.uleb128 0x1d
 2115 035a 68000000 		.4byte	0x68
 2116 035e 1E       		.uleb128 0x1e
 2117 035f 90020000 		.4byte	.LASF49
 2118 0363 01       		.byte	0x1
 2119 0364 B701     		.2byte	0x1b7
 2120 0366 00000000 		.4byte	.LFB75
 2121 036a B0000000 		.4byte	.LFE75-.LFB75
 2122 036e 01       		.uleb128 0x1
 2123 036f 9C       		.byte	0x9c
 2124 0370 9B030000 		.4byte	0x39b
 2125 0374 15       		.uleb128 0x15
 2126 0375 6900     		.ascii	"i\000"
 2127 0377 01       		.byte	0x1
 2128 0378 B901     		.2byte	0x1b9
 2129 037a 68000000 		.4byte	0x68
 2130 037e 02       		.uleb128 0x2
 2131 037f 91       		.byte	0x91
 2132 0380 74       		.sleb128 -12
 2133 0381 1A       		.uleb128 0x1a
 2134 0382 0C000000 		.4byte	.LBB3
 2135 0386 80000000 		.4byte	.LBE3-.LBB3
 2136 038a 18       		.uleb128 0x18
 2137 038b 2A040000 		.4byte	.LASF41
 2138 038f 01       		.byte	0x1
 2139 0390 BB01     		.2byte	0x1bb
 2140 0392 81000000 		.4byte	0x81
 2141 0396 02       		.uleb128 0x2
 2142 0397 91       		.byte	0x91
 2143 0398 73       		.sleb128 -13
 2144 0399 00       		.byte	0
 2145 039a 00       		.byte	0
 2146 039b 1F       		.uleb128 0x1f
 2147 039c 6A000000 		.4byte	.LASF50
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 48


 2148 03a0 01       		.byte	0x1
 2149 03a1 D801     		.2byte	0x1d8
 2150 03a3 00000000 		.4byte	.LFB76
 2151 03a7 3C000000 		.4byte	.LFE76-.LFB76
 2152 03ab 01       		.uleb128 0x1
 2153 03ac 9C       		.byte	0x9c
 2154 03ad 19       		.uleb128 0x19
 2155 03ae 04020000 		.4byte	.LASF51
 2156 03b2 01       		.byte	0x1
 2157 03b3 DF01     		.2byte	0x1df
 2158 03b5 00000000 		.4byte	.LFB77
 2159 03b9 38000000 		.4byte	.LFE77-.LFB77
 2160 03bd 01       		.uleb128 0x1
 2161 03be 9C       		.byte	0x9c
 2162 03bf D1030000 		.4byte	0x3d1
 2163 03c3 15       		.uleb128 0x15
 2164 03c4 6900     		.ascii	"i\000"
 2165 03c6 01       		.byte	0x1
 2166 03c7 E001     		.2byte	0x1e0
 2167 03c9 68000000 		.4byte	0x68
 2168 03cd 02       		.uleb128 0x2
 2169 03ce 91       		.byte	0x91
 2170 03cf 74       		.sleb128 -12
 2171 03d0 00       		.byte	0
 2172 03d1 20       		.uleb128 0x20
 2173 03d2 5E000000 		.4byte	.LASF52
 2174 03d6 01       		.byte	0x1
 2175 03d7 E901     		.2byte	0x1e9
 2176 03d9 E7030000 		.4byte	0x3e7
 2177 03dd 00000000 		.4byte	.LFB78
 2178 03e1 60000000 		.4byte	.LFE78-.LFB78
 2179 03e5 01       		.uleb128 0x1
 2180 03e6 9C       		.byte	0x9c
 2181 03e7 02       		.uleb128 0x2
 2182 03e8 01       		.byte	0x1
 2183 03e9 02       		.byte	0x2
 2184 03ea 32030000 		.4byte	.LASF53
 2185 03ee 21       		.uleb128 0x21
 2186 03ef 1D040000 		.4byte	.LASF54
 2187 03f3 06       		.byte	0x6
 2188 03f4 2A06     		.2byte	0x62a
 2189 03f6 FA030000 		.4byte	0x3fa
 2190 03fa 06       		.uleb128 0x6
 2191 03fb 76000000 		.4byte	0x76
 2192 03ff 10       		.uleb128 0x10
 2193 0400 68000000 		.4byte	0x68
 2194 0404 10040000 		.4byte	0x410
 2195 0408 22       		.uleb128 0x22
 2196 0409 BD000000 		.4byte	0xbd
 2197 040d 5F03     		.2byte	0x35f
 2198 040f 00       		.byte	0
 2199 0410 23       		.uleb128 0x23
 2200 0411 46000000 		.4byte	.LASF55
 2201 0415 01       		.byte	0x1
 2202 0416 1F       		.byte	0x1f
 2203 0417 FF030000 		.4byte	0x3ff
 2204 041b 05       		.uleb128 0x5
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 49


 2205 041c 03       		.byte	0x3
 2206 041d 00000000 		.4byte	diffManEncodedData
 2207 0421 10       		.uleb128 0x10
 2208 0422 81000000 		.4byte	0x81
 2209 0426 31040000 		.4byte	0x431
 2210 042a 11       		.uleb128 0x11
 2211 042b BD000000 		.4byte	0xbd
 2212 042f 6B       		.byte	0x6b
 2213 0430 00       		.byte	0
 2214 0431 23       		.uleb128 0x23
 2215 0432 7D030000 		.4byte	.LASF56
 2216 0436 01       		.byte	0x1
 2217 0437 20       		.byte	0x20
 2218 0438 21040000 		.4byte	0x421
 2219 043c 05       		.uleb128 0x5
 2220 043d 03       		.byte	0x3
 2221 043e 00000000 		.4byte	diffManReceivedData
 2222 0442 23       		.uleb128 0x23
 2223 0443 91030000 		.4byte	.LASF57
 2224 0447 01       		.byte	0x1
 2225 0448 21       		.byte	0x21
 2226 0449 B0010000 		.4byte	0x1b0
 2227 044d 05       		.uleb128 0x5
 2228 044e 03       		.byte	0x3
 2229 044f 00000000 		.4byte	rxChar
 2230 0453 23       		.uleb128 0x23
 2231 0454 AC020000 		.4byte	.LASF58
 2232 0458 01       		.byte	0x1
 2233 0459 22       		.byte	0x22
 2234 045a 68000000 		.4byte	0x68
 2235 045e 05       		.uleb128 0x5
 2236 045f 03       		.byte	0x3
 2237 0460 00000000 		.4byte	receivedDataIndex
 2238 0464 23       		.uleb128 0x23
 2239 0465 3D030000 		.4byte	.LASF59
 2240 0469 01       		.byte	0x1
 2241 046a 22       		.byte	0x22
 2242 046b 68000000 		.4byte	0x68
 2243 046f 05       		.uleb128 0x5
 2244 0470 03       		.byte	0x3
 2245 0471 00000000 		.4byte	receivedDataCount
 2246 0475 23       		.uleb128 0x23
 2247 0476 CD030000 		.4byte	.LASF60
 2248 047a 01       		.byte	0x1
 2249 047b 23       		.byte	0x23
 2250 047c 68000000 		.4byte	0x68
 2251 0480 05       		.uleb128 0x5
 2252 0481 03       		.byte	0x3
 2253 0482 00000000 		.4byte	halfBitIndex
 2254 0486 23       		.uleb128 0x23
 2255 0487 2C020000 		.4byte	.LASF61
 2256 048b 01       		.byte	0x1
 2257 048c 23       		.byte	0x23
 2258 048d 68000000 		.4byte	0x68
 2259 0491 05       		.uleb128 0x5
 2260 0492 03       		.byte	0x3
 2261 0493 00000000 		.4byte	currentDataPos
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 50


 2262 0497 23       		.uleb128 0x23
 2263 0498 3B020000 		.4byte	.LASF62
 2264 049c 01       		.byte	0x1
 2265 049d 23       		.byte	0x23
 2266 049e 68000000 		.4byte	0x68
 2267 04a2 05       		.uleb128 0x5
 2268 04a3 03       		.byte	0x3
 2269 04a4 00000000 		.4byte	currentRXCharPosition
 2270 04a8 23       		.uleb128 0x23
 2271 04a9 EA030000 		.4byte	.LASF63
 2272 04ad 01       		.byte	0x1
 2273 04ae 23       		.byte	0x23
 2274 04af 68000000 		.4byte	0x68
 2275 04b3 05       		.uleb128 0x5
 2276 04b4 03       		.byte	0x3
 2277 04b5 00000000 		.4byte	lengthOfData
 2278 04b9 23       		.uleb128 0x23
 2279 04ba 6F030000 		.4byte	.LASF64
 2280 04be 01       		.byte	0x1
 2281 04bf 23       		.byte	0x23
 2282 04c0 68000000 		.4byte	0x68
 2283 04c4 05       		.uleb128 0x5
 2284 04c5 03       		.byte	0x3
 2285 04c6 00000000 		.4byte	messageLength
 2286 04ca 23       		.uleb128 0x23
 2287 04cb E0030000 		.4byte	.LASF65
 2288 04cf 01       		.byte	0x1
 2289 04d0 23       		.byte	0x23
 2290 04d1 68000000 		.4byte	0x68
 2291 04d5 05       		.uleb128 0x5
 2292 04d6 03       		.byte	0x3
 2293 04d7 00000000 		.4byte	headerCRC
 2294 04db 23       		.uleb128 0x23
 2295 04dc 49010000 		.4byte	.LASF66
 2296 04e0 01       		.byte	0x1
 2297 04e1 23       		.byte	0x23
 2298 04e2 68000000 		.4byte	0x68
 2299 04e6 05       		.uleb128 0x5
 2300 04e7 03       		.byte	0x3
 2301 04e8 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2302 04ec 23       		.uleb128 0x23
 2303 04ed 3A040000 		.4byte	.LASF67
 2304 04f1 01       		.byte	0x1
 2305 04f2 24       		.byte	0x24
 2306 04f3 E7030000 		.4byte	0x3e7
 2307 04f7 05       		.uleb128 0x5
 2308 04f8 03       		.byte	0x3
 2309 04f9 00000000 		.4byte	timerExpired
 2310 04fd 23       		.uleb128 0x23
 2311 04fe F7030000 		.4byte	.LASF68
 2312 0502 01       		.byte	0x1
 2313 0503 24       		.byte	0x24
 2314 0504 E7030000 		.4byte	0x3e7
 2315 0508 05       		.uleb128 0x5
 2316 0509 03       		.byte	0x3
 2317 050a 00000000 		.4byte	dataTransmissionComplete
 2318 050e 23       		.uleb128 0x23
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 51


 2319 050f 47040000 		.4byte	.LASF69
 2320 0513 01       		.byte	0x1
 2321 0514 24       		.byte	0x24
 2322 0515 E7030000 		.4byte	0x3e7
 2323 0519 05       		.uleb128 0x5
 2324 051a 03       		.byte	0x3
 2325 051b 00000000 		.4byte	powerOnEdge
 2326 051f 23       		.uleb128 0x23
 2327 0520 63030000 		.4byte	.LASF70
 2328 0524 01       		.byte	0x1
 2329 0525 24       		.byte	0x24
 2330 0526 E7030000 		.4byte	0x3e7
 2331 052a 05       		.uleb128 0x5
 2332 052b 03       		.byte	0x3
 2333 052c 00000000 		.4byte	headerValid
 2334 0530 23       		.uleb128 0x23
 2335 0531 A3000000 		.4byte	.LASF71
 2336 0535 01       		.byte	0x1
 2337 0536 25       		.byte	0x25
 2338 0537 D5000000 		.4byte	0xd5
 2339 053b 05       		.uleb128 0x5
 2340 053c 03       		.byte	0x3
 2341 053d 00000000 		.4byte	networkState
 2342 0541 23       		.uleb128 0x23
 2343 0542 74000000 		.4byte	.LASF72
 2344 0546 01       		.byte	0x1
 2345 0547 26       		.byte	0x26
 2346 0548 F4000000 		.4byte	0xf4
 2347 054c 05       		.uleb128 0x5
 2348 054d 03       		.byte	0x3
 2349 054e 00000000 		.4byte	crcState
 2350 0552 23       		.uleb128 0x23
 2351 0553 EA020000 		.4byte	.LASF73
 2352 0557 01       		.byte	0x1
 2353 0558 28       		.byte	0x28
 2354 0559 A5000000 		.4byte	0xa5
 2355 055d 05       		.uleb128 0x5
 2356 055e 03       		.byte	0x3
 2357 055f 00000000 		.4byte	receivedChar
 2358 0563 00       		.byte	0
 2359              		.section	.debug_abbrev,"",%progbits
 2360              	.Ldebug_abbrev0:
 2361 0000 01       		.uleb128 0x1
 2362 0001 11       		.uleb128 0x11
 2363 0002 01       		.byte	0x1
 2364 0003 25       		.uleb128 0x25
 2365 0004 0E       		.uleb128 0xe
 2366 0005 13       		.uleb128 0x13
 2367 0006 0B       		.uleb128 0xb
 2368 0007 03       		.uleb128 0x3
 2369 0008 0E       		.uleb128 0xe
 2370 0009 1B       		.uleb128 0x1b
 2371 000a 0E       		.uleb128 0xe
 2372 000b 55       		.uleb128 0x55
 2373 000c 17       		.uleb128 0x17
 2374 000d 11       		.uleb128 0x11
 2375 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 52


 2376 000f 10       		.uleb128 0x10
 2377 0010 17       		.uleb128 0x17
 2378 0011 00       		.byte	0
 2379 0012 00       		.byte	0
 2380 0013 02       		.uleb128 0x2
 2381 0014 24       		.uleb128 0x24
 2382 0015 00       		.byte	0
 2383 0016 0B       		.uleb128 0xb
 2384 0017 0B       		.uleb128 0xb
 2385 0018 3E       		.uleb128 0x3e
 2386 0019 0B       		.uleb128 0xb
 2387 001a 03       		.uleb128 0x3
 2388 001b 0E       		.uleb128 0xe
 2389 001c 00       		.byte	0
 2390 001d 00       		.byte	0
 2391 001e 03       		.uleb128 0x3
 2392 001f 16       		.uleb128 0x16
 2393 0020 00       		.byte	0
 2394 0021 03       		.uleb128 0x3
 2395 0022 0E       		.uleb128 0xe
 2396 0023 3A       		.uleb128 0x3a
 2397 0024 0B       		.uleb128 0xb
 2398 0025 3B       		.uleb128 0x3b
 2399 0026 0B       		.uleb128 0xb
 2400 0027 49       		.uleb128 0x49
 2401 0028 13       		.uleb128 0x13
 2402 0029 00       		.byte	0
 2403 002a 00       		.byte	0
 2404 002b 04       		.uleb128 0x4
 2405 002c 24       		.uleb128 0x24
 2406 002d 00       		.byte	0
 2407 002e 0B       		.uleb128 0xb
 2408 002f 0B       		.uleb128 0xb
 2409 0030 3E       		.uleb128 0x3e
 2410 0031 0B       		.uleb128 0xb
 2411 0032 03       		.uleb128 0x3
 2412 0033 08       		.uleb128 0x8
 2413 0034 00       		.byte	0
 2414 0035 00       		.byte	0
 2415 0036 05       		.uleb128 0x5
 2416 0037 16       		.uleb128 0x16
 2417 0038 00       		.byte	0
 2418 0039 03       		.uleb128 0x3
 2419 003a 0E       		.uleb128 0xe
 2420 003b 3A       		.uleb128 0x3a
 2421 003c 0B       		.uleb128 0xb
 2422 003d 3B       		.uleb128 0x3b
 2423 003e 05       		.uleb128 0x5
 2424 003f 49       		.uleb128 0x49
 2425 0040 13       		.uleb128 0x13
 2426 0041 00       		.byte	0
 2427 0042 00       		.byte	0
 2428 0043 06       		.uleb128 0x6
 2429 0044 35       		.uleb128 0x35
 2430 0045 00       		.byte	0
 2431 0046 49       		.uleb128 0x49
 2432 0047 13       		.uleb128 0x13
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 53


 2433 0048 00       		.byte	0
 2434 0049 00       		.byte	0
 2435 004a 07       		.uleb128 0x7
 2436 004b 0F       		.uleb128 0xf
 2437 004c 00       		.byte	0
 2438 004d 0B       		.uleb128 0xb
 2439 004e 0B       		.uleb128 0xb
 2440 004f 49       		.uleb128 0x49
 2441 0050 13       		.uleb128 0x13
 2442 0051 00       		.byte	0
 2443 0052 00       		.byte	0
 2444 0053 08       		.uleb128 0x8
 2445 0054 04       		.uleb128 0x4
 2446 0055 01       		.byte	0x1
 2447 0056 03       		.uleb128 0x3
 2448 0057 0E       		.uleb128 0xe
 2449 0058 0B       		.uleb128 0xb
 2450 0059 0B       		.uleb128 0xb
 2451 005a 3A       		.uleb128 0x3a
 2452 005b 0B       		.uleb128 0xb
 2453 005c 3B       		.uleb128 0x3b
 2454 005d 0B       		.uleb128 0xb
 2455 005e 01       		.uleb128 0x1
 2456 005f 13       		.uleb128 0x13
 2457 0060 00       		.byte	0
 2458 0061 00       		.byte	0
 2459 0062 09       		.uleb128 0x9
 2460 0063 28       		.uleb128 0x28
 2461 0064 00       		.byte	0
 2462 0065 03       		.uleb128 0x3
 2463 0066 0E       		.uleb128 0xe
 2464 0067 1C       		.uleb128 0x1c
 2465 0068 0D       		.uleb128 0xd
 2466 0069 00       		.byte	0
 2467 006a 00       		.byte	0
 2468 006b 0A       		.uleb128 0xa
 2469 006c 04       		.uleb128 0x4
 2470 006d 01       		.byte	0x1
 2471 006e 03       		.uleb128 0x3
 2472 006f 08       		.uleb128 0x8
 2473 0070 0B       		.uleb128 0xb
 2474 0071 0B       		.uleb128 0xb
 2475 0072 3A       		.uleb128 0x3a
 2476 0073 0B       		.uleb128 0xb
 2477 0074 3B       		.uleb128 0x3b
 2478 0075 0B       		.uleb128 0xb
 2479 0076 01       		.uleb128 0x1
 2480 0077 13       		.uleb128 0x13
 2481 0078 00       		.byte	0
 2482 0079 00       		.byte	0
 2483 007a 0B       		.uleb128 0xb
 2484 007b 2E       		.uleb128 0x2e
 2485 007c 00       		.byte	0
 2486 007d 3F       		.uleb128 0x3f
 2487 007e 19       		.uleb128 0x19
 2488 007f 03       		.uleb128 0x3
 2489 0080 0E       		.uleb128 0xe
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 54


 2490 0081 3A       		.uleb128 0x3a
 2491 0082 0B       		.uleb128 0xb
 2492 0083 3B       		.uleb128 0x3b
 2493 0084 0B       		.uleb128 0xb
 2494 0085 27       		.uleb128 0x27
 2495 0086 19       		.uleb128 0x19
 2496 0087 11       		.uleb128 0x11
 2497 0088 01       		.uleb128 0x1
 2498 0089 12       		.uleb128 0x12
 2499 008a 06       		.uleb128 0x6
 2500 008b 40       		.uleb128 0x40
 2501 008c 18       		.uleb128 0x18
 2502 008d 9642     		.uleb128 0x2116
 2503 008f 19       		.uleb128 0x19
 2504 0090 00       		.byte	0
 2505 0091 00       		.byte	0
 2506 0092 0C       		.uleb128 0xc
 2507 0093 2E       		.uleb128 0x2e
 2508 0094 00       		.byte	0
 2509 0095 3F       		.uleb128 0x3f
 2510 0096 19       		.uleb128 0x19
 2511 0097 03       		.uleb128 0x3
 2512 0098 0E       		.uleb128 0xe
 2513 0099 3A       		.uleb128 0x3a
 2514 009a 0B       		.uleb128 0xb
 2515 009b 3B       		.uleb128 0x3b
 2516 009c 0B       		.uleb128 0xb
 2517 009d 27       		.uleb128 0x27
 2518 009e 19       		.uleb128 0x19
 2519 009f 11       		.uleb128 0x11
 2520 00a0 01       		.uleb128 0x1
 2521 00a1 12       		.uleb128 0x12
 2522 00a2 06       		.uleb128 0x6
 2523 00a3 40       		.uleb128 0x40
 2524 00a4 18       		.uleb128 0x18
 2525 00a5 9742     		.uleb128 0x2117
 2526 00a7 19       		.uleb128 0x19
 2527 00a8 00       		.byte	0
 2528 00a9 00       		.byte	0
 2529 00aa 0D       		.uleb128 0xd
 2530 00ab 2E       		.uleb128 0x2e
 2531 00ac 01       		.byte	0x1
 2532 00ad 3F       		.uleb128 0x3f
 2533 00ae 19       		.uleb128 0x19
 2534 00af 03       		.uleb128 0x3
 2535 00b0 0E       		.uleb128 0xe
 2536 00b1 3A       		.uleb128 0x3a
 2537 00b2 0B       		.uleb128 0xb
 2538 00b3 3B       		.uleb128 0x3b
 2539 00b4 0B       		.uleb128 0xb
 2540 00b5 49       		.uleb128 0x49
 2541 00b6 13       		.uleb128 0x13
 2542 00b7 11       		.uleb128 0x11
 2543 00b8 01       		.uleb128 0x1
 2544 00b9 12       		.uleb128 0x12
 2545 00ba 06       		.uleb128 0x6
 2546 00bb 40       		.uleb128 0x40
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 55


 2547 00bc 18       		.uleb128 0x18
 2548 00bd 9642     		.uleb128 0x2116
 2549 00bf 19       		.uleb128 0x19
 2550 00c0 01       		.uleb128 0x1
 2551 00c1 13       		.uleb128 0x13
 2552 00c2 00       		.byte	0
 2553 00c3 00       		.byte	0
 2554 00c4 0E       		.uleb128 0xe
 2555 00c5 34       		.uleb128 0x34
 2556 00c6 00       		.byte	0
 2557 00c7 03       		.uleb128 0x3
 2558 00c8 08       		.uleb128 0x8
 2559 00c9 3A       		.uleb128 0x3a
 2560 00ca 0B       		.uleb128 0xb
 2561 00cb 3B       		.uleb128 0x3b
 2562 00cc 0B       		.uleb128 0xb
 2563 00cd 49       		.uleb128 0x49
 2564 00ce 13       		.uleb128 0x13
 2565 00cf 02       		.uleb128 0x2
 2566 00d0 18       		.uleb128 0x18
 2567 00d1 00       		.byte	0
 2568 00d2 00       		.byte	0
 2569 00d3 0F       		.uleb128 0xf
 2570 00d4 34       		.uleb128 0x34
 2571 00d5 00       		.byte	0
 2572 00d6 03       		.uleb128 0x3
 2573 00d7 0E       		.uleb128 0xe
 2574 00d8 3A       		.uleb128 0x3a
 2575 00d9 0B       		.uleb128 0xb
 2576 00da 3B       		.uleb128 0x3b
 2577 00db 0B       		.uleb128 0xb
 2578 00dc 49       		.uleb128 0x49
 2579 00dd 13       		.uleb128 0x13
 2580 00de 02       		.uleb128 0x2
 2581 00df 18       		.uleb128 0x18
 2582 00e0 00       		.byte	0
 2583 00e1 00       		.byte	0
 2584 00e2 10       		.uleb128 0x10
 2585 00e3 01       		.uleb128 0x1
 2586 00e4 01       		.byte	0x1
 2587 00e5 49       		.uleb128 0x49
 2588 00e6 13       		.uleb128 0x13
 2589 00e7 01       		.uleb128 0x1
 2590 00e8 13       		.uleb128 0x13
 2591 00e9 00       		.byte	0
 2592 00ea 00       		.byte	0
 2593 00eb 11       		.uleb128 0x11
 2594 00ec 21       		.uleb128 0x21
 2595 00ed 00       		.byte	0
 2596 00ee 49       		.uleb128 0x49
 2597 00ef 13       		.uleb128 0x13
 2598 00f0 2F       		.uleb128 0x2f
 2599 00f1 0B       		.uleb128 0xb
 2600 00f2 00       		.byte	0
 2601 00f3 00       		.byte	0
 2602 00f4 12       		.uleb128 0x12
 2603 00f5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 56


 2604 00f6 00       		.byte	0
 2605 00f7 3F       		.uleb128 0x3f
 2606 00f8 19       		.uleb128 0x19
 2607 00f9 03       		.uleb128 0x3
 2608 00fa 0E       		.uleb128 0xe
 2609 00fb 3A       		.uleb128 0x3a
 2610 00fc 0B       		.uleb128 0xb
 2611 00fd 3B       		.uleb128 0x3b
 2612 00fe 0B       		.uleb128 0xb
 2613 00ff 11       		.uleb128 0x11
 2614 0100 01       		.uleb128 0x1
 2615 0101 12       		.uleb128 0x12
 2616 0102 06       		.uleb128 0x6
 2617 0103 40       		.uleb128 0x40
 2618 0104 18       		.uleb128 0x18
 2619 0105 9742     		.uleb128 0x2117
 2620 0107 19       		.uleb128 0x19
 2621 0108 00       		.byte	0
 2622 0109 00       		.byte	0
 2623 010a 13       		.uleb128 0x13
 2624 010b 2E       		.uleb128 0x2e
 2625 010c 01       		.byte	0x1
 2626 010d 3F       		.uleb128 0x3f
 2627 010e 19       		.uleb128 0x19
 2628 010f 03       		.uleb128 0x3
 2629 0110 0E       		.uleb128 0xe
 2630 0111 3A       		.uleb128 0x3a
 2631 0112 0B       		.uleb128 0xb
 2632 0113 3B       		.uleb128 0x3b
 2633 0114 0B       		.uleb128 0xb
 2634 0115 27       		.uleb128 0x27
 2635 0116 19       		.uleb128 0x19
 2636 0117 11       		.uleb128 0x11
 2637 0118 01       		.uleb128 0x1
 2638 0119 12       		.uleb128 0x12
 2639 011a 06       		.uleb128 0x6
 2640 011b 40       		.uleb128 0x40
 2641 011c 18       		.uleb128 0x18
 2642 011d 9642     		.uleb128 0x2116
 2643 011f 19       		.uleb128 0x19
 2644 0120 01       		.uleb128 0x1
 2645 0121 13       		.uleb128 0x13
 2646 0122 00       		.byte	0
 2647 0123 00       		.byte	0
 2648 0124 14       		.uleb128 0x14
 2649 0125 05       		.uleb128 0x5
 2650 0126 00       		.byte	0
 2651 0127 03       		.uleb128 0x3
 2652 0128 0E       		.uleb128 0xe
 2653 0129 3A       		.uleb128 0x3a
 2654 012a 0B       		.uleb128 0xb
 2655 012b 3B       		.uleb128 0x3b
 2656 012c 0B       		.uleb128 0xb
 2657 012d 49       		.uleb128 0x49
 2658 012e 13       		.uleb128 0x13
 2659 012f 02       		.uleb128 0x2
 2660 0130 18       		.uleb128 0x18
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 57


 2661 0131 00       		.byte	0
 2662 0132 00       		.byte	0
 2663 0133 15       		.uleb128 0x15
 2664 0134 34       		.uleb128 0x34
 2665 0135 00       		.byte	0
 2666 0136 03       		.uleb128 0x3
 2667 0137 08       		.uleb128 0x8
 2668 0138 3A       		.uleb128 0x3a
 2669 0139 0B       		.uleb128 0xb
 2670 013a 3B       		.uleb128 0x3b
 2671 013b 05       		.uleb128 0x5
 2672 013c 49       		.uleb128 0x49
 2673 013d 13       		.uleb128 0x13
 2674 013e 02       		.uleb128 0x2
 2675 013f 18       		.uleb128 0x18
 2676 0140 00       		.byte	0
 2677 0141 00       		.byte	0
 2678 0142 16       		.uleb128 0x16
 2679 0143 2E       		.uleb128 0x2e
 2680 0144 01       		.byte	0x1
 2681 0145 3F       		.uleb128 0x3f
 2682 0146 19       		.uleb128 0x19
 2683 0147 03       		.uleb128 0x3
 2684 0148 0E       		.uleb128 0xe
 2685 0149 3A       		.uleb128 0x3a
 2686 014a 0B       		.uleb128 0xb
 2687 014b 3B       		.uleb128 0x3b
 2688 014c 05       		.uleb128 0x5
 2689 014d 27       		.uleb128 0x27
 2690 014e 19       		.uleb128 0x19
 2691 014f 11       		.uleb128 0x11
 2692 0150 01       		.uleb128 0x1
 2693 0151 12       		.uleb128 0x12
 2694 0152 06       		.uleb128 0x6
 2695 0153 40       		.uleb128 0x40
 2696 0154 18       		.uleb128 0x18
 2697 0155 9742     		.uleb128 0x2117
 2698 0157 19       		.uleb128 0x19
 2699 0158 01       		.uleb128 0x1
 2700 0159 13       		.uleb128 0x13
 2701 015a 00       		.byte	0
 2702 015b 00       		.byte	0
 2703 015c 17       		.uleb128 0x17
 2704 015d 05       		.uleb128 0x5
 2705 015e 00       		.byte	0
 2706 015f 03       		.uleb128 0x3
 2707 0160 0E       		.uleb128 0xe
 2708 0161 3A       		.uleb128 0x3a
 2709 0162 0B       		.uleb128 0xb
 2710 0163 3B       		.uleb128 0x3b
 2711 0164 05       		.uleb128 0x5
 2712 0165 49       		.uleb128 0x49
 2713 0166 13       		.uleb128 0x13
 2714 0167 02       		.uleb128 0x2
 2715 0168 18       		.uleb128 0x18
 2716 0169 00       		.byte	0
 2717 016a 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 58


 2718 016b 18       		.uleb128 0x18
 2719 016c 34       		.uleb128 0x34
 2720 016d 00       		.byte	0
 2721 016e 03       		.uleb128 0x3
 2722 016f 0E       		.uleb128 0xe
 2723 0170 3A       		.uleb128 0x3a
 2724 0171 0B       		.uleb128 0xb
 2725 0172 3B       		.uleb128 0x3b
 2726 0173 05       		.uleb128 0x5
 2727 0174 49       		.uleb128 0x49
 2728 0175 13       		.uleb128 0x13
 2729 0176 02       		.uleb128 0x2
 2730 0177 18       		.uleb128 0x18
 2731 0178 00       		.byte	0
 2732 0179 00       		.byte	0
 2733 017a 19       		.uleb128 0x19
 2734 017b 2E       		.uleb128 0x2e
 2735 017c 01       		.byte	0x1
 2736 017d 3F       		.uleb128 0x3f
 2737 017e 19       		.uleb128 0x19
 2738 017f 03       		.uleb128 0x3
 2739 0180 0E       		.uleb128 0xe
 2740 0181 3A       		.uleb128 0x3a
 2741 0182 0B       		.uleb128 0xb
 2742 0183 3B       		.uleb128 0x3b
 2743 0184 05       		.uleb128 0x5
 2744 0185 11       		.uleb128 0x11
 2745 0186 01       		.uleb128 0x1
 2746 0187 12       		.uleb128 0x12
 2747 0188 06       		.uleb128 0x6
 2748 0189 40       		.uleb128 0x40
 2749 018a 18       		.uleb128 0x18
 2750 018b 9642     		.uleb128 0x2116
 2751 018d 19       		.uleb128 0x19
 2752 018e 01       		.uleb128 0x1
 2753 018f 13       		.uleb128 0x13
 2754 0190 00       		.byte	0
 2755 0191 00       		.byte	0
 2756 0192 1A       		.uleb128 0x1a
 2757 0193 0B       		.uleb128 0xb
 2758 0194 01       		.byte	0x1
 2759 0195 11       		.uleb128 0x11
 2760 0196 01       		.uleb128 0x1
 2761 0197 12       		.uleb128 0x12
 2762 0198 06       		.uleb128 0x6
 2763 0199 00       		.byte	0
 2764 019a 00       		.byte	0
 2765 019b 1B       		.uleb128 0x1b
 2766 019c 2E       		.uleb128 0x2e
 2767 019d 00       		.byte	0
 2768 019e 3F       		.uleb128 0x3f
 2769 019f 19       		.uleb128 0x19
 2770 01a0 03       		.uleb128 0x3
 2771 01a1 0E       		.uleb128 0xe
 2772 01a2 3A       		.uleb128 0x3a
 2773 01a3 0B       		.uleb128 0xb
 2774 01a4 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 59


 2775 01a5 05       		.uleb128 0x5
 2776 01a6 11       		.uleb128 0x11
 2777 01a7 01       		.uleb128 0x1
 2778 01a8 12       		.uleb128 0x12
 2779 01a9 06       		.uleb128 0x6
 2780 01aa 40       		.uleb128 0x40
 2781 01ab 18       		.uleb128 0x18
 2782 01ac 9642     		.uleb128 0x2116
 2783 01ae 19       		.uleb128 0x19
 2784 01af 00       		.byte	0
 2785 01b0 00       		.byte	0
 2786 01b1 1C       		.uleb128 0x1c
 2787 01b2 2E       		.uleb128 0x2e
 2788 01b3 01       		.byte	0x1
 2789 01b4 3F       		.uleb128 0x3f
 2790 01b5 19       		.uleb128 0x19
 2791 01b6 03       		.uleb128 0x3
 2792 01b7 0E       		.uleb128 0xe
 2793 01b8 3A       		.uleb128 0x3a
 2794 01b9 0B       		.uleb128 0xb
 2795 01ba 3B       		.uleb128 0x3b
 2796 01bb 05       		.uleb128 0x5
 2797 01bc 49       		.uleb128 0x49
 2798 01bd 13       		.uleb128 0x13
 2799 01be 11       		.uleb128 0x11
 2800 01bf 01       		.uleb128 0x1
 2801 01c0 12       		.uleb128 0x12
 2802 01c1 06       		.uleb128 0x6
 2803 01c2 40       		.uleb128 0x40
 2804 01c3 18       		.uleb128 0x18
 2805 01c4 9642     		.uleb128 0x2116
 2806 01c6 19       		.uleb128 0x19
 2807 01c7 01       		.uleb128 0x1
 2808 01c8 13       		.uleb128 0x13
 2809 01c9 00       		.byte	0
 2810 01ca 00       		.byte	0
 2811 01cb 1D       		.uleb128 0x1d
 2812 01cc 26       		.uleb128 0x26
 2813 01cd 00       		.byte	0
 2814 01ce 49       		.uleb128 0x49
 2815 01cf 13       		.uleb128 0x13
 2816 01d0 00       		.byte	0
 2817 01d1 00       		.byte	0
 2818 01d2 1E       		.uleb128 0x1e
 2819 01d3 2E       		.uleb128 0x2e
 2820 01d4 01       		.byte	0x1
 2821 01d5 3F       		.uleb128 0x3f
 2822 01d6 19       		.uleb128 0x19
 2823 01d7 03       		.uleb128 0x3
 2824 01d8 0E       		.uleb128 0xe
 2825 01d9 3A       		.uleb128 0x3a
 2826 01da 0B       		.uleb128 0xb
 2827 01db 3B       		.uleb128 0x3b
 2828 01dc 05       		.uleb128 0x5
 2829 01dd 11       		.uleb128 0x11
 2830 01de 01       		.uleb128 0x1
 2831 01df 12       		.uleb128 0x12
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 60


 2832 01e0 06       		.uleb128 0x6
 2833 01e1 40       		.uleb128 0x40
 2834 01e2 18       		.uleb128 0x18
 2835 01e3 9742     		.uleb128 0x2117
 2836 01e5 19       		.uleb128 0x19
 2837 01e6 01       		.uleb128 0x1
 2838 01e7 13       		.uleb128 0x13
 2839 01e8 00       		.byte	0
 2840 01e9 00       		.byte	0
 2841 01ea 1F       		.uleb128 0x1f
 2842 01eb 2E       		.uleb128 0x2e
 2843 01ec 00       		.byte	0
 2844 01ed 3F       		.uleb128 0x3f
 2845 01ee 19       		.uleb128 0x19
 2846 01ef 03       		.uleb128 0x3
 2847 01f0 0E       		.uleb128 0xe
 2848 01f1 3A       		.uleb128 0x3a
 2849 01f2 0B       		.uleb128 0xb
 2850 01f3 3B       		.uleb128 0x3b
 2851 01f4 05       		.uleb128 0x5
 2852 01f5 11       		.uleb128 0x11
 2853 01f6 01       		.uleb128 0x1
 2854 01f7 12       		.uleb128 0x12
 2855 01f8 06       		.uleb128 0x6
 2856 01f9 40       		.uleb128 0x40
 2857 01fa 18       		.uleb128 0x18
 2858 01fb 9742     		.uleb128 0x2117
 2859 01fd 19       		.uleb128 0x19
 2860 01fe 00       		.byte	0
 2861 01ff 00       		.byte	0
 2862 0200 20       		.uleb128 0x20
 2863 0201 2E       		.uleb128 0x2e
 2864 0202 00       		.byte	0
 2865 0203 3F       		.uleb128 0x3f
 2866 0204 19       		.uleb128 0x19
 2867 0205 03       		.uleb128 0x3
 2868 0206 0E       		.uleb128 0xe
 2869 0207 3A       		.uleb128 0x3a
 2870 0208 0B       		.uleb128 0xb
 2871 0209 3B       		.uleb128 0x3b
 2872 020a 05       		.uleb128 0x5
 2873 020b 49       		.uleb128 0x49
 2874 020c 13       		.uleb128 0x13
 2875 020d 11       		.uleb128 0x11
 2876 020e 01       		.uleb128 0x1
 2877 020f 12       		.uleb128 0x12
 2878 0210 06       		.uleb128 0x6
 2879 0211 40       		.uleb128 0x40
 2880 0212 18       		.uleb128 0x18
 2881 0213 9642     		.uleb128 0x2116
 2882 0215 19       		.uleb128 0x19
 2883 0216 00       		.byte	0
 2884 0217 00       		.byte	0
 2885 0218 21       		.uleb128 0x21
 2886 0219 34       		.uleb128 0x34
 2887 021a 00       		.byte	0
 2888 021b 03       		.uleb128 0x3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 61


 2889 021c 0E       		.uleb128 0xe
 2890 021d 3A       		.uleb128 0x3a
 2891 021e 0B       		.uleb128 0xb
 2892 021f 3B       		.uleb128 0x3b
 2893 0220 05       		.uleb128 0x5
 2894 0221 49       		.uleb128 0x49
 2895 0222 13       		.uleb128 0x13
 2896 0223 3F       		.uleb128 0x3f
 2897 0224 19       		.uleb128 0x19
 2898 0225 3C       		.uleb128 0x3c
 2899 0226 19       		.uleb128 0x19
 2900 0227 00       		.byte	0
 2901 0228 00       		.byte	0
 2902 0229 22       		.uleb128 0x22
 2903 022a 21       		.uleb128 0x21
 2904 022b 00       		.byte	0
 2905 022c 49       		.uleb128 0x49
 2906 022d 13       		.uleb128 0x13
 2907 022e 2F       		.uleb128 0x2f
 2908 022f 05       		.uleb128 0x5
 2909 0230 00       		.byte	0
 2910 0231 00       		.byte	0
 2911 0232 23       		.uleb128 0x23
 2912 0233 34       		.uleb128 0x34
 2913 0234 00       		.byte	0
 2914 0235 03       		.uleb128 0x3
 2915 0236 0E       		.uleb128 0xe
 2916 0237 3A       		.uleb128 0x3a
 2917 0238 0B       		.uleb128 0xb
 2918 0239 3B       		.uleb128 0x3b
 2919 023a 0B       		.uleb128 0xb
 2920 023b 49       		.uleb128 0x49
 2921 023c 13       		.uleb128 0x13
 2922 023d 3F       		.uleb128 0x3f
 2923 023e 19       		.uleb128 0x19
 2924 023f 02       		.uleb128 0x2
 2925 0240 18       		.uleb128 0x18
 2926 0241 00       		.byte	0
 2927 0242 00       		.byte	0
 2928 0243 00       		.byte	0
 2929              		.section	.debug_aranges,"",%progbits
 2930 0000 94000000 		.4byte	0x94
 2931 0004 0200     		.2byte	0x2
 2932 0006 00000000 		.4byte	.Ldebug_info0
 2933 000a 04       		.byte	0x4
 2934 000b 00       		.byte	0
 2935 000c 0000     		.2byte	0
 2936 000e 0000     		.2byte	0
 2937 0010 00000000 		.4byte	.LFB63
 2938 0014 28000000 		.4byte	.LFE63-.LFB63
 2939 0018 00000000 		.4byte	.LFB64
 2940 001c 58000000 		.4byte	.LFE64-.LFB64
 2941 0020 00000000 		.4byte	.LFB65
 2942 0024 1C000000 		.4byte	.LFE65-.LFB65
 2943 0028 00000000 		.4byte	.LFB66
 2944 002c 38000000 		.4byte	.LFE66-.LFB66
 2945 0030 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 62


 2946 0034 74020000 		.4byte	.LFE67-.LFB67
 2947 0038 00000000 		.4byte	.LFB68
 2948 003c 48000000 		.4byte	.LFE68-.LFB68
 2949 0040 00000000 		.4byte	.LFB69
 2950 0044 38000000 		.4byte	.LFE69-.LFB69
 2951 0048 00000000 		.4byte	.LFB70
 2952 004c 40000000 		.4byte	.LFE70-.LFB70
 2953 0050 00000000 		.4byte	.LFB71
 2954 0054 C4010000 		.4byte	.LFE71-.LFB71
 2955 0058 00000000 		.4byte	.LFB72
 2956 005c D8000000 		.4byte	.LFE72-.LFB72
 2957 0060 00000000 		.4byte	.LFB73
 2958 0064 58000000 		.4byte	.LFE73-.LFB73
 2959 0068 00000000 		.4byte	.LFB74
 2960 006c 36000000 		.4byte	.LFE74-.LFB74
 2961 0070 00000000 		.4byte	.LFB75
 2962 0074 B0000000 		.4byte	.LFE75-.LFB75
 2963 0078 00000000 		.4byte	.LFB76
 2964 007c 3C000000 		.4byte	.LFE76-.LFB76
 2965 0080 00000000 		.4byte	.LFB77
 2966 0084 38000000 		.4byte	.LFE77-.LFB77
 2967 0088 00000000 		.4byte	.LFB78
 2968 008c 60000000 		.4byte	.LFE78-.LFB78
 2969 0090 00000000 		.4byte	0
 2970 0094 00000000 		.4byte	0
 2971              		.section	.debug_ranges,"",%progbits
 2972              	.Ldebug_ranges0:
 2973 0000 00000000 		.4byte	.LFB63
 2974 0004 28000000 		.4byte	.LFE63
 2975 0008 00000000 		.4byte	.LFB64
 2976 000c 58000000 		.4byte	.LFE64
 2977 0010 00000000 		.4byte	.LFB65
 2978 0014 1C000000 		.4byte	.LFE65
 2979 0018 00000000 		.4byte	.LFB66
 2980 001c 38000000 		.4byte	.LFE66
 2981 0020 00000000 		.4byte	.LFB67
 2982 0024 74020000 		.4byte	.LFE67
 2983 0028 00000000 		.4byte	.LFB68
 2984 002c 48000000 		.4byte	.LFE68
 2985 0030 00000000 		.4byte	.LFB69
 2986 0034 38000000 		.4byte	.LFE69
 2987 0038 00000000 		.4byte	.LFB70
 2988 003c 40000000 		.4byte	.LFE70
 2989 0040 00000000 		.4byte	.LFB71
 2990 0044 C4010000 		.4byte	.LFE71
 2991 0048 00000000 		.4byte	.LFB72
 2992 004c D8000000 		.4byte	.LFE72
 2993 0050 00000000 		.4byte	.LFB73
 2994 0054 58000000 		.4byte	.LFE73
 2995 0058 00000000 		.4byte	.LFB74
 2996 005c 36000000 		.4byte	.LFE74
 2997 0060 00000000 		.4byte	.LFB75
 2998 0064 B0000000 		.4byte	.LFE75
 2999 0068 00000000 		.4byte	.LFB76
 3000 006c 3C000000 		.4byte	.LFE76
 3001 0070 00000000 		.4byte	.LFB77
 3002 0074 38000000 		.4byte	.LFE77
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 63


 3003 0078 00000000 		.4byte	.LFB78
 3004 007c 60000000 		.4byte	.LFE78
 3005 0080 00000000 		.4byte	0
 3006 0084 00000000 		.4byte	0
 3007              		.section	.debug_line,"",%progbits
 3008              	.Ldebug_line0:
 3009 0000 46040000 		.section	.debug_str,"MS",%progbits,1
 3009      0200AE01 
 3009      00000201 
 3009      FB0E0D00 
 3009      01010101 
 3010              	.LASF24:
 3011 0000 68656164 		.ascii	"header\000"
 3011      657200
 3012              	.LASF48:
 3013 0007 7472616E 		.ascii	"transmitData\000"
 3013      736D6974 
 3013      44617461 
 3013      00
 3014              	.LASF27:
 3015 0014 49646C65 		.ascii	"Idle_Collision_ISR\000"
 3015      5F436F6C 
 3015      6C697369 
 3015      6F6E5F49 
 3015      535200
 3016              	.LASF22:
 3017 0027 73746174 		.ascii	"state\000"
 3017      6500
 3018              	.LASF45:
 3019 002d 67657452 		.ascii	"getRandomNumber\000"
 3019      616E646F 
 3019      6D4E756D 
 3019      62657200 
 3020              	.LASF17:
 3021 003d 73697A65 		.ascii	"sizetype\000"
 3021      74797065 
 3021      00
 3022              	.LASF55:
 3023 0046 64696666 		.ascii	"diffManEncodedData\000"
 3023      4D616E45 
 3023      6E636F64 
 3023      65644461 
 3023      746100
 3024              	.LASF34:
 3025 0059 6D61696E 		.ascii	"main\000"
 3025      00
 3026              	.LASF52:
 3027 005e 68656164 		.ascii	"headerCheck\000"
 3027      65724368 
 3027      65636B00 
 3028              	.LASF50:
 3029 006a 73746F72 		.ascii	"storeChar\000"
 3029      65436861 
 3029      7200
 3030              	.LASF72:
 3031 0074 63726353 		.ascii	"crcState\000"
 3031      74617465 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 64


 3031      00
 3032              	.LASF23:
 3033 007d 6E6F6E65 		.ascii	"none\000"
 3033      00
 3034              	.LASF2:
 3035 0082 73686F72 		.ascii	"short int\000"
 3035      7420696E 
 3035      7400
 3036              	.LASF42:
 3037 008c 76616C75 		.ascii	"value\000"
 3037      6500
 3038              	.LASF21:
 3039 0092 636F6C6C 		.ascii	"collision\000"
 3039      6973696F 
 3039      6E00
 3040              	.LASF12:
 3041 009c 75696E74 		.ascii	"uint16\000"
 3041      313600
 3042              	.LASF71:
 3043 00a3 6E657477 		.ascii	"networkState\000"
 3043      6F726B53 
 3043      74617465 
 3043      00
 3044              	.LASF36:
 3045 00b0 68657854 		.ascii	"hexToDiffMan\000"
 3045      6F446966 
 3045      664D616E 
 3045      00
 3046              	.LASF11:
 3047 00bd 75696E74 		.ascii	"uint8\000"
 3047      3800
 3048              	.LASF31:
 3049 00c3 6C696E65 		.ascii	"lineString\000"
 3049      53747269 
 3049      6E6700
 3050              	.LASF28:
 3051 00ce 45646765 		.ascii	"Edge_detect_ISR\000"
 3051      5F646574 
 3051      6563745F 
 3051      49535200 
 3052              	.LASF76:
 3053 00de 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
 3053      79446F63 
 3053      735C446F 
 3053      63756D65 
 3053      6E74735C 
 3054 010c 30312E63 		.ascii	"01.cydsn\000"
 3054      7964736E 
 3054      00
 3055              	.LASF13:
 3056 0115 666C6F61 		.ascii	"float\000"
 3056      7400
 3057              	.LASF37:
 3058 011b 68657856 		.ascii	"hexValue\000"
 3058      616C7565 
 3058      00
 3059              	.LASF6:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 65


 3060 0124 6C6F6E67 		.ascii	"long long int\000"
 3060      206C6F6E 
 3060      6720696E 
 3060      7400
 3061              	.LASF7:
 3062 0132 6C6F6E67 		.ascii	"long long unsigned int\000"
 3062      206C6F6E 
 3062      6720756E 
 3062      7369676E 
 3062      65642069 
 3063              	.LASF66:
 3064 0149 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 3064      45535449 
 3064      4E415449 
 3064      4F4E5F41 
 3064      44445245 
 3065              	.LASF74:
 3066 0160 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3066      4320342E 
 3066      392E3320 
 3066      32303135 
 3066      30333033 
 3067 0193 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3067      20726576 
 3067      6973696F 
 3067      6E203232 
 3067      31323230 
 3068 01c6 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3068      66756E63 
 3068      74696F6E 
 3068      2D736563 
 3068      74696F6E 
 3069              	.LASF44:
 3070 01ee 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 3070      6574776F 
 3070      726B5374 
 3070      6174654F 
 3070      6E4C4544 
 3071              	.LASF51:
 3072 0204 7072696E 		.ascii	"printChar\000"
 3072      74436861 
 3072      7200
 3073              	.LASF35:
 3074 020e 73747269 		.ascii	"stringToDiffMan\000"
 3074      6E67546F 
 3074      44696666 
 3074      4D616E00 
 3075              	.LASF1:
 3076 021e 756E7369 		.ascii	"unsigned char\000"
 3076      676E6564 
 3076      20636861 
 3076      7200
 3077              	.LASF61:
 3078 022c 63757272 		.ascii	"currentDataPos\000"
 3078      656E7444 
 3078      61746150 
 3078      6F7300
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 66


 3079              	.LASF62:
 3080 023b 63757272 		.ascii	"currentRXCharPosition\000"
 3080      656E7452 
 3080      58436861 
 3080      72506F73 
 3080      6974696F 
 3081              	.LASF18:
 3082 0251 74696D65 		.ascii	"time_t\000"
 3082      5F7400
 3083              	.LASF43:
 3084 0258 696E6974 		.ascii	"initDiffManEncodedArray\000"
 3084      44696666 
 3084      4D616E45 
 3084      6E636F64 
 3084      65644172 
 3085              	.LASF0:
 3086 0270 7369676E 		.ascii	"signed char\000"
 3086      65642063 
 3086      68617200 
 3087              	.LASF39:
 3088 027c 61736369 		.ascii	"asciiToDiffMan\000"
 3088      69546F44 
 3088      6966664D 
 3088      616E00
 3089              	.LASF19:
 3090 028b 69646C65 		.ascii	"idle\000"
 3090      00
 3091              	.LASF49:
 3092 0290 64696666 		.ascii	"diffManToASCII\000"
 3092      4D616E54 
 3092      6F415343 
 3092      494900
 3093              	.LASF8:
 3094 029f 756E7369 		.ascii	"unsigned int\000"
 3094      676E6564 
 3094      20696E74 
 3094      00
 3095              	.LASF58:
 3096 02ac 72656365 		.ascii	"receivedDataIndex\000"
 3096      69766564 
 3096      44617461 
 3096      496E6465 
 3096      7800
 3097              	.LASF5:
 3098 02be 6C6F6E67 		.ascii	"long unsigned int\000"
 3098      20756E73 
 3098      69676E65 
 3098      6420696E 
 3098      7400
 3099              	.LASF26:
 3100 02d0 626F7468 		.ascii	"both\000"
 3100      00
 3101              	.LASF46:
 3102 02d5 4D494E5F 		.ascii	"MIN_N\000"
 3102      4E00
 3103              	.LASF40:
 3104 02db 61736369 		.ascii	"asciiChar\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 67


 3104      69436861 
 3104      7200
 3105              	.LASF15:
 3106 02e5 63686172 		.ascii	"char\000"
 3106      00
 3107              	.LASF73:
 3108 02ea 72656365 		.ascii	"receivedChar\000"
 3108      69766564 
 3108      43686172 
 3108      00
 3109              	.LASF4:
 3110 02f7 6C6F6E67 		.ascii	"long int\000"
 3110      20696E74 
 3110      00
 3111              	.LASF32:
 3112 0300 73747269 		.ascii	"stringPosition\000"
 3112      6E67506F 
 3112      73697469 
 3112      6F6E00
 3113              	.LASF10:
 3114 030f 696E7433 		.ascii	"int32_t\000"
 3114      325F7400 
 3115              	.LASF3:
 3116 0317 73686F72 		.ascii	"short unsigned int\000"
 3116      7420756E 
 3116      7369676E 
 3116      65642069 
 3116      6E7400
 3117              	.LASF33:
 3118 032a 7365636F 		.ascii	"seconds\000"
 3118      6E647300 
 3119              	.LASF53:
 3120 0332 5F426F6F 		.ascii	"_Bool\000"
 3120      6C00
 3121              	.LASF20:
 3122 0338 62757379 		.ascii	"busy\000"
 3122      00
 3123              	.LASF59:
 3124 033d 72656365 		.ascii	"receivedDataCount\000"
 3124      69766564 
 3124      44617461 
 3124      436F756E 
 3124      7400
 3125              	.LASF16:
 3126 034f 72656738 		.ascii	"reg8\000"
 3126      00
 3127              	.LASF25:
 3128 0354 6D657373 		.ascii	"message\000"
 3128      61676500 
 3129              	.LASF14:
 3130 035c 646F7562 		.ascii	"double\000"
 3130      6C6500
 3131              	.LASF70:
 3132 0363 68656164 		.ascii	"headerValid\000"
 3132      65725661 
 3132      6C696400 
 3133              	.LASF64:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 68


 3134 036f 6D657373 		.ascii	"messageLength\000"
 3134      6167654C 
 3134      656E6774 
 3134      6800
 3135              	.LASF56:
 3136 037d 64696666 		.ascii	"diffManReceivedData\000"
 3136      4D616E52 
 3136      65636569 
 3136      76656444 
 3136      61746100 
 3137              	.LASF57:
 3138 0391 72784368 		.ascii	"rxChar\000"
 3138      617200
 3139              	.LASF30:
 3140 0398 52656365 		.ascii	"ReceiveTimerISR\000"
 3140      69766554 
 3140      696D6572 
 3140      49535200 
 3141              	.LASF38:
 3142 03a8 62696E61 		.ascii	"binaryValueOfChar\000"
 3142      72795661 
 3142      6C75654F 
 3142      66436861 
 3142      7200
 3143              	.LASF75:
 3144 03ba 2E5C6D61 		.ascii	".\\main.c\000"
 3144      696E2E63 
 3144      00
 3145              	.LASF9:
 3146 03c3 5F5F696E 		.ascii	"__int32_t\000"
 3146      7433325F 
 3146      7400
 3147              	.LASF60:
 3148 03cd 68616C66 		.ascii	"halfBitIndex\000"
 3148      42697449 
 3148      6E646578 
 3148      00
 3149              	.LASF47:
 3150 03da 4D41585F 		.ascii	"MAX_N\000"
 3150      4E00
 3151              	.LASF65:
 3152 03e0 68656164 		.ascii	"headerCRC\000"
 3152      65724352 
 3152      4300
 3153              	.LASF63:
 3154 03ea 6C656E67 		.ascii	"lengthOfData\000"
 3154      74684F66 
 3154      44617461 
 3154      00
 3155              	.LASF68:
 3156 03f7 64617461 		.ascii	"dataTransmissionComplete\000"
 3156      5472616E 
 3156      736D6973 
 3156      73696F6E 
 3156      436F6D70 
 3157              	.LASF29:
 3158 0410 54696D65 		.ascii	"TimerHandler\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccGDmyR5.s 			page 69


 3158      7248616E 
 3158      646C6572 
 3158      00
 3159              	.LASF54:
 3160 041d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3160      52784275 
 3160      66666572 
 3160      00
 3161              	.LASF41:
 3162 042a 70726576 		.ascii	"previousHalfBit\000"
 3162      696F7573 
 3162      48616C66 
 3162      42697400 
 3163              	.LASF67:
 3164 043a 74696D65 		.ascii	"timerExpired\000"
 3164      72457870 
 3164      69726564 
 3164      00
 3165              	.LASF69:
 3166 0447 706F7765 		.ascii	"powerOnEdge\000"
 3166      724F6E45 
 3166      64676500 
 3167              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
