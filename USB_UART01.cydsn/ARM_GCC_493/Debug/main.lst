ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3200,4
  19              		.global	halfBitIndex
  20              		.bss
  21              		.align	2
  22              		.type	halfBitIndex, %object
  23              		.size	halfBitIndex, 4
  24              	halfBitIndex:
  25 0000 00000000 		.space	4
  26              		.global	currentDataPos
  27              		.align	2
  28              		.type	currentDataPos, %object
  29              		.size	currentDataPos, 4
  30              	currentDataPos:
  31 0004 00000000 		.space	4
  32              		.comm	lengthOfData,4,4
  33              		.comm	timerExpired,1,1
  34              		.comm	dataTransmissionComplete,1,1
  35              		.comm	networkState,1,1
  36              		.section	.text.Idle_Collision_ISR,"ax",%progbits
  37              		.align	2
  38              		.global	Idle_Collision_ISR
  39              		.thumb
  40              		.thumb_func
  41              		.type	Idle_Collision_ISR, %function
  42              	Idle_Collision_ISR:
  43              	.LFB63:
  44              		.file 1 ".\\main.c"
   1:.\main.c      **** /*******************************************************************************
   2:.\main.c      **** This file performs a transmit. No collision is detected. 
   3:.\main.c      **** *******************************************************************************/
   4:.\main.c      **** 
   5:.\main.c      **** #include <device.h>
   6:.\main.c      **** #include <stdbool.h>
   7:.\main.c      **** #include "stdio.h"
   8:.\main.c      **** 
   9:.\main.c      **** void initDiffManEncodedArray();
  10:.\main.c      **** void stringToDiffMan(char*, uint8);
  11:.\main.c      **** void asciiToDiffMan(char);
  12:.\main.c      **** void transmitData();
  13:.\main.c      **** void setNetworkStateOnLEDs();
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 2


  14:.\main.c      **** 
  15:.\main.c      **** #define INDEX_OF_MSB 6
  16:.\main.c      **** #define HIGH 1
  17:.\main.c      **** 
  18:.\main.c      **** int diffManEncodedData[800];
  19:.\main.c      **** int halfBitIndex = 0, currentDataPos=0, lengthOfData;
  20:.\main.c      **** bool timerExpired, dataTransmissionComplete;
  21:.\main.c      **** enum state {busy, idle, collision} networkState; 
  22:.\main.c      **** 
  23:.\main.c      **** CY_ISR(Idle_Collision_ISR){
  45              		.loc 1 23 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 1, uses_anonymous_args = 0
  49 0000 80B5     		push	{r7, lr}
  50              		.cfi_def_cfa_offset 8
  51              		.cfi_offset 7, -8
  52              		.cfi_offset 14, -4
  53 0002 00AF     		add	r7, sp, #0
  54              		.cfi_def_cfa_register 7
  24:.\main.c      ****     networkState = idle; 
  55              		.loc 1 24 0
  56 0004 074B     		ldr	r3, .L4
  57 0006 0122     		movs	r2, #1
  58 0008 1A70     		strb	r2, [r3]
  25:.\main.c      ****     if(Receive_Read() == HIGH){
  59              		.loc 1 25 0
  60 000a FFF7FEFF 		bl	Receive_Read
  61 000e 0346     		mov	r3, r0
  62 0010 012B     		cmp	r3, #1
  63 0012 03D1     		bne	.L2
  26:.\main.c      ****         networkState = idle;  
  64              		.loc 1 26 0
  65 0014 034B     		ldr	r3, .L4
  66 0016 0122     		movs	r2, #1
  67 0018 1A70     		strb	r2, [r3]
  68 001a 02E0     		b	.L1
  69              	.L2:
  27:.\main.c      ****     }
  28:.\main.c      ****     else{
  29:.\main.c      ****         networkState = collision;
  70              		.loc 1 29 0
  71 001c 014B     		ldr	r3, .L4
  72 001e 0222     		movs	r2, #2
  73 0020 1A70     		strb	r2, [r3]
  74              	.L1:
  30:.\main.c      ****     }
  31:.\main.c      **** }
  75              		.loc 1 31 0
  76 0022 80BD     		pop	{r7, pc}
  77              	.L5:
  78              		.align	2
  79              	.L4:
  80 0024 00000000 		.word	networkState
  81              		.cfi_endproc
  82              	.LFE63:
  83              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 3


  84              		.section	.text.Edge_detect_ISR,"ax",%progbits
  85              		.align	2
  86              		.global	Edge_detect_ISR
  87              		.thumb
  88              		.thumb_func
  89              		.type	Edge_detect_ISR, %function
  90              	Edge_detect_ISR:
  91              	.LFB64:
  32:.\main.c      **** 
  33:.\main.c      **** CY_ISR(Edge_detect_ISR){
  92              		.loc 1 33 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 7, -8
  99              		.cfi_offset 14, -4
 100 0002 00AF     		add	r7, sp, #0
 101              		.cfi_def_cfa_register 7
  34:.\main.c      ****     networkState = busy;
 102              		.loc 1 34 0
 103 0004 034B     		ldr	r3, .L7
 104 0006 0022     		movs	r2, #0
 105 0008 1A70     		strb	r2, [r3]
  35:.\main.c      ****     Idle_Collision_Timer_Start();
 106              		.loc 1 35 0
 107 000a FFF7FEFF 		bl	Idle_Collision_Timer_Start
  36:.\main.c      ****     Receive_ClearInterrupt();
 108              		.loc 1 36 0
 109 000e FFF7FEFF 		bl	Receive_ClearInterrupt
  37:.\main.c      **** }
 110              		.loc 1 37 0
 111 0012 80BD     		pop	{r7, pc}
 112              	.L8:
 113              		.align	2
 114              	.L7:
 115 0014 00000000 		.word	networkState
 116              		.cfi_endproc
 117              	.LFE64:
 118              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 119              		.section	.text.TimerHandler,"ax",%progbits
 120              		.align	2
 121              		.global	TimerHandler
 122              		.thumb
 123              		.thumb_func
 124              		.type	TimerHandler, %function
 125              	TimerHandler:
 126              	.LFB65:
  38:.\main.c      **** 
  39:.\main.c      **** CY_ISR(TimerHandler){
 127              		.loc 1 39 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131 0000 80B5     		push	{r7, lr}
 132              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 4


 133              		.cfi_offset 7, -8
 134              		.cfi_offset 14, -4
 135 0002 00AF     		add	r7, sp, #0
 136              		.cfi_def_cfa_register 7
  40:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 137              		.loc 1 40 0
 138 0004 034B     		ldr	r3, .L10
 139 0006 1B78     		ldrb	r3, [r3]
  41:.\main.c      ****     Timer_Stop();
 140              		.loc 1 41 0
 141 0008 FFF7FEFF 		bl	Timer_Stop
  42:.\main.c      ****     timerExpired = true;
 142              		.loc 1 42 0
 143 000c 024B     		ldr	r3, .L10+4
 144 000e 0122     		movs	r2, #1
 145 0010 1A70     		strb	r2, [r3]
  43:.\main.c      **** }
 146              		.loc 1 43 0
 147 0012 80BD     		pop	{r7, pc}
 148              	.L11:
 149              		.align	2
 150              	.L10:
 151 0014 6B640040 		.word	1073767531
 152 0018 00000000 		.word	timerExpired
 153              		.cfi_endproc
 154              	.LFE65:
 155              		.size	TimerHandler, .-TimerHandler
 156              		.section	.text.main,"ax",%progbits
 157              		.align	2
 158              		.global	main
 159              		.thumb
 160              		.thumb_func
 161              		.type	main, %function
 162              	main:
 163              	.LFB66:
  44:.\main.c      **** 
  45:.\main.c      **** int main()
  46:.\main.c      **** {
 164              		.loc 1 46 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 104
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 0000 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 9AB0     		sub	sp, sp, #104
 173              		.cfi_def_cfa_offset 112
 174 0004 00AF     		add	r7, sp, #0
 175              		.cfi_def_cfa_register 7
  47:.\main.c      ****     char rx;
  48:.\main.c      ****     char lineString[100];
  49:.\main.c      ****     uint8 stringPosition = 0;
 176              		.loc 1 49 0
 177 0006 0023     		movs	r3, #0
 178 0008 87F86730 		strb	r3, [r7, #103]
  50:.\main.c      ****     timerExpired = false;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 5


 179              		.loc 1 50 0
 180 000c 534B     		ldr	r3, .L28
 181 000e 0022     		movs	r2, #0
 182 0010 1A70     		strb	r2, [r3]
  51:.\main.c      ****     dataTransmissionComplete = false;
 183              		.loc 1 51 0
 184 0012 534B     		ldr	r3, .L28+4
 185 0014 0022     		movs	r2, #0
 186 0016 1A70     		strb	r2, [r3]
  52:.\main.c      ****     /* Enable Global Interrupts */
  53:.\main.c      ****     CyGlobalIntEnable;                        
 187              		.loc 1 53 0
 188              	@ 53 ".\main.c" 1
 189 0018 62B6     		CPSIE   i
 190              	@ 0 "" 2
  54:.\main.c      ****     
  55:.\main.c      ****     Counter_Start();//start counter for random number generation
 191              		.loc 1 55 0
 192              		.thumb
 193 001a FFF7FEFF 		bl	Counter_Start
  56:.\main.c      ****     
  57:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 194              		.loc 1 57 0
 195 001e 0120     		movs	r0, #1
 196 0020 FFF7FEFF 		bl	TX_pin_Write
  58:.\main.c      ****     
  59:.\main.c      ****     //enable collision detection
  60:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 197              		.loc 1 60 0
 198 0024 4F48     		ldr	r0, .L28+8
 199 0026 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
  61:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 200              		.loc 1 61 0
 201 002a 4F48     		ldr	r0, .L28+12
 202 002c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
  62:.\main.c      ****     Idle_Collision_Timer_Start();
 203              		.loc 1 62 0
 204 0030 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  63:.\main.c      **** 
  64:.\main.c      ****     /* Start USBFS Operation with 3V operation */
  65:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 205              		.loc 1 65 0
 206 0034 0020     		movs	r0, #0
 207 0036 0021     		movs	r1, #0
 208 0038 FFF7FEFF 		bl	USBUART_1_Start
  66:.\main.c      ****     
  67:.\main.c      ****     //start tranmission timer
  68:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 209              		.loc 1 68 0
 210 003c 4B48     		ldr	r0, .L28+16
 211 003e FFF7FEFF 		bl	TimerISR_StartEx
 212              	.L25:
  69:.\main.c      ****     
  70:.\main.c      ****     
  71:.\main.c      ****     
  72:.\main.c      ****     /* Main Loop: */
  73:.\main.c      ****     for(;;)
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 6


  74:.\main.c      ****     {
  75:.\main.c      ****         setNetworkStateOnLEDs();
 213              		.loc 1 75 0
 214 0042 FFF7FEFF 		bl	setNetworkStateOnLEDs
  76:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 215              		.loc 1 76 0
 216 0046 FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 217 004a 0346     		mov	r3, r0
 218 004c 002B     		cmp	r3, #0
 219 004e 06D0     		beq	.L13
  77:.\main.c      ****         {
  78:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 220              		.loc 1 78 0
 221 0050 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 222 0054 0346     		mov	r3, r0
 223 0056 002B     		cmp	r3, #0
 224 0058 01D0     		beq	.L13
  79:.\main.c      ****             {
  80:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
  81:.\main.c      ****                 USBUART_1_CDC_Init();
 225              		.loc 1 81 0
 226 005a FFF7FEFF 		bl	USBUART_1_CDC_Init
 227              	.L13:
  82:.\main.c      ****             }
  83:.\main.c      ****         }         
  84:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 228              		.loc 1 84 0
 229 005e FFF7FEFF 		bl	USBUART_1_GetConfiguration
 230 0062 0346     		mov	r3, r0
 231 0064 002B     		cmp	r3, #0
 232 0066 78D0     		beq	.L14
  85:.\main.c      ****         {
  86:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 233              		.loc 1 86 0
 234 0068 FFF7FEFF 		bl	USBUART_1_DataIsReady
 235 006c 0346     		mov	r3, r0
 236 006e 002B     		cmp	r3, #0
 237 0070 73D0     		beq	.L14
  87:.\main.c      ****             {   
  88:.\main.c      ****                 rx = USBUART_1_GetChar();
 238              		.loc 1 88 0
 239 0072 FFF7FEFF 		bl	USBUART_1_GetChar
 240 0076 0346     		mov	r3, r0
 241 0078 87F86630 		strb	r3, [r7, #102]
  89:.\main.c      ****                 switch(rx){
 242              		.loc 1 89 0
 243 007c 97F86630 		ldrb	r3, [r7, #102]	@ zero_extendqisi2
 244 0080 0D2B     		cmp	r3, #13
 245 0082 25D0     		beq	.L16
 246 0084 1B2B     		cmp	r3, #27
 247 0086 67D0     		beq	.L27
 248 0088 082B     		cmp	r3, #8
 249 008a 4BD1     		bne	.L26
  90:.\main.c      ****                     case 8://backspace
  91:.\main.c      ****                         if(stringPosition>0){
 250              		.loc 1 91 0
 251 008c 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 7


 252 0090 002B     		cmp	r3, #0
 253 0092 1CD0     		beq	.L19
  92:.\main.c      ****                             stringPosition--;
 254              		.loc 1 92 0
 255 0094 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 256 0098 013B     		subs	r3, r3, #1
 257 009a 87F86730 		strb	r3, [r7, #103]
  93:.\main.c      ****                             lineString[stringPosition] = '\0';
 258              		.loc 1 93 0
 259 009e 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 260 00a2 07F16802 		add	r2, r7, #104
 261 00a6 1344     		add	r3, r3, r2
 262 00a8 0022     		movs	r2, #0
 263 00aa 03F8682C 		strb	r2, [r3, #-104]
  94:.\main.c      ****                             //backspace space backspace
  95:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u); 
 264              		.loc 1 95 0
 265 00ae 00BF     		nop
 266              	.L20:
 267              		.loc 1 95 0 is_stmt 0 discriminator 1
 268 00b0 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 269 00b4 0346     		mov	r3, r0
 270 00b6 002B     		cmp	r3, #0
 271 00b8 FAD0     		beq	.L20
  96:.\main.c      ****                             USBUART_1_PutChar(8);
 272              		.loc 1 96 0 is_stmt 1
 273 00ba 0820     		movs	r0, #8
 274 00bc FFF7FEFF 		bl	USBUART_1_PutChar
  97:.\main.c      ****                             USBUART_1_PutChar(32);
 275              		.loc 1 97 0
 276 00c0 2020     		movs	r0, #32
 277 00c2 FFF7FEFF 		bl	USBUART_1_PutChar
  98:.\main.c      ****                             USBUART_1_PutChar(8);
 278              		.loc 1 98 0
 279 00c6 0820     		movs	r0, #8
 280 00c8 FFF7FEFF 		bl	USBUART_1_PutChar
  99:.\main.c      ****                         }
 100:.\main.c      ****                         break;
 281              		.loc 1 100 0
 282 00cc 45E0     		b	.L14
 283              	.L19:
 284 00ce 44E0     		b	.L14
 285              	.L16:
 101:.\main.c      ****                     case 13://enter (carriage return)
 102:.\main.c      ****                         initDiffManEncodedArray();
 286              		.loc 1 102 0
 287 00d0 FFF7FEFF 		bl	initDiffManEncodedArray
 103:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 288              		.loc 1 103 0
 289 00d4 3A46     		mov	r2, r7
 290 00d6 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 291 00da 1046     		mov	r0, r2
 292 00dc 1946     		mov	r1, r3
 293 00de FFF7FEFF 		bl	stringToDiffMan
 104:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 294              		.loc 1 104 0
 295 00e2 00BF     		nop
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 8


 296              	.L21:
 297              		.loc 1 104 0 is_stmt 0 discriminator 1
 298 00e4 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 299 00e8 0346     		mov	r3, r0
 300 00ea 002B     		cmp	r3, #0
 301 00ec FAD0     		beq	.L21
 105:.\main.c      ****                         USBUART_1_PutCRLF();
 302              		.loc 1 105 0 is_stmt 1
 303 00ee FFF7FEFF 		bl	USBUART_1_PutCRLF
 106:.\main.c      ****                         
 107:.\main.c      ****                         //keep looping until data is transmitted
 108:.\main.c      ****                         while(!dataTransmissionComplete){
 304              		.loc 1 108 0
 305 00f2 03E0     		b	.L22
 306              	.L23:
 109:.\main.c      ****                             transmitData();
 307              		.loc 1 109 0
 308 00f4 FFF7FEFF 		bl	transmitData
 110:.\main.c      ****                             setNetworkStateOnLEDs();
 309              		.loc 1 110 0
 310 00f8 FFF7FEFF 		bl	setNetworkStateOnLEDs
 311              	.L22:
 108:.\main.c      ****                             transmitData();
 312              		.loc 1 108 0
 313 00fc 184B     		ldr	r3, .L28+4
 314 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 315 0100 83F00103 		eor	r3, r3, #1
 316 0104 DBB2     		uxtb	r3, r3
 317 0106 002B     		cmp	r3, #0
 318 0108 F4D1     		bne	.L23
 111:.\main.c      ****                         }
 112:.\main.c      ****                         dataTransmissionComplete = false;
 319              		.loc 1 112 0
 320 010a 154B     		ldr	r3, .L28+4
 321 010c 0022     		movs	r2, #0
 322 010e 1A70     		strb	r2, [r3]
 113:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 323              		.loc 1 113 0
 324 0110 0120     		movs	r0, #1
 325 0112 FFF7FEFF 		bl	TX_pin_Write
 114:.\main.c      ****                         //reset index
 115:.\main.c      ****                         halfBitIndex = 0;
 326              		.loc 1 115 0
 327 0116 164B     		ldr	r3, .L28+20
 328 0118 0022     		movs	r2, #0
 329 011a 1A60     		str	r2, [r3]
 116:.\main.c      ****                         stringPosition = 0; 
 330              		.loc 1 116 0
 331 011c 0023     		movs	r3, #0
 332 011e 87F86730 		strb	r3, [r7, #103]
 117:.\main.c      ****                         break;
 333              		.loc 1 117 0
 334 0122 1AE0     		b	.L14
 335              	.L26:
 118:.\main.c      ****                     case 27://escape
 119:.\main.c      ****                         break;
 120:.\main.c      ****                     default://everything else
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 9


 121:.\main.c      ****                         lineString[stringPosition] = rx;
 336              		.loc 1 121 0
 337 0124 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 338 0128 07F16802 		add	r2, r7, #104
 339 012c 1344     		add	r3, r3, r2
 340 012e 97F86620 		ldrb	r2, [r7, #102]
 341 0132 03F8682C 		strb	r2, [r3, #-104]
 122:.\main.c      ****                         stringPosition++;
 342              		.loc 1 122 0
 343 0136 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 344 013a 0133     		adds	r3, r3, #1
 345 013c 87F86730 		strb	r3, [r7, #103]
 123:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u); 
 346              		.loc 1 123 0
 347 0140 00BF     		nop
 348              	.L24:
 349              		.loc 1 123 0 is_stmt 0 discriminator 1
 350 0142 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 351 0146 0346     		mov	r3, r0
 352 0148 002B     		cmp	r3, #0
 353 014a FAD0     		beq	.L24
 124:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 354              		.loc 1 124 0 is_stmt 1
 355 014c 97F86630 		ldrb	r3, [r7, #102]	@ zero_extendqisi2
 356 0150 1846     		mov	r0, r3
 357 0152 FFF7FEFF 		bl	USBUART_1_PutChar
 125:.\main.c      ****                         break;
 358              		.loc 1 125 0
 359 0156 00E0     		b	.L14
 360              	.L27:
 119:.\main.c      ****                     default://everything else
 361              		.loc 1 119 0
 362 0158 00BF     		nop
 363              	.L14:
 126:.\main.c      ****                 }
 127:.\main.c      ****             }
 128:.\main.c      ****         }
 129:.\main.c      ****     }   
 364              		.loc 1 129 0 discriminator 1
 365 015a 72E7     		b	.L25
 366              	.L29:
 367              		.align	2
 368              	.L28:
 369 015c 00000000 		.word	timerExpired
 370 0160 00000000 		.word	dataTransmissionComplete
 371 0164 00000000 		.word	Idle_Collision_ISR
 372 0168 00000000 		.word	Edge_detect_ISR
 373 016c 00000000 		.word	TimerHandler
 374 0170 00000000 		.word	halfBitIndex
 375              		.cfi_endproc
 376              	.LFE66:
 377              		.size	main, .-main
 378              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 379              		.align	2
 380              		.global	initDiffManEncodedArray
 381              		.thumb
 382              		.thumb_func
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 10


 383              		.type	initDiffManEncodedArray, %function
 384              	initDiffManEncodedArray:
 385              	.LFB67:
 130:.\main.c      **** }
 131:.\main.c      **** 
 132:.\main.c      **** /*
 133:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the 
 134:.\main.c      **** half bits 01. 
 135:.\main.c      **** Only call when starting to transfer a new string
 136:.\main.c      **** */
 137:.\main.c      **** void initDiffManEncodedArray(){
 386              		.loc 1 137 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 1, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391 0000 80B4     		push	{r7}
 392              		.cfi_def_cfa_offset 4
 393              		.cfi_offset 7, -4
 394 0002 00AF     		add	r7, sp, #0
 395              		.cfi_def_cfa_register 7
 138:.\main.c      ****     halfBitIndex = 0;
 396              		.loc 1 138 0
 397 0004 0E4B     		ldr	r3, .L31
 398 0006 0022     		movs	r2, #0
 399 0008 1A60     		str	r2, [r3]
 139:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 400              		.loc 1 139 0
 401 000a 0D4B     		ldr	r3, .L31
 402 000c 1B68     		ldr	r3, [r3]
 403 000e 0D4A     		ldr	r2, .L31+4
 404 0010 0021     		movs	r1, #0
 405 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 140:.\main.c      ****     halfBitIndex++;
 406              		.loc 1 140 0
 407 0016 0A4B     		ldr	r3, .L31
 408 0018 1B68     		ldr	r3, [r3]
 409 001a 0133     		adds	r3, r3, #1
 410 001c 084A     		ldr	r2, .L31
 411 001e 1360     		str	r3, [r2]
 141:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 412              		.loc 1 141 0
 413 0020 074B     		ldr	r3, .L31
 414 0022 1B68     		ldr	r3, [r3]
 415 0024 074A     		ldr	r2, .L31+4
 416 0026 0121     		movs	r1, #1
 417 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 142:.\main.c      ****     halfBitIndex++;
 418              		.loc 1 142 0
 419 002c 044B     		ldr	r3, .L31
 420 002e 1B68     		ldr	r3, [r3]
 421 0030 0133     		adds	r3, r3, #1
 422 0032 034A     		ldr	r2, .L31
 423 0034 1360     		str	r3, [r2]
 143:.\main.c      **** }
 424              		.loc 1 143 0
 425 0036 BD46     		mov	sp, r7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 11


 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0038 5DF8047B 		ldr	r7, [sp], #4
 429              		.cfi_restore 7
 430              		.cfi_def_cfa_offset 0
 431 003c 7047     		bx	lr
 432              	.L32:
 433 003e 00BF     		.align	2
 434              	.L31:
 435 0040 00000000 		.word	halfBitIndex
 436 0044 00000000 		.word	diffManEncodedData
 437              		.cfi_endproc
 438              	.LFE67:
 439              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 440              		.section	.text.stringToDiffMan,"ax",%progbits
 441              		.align	2
 442              		.global	stringToDiffMan
 443              		.thumb
 444              		.thumb_func
 445              		.type	stringToDiffMan, %function
 446              	stringToDiffMan:
 447              	.LFB68:
 144:.\main.c      **** 
 145:.\main.c      **** /*
 146:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 147:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 148:.\main.c      **** */
 149:.\main.c      **** void stringToDiffMan(char lineString[], uint8 stringPosition){
 448              		.loc 1 149 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 16
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452 0000 80B5     		push	{r7, lr}
 453              		.cfi_def_cfa_offset 8
 454              		.cfi_offset 7, -8
 455              		.cfi_offset 14, -4
 456 0002 84B0     		sub	sp, sp, #16
 457              		.cfi_def_cfa_offset 24
 458 0004 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 460 0006 7860     		str	r0, [r7, #4]
 461 0008 0B46     		mov	r3, r1
 462 000a FB70     		strb	r3, [r7, #3]
 150:.\main.c      **** 
 151:.\main.c      ****     unsigned int i = 0;
 463              		.loc 1 151 0
 464 000c 0023     		movs	r3, #0
 465 000e FB60     		str	r3, [r7, #12]
 152:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 466              		.loc 1 152 0
 467 0010 0023     		movs	r3, #0
 468 0012 FB60     		str	r3, [r7, #12]
 469 0014 09E0     		b	.L34
 470              	.L35:
 153:.\main.c      ****         asciiToDiffMan(lineString[i]);
 471              		.loc 1 153 0 discriminator 3
 472 0016 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 12


 473 0018 FB68     		ldr	r3, [r7, #12]
 474 001a 1344     		add	r3, r3, r2
 475 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 476 001e 1846     		mov	r0, r3
 477 0020 FFF7FEFF 		bl	asciiToDiffMan
 152:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 478              		.loc 1 152 0 discriminator 3
 479 0024 FB68     		ldr	r3, [r7, #12]
 480 0026 0133     		adds	r3, r3, #1
 481 0028 FB60     		str	r3, [r7, #12]
 482              	.L34:
 152:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 483              		.loc 1 152 0 is_stmt 0 discriminator 1
 484 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 485 002c FB68     		ldr	r3, [r7, #12]
 486 002e 9A42     		cmp	r2, r3
 487 0030 F1D8     		bhi	.L35
 154:.\main.c      ****     }
 155:.\main.c      **** }
 488              		.loc 1 155 0 is_stmt 1
 489 0032 1037     		adds	r7, r7, #16
 490              		.cfi_def_cfa_offset 8
 491 0034 BD46     		mov	sp, r7
 492              		.cfi_def_cfa_register 13
 493              		@ sp needed
 494 0036 80BD     		pop	{r7, pc}
 495              		.cfi_endproc
 496              	.LFE68:
 497              		.size	stringToDiffMan, .-stringToDiffMan
 498              		.section	.text.asciiToDiffMan,"ax",%progbits
 499              		.align	2
 500              		.global	asciiToDiffMan
 501              		.thumb
 502              		.thumb_func
 503              		.type	asciiToDiffMan, %function
 504              	asciiToDiffMan:
 505              	.LFB69:
 156:.\main.c      **** 
 157:.\main.c      **** /*
 158:.\main.c      **** Helper method. Do not call from main.
 159:.\main.c      **** Converts a ascii char to a differental manchester line encoded version
 160:.\main.c      **** */
 161:.\main.c      **** void asciiToDiffMan(char asciiChar)
 162:.\main.c      **** {
 506              		.loc 1 162 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 104
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0000 80B4     		push	{r7}
 512              		.cfi_def_cfa_offset 4
 513              		.cfi_offset 7, -4
 514 0002 9BB0     		sub	sp, sp, #108
 515              		.cfi_def_cfa_offset 112
 516 0004 00AF     		add	r7, sp, #0
 517              		.cfi_def_cfa_register 7
 518 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 13


 519 0008 FB71     		strb	r3, [r7, #7]
 163:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 520              		.loc 1 163 0
 521 000a 6C4B     		ldr	r3, .L48
 522 000c 1B68     		ldr	r3, [r3]
 523 000e 013B     		subs	r3, r3, #1
 524 0010 6B4A     		ldr	r2, .L48+4
 525 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 526 0016 87F86730 		strb	r3, [r7, #103]
 164:.\main.c      ****     //send starting 1 bit (encoded)
 165:.\main.c      ****     if(previousHalfBit == 1){
 527              		.loc 1 165 0
 528 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 529 001e 012B     		cmp	r3, #1
 530 0020 16D1     		bne	.L37
 166:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 531              		.loc 1 166 0
 532 0022 664B     		ldr	r3, .L48
 533 0024 1B68     		ldr	r3, [r3]
 534 0026 664A     		ldr	r2, .L48+4
 535 0028 0121     		movs	r1, #1
 536 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 167:.\main.c      ****         halfBitIndex++;
 537              		.loc 1 167 0
 538 002e 634B     		ldr	r3, .L48
 539 0030 1B68     		ldr	r3, [r3]
 540 0032 0133     		adds	r3, r3, #1
 541 0034 614A     		ldr	r2, .L48
 542 0036 1360     		str	r3, [r2]
 168:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 543              		.loc 1 168 0
 544 0038 604B     		ldr	r3, .L48
 545 003a 1B68     		ldr	r3, [r3]
 546 003c 604A     		ldr	r2, .L48+4
 547 003e 0021     		movs	r1, #0
 548 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 169:.\main.c      ****         halfBitIndex++;
 549              		.loc 1 169 0
 550 0044 5D4B     		ldr	r3, .L48
 551 0046 1B68     		ldr	r3, [r3]
 552 0048 0133     		adds	r3, r3, #1
 553 004a 5C4A     		ldr	r2, .L48
 554 004c 1360     		str	r3, [r2]
 555 004e 15E0     		b	.L38
 556              	.L37:
 170:.\main.c      ****     }else{
 171:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 557              		.loc 1 171 0
 558 0050 5A4B     		ldr	r3, .L48
 559 0052 1B68     		ldr	r3, [r3]
 560 0054 5A4A     		ldr	r2, .L48+4
 561 0056 0021     		movs	r1, #0
 562 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 172:.\main.c      ****         halfBitIndex++;
 563              		.loc 1 172 0
 564 005c 574B     		ldr	r3, .L48
 565 005e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 14


 566 0060 0133     		adds	r3, r3, #1
 567 0062 564A     		ldr	r2, .L48
 568 0064 1360     		str	r3, [r2]
 173:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 569              		.loc 1 173 0
 570 0066 554B     		ldr	r3, .L48
 571 0068 1B68     		ldr	r3, [r3]
 572 006a 554A     		ldr	r2, .L48+4
 573 006c 0121     		movs	r1, #1
 574 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 174:.\main.c      ****         halfBitIndex++;
 575              		.loc 1 174 0
 576 0072 524B     		ldr	r3, .L48
 577 0074 1B68     		ldr	r3, [r3]
 578 0076 0133     		adds	r3, r3, #1
 579 0078 504A     		ldr	r2, .L48
 580 007a 1360     		str	r3, [r2]
 581              	.L38:
 175:.\main.c      ****     } 
 176:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 582              		.loc 1 176 0
 583 007c 4F4B     		ldr	r3, .L48
 584 007e 1B68     		ldr	r3, [r3]
 585 0080 013B     		subs	r3, r3, #1
 586 0082 4F4A     		ldr	r2, .L48+4
 587 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 588 0088 87F86730 		strb	r3, [r7, #103]
 177:.\main.c      **** 
 178:.\main.c      ****     
 179:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 180:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB 
 181:.\main.c      ****     int i;
 182:.\main.c      ****     for(i=0; asciiChar>0; i++)
 589              		.loc 1 182 0
 590 008c 0023     		movs	r3, #0
 591 008e 3B66     		str	r3, [r7, #96]
 592 0090 0FE0     		b	.L39
 593              	.L40:
 183:.\main.c      ****     { 
 184:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2; 
 594              		.loc 1 184 0 discriminator 3
 595 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 596 0094 03F00102 		and	r2, r3, #1
 597 0098 3B6E     		ldr	r3, [r7, #96]
 598 009a 9B00     		lsls	r3, r3, #2
 599 009c 07F16801 		add	r1, r7, #104
 600 00a0 0B44     		add	r3, r3, r1
 601 00a2 43F85C2C 		str	r2, [r3, #-92]
 185:.\main.c      ****         asciiChar=asciiChar/2;
 602              		.loc 1 185 0 discriminator 3
 603 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 604 00a8 5B08     		lsrs	r3, r3, #1
 605 00aa FB71     		strb	r3, [r7, #7]
 182:.\main.c      ****     { 
 606              		.loc 1 182 0 discriminator 3
 607 00ac 3B6E     		ldr	r3, [r7, #96]
 608 00ae 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 15


 609 00b0 3B66     		str	r3, [r7, #96]
 610              	.L39:
 182:.\main.c      ****     { 
 611              		.loc 1 182 0 is_stmt 0 discriminator 1
 612 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 613 00b4 002B     		cmp	r3, #0
 614 00b6 ECD1     		bne	.L40
 186:.\main.c      ****     }
 187:.\main.c      **** 
 188:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 189:.\main.c      ****     //must start at the end of the array so to encode the MSB first 
 190:.\main.c      ****     int j;
 191:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--) 
 615              		.loc 1 191 0 is_stmt 1
 616 00b8 0623     		movs	r3, #6
 617 00ba FB65     		str	r3, [r7, #92]
 618 00bc 76E0     		b	.L41
 619              	.L47:
 192:.\main.c      ****     {
 193:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 620              		.loc 1 193 0
 621 00be FB6D     		ldr	r3, [r7, #92]
 622 00c0 9B00     		lsls	r3, r3, #2
 623 00c2 07F16802 		add	r2, r7, #104
 624 00c6 1344     		add	r3, r3, r2
 625 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 626 00cc 012B     		cmp	r3, #1
 627 00ce 31D1     		bne	.L42
 194:.\main.c      ****         {
 195:.\main.c      ****             //bit == 1
 196:.\main.c      ****             if(previousHalfBit == 1)
 628              		.loc 1 196 0
 629 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 630 00d4 012B     		cmp	r3, #1
 631 00d6 16D1     		bne	.L43
 197:.\main.c      ****             {
 198:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 632              		.loc 1 198 0
 633 00d8 384B     		ldr	r3, .L48
 634 00da 1B68     		ldr	r3, [r3]
 635 00dc 384A     		ldr	r2, .L48+4
 636 00de 0121     		movs	r1, #1
 637 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 199:.\main.c      ****                 halfBitIndex++;
 638              		.loc 1 199 0
 639 00e4 354B     		ldr	r3, .L48
 640 00e6 1B68     		ldr	r3, [r3]
 641 00e8 0133     		adds	r3, r3, #1
 642 00ea 344A     		ldr	r2, .L48
 643 00ec 1360     		str	r3, [r2]
 200:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 644              		.loc 1 200 0
 645 00ee 334B     		ldr	r3, .L48
 646 00f0 1B68     		ldr	r3, [r3]
 647 00f2 334A     		ldr	r2, .L48+4
 648 00f4 0021     		movs	r1, #0
 649 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 16


 201:.\main.c      ****                 halfBitIndex++;    
 650              		.loc 1 201 0
 651 00fa 304B     		ldr	r3, .L48
 652 00fc 1B68     		ldr	r3, [r3]
 653 00fe 0133     		adds	r3, r3, #1
 654 0100 2E4A     		ldr	r2, .L48
 655 0102 1360     		str	r3, [r2]
 656 0104 47E0     		b	.L45
 657              	.L43:
 202:.\main.c      ****             }
 203:.\main.c      ****             else
 204:.\main.c      ****             {
 205:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 658              		.loc 1 205 0
 659 0106 2D4B     		ldr	r3, .L48
 660 0108 1B68     		ldr	r3, [r3]
 661 010a 2D4A     		ldr	r2, .L48+4
 662 010c 0021     		movs	r1, #0
 663 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 206:.\main.c      ****                 halfBitIndex++;
 664              		.loc 1 206 0
 665 0112 2A4B     		ldr	r3, .L48
 666 0114 1B68     		ldr	r3, [r3]
 667 0116 0133     		adds	r3, r3, #1
 668 0118 284A     		ldr	r2, .L48
 669 011a 1360     		str	r3, [r2]
 207:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 670              		.loc 1 207 0
 671 011c 274B     		ldr	r3, .L48
 672 011e 1B68     		ldr	r3, [r3]
 673 0120 274A     		ldr	r2, .L48+4
 674 0122 0121     		movs	r1, #1
 675 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 208:.\main.c      ****                 halfBitIndex++;
 676              		.loc 1 208 0
 677 0128 244B     		ldr	r3, .L48
 678 012a 1B68     		ldr	r3, [r3]
 679 012c 0133     		adds	r3, r3, #1
 680 012e 234A     		ldr	r2, .L48
 681 0130 1360     		str	r3, [r2]
 682 0132 30E0     		b	.L45
 683              	.L42:
 209:.\main.c      ****             }
 210:.\main.c      ****             
 211:.\main.c      ****         }
 212:.\main.c      ****         else
 213:.\main.c      ****         {
 214:.\main.c      ****             //bit == 0
 215:.\main.c      ****             if(previousHalfBit == 1)
 684              		.loc 1 215 0
 685 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 686 0138 012B     		cmp	r3, #1
 687 013a 16D1     		bne	.L46
 216:.\main.c      ****             {
 217:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 688              		.loc 1 217 0
 689 013c 1F4B     		ldr	r3, .L48
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 17


 690 013e 1B68     		ldr	r3, [r3]
 691 0140 1F4A     		ldr	r2, .L48+4
 692 0142 0021     		movs	r1, #0
 693 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 218:.\main.c      ****                 halfBitIndex++;
 694              		.loc 1 218 0
 695 0148 1C4B     		ldr	r3, .L48
 696 014a 1B68     		ldr	r3, [r3]
 697 014c 0133     		adds	r3, r3, #1
 698 014e 1B4A     		ldr	r2, .L48
 699 0150 1360     		str	r3, [r2]
 219:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 700              		.loc 1 219 0
 701 0152 1A4B     		ldr	r3, .L48
 702 0154 1B68     		ldr	r3, [r3]
 703 0156 1A4A     		ldr	r2, .L48+4
 704 0158 0121     		movs	r1, #1
 705 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 220:.\main.c      ****                 halfBitIndex++;
 706              		.loc 1 220 0
 707 015e 174B     		ldr	r3, .L48
 708 0160 1B68     		ldr	r3, [r3]
 709 0162 0133     		adds	r3, r3, #1
 710 0164 154A     		ldr	r2, .L48
 711 0166 1360     		str	r3, [r2]
 712 0168 15E0     		b	.L45
 713              	.L46:
 221:.\main.c      ****             }
 222:.\main.c      ****             else
 223:.\main.c      ****             {
 224:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 714              		.loc 1 224 0
 715 016a 144B     		ldr	r3, .L48
 716 016c 1B68     		ldr	r3, [r3]
 717 016e 144A     		ldr	r2, .L48+4
 718 0170 0121     		movs	r1, #1
 719 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 225:.\main.c      ****                 halfBitIndex++;
 720              		.loc 1 225 0
 721 0176 114B     		ldr	r3, .L48
 722 0178 1B68     		ldr	r3, [r3]
 723 017a 0133     		adds	r3, r3, #1
 724 017c 0F4A     		ldr	r2, .L48
 725 017e 1360     		str	r3, [r2]
 226:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 726              		.loc 1 226 0
 727 0180 0E4B     		ldr	r3, .L48
 728 0182 1B68     		ldr	r3, [r3]
 729 0184 0E4A     		ldr	r2, .L48+4
 730 0186 0021     		movs	r1, #0
 731 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 227:.\main.c      ****                 halfBitIndex++;
 732              		.loc 1 227 0
 733 018c 0B4B     		ldr	r3, .L48
 734 018e 1B68     		ldr	r3, [r3]
 735 0190 0133     		adds	r3, r3, #1
 736 0192 0A4A     		ldr	r2, .L48
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 18


 737 0194 1360     		str	r3, [r2]
 738              	.L45:
 228:.\main.c      ****             }
 229:.\main.c      ****         }
 230:.\main.c      ****         
 231:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 739              		.loc 1 231 0 discriminator 2
 740 0196 094B     		ldr	r3, .L48
 741 0198 1B68     		ldr	r3, [r3]
 742 019a 013B     		subs	r3, r3, #1
 743 019c 084A     		ldr	r2, .L48+4
 744 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 745 01a2 87F86730 		strb	r3, [r7, #103]
 191:.\main.c      ****     {
 746              		.loc 1 191 0 discriminator 2
 747 01a6 FB6D     		ldr	r3, [r7, #92]
 748 01a8 013B     		subs	r3, r3, #1
 749 01aa FB65     		str	r3, [r7, #92]
 750              	.L41:
 191:.\main.c      ****     {
 751              		.loc 1 191 0 is_stmt 0 discriminator 1
 752 01ac FB6D     		ldr	r3, [r7, #92]
 753 01ae 002B     		cmp	r3, #0
 754 01b0 85DA     		bge	.L47
 232:.\main.c      ****     }//end for
 233:.\main.c      ****    
 234:.\main.c      **** }//end function
 755              		.loc 1 234 0 is_stmt 1
 756 01b2 6C37     		adds	r7, r7, #108
 757              		.cfi_def_cfa_offset 4
 758 01b4 BD46     		mov	sp, r7
 759              		.cfi_def_cfa_register 13
 760              		@ sp needed
 761 01b6 5DF8047B 		ldr	r7, [sp], #4
 762              		.cfi_restore 7
 763              		.cfi_def_cfa_offset 0
 764 01ba 7047     		bx	lr
 765              	.L49:
 766              		.align	2
 767              	.L48:
 768 01bc 00000000 		.word	halfBitIndex
 769 01c0 00000000 		.word	diffManEncodedData
 770              		.cfi_endproc
 771              	.LFE69:
 772              		.size	asciiToDiffMan, .-asciiToDiffMan
 773              		.section	.text.transmitData,"ax",%progbits
 774              		.align	2
 775              		.global	transmitData
 776              		.thumb
 777              		.thumb_func
 778              		.type	transmitData, %function
 779              	transmitData:
 780              	.LFB70:
 235:.\main.c      **** 
 236:.\main.c      **** /*
 237:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 238:.\main.c      **** Checks network state before transmitting.
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 19


 239:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 240:.\main.c      **** */
 241:.\main.c      **** void transmitData(){
 781              		.loc 1 241 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 8
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 0000 80B5     		push	{r7, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 0002 82B0     		sub	sp, sp, #8
 790              		.cfi_def_cfa_offset 16
 791 0004 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 242:.\main.c      ****     int i;
 243:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 793              		.loc 1 243 0
 794 0006 0023     		movs	r3, #0
 795 0008 7B60     		str	r3, [r7, #4]
 796 000a 2EE0     		b	.L51
 797              	.L56:
 244:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 245:.\main.c      ****         //Else break out of transmition and wait random time
 246:.\main.c      ****         if(networkState != idle){
 798              		.loc 1 246 0
 799 000c 1F4B     		ldr	r3, .L58
 800 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 801 0010 012B     		cmp	r3, #1
 802 0012 12D0     		beq	.L52
 247:.\main.c      ****             if(networkState == collision){
 803              		.loc 1 247 0
 804 0014 1D4B     		ldr	r3, .L58
 805 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 806 0018 022B     		cmp	r3, #2
 807 001a 0DD1     		bne	.L53
 248:.\main.c      ****                 CyDelay((Counter_ReadCounter()/128)*800);
 808              		.loc 1 248 0
 809 001c FFF7FEFF 		bl	Counter_ReadCounter
 810 0020 0346     		mov	r3, r0
 811 0022 DB09     		lsrs	r3, r3, #7
 812 0024 DBB2     		uxtb	r3, r3
 813 0026 1A46     		mov	r2, r3
 814 0028 4FF44873 		mov	r3, #800
 815 002c 03FB02F3 		mul	r3, r3, r2
 816 0030 1846     		mov	r0, r3
 817 0032 FFF7FEFF 		bl	CyDelay
 249:.\main.c      ****             }
 250:.\main.c      ****             break;
 818              		.loc 1 250 0
 819 0036 1DE0     		b	.L54
 820              	.L53:
 821 0038 1CE0     		b	.L54
 822              	.L52:
 251:.\main.c      ****         }
 252:.\main.c      ****         /*
 253:.\main.c      ****         Notes:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 20


 254:.\main.c      ****         Need to check if we are in collide specifically and wait for a random time if we are at som
 255:.\main.c      ****         We could probably do this inside the if loop above
 256:.\main.c      ****         For the random wait value, there isn't any easy way to generate random numbers in PSoC
 257:.\main.c      ****         We could use a rapidly running continuous counter between 0 and 128 and grab the counter va
 258:.\main.c      ****         this would probably be as random as we need
 259:.\main.c      ****         Our equation would be (from the spec)
 260:.\main.c      ****         ([Random input from counter]/128)*(800 ms)
 261:.\main.c      ****         So our random delay time statement would be something like
 262:.\main.c      ****         CyDelay(([Counter Read Input]/128)*(800));
 263:.\main.c      ****         This would delay for a random value between 0 & 800 ms, which is what we want
 264:.\main.c      ****         */
 265:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 823              		.loc 1 265 0
 824 003a 154A     		ldr	r2, .L58+4
 825 003c 7B68     		ldr	r3, [r7, #4]
 826 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 827 0042 DBB2     		uxtb	r3, r3
 828 0044 1846     		mov	r0, r3
 829 0046 FFF7FEFF 		bl	TX_pin_Write
 266:.\main.c      ****         Timer_Start();
 830              		.loc 1 266 0
 831 004a FFF7FEFF 		bl	Timer_Start
 267:.\main.c      ****         while(!timerExpired); 
 832              		.loc 1 267 0
 833 004e 00BF     		nop
 834              	.L55:
 835              		.loc 1 267 0 is_stmt 0 discriminator 1
 836 0050 104B     		ldr	r3, .L58+8
 837 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 838 0054 83F00103 		eor	r3, r3, #1
 839 0058 DBB2     		uxtb	r3, r3
 840 005a 002B     		cmp	r3, #0
 841 005c F8D1     		bne	.L55
 268:.\main.c      ****         timerExpired = false;
 842              		.loc 1 268 0 is_stmt 1 discriminator 2
 843 005e 0D4B     		ldr	r3, .L58+8
 844 0060 0022     		movs	r2, #0
 845 0062 1A70     		strb	r2, [r3]
 243:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 846              		.loc 1 243 0 discriminator 2
 847 0064 7B68     		ldr	r3, [r7, #4]
 848 0066 0133     		adds	r3, r3, #1
 849 0068 7B60     		str	r3, [r7, #4]
 850              	.L51:
 243:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 851              		.loc 1 243 0 is_stmt 0 discriminator 1
 852 006a 0B4B     		ldr	r3, .L58+12
 853 006c 1B68     		ldr	r3, [r3]
 854 006e 7A68     		ldr	r2, [r7, #4]
 855 0070 9A42     		cmp	r2, r3
 856 0072 CBDB     		blt	.L56
 857              	.L54:
 269:.\main.c      ****     }
 270:.\main.c      ****     
 271:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag 
 272:.\main.c      ****     if(i == halfBitIndex){
 858              		.loc 1 272 0 is_stmt 1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 21


 859 0074 084B     		ldr	r3, .L58+12
 860 0076 1B68     		ldr	r3, [r3]
 861 0078 7A68     		ldr	r2, [r7, #4]
 862 007a 9A42     		cmp	r2, r3
 863 007c 02D1     		bne	.L50
 273:.\main.c      ****         dataTransmissionComplete = true;
 864              		.loc 1 273 0
 865 007e 074B     		ldr	r3, .L58+16
 866 0080 0122     		movs	r2, #1
 867 0082 1A70     		strb	r2, [r3]
 868              	.L50:
 274:.\main.c      ****     }
 275:.\main.c      **** }
 869              		.loc 1 275 0
 870 0084 0837     		adds	r7, r7, #8
 871              		.cfi_def_cfa_offset 8
 872 0086 BD46     		mov	sp, r7
 873              		.cfi_def_cfa_register 13
 874              		@ sp needed
 875 0088 80BD     		pop	{r7, pc}
 876              	.L59:
 877 008a 00BF     		.align	2
 878              	.L58:
 879 008c 00000000 		.word	networkState
 880 0090 00000000 		.word	diffManEncodedData
 881 0094 00000000 		.word	timerExpired
 882 0098 00000000 		.word	halfBitIndex
 883 009c 00000000 		.word	dataTransmissionComplete
 884              		.cfi_endproc
 885              	.LFE70:
 886              		.size	transmitData, .-transmitData
 887              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 888              		.align	2
 889              		.global	setNetworkStateOnLEDs
 890              		.thumb
 891              		.thumb_func
 892              		.type	setNetworkStateOnLEDs, %function
 893              	setNetworkStateOnLEDs:
 894              	.LFB71:
 276:.\main.c      **** 
 277:.\main.c      **** void setNetworkStateOnLEDs(){
 895              		.loc 1 277 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0002 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
 278:.\main.c      **** 	 switch(networkState){
 905              		.loc 1 278 0
 906 0004 134B     		ldr	r3, .L66
 907 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 908 0008 012B     		cmp	r3, #1
 909 000a 0ED0     		beq	.L62
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 22


 910 000c 022B     		cmp	r3, #2
 911 000e 16D0     		beq	.L63
 912 0010 002B     		cmp	r3, #0
 913 0012 00D0     		beq	.L64
 279:.\main.c      ****         case busy:
 280:.\main.c      ****         {
 281:.\main.c      ****             LED4_Write(1);
 282:.\main.c      ****             LED3_Write(0);
 283:.\main.c      ****             LED2_Write(0);
 284:.\main.c      ****             break;
 285:.\main.c      ****         }
 286:.\main.c      ****         case idle:
 287:.\main.c      ****         {
 288:.\main.c      ****             LED3_Write(1);
 289:.\main.c      ****             LED4_Write(0);
 290:.\main.c      ****             LED2_Write(0);
 291:.\main.c      ****             break;
 292:.\main.c      ****         }
 293:.\main.c      ****         case collision:
 294:.\main.c      ****         {
 295:.\main.c      ****             LED2_Write(1);
 296:.\main.c      ****             LED4_Write(0);
 297:.\main.c      ****             LED3_Write(0);
 298:.\main.c      ****             break;
 299:.\main.c      ****         }
 300:.\main.c      ****         default:
 301:.\main.c      ****         {
 302:.\main.c      ****            //error
 303:.\main.c      ****             break;
 914              		.loc 1 303 0
 915 0014 1DE0     		b	.L60
 916              	.L64:
 281:.\main.c      ****             LED3_Write(0);
 917              		.loc 1 281 0
 918 0016 0120     		movs	r0, #1
 919 0018 FFF7FEFF 		bl	LED4_Write
 282:.\main.c      ****             LED2_Write(0);
 920              		.loc 1 282 0
 921 001c 0020     		movs	r0, #0
 922 001e FFF7FEFF 		bl	LED3_Write
 283:.\main.c      ****             break;
 923              		.loc 1 283 0
 924 0022 0020     		movs	r0, #0
 925 0024 FFF7FEFF 		bl	LED2_Write
 284:.\main.c      ****         }
 926              		.loc 1 284 0
 927 0028 13E0     		b	.L60
 928              	.L62:
 288:.\main.c      ****             LED4_Write(0);
 929              		.loc 1 288 0
 930 002a 0120     		movs	r0, #1
 931 002c FFF7FEFF 		bl	LED3_Write
 289:.\main.c      ****             LED2_Write(0);
 932              		.loc 1 289 0
 933 0030 0020     		movs	r0, #0
 934 0032 FFF7FEFF 		bl	LED4_Write
 290:.\main.c      ****             break;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 23


 935              		.loc 1 290 0
 936 0036 0020     		movs	r0, #0
 937 0038 FFF7FEFF 		bl	LED2_Write
 291:.\main.c      ****         }
 938              		.loc 1 291 0
 939 003c 09E0     		b	.L60
 940              	.L63:
 295:.\main.c      ****             LED4_Write(0);
 941              		.loc 1 295 0
 942 003e 0120     		movs	r0, #1
 943 0040 FFF7FEFF 		bl	LED2_Write
 296:.\main.c      ****             LED3_Write(0);
 944              		.loc 1 296 0
 945 0044 0020     		movs	r0, #0
 946 0046 FFF7FEFF 		bl	LED4_Write
 297:.\main.c      ****             break;
 947              		.loc 1 297 0
 948 004a 0020     		movs	r0, #0
 949 004c FFF7FEFF 		bl	LED3_Write
 298:.\main.c      ****         }
 950              		.loc 1 298 0
 951 0050 00BF     		nop
 952              	.L60:
 304:.\main.c      ****         } 
 305:.\main.c      **** 	}
 306:.\main.c      **** }
 953              		.loc 1 306 0
 954 0052 80BD     		pop	{r7, pc}
 955              	.L67:
 956              		.align	2
 957              	.L66:
 958 0054 00000000 		.word	networkState
 959              		.cfi_endproc
 960              	.LFE71:
 961              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 962              		.text
 963              	.Letext0:
 964              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 965              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 966              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 967              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 968              		.section	.debug_info,"",%progbits
 969              	.Ldebug_info0:
 970 0000 EF020000 		.4byte	0x2ef
 971 0004 0400     		.2byte	0x4
 972 0006 00000000 		.4byte	.Ldebug_abbrev0
 973 000a 04       		.byte	0x4
 974 000b 01       		.uleb128 0x1
 975 000c 46000000 		.4byte	.LASF42
 976 0010 01       		.byte	0x1
 977 0011 02010000 		.4byte	.LASF43
 978 0015 2D010000 		.4byte	.LASF44
 979 0019 00000000 		.4byte	.Ldebug_ranges0+0
 980 001d 00000000 		.4byte	0
 981 0021 00000000 		.4byte	.Ldebug_line0
 982 0025 02       		.uleb128 0x2
 983 0026 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 24


 984 0027 06       		.byte	0x6
 985 0028 A8020000 		.4byte	.LASF0
 986 002c 02       		.uleb128 0x2
 987 002d 01       		.byte	0x1
 988 002e 08       		.byte	0x8
 989 002f D4010000 		.4byte	.LASF1
 990 0033 02       		.uleb128 0x2
 991 0034 02       		.byte	0x2
 992 0035 05       		.byte	0x5
 993 0036 82020000 		.4byte	.LASF2
 994 003a 02       		.uleb128 0x2
 995 003b 02       		.byte	0x2
 996 003c 07       		.byte	0x7
 997 003d 7B010000 		.4byte	.LASF3
 998 0041 03       		.uleb128 0x3
 999 0042 29000000 		.4byte	.LASF9
 1000 0046 02       		.byte	0x2
 1001 0047 3F       		.byte	0x3f
 1002 0048 4C000000 		.4byte	0x4c
 1003 004c 02       		.uleb128 0x2
 1004 004d 04       		.byte	0x4
 1005 004e 05       		.byte	0x5
 1006 004f 92020000 		.4byte	.LASF4
 1007 0053 02       		.uleb128 0x2
 1008 0054 04       		.byte	0x4
 1009 0055 07       		.byte	0x7
 1010 0056 69010000 		.4byte	.LASF5
 1011 005a 02       		.uleb128 0x2
 1012 005b 08       		.byte	0x8
 1013 005c 05       		.byte	0x5
 1014 005d 3A020000 		.4byte	.LASF6
 1015 0061 02       		.uleb128 0x2
 1016 0062 08       		.byte	0x8
 1017 0063 07       		.byte	0x7
 1018 0064 EF010000 		.4byte	.LASF7
 1019 0068 04       		.uleb128 0x4
 1020 0069 04       		.byte	0x4
 1021 006a 05       		.byte	0x5
 1022 006b 696E7400 		.ascii	"int\000"
 1023 006f 02       		.uleb128 0x2
 1024 0070 04       		.byte	0x4
 1025 0071 07       		.byte	0x7
 1026 0072 E2010000 		.4byte	.LASF8
 1027 0076 03       		.uleb128 0x3
 1028 0077 1F020000 		.4byte	.LASF10
 1029 007b 03       		.byte	0x3
 1030 007c 2C       		.byte	0x2c
 1031 007d 41000000 		.4byte	0x41
 1032 0081 03       		.uleb128 0x3
 1033 0082 8C020000 		.4byte	.LASF11
 1034 0086 04       		.byte	0x4
 1035 0087 C2       		.byte	0xc2
 1036 0088 2C000000 		.4byte	0x2c
 1037 008c 02       		.uleb128 0x2
 1038 008d 04       		.byte	0x4
 1039 008e 04       		.byte	0x4
 1040 008f 0B010000 		.4byte	.LASF12
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 25


 1041 0093 02       		.uleb128 0x2
 1042 0094 08       		.byte	0x8
 1043 0095 04       		.byte	0x4
 1044 0096 BE010000 		.4byte	.LASF13
 1045 009a 02       		.uleb128 0x2
 1046 009b 01       		.byte	0x1
 1047 009c 08       		.byte	0x8
 1048 009d 55020000 		.4byte	.LASF14
 1049 00a1 05       		.uleb128 0x5
 1050 00a2 64010000 		.4byte	.LASF15
 1051 00a6 04       		.byte	0x4
 1052 00a7 6C01     		.2byte	0x16c
 1053 00a9 AD000000 		.4byte	0xad
 1054 00ad 06       		.uleb128 0x6
 1055 00ae 81000000 		.4byte	0x81
 1056 00b2 02       		.uleb128 0x2
 1057 00b3 04       		.byte	0x4
 1058 00b4 07       		.byte	0x7
 1059 00b5 27020000 		.4byte	.LASF16
 1060 00b9 07       		.uleb128 0x7
 1061 00ba 04       		.byte	0x4
 1062 00bb 9A000000 		.4byte	0x9a
 1063 00bf 08       		.uleb128 0x8
 1064 00c0 A6010000 		.4byte	.LASF45
 1065 00c4 01       		.byte	0x1
 1066 00c5 01       		.byte	0x1
 1067 00c6 15       		.byte	0x15
 1068 00c7 DE000000 		.4byte	0xde
 1069 00cb 09       		.uleb128 0x9
 1070 00cc B9010000 		.4byte	.LASF17
 1071 00d0 00       		.sleb128 0
 1072 00d1 09       		.uleb128 0x9
 1073 00d2 F0000000 		.4byte	.LASF18
 1074 00d6 01       		.sleb128 1
 1075 00d7 09       		.uleb128 0x9
 1076 00d8 30020000 		.4byte	.LASF19
 1077 00dc 02       		.sleb128 2
 1078 00dd 00       		.byte	0
 1079 00de 0A       		.uleb128 0xa
 1080 00df 00000000 		.4byte	.LASF20
 1081 00e3 01       		.byte	0x1
 1082 00e4 17       		.byte	0x17
 1083 00e5 00000000 		.4byte	.LFB63
 1084 00e9 28000000 		.4byte	.LFE63-.LFB63
 1085 00ed 01       		.uleb128 0x1
 1086 00ee 9C       		.byte	0x9c
 1087 00ef 0A       		.uleb128 0xa
 1088 00f0 5A020000 		.4byte	.LASF21
 1089 00f4 01       		.byte	0x1
 1090 00f5 21       		.byte	0x21
 1091 00f6 00000000 		.4byte	.LFB64
 1092 00fa 18000000 		.4byte	.LFE64-.LFB64
 1093 00fe 01       		.uleb128 0x1
 1094 00ff 9C       		.byte	0x9c
 1095 0100 0A       		.uleb128 0xa
 1096 0101 F5000000 		.4byte	.LASF22
 1097 0105 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 26


 1098 0106 27       		.byte	0x27
 1099 0107 00000000 		.4byte	.LFB65
 1100 010b 1C000000 		.4byte	.LFE65-.LFB65
 1101 010f 01       		.uleb128 0x1
 1102 0110 9C       		.byte	0x9c
 1103 0111 0B       		.uleb128 0xb
 1104 0112 C5010000 		.4byte	.LASF25
 1105 0116 01       		.byte	0x1
 1106 0117 2D       		.byte	0x2d
 1107 0118 68000000 		.4byte	0x68
 1108 011c 00000000 		.4byte	.LFB66
 1109 0120 74010000 		.4byte	.LFE66-.LFB66
 1110 0124 01       		.uleb128 0x1
 1111 0125 9C       		.byte	0x9c
 1112 0126 55010000 		.4byte	0x155
 1113 012a 0C       		.uleb128 0xc
 1114 012b 727800   		.ascii	"rx\000"
 1115 012e 01       		.byte	0x1
 1116 012f 2F       		.byte	0x2f
 1117 0130 9A000000 		.4byte	0x9a
 1118 0134 02       		.uleb128 0x2
 1119 0135 91       		.byte	0x91
 1120 0136 76       		.sleb128 -10
 1121 0137 0D       		.uleb128 0xd
 1122 0138 8E010000 		.4byte	.LASF23
 1123 013c 01       		.byte	0x1
 1124 013d 30       		.byte	0x30
 1125 013e 55010000 		.4byte	0x155
 1126 0142 03       		.uleb128 0x3
 1127 0143 91       		.byte	0x91
 1128 0144 907F     		.sleb128 -112
 1129 0146 0D       		.uleb128 0xd
 1130 0147 E1000000 		.4byte	.LASF24
 1131 014b 01       		.byte	0x1
 1132 014c 31       		.byte	0x31
 1133 014d 81000000 		.4byte	0x81
 1134 0151 02       		.uleb128 0x2
 1135 0152 91       		.byte	0x91
 1136 0153 77       		.sleb128 -9
 1137 0154 00       		.byte	0
 1138 0155 0E       		.uleb128 0xe
 1139 0156 9A000000 		.4byte	0x9a
 1140 015a 65010000 		.4byte	0x165
 1141 015e 0F       		.uleb128 0xf
 1142 015f B2000000 		.4byte	0xb2
 1143 0163 63       		.byte	0x63
 1144 0164 00       		.byte	0
 1145 0165 10       		.uleb128 0x10
 1146 0166 6A020000 		.4byte	.LASF31
 1147 016a 01       		.byte	0x1
 1148 016b 89       		.byte	0x89
 1149 016c 00000000 		.4byte	.LFB67
 1150 0170 48000000 		.4byte	.LFE67-.LFB67
 1151 0174 01       		.uleb128 0x1
 1152 0175 9C       		.byte	0x9c
 1153 0176 11       		.uleb128 0x11
 1154 0177 C4020000 		.4byte	.LASF26
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 27


 1155 017b 01       		.byte	0x1
 1156 017c 95       		.byte	0x95
 1157 017d 00000000 		.4byte	.LFB68
 1158 0181 38000000 		.4byte	.LFE68-.LFB68
 1159 0185 01       		.uleb128 0x1
 1160 0186 9C       		.byte	0x9c
 1161 0187 B4010000 		.4byte	0x1b4
 1162 018b 12       		.uleb128 0x12
 1163 018c 8E010000 		.4byte	.LASF23
 1164 0190 01       		.byte	0x1
 1165 0191 95       		.byte	0x95
 1166 0192 B9000000 		.4byte	0xb9
 1167 0196 02       		.uleb128 0x2
 1168 0197 91       		.byte	0x91
 1169 0198 6C       		.sleb128 -20
 1170 0199 12       		.uleb128 0x12
 1171 019a E1000000 		.4byte	.LASF24
 1172 019e 01       		.byte	0x1
 1173 019f 95       		.byte	0x95
 1174 01a0 81000000 		.4byte	0x81
 1175 01a4 02       		.uleb128 0x2
 1176 01a5 91       		.byte	0x91
 1177 01a6 6B       		.sleb128 -21
 1178 01a7 0C       		.uleb128 0xc
 1179 01a8 6900     		.ascii	"i\000"
 1180 01aa 01       		.byte	0x1
 1181 01ab 97       		.byte	0x97
 1182 01ac 6F000000 		.4byte	0x6f
 1183 01b0 02       		.uleb128 0x2
 1184 01b1 91       		.byte	0x91
 1185 01b2 74       		.sleb128 -12
 1186 01b3 00       		.byte	0
 1187 01b4 13       		.uleb128 0x13
 1188 01b5 EC020000 		.4byte	.LASF27
 1189 01b9 01       		.byte	0x1
 1190 01ba A1       		.byte	0xa1
 1191 01bb 00000000 		.4byte	.LFB69
 1192 01bf C4010000 		.4byte	.LFE69-.LFB69
 1193 01c3 01       		.uleb128 0x1
 1194 01c4 9C       		.byte	0x9c
 1195 01c5 0E020000 		.4byte	0x20e
 1196 01c9 12       		.uleb128 0x12
 1197 01ca CA010000 		.4byte	.LASF28
 1198 01ce 01       		.byte	0x1
 1199 01cf A1       		.byte	0xa1
 1200 01d0 9A000000 		.4byte	0x9a
 1201 01d4 03       		.uleb128 0x3
 1202 01d5 91       		.byte	0x91
 1203 01d6 977F     		.sleb128 -105
 1204 01d8 0D       		.uleb128 0xd
 1205 01d9 B4020000 		.4byte	.LASF29
 1206 01dd 01       		.byte	0x1
 1207 01de A3       		.byte	0xa3
 1208 01df 81000000 		.4byte	0x81
 1209 01e3 02       		.uleb128 0x2
 1210 01e4 91       		.byte	0x91
 1211 01e5 77       		.sleb128 -9
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 28


 1212 01e6 0D       		.uleb128 0xd
 1213 01e7 DA020000 		.4byte	.LASF30
 1214 01eb 01       		.byte	0x1
 1215 01ec B4       		.byte	0xb4
 1216 01ed 0E020000 		.4byte	0x20e
 1217 01f1 03       		.uleb128 0x3
 1218 01f2 91       		.byte	0x91
 1219 01f3 9C7F     		.sleb128 -100
 1220 01f5 0C       		.uleb128 0xc
 1221 01f6 6900     		.ascii	"i\000"
 1222 01f8 01       		.byte	0x1
 1223 01f9 B5       		.byte	0xb5
 1224 01fa 68000000 		.4byte	0x68
 1225 01fe 02       		.uleb128 0x2
 1226 01ff 91       		.byte	0x91
 1227 0200 70       		.sleb128 -16
 1228 0201 0C       		.uleb128 0xc
 1229 0202 6A00     		.ascii	"j\000"
 1230 0204 01       		.byte	0x1
 1231 0205 BE       		.byte	0xbe
 1232 0206 68000000 		.4byte	0x68
 1233 020a 02       		.uleb128 0x2
 1234 020b 91       		.byte	0x91
 1235 020c 6C       		.sleb128 -20
 1236 020d 00       		.byte	0
 1237 020e 0E       		.uleb128 0xe
 1238 020f 6F000000 		.4byte	0x6f
 1239 0213 1E020000 		.4byte	0x21e
 1240 0217 0F       		.uleb128 0xf
 1241 0218 B2000000 		.4byte	0xb2
 1242 021c 13       		.byte	0x13
 1243 021d 00       		.byte	0
 1244 021e 14       		.uleb128 0x14
 1245 021f 11010000 		.4byte	.LASF46
 1246 0223 01       		.byte	0x1
 1247 0224 F1       		.byte	0xf1
 1248 0225 00000000 		.4byte	.LFB70
 1249 0229 A0000000 		.4byte	.LFE70-.LFB70
 1250 022d 01       		.uleb128 0x1
 1251 022e 9C       		.byte	0x9c
 1252 022f 40020000 		.4byte	0x240
 1253 0233 0C       		.uleb128 0xc
 1254 0234 6900     		.ascii	"i\000"
 1255 0236 01       		.byte	0x1
 1256 0237 F2       		.byte	0xf2
 1257 0238 68000000 		.4byte	0x68
 1258 023c 02       		.uleb128 0x2
 1259 023d 91       		.byte	0x91
 1260 023e 74       		.sleb128 -12
 1261 023f 00       		.byte	0
 1262 0240 15       		.uleb128 0x15
 1263 0241 13000000 		.4byte	.LASF32
 1264 0245 01       		.byte	0x1
 1265 0246 1501     		.2byte	0x115
 1266 0248 00000000 		.4byte	.LFB71
 1267 024c 58000000 		.4byte	.LFE71-.LFB71
 1268 0250 01       		.uleb128 0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 29


 1269 0251 9C       		.byte	0x9c
 1270 0252 16       		.uleb128 0x16
 1271 0253 99010000 		.4byte	.LASF33
 1272 0257 05       		.byte	0x5
 1273 0258 2A06     		.2byte	0x62a
 1274 025a 5E020000 		.4byte	0x25e
 1275 025e 06       		.uleb128 0x6
 1276 025f 76000000 		.4byte	0x76
 1277 0263 0E       		.uleb128 0xe
 1278 0264 68000000 		.4byte	0x68
 1279 0268 74020000 		.4byte	0x274
 1280 026c 17       		.uleb128 0x17
 1281 026d B2000000 		.4byte	0xb2
 1282 0271 1F03     		.2byte	0x31f
 1283 0273 00       		.byte	0
 1284 0274 18       		.uleb128 0x18
 1285 0275 33000000 		.4byte	.LASF34
 1286 0279 01       		.byte	0x1
 1287 027a 12       		.byte	0x12
 1288 027b 63020000 		.4byte	0x263
 1289 027f 05       		.uleb128 0x5
 1290 0280 03       		.byte	0x3
 1291 0281 00000000 		.4byte	diffManEncodedData
 1292 0285 18       		.uleb128 0x18
 1293 0286 AC010000 		.4byte	.LASF35
 1294 028a 01       		.byte	0x1
 1295 028b 13       		.byte	0x13
 1296 028c 68000000 		.4byte	0x68
 1297 0290 05       		.uleb128 0x5
 1298 0291 03       		.byte	0x3
 1299 0292 00000000 		.4byte	halfBitIndex
 1300 0296 18       		.uleb128 0x18
 1301 0297 1E010000 		.4byte	.LASF36
 1302 029b 01       		.byte	0x1
 1303 029c 13       		.byte	0x13
 1304 029d 68000000 		.4byte	0x68
 1305 02a1 05       		.uleb128 0x5
 1306 02a2 03       		.byte	0x3
 1307 02a3 00000000 		.4byte	currentDataPos
 1308 02a7 18       		.uleb128 0x18
 1309 02a8 48020000 		.4byte	.LASF37
 1310 02ac 01       		.byte	0x1
 1311 02ad 13       		.byte	0x13
 1312 02ae 68000000 		.4byte	0x68
 1313 02b2 05       		.uleb128 0x5
 1314 02b3 03       		.byte	0x3
 1315 02b4 00000000 		.4byte	lengthOfData
 1316 02b8 18       		.uleb128 0x18
 1317 02b9 9B020000 		.4byte	.LASF38
 1318 02bd 01       		.byte	0x1
 1319 02be 14       		.byte	0x14
 1320 02bf C9020000 		.4byte	0x2c9
 1321 02c3 05       		.uleb128 0x5
 1322 02c4 03       		.byte	0x3
 1323 02c5 00000000 		.4byte	timerExpired
 1324 02c9 02       		.uleb128 0x2
 1325 02ca 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 30


 1326 02cb 02       		.byte	0x2
 1327 02cc D4020000 		.4byte	.LASF39
 1328 02d0 18       		.uleb128 0x18
 1329 02d1 06020000 		.4byte	.LASF40
 1330 02d5 01       		.byte	0x1
 1331 02d6 14       		.byte	0x14
 1332 02d7 C9020000 		.4byte	0x2c9
 1333 02db 05       		.uleb128 0x5
 1334 02dc 03       		.byte	0x3
 1335 02dd 00000000 		.4byte	dataTransmissionComplete
 1336 02e1 18       		.uleb128 0x18
 1337 02e2 D4000000 		.4byte	.LASF41
 1338 02e6 01       		.byte	0x1
 1339 02e7 15       		.byte	0x15
 1340 02e8 BF000000 		.4byte	0xbf
 1341 02ec 05       		.uleb128 0x5
 1342 02ed 03       		.byte	0x3
 1343 02ee 00000000 		.4byte	networkState
 1344 02f2 00       		.byte	0
 1345              		.section	.debug_abbrev,"",%progbits
 1346              	.Ldebug_abbrev0:
 1347 0000 01       		.uleb128 0x1
 1348 0001 11       		.uleb128 0x11
 1349 0002 01       		.byte	0x1
 1350 0003 25       		.uleb128 0x25
 1351 0004 0E       		.uleb128 0xe
 1352 0005 13       		.uleb128 0x13
 1353 0006 0B       		.uleb128 0xb
 1354 0007 03       		.uleb128 0x3
 1355 0008 0E       		.uleb128 0xe
 1356 0009 1B       		.uleb128 0x1b
 1357 000a 0E       		.uleb128 0xe
 1358 000b 55       		.uleb128 0x55
 1359 000c 17       		.uleb128 0x17
 1360 000d 11       		.uleb128 0x11
 1361 000e 01       		.uleb128 0x1
 1362 000f 10       		.uleb128 0x10
 1363 0010 17       		.uleb128 0x17
 1364 0011 00       		.byte	0
 1365 0012 00       		.byte	0
 1366 0013 02       		.uleb128 0x2
 1367 0014 24       		.uleb128 0x24
 1368 0015 00       		.byte	0
 1369 0016 0B       		.uleb128 0xb
 1370 0017 0B       		.uleb128 0xb
 1371 0018 3E       		.uleb128 0x3e
 1372 0019 0B       		.uleb128 0xb
 1373 001a 03       		.uleb128 0x3
 1374 001b 0E       		.uleb128 0xe
 1375 001c 00       		.byte	0
 1376 001d 00       		.byte	0
 1377 001e 03       		.uleb128 0x3
 1378 001f 16       		.uleb128 0x16
 1379 0020 00       		.byte	0
 1380 0021 03       		.uleb128 0x3
 1381 0022 0E       		.uleb128 0xe
 1382 0023 3A       		.uleb128 0x3a
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 31


 1383 0024 0B       		.uleb128 0xb
 1384 0025 3B       		.uleb128 0x3b
 1385 0026 0B       		.uleb128 0xb
 1386 0027 49       		.uleb128 0x49
 1387 0028 13       		.uleb128 0x13
 1388 0029 00       		.byte	0
 1389 002a 00       		.byte	0
 1390 002b 04       		.uleb128 0x4
 1391 002c 24       		.uleb128 0x24
 1392 002d 00       		.byte	0
 1393 002e 0B       		.uleb128 0xb
 1394 002f 0B       		.uleb128 0xb
 1395 0030 3E       		.uleb128 0x3e
 1396 0031 0B       		.uleb128 0xb
 1397 0032 03       		.uleb128 0x3
 1398 0033 08       		.uleb128 0x8
 1399 0034 00       		.byte	0
 1400 0035 00       		.byte	0
 1401 0036 05       		.uleb128 0x5
 1402 0037 16       		.uleb128 0x16
 1403 0038 00       		.byte	0
 1404 0039 03       		.uleb128 0x3
 1405 003a 0E       		.uleb128 0xe
 1406 003b 3A       		.uleb128 0x3a
 1407 003c 0B       		.uleb128 0xb
 1408 003d 3B       		.uleb128 0x3b
 1409 003e 05       		.uleb128 0x5
 1410 003f 49       		.uleb128 0x49
 1411 0040 13       		.uleb128 0x13
 1412 0041 00       		.byte	0
 1413 0042 00       		.byte	0
 1414 0043 06       		.uleb128 0x6
 1415 0044 35       		.uleb128 0x35
 1416 0045 00       		.byte	0
 1417 0046 49       		.uleb128 0x49
 1418 0047 13       		.uleb128 0x13
 1419 0048 00       		.byte	0
 1420 0049 00       		.byte	0
 1421 004a 07       		.uleb128 0x7
 1422 004b 0F       		.uleb128 0xf
 1423 004c 00       		.byte	0
 1424 004d 0B       		.uleb128 0xb
 1425 004e 0B       		.uleb128 0xb
 1426 004f 49       		.uleb128 0x49
 1427 0050 13       		.uleb128 0x13
 1428 0051 00       		.byte	0
 1429 0052 00       		.byte	0
 1430 0053 08       		.uleb128 0x8
 1431 0054 04       		.uleb128 0x4
 1432 0055 01       		.byte	0x1
 1433 0056 03       		.uleb128 0x3
 1434 0057 0E       		.uleb128 0xe
 1435 0058 0B       		.uleb128 0xb
 1436 0059 0B       		.uleb128 0xb
 1437 005a 3A       		.uleb128 0x3a
 1438 005b 0B       		.uleb128 0xb
 1439 005c 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 32


 1440 005d 0B       		.uleb128 0xb
 1441 005e 01       		.uleb128 0x1
 1442 005f 13       		.uleb128 0x13
 1443 0060 00       		.byte	0
 1444 0061 00       		.byte	0
 1445 0062 09       		.uleb128 0x9
 1446 0063 28       		.uleb128 0x28
 1447 0064 00       		.byte	0
 1448 0065 03       		.uleb128 0x3
 1449 0066 0E       		.uleb128 0xe
 1450 0067 1C       		.uleb128 0x1c
 1451 0068 0D       		.uleb128 0xd
 1452 0069 00       		.byte	0
 1453 006a 00       		.byte	0
 1454 006b 0A       		.uleb128 0xa
 1455 006c 2E       		.uleb128 0x2e
 1456 006d 00       		.byte	0
 1457 006e 3F       		.uleb128 0x3f
 1458 006f 19       		.uleb128 0x19
 1459 0070 03       		.uleb128 0x3
 1460 0071 0E       		.uleb128 0xe
 1461 0072 3A       		.uleb128 0x3a
 1462 0073 0B       		.uleb128 0xb
 1463 0074 3B       		.uleb128 0x3b
 1464 0075 0B       		.uleb128 0xb
 1465 0076 27       		.uleb128 0x27
 1466 0077 19       		.uleb128 0x19
 1467 0078 11       		.uleb128 0x11
 1468 0079 01       		.uleb128 0x1
 1469 007a 12       		.uleb128 0x12
 1470 007b 06       		.uleb128 0x6
 1471 007c 40       		.uleb128 0x40
 1472 007d 18       		.uleb128 0x18
 1473 007e 9642     		.uleb128 0x2116
 1474 0080 19       		.uleb128 0x19
 1475 0081 00       		.byte	0
 1476 0082 00       		.byte	0
 1477 0083 0B       		.uleb128 0xb
 1478 0084 2E       		.uleb128 0x2e
 1479 0085 01       		.byte	0x1
 1480 0086 3F       		.uleb128 0x3f
 1481 0087 19       		.uleb128 0x19
 1482 0088 03       		.uleb128 0x3
 1483 0089 0E       		.uleb128 0xe
 1484 008a 3A       		.uleb128 0x3a
 1485 008b 0B       		.uleb128 0xb
 1486 008c 3B       		.uleb128 0x3b
 1487 008d 0B       		.uleb128 0xb
 1488 008e 49       		.uleb128 0x49
 1489 008f 13       		.uleb128 0x13
 1490 0090 11       		.uleb128 0x11
 1491 0091 01       		.uleb128 0x1
 1492 0092 12       		.uleb128 0x12
 1493 0093 06       		.uleb128 0x6
 1494 0094 40       		.uleb128 0x40
 1495 0095 18       		.uleb128 0x18
 1496 0096 9642     		.uleb128 0x2116
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 33


 1497 0098 19       		.uleb128 0x19
 1498 0099 01       		.uleb128 0x1
 1499 009a 13       		.uleb128 0x13
 1500 009b 00       		.byte	0
 1501 009c 00       		.byte	0
 1502 009d 0C       		.uleb128 0xc
 1503 009e 34       		.uleb128 0x34
 1504 009f 00       		.byte	0
 1505 00a0 03       		.uleb128 0x3
 1506 00a1 08       		.uleb128 0x8
 1507 00a2 3A       		.uleb128 0x3a
 1508 00a3 0B       		.uleb128 0xb
 1509 00a4 3B       		.uleb128 0x3b
 1510 00a5 0B       		.uleb128 0xb
 1511 00a6 49       		.uleb128 0x49
 1512 00a7 13       		.uleb128 0x13
 1513 00a8 02       		.uleb128 0x2
 1514 00a9 18       		.uleb128 0x18
 1515 00aa 00       		.byte	0
 1516 00ab 00       		.byte	0
 1517 00ac 0D       		.uleb128 0xd
 1518 00ad 34       		.uleb128 0x34
 1519 00ae 00       		.byte	0
 1520 00af 03       		.uleb128 0x3
 1521 00b0 0E       		.uleb128 0xe
 1522 00b1 3A       		.uleb128 0x3a
 1523 00b2 0B       		.uleb128 0xb
 1524 00b3 3B       		.uleb128 0x3b
 1525 00b4 0B       		.uleb128 0xb
 1526 00b5 49       		.uleb128 0x49
 1527 00b6 13       		.uleb128 0x13
 1528 00b7 02       		.uleb128 0x2
 1529 00b8 18       		.uleb128 0x18
 1530 00b9 00       		.byte	0
 1531 00ba 00       		.byte	0
 1532 00bb 0E       		.uleb128 0xe
 1533 00bc 01       		.uleb128 0x1
 1534 00bd 01       		.byte	0x1
 1535 00be 49       		.uleb128 0x49
 1536 00bf 13       		.uleb128 0x13
 1537 00c0 01       		.uleb128 0x1
 1538 00c1 13       		.uleb128 0x13
 1539 00c2 00       		.byte	0
 1540 00c3 00       		.byte	0
 1541 00c4 0F       		.uleb128 0xf
 1542 00c5 21       		.uleb128 0x21
 1543 00c6 00       		.byte	0
 1544 00c7 49       		.uleb128 0x49
 1545 00c8 13       		.uleb128 0x13
 1546 00c9 2F       		.uleb128 0x2f
 1547 00ca 0B       		.uleb128 0xb
 1548 00cb 00       		.byte	0
 1549 00cc 00       		.byte	0
 1550 00cd 10       		.uleb128 0x10
 1551 00ce 2E       		.uleb128 0x2e
 1552 00cf 00       		.byte	0
 1553 00d0 3F       		.uleb128 0x3f
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 34


 1554 00d1 19       		.uleb128 0x19
 1555 00d2 03       		.uleb128 0x3
 1556 00d3 0E       		.uleb128 0xe
 1557 00d4 3A       		.uleb128 0x3a
 1558 00d5 0B       		.uleb128 0xb
 1559 00d6 3B       		.uleb128 0x3b
 1560 00d7 0B       		.uleb128 0xb
 1561 00d8 11       		.uleb128 0x11
 1562 00d9 01       		.uleb128 0x1
 1563 00da 12       		.uleb128 0x12
 1564 00db 06       		.uleb128 0x6
 1565 00dc 40       		.uleb128 0x40
 1566 00dd 18       		.uleb128 0x18
 1567 00de 9742     		.uleb128 0x2117
 1568 00e0 19       		.uleb128 0x19
 1569 00e1 00       		.byte	0
 1570 00e2 00       		.byte	0
 1571 00e3 11       		.uleb128 0x11
 1572 00e4 2E       		.uleb128 0x2e
 1573 00e5 01       		.byte	0x1
 1574 00e6 3F       		.uleb128 0x3f
 1575 00e7 19       		.uleb128 0x19
 1576 00e8 03       		.uleb128 0x3
 1577 00e9 0E       		.uleb128 0xe
 1578 00ea 3A       		.uleb128 0x3a
 1579 00eb 0B       		.uleb128 0xb
 1580 00ec 3B       		.uleb128 0x3b
 1581 00ed 0B       		.uleb128 0xb
 1582 00ee 27       		.uleb128 0x27
 1583 00ef 19       		.uleb128 0x19
 1584 00f0 11       		.uleb128 0x11
 1585 00f1 01       		.uleb128 0x1
 1586 00f2 12       		.uleb128 0x12
 1587 00f3 06       		.uleb128 0x6
 1588 00f4 40       		.uleb128 0x40
 1589 00f5 18       		.uleb128 0x18
 1590 00f6 9642     		.uleb128 0x2116
 1591 00f8 19       		.uleb128 0x19
 1592 00f9 01       		.uleb128 0x1
 1593 00fa 13       		.uleb128 0x13
 1594 00fb 00       		.byte	0
 1595 00fc 00       		.byte	0
 1596 00fd 12       		.uleb128 0x12
 1597 00fe 05       		.uleb128 0x5
 1598 00ff 00       		.byte	0
 1599 0100 03       		.uleb128 0x3
 1600 0101 0E       		.uleb128 0xe
 1601 0102 3A       		.uleb128 0x3a
 1602 0103 0B       		.uleb128 0xb
 1603 0104 3B       		.uleb128 0x3b
 1604 0105 0B       		.uleb128 0xb
 1605 0106 49       		.uleb128 0x49
 1606 0107 13       		.uleb128 0x13
 1607 0108 02       		.uleb128 0x2
 1608 0109 18       		.uleb128 0x18
 1609 010a 00       		.byte	0
 1610 010b 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 35


 1611 010c 13       		.uleb128 0x13
 1612 010d 2E       		.uleb128 0x2e
 1613 010e 01       		.byte	0x1
 1614 010f 3F       		.uleb128 0x3f
 1615 0110 19       		.uleb128 0x19
 1616 0111 03       		.uleb128 0x3
 1617 0112 0E       		.uleb128 0xe
 1618 0113 3A       		.uleb128 0x3a
 1619 0114 0B       		.uleb128 0xb
 1620 0115 3B       		.uleb128 0x3b
 1621 0116 0B       		.uleb128 0xb
 1622 0117 27       		.uleb128 0x27
 1623 0118 19       		.uleb128 0x19
 1624 0119 11       		.uleb128 0x11
 1625 011a 01       		.uleb128 0x1
 1626 011b 12       		.uleb128 0x12
 1627 011c 06       		.uleb128 0x6
 1628 011d 40       		.uleb128 0x40
 1629 011e 18       		.uleb128 0x18
 1630 011f 9742     		.uleb128 0x2117
 1631 0121 19       		.uleb128 0x19
 1632 0122 01       		.uleb128 0x1
 1633 0123 13       		.uleb128 0x13
 1634 0124 00       		.byte	0
 1635 0125 00       		.byte	0
 1636 0126 14       		.uleb128 0x14
 1637 0127 2E       		.uleb128 0x2e
 1638 0128 01       		.byte	0x1
 1639 0129 3F       		.uleb128 0x3f
 1640 012a 19       		.uleb128 0x19
 1641 012b 03       		.uleb128 0x3
 1642 012c 0E       		.uleb128 0xe
 1643 012d 3A       		.uleb128 0x3a
 1644 012e 0B       		.uleb128 0xb
 1645 012f 3B       		.uleb128 0x3b
 1646 0130 0B       		.uleb128 0xb
 1647 0131 11       		.uleb128 0x11
 1648 0132 01       		.uleb128 0x1
 1649 0133 12       		.uleb128 0x12
 1650 0134 06       		.uleb128 0x6
 1651 0135 40       		.uleb128 0x40
 1652 0136 18       		.uleb128 0x18
 1653 0137 9642     		.uleb128 0x2116
 1654 0139 19       		.uleb128 0x19
 1655 013a 01       		.uleb128 0x1
 1656 013b 13       		.uleb128 0x13
 1657 013c 00       		.byte	0
 1658 013d 00       		.byte	0
 1659 013e 15       		.uleb128 0x15
 1660 013f 2E       		.uleb128 0x2e
 1661 0140 00       		.byte	0
 1662 0141 3F       		.uleb128 0x3f
 1663 0142 19       		.uleb128 0x19
 1664 0143 03       		.uleb128 0x3
 1665 0144 0E       		.uleb128 0xe
 1666 0145 3A       		.uleb128 0x3a
 1667 0146 0B       		.uleb128 0xb
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 36


 1668 0147 3B       		.uleb128 0x3b
 1669 0148 05       		.uleb128 0x5
 1670 0149 11       		.uleb128 0x11
 1671 014a 01       		.uleb128 0x1
 1672 014b 12       		.uleb128 0x12
 1673 014c 06       		.uleb128 0x6
 1674 014d 40       		.uleb128 0x40
 1675 014e 18       		.uleb128 0x18
 1676 014f 9642     		.uleb128 0x2116
 1677 0151 19       		.uleb128 0x19
 1678 0152 00       		.byte	0
 1679 0153 00       		.byte	0
 1680 0154 16       		.uleb128 0x16
 1681 0155 34       		.uleb128 0x34
 1682 0156 00       		.byte	0
 1683 0157 03       		.uleb128 0x3
 1684 0158 0E       		.uleb128 0xe
 1685 0159 3A       		.uleb128 0x3a
 1686 015a 0B       		.uleb128 0xb
 1687 015b 3B       		.uleb128 0x3b
 1688 015c 05       		.uleb128 0x5
 1689 015d 49       		.uleb128 0x49
 1690 015e 13       		.uleb128 0x13
 1691 015f 3F       		.uleb128 0x3f
 1692 0160 19       		.uleb128 0x19
 1693 0161 3C       		.uleb128 0x3c
 1694 0162 19       		.uleb128 0x19
 1695 0163 00       		.byte	0
 1696 0164 00       		.byte	0
 1697 0165 17       		.uleb128 0x17
 1698 0166 21       		.uleb128 0x21
 1699 0167 00       		.byte	0
 1700 0168 49       		.uleb128 0x49
 1701 0169 13       		.uleb128 0x13
 1702 016a 2F       		.uleb128 0x2f
 1703 016b 05       		.uleb128 0x5
 1704 016c 00       		.byte	0
 1705 016d 00       		.byte	0
 1706 016e 18       		.uleb128 0x18
 1707 016f 34       		.uleb128 0x34
 1708 0170 00       		.byte	0
 1709 0171 03       		.uleb128 0x3
 1710 0172 0E       		.uleb128 0xe
 1711 0173 3A       		.uleb128 0x3a
 1712 0174 0B       		.uleb128 0xb
 1713 0175 3B       		.uleb128 0x3b
 1714 0176 0B       		.uleb128 0xb
 1715 0177 49       		.uleb128 0x49
 1716 0178 13       		.uleb128 0x13
 1717 0179 3F       		.uleb128 0x3f
 1718 017a 19       		.uleb128 0x19
 1719 017b 02       		.uleb128 0x2
 1720 017c 18       		.uleb128 0x18
 1721 017d 00       		.byte	0
 1722 017e 00       		.byte	0
 1723 017f 00       		.byte	0
 1724              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 37


 1725 0000 5C000000 		.4byte	0x5c
 1726 0004 0200     		.2byte	0x2
 1727 0006 00000000 		.4byte	.Ldebug_info0
 1728 000a 04       		.byte	0x4
 1729 000b 00       		.byte	0
 1730 000c 0000     		.2byte	0
 1731 000e 0000     		.2byte	0
 1732 0010 00000000 		.4byte	.LFB63
 1733 0014 28000000 		.4byte	.LFE63-.LFB63
 1734 0018 00000000 		.4byte	.LFB64
 1735 001c 18000000 		.4byte	.LFE64-.LFB64
 1736 0020 00000000 		.4byte	.LFB65
 1737 0024 1C000000 		.4byte	.LFE65-.LFB65
 1738 0028 00000000 		.4byte	.LFB66
 1739 002c 74010000 		.4byte	.LFE66-.LFB66
 1740 0030 00000000 		.4byte	.LFB67
 1741 0034 48000000 		.4byte	.LFE67-.LFB67
 1742 0038 00000000 		.4byte	.LFB68
 1743 003c 38000000 		.4byte	.LFE68-.LFB68
 1744 0040 00000000 		.4byte	.LFB69
 1745 0044 C4010000 		.4byte	.LFE69-.LFB69
 1746 0048 00000000 		.4byte	.LFB70
 1747 004c A0000000 		.4byte	.LFE70-.LFB70
 1748 0050 00000000 		.4byte	.LFB71
 1749 0054 58000000 		.4byte	.LFE71-.LFB71
 1750 0058 00000000 		.4byte	0
 1751 005c 00000000 		.4byte	0
 1752              		.section	.debug_ranges,"",%progbits
 1753              	.Ldebug_ranges0:
 1754 0000 00000000 		.4byte	.LFB63
 1755 0004 28000000 		.4byte	.LFE63
 1756 0008 00000000 		.4byte	.LFB64
 1757 000c 18000000 		.4byte	.LFE64
 1758 0010 00000000 		.4byte	.LFB65
 1759 0014 1C000000 		.4byte	.LFE65
 1760 0018 00000000 		.4byte	.LFB66
 1761 001c 74010000 		.4byte	.LFE66
 1762 0020 00000000 		.4byte	.LFB67
 1763 0024 48000000 		.4byte	.LFE67
 1764 0028 00000000 		.4byte	.LFB68
 1765 002c 38000000 		.4byte	.LFE68
 1766 0030 00000000 		.4byte	.LFB69
 1767 0034 C4010000 		.4byte	.LFE69
 1768 0038 00000000 		.4byte	.LFB70
 1769 003c A0000000 		.4byte	.LFE70
 1770 0040 00000000 		.4byte	.LFB71
 1771 0044 58000000 		.4byte	.LFE71
 1772 0048 00000000 		.4byte	0
 1773 004c 00000000 		.4byte	0
 1774              		.section	.debug_line,"",%progbits
 1775              	.Ldebug_line0:
 1776 0000 CC020000 		.section	.debug_str,"MS",%progbits,1
 1776      02003D01 
 1776      00000201 
 1776      FB0E0D00 
 1776      01010101 
 1777              	.LASF20:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 38


 1778 0000 49646C65 		.ascii	"Idle_Collision_ISR\000"
 1778      5F436F6C 
 1778      6C697369 
 1778      6F6E5F49 
 1778      535200
 1779              	.LASF32:
 1780 0013 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 1780      6574776F 
 1780      726B5374 
 1780      6174654F 
 1780      6E4C4544 
 1781              	.LASF9:
 1782 0029 5F5F696E 		.ascii	"__int32_t\000"
 1782      7433325F 
 1782      7400
 1783              	.LASF34:
 1784 0033 64696666 		.ascii	"diffManEncodedData\000"
 1784      4D616E45 
 1784      6E636F64 
 1784      65644461 
 1784      746100
 1785              	.LASF42:
 1786 0046 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1786      4320342E 
 1786      392E3320 
 1786      32303135 
 1786      30333033 
 1787 0079 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1787      20726576 
 1787      6973696F 
 1787      6E203232 
 1787      31323230 
 1788 00ac 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1788      66756E63 
 1788      74696F6E 
 1788      2D736563 
 1788      74696F6E 
 1789              	.LASF41:
 1790 00d4 6E657477 		.ascii	"networkState\000"
 1790      6F726B53 
 1790      74617465 
 1790      00
 1791              	.LASF24:
 1792 00e1 73747269 		.ascii	"stringPosition\000"
 1792      6E67506F 
 1792      73697469 
 1792      6F6E00
 1793              	.LASF18:
 1794 00f0 69646C65 		.ascii	"idle\000"
 1794      00
 1795              	.LASF22:
 1796 00f5 54696D65 		.ascii	"TimerHandler\000"
 1796      7248616E 
 1796      646C6572 
 1796      00
 1797              	.LASF43:
 1798 0102 2E5C6D61 		.ascii	".\\main.c\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 39


 1798      696E2E63 
 1798      00
 1799              	.LASF12:
 1800 010b 666C6F61 		.ascii	"float\000"
 1800      7400
 1801              	.LASF46:
 1802 0111 7472616E 		.ascii	"transmitData\000"
 1802      736D6974 
 1802      44617461 
 1802      00
 1803              	.LASF36:
 1804 011e 63757272 		.ascii	"currentDataPos\000"
 1804      656E7444 
 1804      61746150 
 1804      6F7300
 1805              	.LASF44:
 1806 012d 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
 1806      79446F63 
 1806      735C446F 
 1806      63756D65 
 1806      6E74735C 
 1807 015b 30312E63 		.ascii	"01.cydsn\000"
 1807      7964736E 
 1807      00
 1808              	.LASF15:
 1809 0164 72656738 		.ascii	"reg8\000"
 1809      00
 1810              	.LASF5:
 1811 0169 6C6F6E67 		.ascii	"long unsigned int\000"
 1811      20756E73 
 1811      69676E65 
 1811      6420696E 
 1811      7400
 1812              	.LASF3:
 1813 017b 73686F72 		.ascii	"short unsigned int\000"
 1813      7420756E 
 1813      7369676E 
 1813      65642069 
 1813      6E7400
 1814              	.LASF23:
 1815 018e 6C696E65 		.ascii	"lineString\000"
 1815      53747269 
 1815      6E6700
 1816              	.LASF33:
 1817 0199 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1817      52784275 
 1817      66666572 
 1817      00
 1818              	.LASF45:
 1819 01a6 73746174 		.ascii	"state\000"
 1819      6500
 1820              	.LASF35:
 1821 01ac 68616C66 		.ascii	"halfBitIndex\000"
 1821      42697449 
 1821      6E646578 
 1821      00
 1822              	.LASF17:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 40


 1823 01b9 62757379 		.ascii	"busy\000"
 1823      00
 1824              	.LASF13:
 1825 01be 646F7562 		.ascii	"double\000"
 1825      6C6500
 1826              	.LASF25:
 1827 01c5 6D61696E 		.ascii	"main\000"
 1827      00
 1828              	.LASF28:
 1829 01ca 61736369 		.ascii	"asciiChar\000"
 1829      69436861 
 1829      7200
 1830              	.LASF1:
 1831 01d4 756E7369 		.ascii	"unsigned char\000"
 1831      676E6564 
 1831      20636861 
 1831      7200
 1832              	.LASF8:
 1833 01e2 756E7369 		.ascii	"unsigned int\000"
 1833      676E6564 
 1833      20696E74 
 1833      00
 1834              	.LASF7:
 1835 01ef 6C6F6E67 		.ascii	"long long unsigned int\000"
 1835      206C6F6E 
 1835      6720756E 
 1835      7369676E 
 1835      65642069 
 1836              	.LASF40:
 1837 0206 64617461 		.ascii	"dataTransmissionComplete\000"
 1837      5472616E 
 1837      736D6973 
 1837      73696F6E 
 1837      436F6D70 
 1838              	.LASF10:
 1839 021f 696E7433 		.ascii	"int32_t\000"
 1839      325F7400 
 1840              	.LASF16:
 1841 0227 73697A65 		.ascii	"sizetype\000"
 1841      74797065 
 1841      00
 1842              	.LASF19:
 1843 0230 636F6C6C 		.ascii	"collision\000"
 1843      6973696F 
 1843      6E00
 1844              	.LASF6:
 1845 023a 6C6F6E67 		.ascii	"long long int\000"
 1845      206C6F6E 
 1845      6720696E 
 1845      7400
 1846              	.LASF37:
 1847 0248 6C656E67 		.ascii	"lengthOfData\000"
 1847      74684F66 
 1847      44617461 
 1847      00
 1848              	.LASF14:
 1849 0255 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 41


 1849      00
 1850              	.LASF21:
 1851 025a 45646765 		.ascii	"Edge_detect_ISR\000"
 1851      5F646574 
 1851      6563745F 
 1851      49535200 
 1852              	.LASF31:
 1853 026a 696E6974 		.ascii	"initDiffManEncodedArray\000"
 1853      44696666 
 1853      4D616E45 
 1853      6E636F64 
 1853      65644172 
 1854              	.LASF2:
 1855 0282 73686F72 		.ascii	"short int\000"
 1855      7420696E 
 1855      7400
 1856              	.LASF11:
 1857 028c 75696E74 		.ascii	"uint8\000"
 1857      3800
 1858              	.LASF4:
 1859 0292 6C6F6E67 		.ascii	"long int\000"
 1859      20696E74 
 1859      00
 1860              	.LASF38:
 1861 029b 74696D65 		.ascii	"timerExpired\000"
 1861      72457870 
 1861      69726564 
 1861      00
 1862              	.LASF0:
 1863 02a8 7369676E 		.ascii	"signed char\000"
 1863      65642063 
 1863      68617200 
 1864              	.LASF29:
 1865 02b4 70726576 		.ascii	"previousHalfBit\000"
 1865      696F7573 
 1865      48616C66 
 1865      42697400 
 1866              	.LASF26:
 1867 02c4 73747269 		.ascii	"stringToDiffMan\000"
 1867      6E67546F 
 1867      44696666 
 1867      4D616E00 
 1868              	.LASF39:
 1869 02d4 5F426F6F 		.ascii	"_Bool\000"
 1869      6C00
 1870              	.LASF30:
 1871 02da 62696E61 		.ascii	"binaryValueOfChar\000"
 1871      72795661 
 1871      6C75654F 
 1871      66436861 
 1871      7200
 1872              	.LASF27:
 1873 02ec 61736369 		.ascii	"asciiToDiffMan\000"
 1873      69546F44 
 1873      6966664D 
 1873      616E00
 1874              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccRnJtlk.s 			page 42


