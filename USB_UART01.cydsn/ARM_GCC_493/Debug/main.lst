ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.comm	lengthOfData,4,4
  43              		.comm	messageLength,4,4
  44              		.comm	headerCRC,4,4
  45              		.global	TX_DESTINATION_ADDRESS
  46              		.align	2
  47              		.type	TX_DESTINATION_ADDRESS, %object
  48              		.size	TX_DESTINATION_ADDRESS, 4
  49              	TX_DESTINATION_ADDRESS:
  50 000c 00000000 		.space	4
  51              		.comm	timerExpired,1,1
  52              		.comm	dataTransmissionComplete,1,1
  53              		.comm	powerOnEdge,1,1
  54              		.global	headerValid
  55              		.type	headerValid, %object
  56              		.size	headerValid, 1
  57              	headerValid:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 2


  58 0010 00       		.space	1
  59              		.comm	networkState,1,1
  60              		.comm	crcState,1,1
  61              		.comm	receivedChar,1,1
  62 0011 000000   		.section	.text.Idle_Collision_ISR,"ax",%progbits
  63              		.align	2
  64              		.global	Idle_Collision_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	Idle_Collision_ISR, %function
  68              	Idle_Collision_ISR:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** #define INDEX_OF_MSB 6
   2:.\main.c      **** #define HIGH 1
   3:.\main.c      **** #define EIGHT_BITS 8
   4:.\main.c      **** #define START_BIT 2
   5:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   6:.\main.c      **** #define TX_SOURCE_ADDRESS 0
   7:.\main.c      **** #define RX_DESTINATION_ADDRESS 0//these 2 are supposed to be the same
   8:.\main.c      **** #define VERSION_NUMBER 1
   9:.\main.c      **** #define HEADER_POS 7
  10:.\main.c      **** 
  11:.\main.c      **** 
  12:.\main.c      **** #include <device.h>
  13:.\main.c      **** #include <stdbool.h>
  14:.\main.c      **** #include <stdlib.h> //For random number generator
  15:.\main.c      **** #include <time.h>
  16:.\main.c      **** #include "stdio.h"
  17:.\main.c      **** 
  18:.\main.c      **** 
  19:.\main.c      **** int getRandomNumber();
  20:.\main.c      **** void initDiffManEncodedArray();
  21:.\main.c      **** void stringToDiffMan(char*, uint8);
  22:.\main.c      **** void asciiToDiffMan(char);
  23:.\main.c      **** void transmitData();
  24:.\main.c      **** void setNetworkStateOnLEDs();
  25:.\main.c      **** void diffManToASCII();
  26:.\main.c      **** void storeChar();
  27:.\main.c      **** void printChar();
  28:.\main.c      **** bool headerCheck();
  29:.\main.c      **** 
  30:.\main.c      **** int diffManEncodedData[864];
  31:.\main.c      **** uint8 diffManReceivedData[108];
  32:.\main.c      **** char rxChar[108];
  33:.\main.c      **** int receivedDataIndex, receivedDataCount;
  34:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, lengthOfData, messageLength, h
  35:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge, headerValid = false;
  36:.\main.c      **** enum state {idle, busy, collision} networkState;
  37:.\main.c      **** enum crc {none, header, message, both} crcState;
  38:.\main.c      **** 
  39:.\main.c      **** char receivedChar;
  40:.\main.c      **** 
  41:.\main.c      **** CY_ISR(Idle_Collision_ISR){ 
  71              		.loc 1 41 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 3


  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  42:.\main.c      ****     networkState = idle; 
  81              		.loc 1 42 0
  82 0004 074B     		ldr	r3, .L4
  83 0006 0022     		movs	r2, #0
  84 0008 1A70     		strb	r2, [r3]
  43:.\main.c      ****     if(Receive_Read() == HIGH){
  85              		.loc 1 43 0
  86 000a FFF7FEFF 		bl	Receive_Read
  87 000e 0346     		mov	r3, r0
  88 0010 012B     		cmp	r3, #1
  89 0012 03D1     		bne	.L2
  44:.\main.c      ****         networkState = idle;  
  90              		.loc 1 44 0
  91 0014 034B     		ldr	r3, .L4
  92 0016 0022     		movs	r2, #0
  93 0018 1A70     		strb	r2, [r3]
  94 001a 02E0     		b	.L1
  95              	.L2:
  45:.\main.c      ****     }
  46:.\main.c      ****     else{
  47:.\main.c      ****         networkState = collision;
  96              		.loc 1 47 0
  97 001c 014B     		ldr	r3, .L4
  98 001e 0222     		movs	r2, #2
  99 0020 1A70     		strb	r2, [r3]
 100              	.L1:
  48:.\main.c      ****     }
  49:.\main.c      **** }
 101              		.loc 1 49 0
 102 0022 80BD     		pop	{r7, pc}
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0024 00000000 		.word	networkState
 107              		.cfi_endproc
 108              	.LFE63:
 109              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 110              		.section	.text.Edge_detect_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	Edge_detect_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	Edge_detect_ISR, %function
 116              	Edge_detect_ISR:
 117              	.LFB64:
  50:.\main.c      **** 
  51:.\main.c      **** CY_ISR(Edge_detect_ISR){
 118              		.loc 1 51 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 4


 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 98B5     		push	{r3, r4, r7, lr}
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  52:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  53:.\main.c      ****     Idle_Collision_Timer_Start();
 130              		.loc 1 53 0
 131 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  54:.\main.c      **** 	
  55:.\main.c      ****     //Ignore power on edge 
  56:.\main.c      ****     if(!powerOnEdge){
 132              		.loc 1 56 0
 133 0008 0F4B     		ldr	r3, .L9
 134 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000c 83F00103 		eor	r3, r3, #1
 136 0010 DBB2     		uxtb	r3, r3
 137 0012 002B     		cmp	r3, #0
 138 0014 0FD0     		beq	.L7
  57:.\main.c      ****         Receive_Timer_Start(); 
 139              		.loc 1 57 0
 140 0016 FFF7FEFF 		bl	Receive_Timer_Start
  58:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 141              		.loc 1 58 0
 142 001a 0C4B     		ldr	r3, .L9+4
 143 001c 1C68     		ldr	r4, [r3]
 144 001e FFF7FEFF 		bl	Receive_Read
 145 0022 0346     		mov	r3, r0
 146 0024 1A46     		mov	r2, r3
 147 0026 0A4B     		ldr	r3, .L9+8
 148 0028 1A55     		strb	r2, [r3, r4]
  59:.\main.c      ****         receivedDataCount++;    
 149              		.loc 1 59 0
 150 002a 084B     		ldr	r3, .L9+4
 151 002c 1B68     		ldr	r3, [r3]
 152 002e 0133     		adds	r3, r3, #1
 153 0030 064A     		ldr	r2, .L9+4
 154 0032 1360     		str	r3, [r2]
 155 0034 02E0     		b	.L8
 156              	.L7:
  60:.\main.c      ****     }
  61:.\main.c      ****     else{
  62:.\main.c      ****         powerOnEdge = false;
 157              		.loc 1 62 0
 158 0036 044B     		ldr	r3, .L9
 159 0038 0022     		movs	r2, #0
 160 003a 1A70     		strb	r2, [r3]
 161              	.L8:
  63:.\main.c      ****     }
  64:.\main.c      ****     networkState = busy;
 162              		.loc 1 64 0
 163 003c 054B     		ldr	r3, .L9+12
 164 003e 0122     		movs	r2, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 5


 165 0040 1A70     		strb	r2, [r3]
  65:.\main.c      ****     Receive_ClearInterrupt();
 166              		.loc 1 65 0
 167 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  66:.\main.c      **** }
 168              		.loc 1 66 0
 169 0046 98BD     		pop	{r3, r4, r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 0048 00000000 		.word	powerOnEdge
 174 004c 00000000 		.word	receivedDataCount
 175 0050 00000000 		.word	diffManReceivedData
 176 0054 00000000 		.word	networkState
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 180              		.section	.text.TimerHandler,"ax",%progbits
 181              		.align	2
 182              		.global	TimerHandler
 183              		.thumb
 184              		.thumb_func
 185              		.type	TimerHandler, %function
 186              	TimerHandler:
 187              	.LFB65:
  67:.\main.c      **** 
  68:.\main.c      **** CY_ISR(TimerHandler){
 188              		.loc 1 68 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
  69:.\main.c      ****     Timer_Stop();
 198              		.loc 1 69 0
 199 0004 FFF7FEFF 		bl	Timer_Stop
  70:.\main.c      ****     timerExpired = true;
 200              		.loc 1 70 0
 201 0008 024B     		ldr	r3, .L12
 202 000a 0122     		movs	r2, #1
 203 000c 1A70     		strb	r2, [r3]
  71:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 204              		.loc 1 71 0
 205 000e 024B     		ldr	r3, .L12+4
 206 0010 1B78     		ldrb	r3, [r3]
  72:.\main.c      **** }
 207              		.loc 1 72 0
 208 0012 80BD     		pop	{r7, pc}
 209              	.L13:
 210              		.align	2
 211              	.L12:
 212 0014 00000000 		.word	timerExpired
 213 0018 6B640040 		.word	1073767531
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 6


 214              		.cfi_endproc
 215              	.LFE65:
 216              		.size	TimerHandler, .-TimerHandler
 217              		.section	.text.ReceiveTimerISR,"ax",%progbits
 218              		.align	2
 219              		.global	ReceiveTimerISR
 220              		.thumb
 221              		.thumb_func
 222              		.type	ReceiveTimerISR, %function
 223              	ReceiveTimerISR:
 224              	.LFB66:
  73:.\main.c      **** 
  74:.\main.c      **** //TODO changing from reading to just repeting last data
  75:.\main.c      **** CY_ISR(ReceiveTimerISR){
 225              		.loc 1 75 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
  76:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 235              		.loc 1 76 0
 236 0004 094B     		ldr	r3, .L15
 237 0006 1B68     		ldr	r3, [r3]
 238 0008 084A     		ldr	r2, .L15
 239 000a 1268     		ldr	r2, [r2]
 240 000c 013A     		subs	r2, r2, #1
 241 000e 0849     		ldr	r1, .L15+4
 242 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 243 0012 074A     		ldr	r2, .L15+4
 244 0014 D154     		strb	r1, [r2, r3]
  77:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  78:.\main.c      ****     receivedDataCount++;
 245              		.loc 1 78 0
 246 0016 054B     		ldr	r3, .L15
 247 0018 1B68     		ldr	r3, [r3]
 248 001a 0133     		adds	r3, r3, #1
 249 001c 034A     		ldr	r2, .L15
 250 001e 1360     		str	r3, [r2]
  79:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 251              		.loc 1 79 0
 252 0020 044B     		ldr	r3, .L15+8
 253 0022 1B78     		ldrb	r3, [r3]
  80:.\main.c      **** }
 254              		.loc 1 80 0
 255 0024 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0026 5DF8047B 		ldr	r7, [sp], #4
 259              		.cfi_restore 7
 260              		.cfi_def_cfa_offset 0
 261 002a 7047     		bx	lr
 262              	.L16:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 7


 263              		.align	2
 264              	.L15:
 265 002c 00000000 		.word	receivedDataCount
 266 0030 00000000 		.word	diffManReceivedData
 267 0034 6F640040 		.word	1073767535
 268              		.cfi_endproc
 269              	.LFE66:
 270              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 271              		.section	.text.main,"ax",%progbits
 272              		.align	2
 273              		.global	main
 274              		.thumb
 275              		.thumb_func
 276              		.type	main, %function
 277              	main:
 278              	.LFB67:
  81:.\main.c      **** 
  82:.\main.c      **** int main()
  83:.\main.c      **** {
 279              		.loc 1 83 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 120
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 9EB0     		sub	sp, sp, #120
 288              		.cfi_def_cfa_offset 128
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  84:.\main.c      ****     char rx;
  85:.\main.c      ****     char lineString[108];
  86:.\main.c      ****     uint8 stringPosition = HEADER_POS;//after header
 291              		.loc 1 86 0
 292 0006 0723     		movs	r3, #7
 293 0008 87F87730 		strb	r3, [r7, #119]
  87:.\main.c      ****     timerExpired = false;
 294              		.loc 1 87 0
 295 000c 8B4B     		ldr	r3, .L39
 296 000e 0022     		movs	r2, #0
 297 0010 1A70     		strb	r2, [r3]
  88:.\main.c      ****     dataTransmissionComplete = false;
 298              		.loc 1 88 0
 299 0012 8B4B     		ldr	r3, .L39+4
 300 0014 0022     		movs	r2, #0
 301 0016 1A70     		strb	r2, [r3]
  89:.\main.c      **** 	
  90:.\main.c      **** 	messageLength = 0;
 302              		.loc 1 90 0
 303 0018 8A4B     		ldr	r3, .L39+8
 304 001a 0022     		movs	r2, #0
 305 001c 1A60     		str	r2, [r3]
  91:.\main.c      **** 	
  92:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge. 
 306              		.loc 1 92 0
 307 001e 8A4B     		ldr	r3, .L39+12
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 8


 308 0020 0122     		movs	r2, #1
 309 0022 1A70     		strb	r2, [r3]
  93:.\main.c      ****     //We want to ignore this edge on the rising edge.
  94:.\main.c      **** 	
  95:.\main.c      ****     /*
  96:.\main.c      ****     Get value from system clock and
  97:.\main.c      ****     place in seconds variable.
  98:.\main.c      ****     */
  99:.\main.c      ****     time_t seconds; 
 100:.\main.c      ****     time(&seconds);
 310              		.loc 1 100 0
 311 0024 3B1D     		adds	r3, r7, #4
 312 0026 1846     		mov	r0, r3
 313 0028 FFF7FEFF 		bl	time
 101:.\main.c      ****     /*
 102:.\main.c      ****     Convert seconds to a unsigned
 103:.\main.c      ****     integer for seed for random number generator
 104:.\main.c      ****     */
 105:.\main.c      ****     srand((unsigned int) seconds);
 314              		.loc 1 105 0
 315 002c 7B68     		ldr	r3, [r7, #4]
 316 002e 1846     		mov	r0, r3
 317 0030 FFF7FEFF 		bl	srand
 106:.\main.c      ****             
 107:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 318              		.loc 1 107 0
 319 0034 0120     		movs	r0, #1
 320 0036 FFF7FEFF 		bl	TX_pin_Write
 108:.\main.c      ****     
 109:.\main.c      ****     /* Enable Global Interrupts */
 110:.\main.c      ****     CyGlobalIntEnable;  
 321              		.loc 1 110 0
 322              	@ 110 ".\main.c" 1
 323 003a 62B6     		CPSIE   i
 324              	@ 0 "" 2
 111:.\main.c      ****     
 112:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 325              		.loc 1 112 0
 326              		.thumb
 327 003c FFF7FEFF 		bl	Receive_ClearInterrupt
 113:.\main.c      ****     
 114:.\main.c      ****     LCD_Start();
 328              		.loc 1 114 0
 329 0040 FFF7FEFF 		bl	LCD_Start
 115:.\main.c      ****     
 116:.\main.c      ****     //enable collision detection
 117:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 330              		.loc 1 117 0
 331 0044 8148     		ldr	r0, .L39+16
 332 0046 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 118:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 333              		.loc 1 118 0
 334 004a 8148     		ldr	r0, .L39+20
 335 004c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 119:.\main.c      ****     Idle_Collision_Timer_Start();
 336              		.loc 1 119 0
 337 0050 FFF7FEFF 		bl	Idle_Collision_Timer_Start
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 9


 120:.\main.c      **** 
 121:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 122:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 338              		.loc 1 122 0
 339 0054 0020     		movs	r0, #0
 340 0056 0021     		movs	r1, #0
 341 0058 FFF7FEFF 		bl	USBUART_1_Start
 123:.\main.c      ****     
 124:.\main.c      ****     //start transmission timer
 125:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 342              		.loc 1 125 0
 343 005c 7D48     		ldr	r0, .L39+24
 344 005e FFF7FEFF 		bl	TimerISR_StartEx
 126:.\main.c      **** 
 127:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR); 
 345              		.loc 1 127 0
 346 0062 7D48     		ldr	r0, .L39+28
 347 0064 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 128:.\main.c      ****     
 129:.\main.c      ****     receivedDataCount = 0;
 348              		.loc 1 129 0
 349 0068 7C4B     		ldr	r3, .L39+32
 350 006a 0022     		movs	r2, #0
 351 006c 1A60     		str	r2, [r3]
 130:.\main.c      ****     receivedDataIndex = 0; 
 352              		.loc 1 130 0
 353 006e 7C4B     		ldr	r3, .L39+36
 354 0070 0022     		movs	r2, #0
 355 0072 1A60     		str	r2, [r3]
 131:.\main.c      ****    
 132:.\main.c      ****     lineString[0] = 0x71;
 356              		.loc 1 132 0
 357 0074 7123     		movs	r3, #113
 358 0076 3B72     		strb	r3, [r7, #8]
 133:.\main.c      **** 	lineString[1] = VERSION_NUMBER;
 359              		.loc 1 133 0
 360 0078 0123     		movs	r3, #1
 361 007a 7B72     		strb	r3, [r7, #9]
 134:.\main.c      **** 	lineString[2] = TX_SOURCE_ADDRESS;
 362              		.loc 1 134 0
 363 007c 0023     		movs	r3, #0
 364 007e BB72     		strb	r3, [r7, #10]
 135:.\main.c      **** 	lineString[3] = TX_DESTINATION_ADDRESS;
 365              		.loc 1 135 0
 366 0080 784B     		ldr	r3, .L39+40
 367 0082 1B68     		ldr	r3, [r3]
 368 0084 DBB2     		uxtb	r3, r3
 369 0086 FB72     		strb	r3, [r7, #11]
 136:.\main.c      **** 	lineString[5] = 0;
 370              		.loc 1 136 0
 371 0088 0023     		movs	r3, #0
 372 008a 7B73     		strb	r3, [r7, #13]
 137:.\main.c      **** 	lineString[6] = 0x75;
 373              		.loc 1 137 0
 374 008c 7523     		movs	r3, #117
 375 008e BB73     		strb	r3, [r7, #14]
 376              	.L36:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 10


 138:.\main.c      **** 	
 139:.\main.c      ****     /* Main Loop: */
 140:.\main.c      ****     for(;;)
 141:.\main.c      ****     {
 142:.\main.c      ****         setNetworkStateOnLEDs();
 377              		.loc 1 142 0
 378 0090 FFF7FEFF 		bl	setNetworkStateOnLEDs
 143:.\main.c      ****         
 144:.\main.c      ****         /*Receive*/
 145:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 146:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 379              		.loc 1 146 0
 380 0094 744B     		ldr	r3, .L39+44
 381 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 382 0098 002B     		cmp	r3, #0
 383 009a 3ED1     		bne	.L18
 384              		.loc 1 146 0 is_stmt 0 discriminator 1
 385 009c 6F4B     		ldr	r3, .L39+32
 386 009e 1B68     		ldr	r3, [r3]
 387 00a0 212B     		cmp	r3, #33
 388 00a2 3ADD     		ble	.L18
 147:.\main.c      ****             
 148:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 149:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 389              		.loc 1 149 0 is_stmt 1
 390 00a4 714B     		ldr	r3, .L39+48
 391 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 392 00a8 002B     		cmp	r3, #0
 393 00aa 2DD1     		bne	.L19
 394              		.loc 1 149 0 is_stmt 0 discriminator 1
 395 00ac 6F4B     		ldr	r3, .L39+48
 396 00ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 397 00b0 012B     		cmp	r3, #1
 398 00b2 29D1     		bne	.L19
 150:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 399              		.loc 1 150 0 is_stmt 1
 400 00b4 6A4B     		ldr	r3, .L39+36
 401 00b6 0222     		movs	r2, #2
 402 00b8 1A60     		str	r2, [r3]
 151:.\main.c      ****                 while(receivedDataIndex < receivedDataCount-1){     //Note: receivedDataCount-1 b/c
 403              		.loc 1 151 0
 404 00ba 06E0     		b	.L20
 405              	.L21:
 152:.\main.c      ****                     //wait for 8 bits TODO bad comment
 153:.\main.c      ****                     //char receivedChar;     TODO move to global variable
 154:.\main.c      ****                     //char *charPtr = &receivedChar;
 155:.\main.c      ****                     
 156:.\main.c      ****                     diffManToASCII();
 406              		.loc 1 156 0
 407 00bc FFF7FEFF 		bl	diffManToASCII
 157:.\main.c      **** 					//program flow: check for header inside diffManToASCII
 158:.\main.c      **** 					//set flag if header start 0x71 is detected (decimal 113 or ASCII 'q')
 159:.\main.c      **** 					//after diffManToASCII completes, check for header flag
 160:.\main.c      **** 					//if valid, enter "header check" method
 161:.\main.c      **** 					//check first 8 bytes of ascii characters according to spec
 162:.\main.c      **** 					//if valid, set valid flag
 163:.\main.c      **** 					//otherwise discard contents
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 11


 164:.\main.c      **** 					storeChar();
 408              		.loc 1 164 0
 409 00c0 FFF7FEFF 		bl	storeChar
 165:.\main.c      ****                     receivedChar = 0;       //Reset the char
 410              		.loc 1 165 0
 411 00c4 6A4B     		ldr	r3, .L39+52
 412 00c6 0022     		movs	r2, #0
 413 00c8 1A70     		strb	r2, [r3]
 414              	.L20:
 151:.\main.c      ****                     //wait for 8 bits TODO bad comment
 415              		.loc 1 151 0
 416 00ca 644B     		ldr	r3, .L39+32
 417 00cc 1B68     		ldr	r3, [r3]
 418 00ce 5A1E     		subs	r2, r3, #1
 419 00d0 634B     		ldr	r3, .L39+36
 420 00d2 1B68     		ldr	r3, [r3]
 421 00d4 9A42     		cmp	r2, r3
 422 00d6 F1DC     		bgt	.L21
 166:.\main.c      ****                 }
 167:.\main.c      **** 				if(headerCheck()){
 423              		.loc 1 167 0
 424 00d8 FFF7FEFF 		bl	headerCheck
 425 00dc 0346     		mov	r3, r0
 426 00de 002B     		cmp	r3, #0
 427 00e0 01D0     		beq	.L22
 168:.\main.c      ****                     printChar();
 428              		.loc 1 168 0
 429 00e2 FFF7FEFF 		bl	printChar
 430              	.L22:
 169:.\main.c      ****                 }
 170:.\main.c      ****                //TODO remove
 171:.\main.c      ****                 /*LCD_Position(0,0);
 172:.\main.c      ****                 int i;
 173:.\main.c      ****                 for(i=0; i<16;i++){
 174:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 175:.\main.c      ****                 }
 176:.\main.c      ****                 LCD_Position(1,0);
 177:.\main.c      ****                 
 178:.\main.c      ****                 for(i=16; i<32;i++){
 179:.\main.c      ****                     LCD_PrintNumber(diffManReceivedData[i]);
 180:.\main.c      ****                 }*/
 181:.\main.c      ****                 //end remove
 182:.\main.c      ****                 
 183:.\main.c      ****                 CyDelay(1000);//TODO remove for testing only    
 431              		.loc 1 183 0
 432 00e6 4FF47A70 		mov	r0, #1000
 433 00ea FFF7FEFF 		bl	CyDelay
 184:.\main.c      ****                 LCD_ClearDisplay();//TODO remove
 434              		.loc 1 184 0
 435 00ee 0120     		movs	r0, #1
 436 00f0 FFF7FEFF 		bl	LCD_WriteControl
 185:.\main.c      ****                 receivedDataCount = 0;  //Reset count
 437              		.loc 1 185 0
 438 00f4 594B     		ldr	r3, .L39+32
 439 00f6 0022     		movs	r2, #0
 440 00f8 1A60     		str	r2, [r3]
 186:.\main.c      ****                 receivedDataIndex = 0;  //Reset index
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 12


 441              		.loc 1 186 0
 442 00fa 594B     		ldr	r3, .L39+36
 443 00fc 0022     		movs	r2, #0
 444 00fe 1A60     		str	r2, [r3]
 187:.\main.c      ****                 currentRXCharPosition = 0;
 445              		.loc 1 187 0
 446 0100 5C4B     		ldr	r3, .L39+56
 447 0102 0022     		movs	r2, #0
 448 0104 1A60     		str	r2, [r3]
 449 0106 08E0     		b	.L18
 450              	.L19:
 188:.\main.c      ****             }
 189:.\main.c      ****             else{
 190:.\main.c      ****                 //Receive data did not start with the start bit
 191:.\main.c      ****                 receivedDataCount = 0;
 451              		.loc 1 191 0
 452 0108 544B     		ldr	r3, .L39+32
 453 010a 0022     		movs	r2, #0
 454 010c 1A60     		str	r2, [r3]
 192:.\main.c      ****                 receivedDataIndex = 0; 
 455              		.loc 1 192 0
 456 010e 544B     		ldr	r3, .L39+36
 457 0110 0022     		movs	r2, #0
 458 0112 1A60     		str	r2, [r3]
 193:.\main.c      ****                 currentRXCharPosition = 0;
 459              		.loc 1 193 0
 460 0114 574B     		ldr	r3, .L39+56
 461 0116 0022     		movs	r2, #0
 462 0118 1A60     		str	r2, [r3]
 463              	.L18:
 194:.\main.c      ****             }
 195:.\main.c      ****         }
 196:.\main.c      ****         else
 197:.\main.c      ****         {
 198:.\main.c      ****             //TODO prob remove this else
 199:.\main.c      ****         }
 200:.\main.c      ****         /*End Receive*/
 201:.\main.c      ****         
 202:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 464              		.loc 1 202 0
 465 011a FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 466 011e 0346     		mov	r3, r0
 467 0120 002B     		cmp	r3, #0
 468 0122 06D0     		beq	.L24
 203:.\main.c      ****         {
 204:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 469              		.loc 1 204 0
 470 0124 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 471 0128 0346     		mov	r3, r0
 472 012a 002B     		cmp	r3, #0
 473 012c 01D0     		beq	.L24
 205:.\main.c      ****             {
 206:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 207:.\main.c      ****                 USBUART_1_CDC_Init();
 474              		.loc 1 207 0
 475 012e FFF7FEFF 		bl	USBUART_1_CDC_Init
 476              	.L24:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 13


 208:.\main.c      ****             }
 209:.\main.c      ****         }         
 210:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 477              		.loc 1 210 0
 478 0132 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 479 0136 0346     		mov	r3, r0
 480 0138 002B     		cmp	r3, #0
 481 013a 7ED0     		beq	.L25
 211:.\main.c      ****         {
 212:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 482              		.loc 1 212 0
 483 013c FFF7FEFF 		bl	USBUART_1_DataIsReady
 484 0140 0346     		mov	r3, r0
 485 0142 002B     		cmp	r3, #0
 486 0144 79D0     		beq	.L25
 213:.\main.c      ****             {   
 214:.\main.c      ****                 rx = USBUART_1_GetChar();
 487              		.loc 1 214 0
 488 0146 FFF7FEFF 		bl	USBUART_1_GetChar
 489 014a 0346     		mov	r3, r0
 490 014c 87F87630 		strb	r3, [r7, #118]
 215:.\main.c      ****                 switch(rx){
 491              		.loc 1 215 0
 492 0150 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 493 0154 0D2B     		cmp	r3, #13
 494 0156 25D0     		beq	.L27
 495 0158 1B2B     		cmp	r3, #27
 496 015a 6DD0     		beq	.L38
 497 015c 082B     		cmp	r3, #8
 498 015e 51D1     		bne	.L37
 216:.\main.c      ****                     case 8://backspace
 217:.\main.c      ****                         if(stringPosition>0){
 499              		.loc 1 217 0
 500 0160 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 501 0164 002B     		cmp	r3, #0
 502 0166 1CD0     		beq	.L30
 218:.\main.c      ****                             stringPosition--;
 503              		.loc 1 218 0
 504 0168 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 505 016c 013B     		subs	r3, r3, #1
 506 016e 87F87730 		strb	r3, [r7, #119]
 219:.\main.c      ****                             lineString[stringPosition] = '\0';
 507              		.loc 1 219 0
 508 0172 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 509 0176 07F17802 		add	r2, r7, #120
 510 017a 1344     		add	r3, r3, r2
 511 017c 0022     		movs	r2, #0
 512 017e 03F8702C 		strb	r2, [r3, #-112]
 220:.\main.c      ****                             //backspace space backspace
 221:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u); 
 513              		.loc 1 221 0
 514 0182 00BF     		nop
 515              	.L31:
 516              		.loc 1 221 0 is_stmt 0 discriminator 1
 517 0184 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 518 0188 0346     		mov	r3, r0
 519 018a 002B     		cmp	r3, #0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 14


 520 018c FAD0     		beq	.L31
 222:.\main.c      ****                             USBUART_1_PutChar(8);
 521              		.loc 1 222 0 is_stmt 1
 522 018e 0820     		movs	r0, #8
 523 0190 FFF7FEFF 		bl	USBUART_1_PutChar
 223:.\main.c      ****                             USBUART_1_PutChar(32);
 524              		.loc 1 223 0
 525 0194 2020     		movs	r0, #32
 526 0196 FFF7FEFF 		bl	USBUART_1_PutChar
 224:.\main.c      ****                             USBUART_1_PutChar(8);
 527              		.loc 1 224 0
 528 019a 0820     		movs	r0, #8
 529 019c FFF7FEFF 		bl	USBUART_1_PutChar
 225:.\main.c      ****                         }
 226:.\main.c      ****                         break;
 530              		.loc 1 226 0
 531 01a0 4BE0     		b	.L25
 532              	.L30:
 533 01a2 4AE0     		b	.L25
 534              	.L27:
 227:.\main.c      ****                     case 13://enter (carriage return)
 228:.\main.c      ****                         initDiffManEncodedArray();
 535              		.loc 1 228 0
 536 01a4 FFF7FEFF 		bl	initDiffManEncodedArray
 229:.\main.c      **** 						lineString[4] = stringPosition - 6;
 537              		.loc 1 229 0
 538 01a8 97F87730 		ldrb	r3, [r7, #119]
 539 01ac 063B     		subs	r3, r3, #6
 540 01ae DBB2     		uxtb	r3, r3
 541 01b0 3B73     		strb	r3, [r7, #12]
 230:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 542              		.loc 1 230 0
 543 01b2 07F10802 		add	r2, r7, #8
 544 01b6 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 545 01ba 1046     		mov	r0, r2
 546 01bc 1946     		mov	r1, r3
 547 01be FFF7FEFF 		bl	stringToDiffMan
 231:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 548              		.loc 1 231 0
 549 01c2 00BF     		nop
 550              	.L32:
 551              		.loc 1 231 0 is_stmt 0 discriminator 1
 552 01c4 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 553 01c8 0346     		mov	r3, r0
 554 01ca 002B     		cmp	r3, #0
 555 01cc FAD0     		beq	.L32
 232:.\main.c      ****                         USBUART_1_PutCRLF();
 556              		.loc 1 232 0 is_stmt 1
 557 01ce FFF7FEFF 		bl	USBUART_1_PutCRLF
 233:.\main.c      ****                         
 234:.\main.c      ****                         //keep looping until data is transmitted
 235:.\main.c      **** 						
 236:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
 558              		.loc 1 236 0
 559 01d2 03E0     		b	.L33
 560              	.L34:
 237:.\main.c      **** 							
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 15


 238:.\main.c      ****                             transmitData();
 561              		.loc 1 238 0
 562 01d4 FFF7FEFF 		bl	transmitData
 239:.\main.c      ****                             setNetworkStateOnLEDs();
 563              		.loc 1 239 0
 564 01d8 FFF7FEFF 		bl	setNetworkStateOnLEDs
 565              	.L33:
 236:.\main.c      **** 							
 566              		.loc 1 236 0
 567 01dc 184B     		ldr	r3, .L39+4
 568 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 01e0 83F00103 		eor	r3, r3, #1
 570 01e4 DBB2     		uxtb	r3, r3
 571 01e6 002B     		cmp	r3, #0
 572 01e8 F4D1     		bne	.L34
 240:.\main.c      ****                         }
 241:.\main.c      ****                         dataTransmissionComplete = false;
 573              		.loc 1 241 0
 574 01ea 154B     		ldr	r3, .L39+4
 575 01ec 0022     		movs	r2, #0
 576 01ee 1A70     		strb	r2, [r3]
 242:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 577              		.loc 1 242 0
 578 01f0 0120     		movs	r0, #1
 579 01f2 FFF7FEFF 		bl	TX_pin_Write
 243:.\main.c      ****                         //reset index
 244:.\main.c      ****                         halfBitIndex = 0;
 580              		.loc 1 244 0
 581 01f6 204B     		ldr	r3, .L39+60
 582 01f8 0022     		movs	r2, #0
 583 01fa 1A60     		str	r2, [r3]
 245:.\main.c      ****                         stringPosition = HEADER_POS; 
 584              		.loc 1 245 0
 585 01fc 0723     		movs	r3, #7
 586 01fe 87F87730 		strb	r3, [r7, #119]
 246:.\main.c      ****                         break;
 587              		.loc 1 246 0
 588 0202 1AE0     		b	.L25
 589              	.L37:
 247:.\main.c      ****                     case 27://escape
 248:.\main.c      ****                         break;
 249:.\main.c      ****                     default://everything else
 250:.\main.c      ****                         lineString[stringPosition] = rx;
 590              		.loc 1 250 0
 591 0204 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 592 0208 07F17802 		add	r2, r7, #120
 593 020c 1344     		add	r3, r3, r2
 594 020e 97F87620 		ldrb	r2, [r7, #118]
 595 0212 03F8702C 		strb	r2, [r3, #-112]
 251:.\main.c      ****                         stringPosition++;
 596              		.loc 1 251 0
 597 0216 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 598 021a 0133     		adds	r3, r3, #1
 599 021c 87F87730 		strb	r3, [r7, #119]
 252:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u); 
 600              		.loc 1 252 0
 601 0220 00BF     		nop
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 16


 602              	.L35:
 603              		.loc 1 252 0 is_stmt 0 discriminator 1
 604 0222 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 605 0226 0346     		mov	r3, r0
 606 0228 002B     		cmp	r3, #0
 607 022a FAD0     		beq	.L35
 253:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 608              		.loc 1 253 0 is_stmt 1
 609 022c 97F87630 		ldrb	r3, [r7, #118]	@ zero_extendqisi2
 610 0230 1846     		mov	r0, r3
 611 0232 FFF7FEFF 		bl	USBUART_1_PutChar
 254:.\main.c      ****                         break;
 612              		.loc 1 254 0
 613 0236 00E0     		b	.L25
 614              	.L38:
 248:.\main.c      ****                     default://everything else
 615              		.loc 1 248 0
 616 0238 00BF     		nop
 617              	.L25:
 255:.\main.c      ****                 }
 256:.\main.c      ****             }
 257:.\main.c      ****         }
 258:.\main.c      ****     }   
 618              		.loc 1 258 0 discriminator 1
 619 023a 29E7     		b	.L36
 620              	.L40:
 621              		.align	2
 622              	.L39:
 623 023c 00000000 		.word	timerExpired
 624 0240 00000000 		.word	dataTransmissionComplete
 625 0244 00000000 		.word	messageLength
 626 0248 00000000 		.word	powerOnEdge
 627 024c 00000000 		.word	Idle_Collision_ISR
 628 0250 00000000 		.word	Edge_detect_ISR
 629 0254 00000000 		.word	TimerHandler
 630 0258 00000000 		.word	ReceiveTimerISR
 631 025c 00000000 		.word	receivedDataCount
 632 0260 00000000 		.word	receivedDataIndex
 633 0264 00000000 		.word	TX_DESTINATION_ADDRESS
 634 0268 00000000 		.word	networkState
 635 026c 00000000 		.word	diffManReceivedData
 636 0270 00000000 		.word	receivedChar
 637 0274 00000000 		.word	currentRXCharPosition
 638 0278 00000000 		.word	halfBitIndex
 639              		.cfi_endproc
 640              	.LFE67:
 641              		.size	main, .-main
 642              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 643              		.align	2
 644              		.global	initDiffManEncodedArray
 645              		.thumb
 646              		.thumb_func
 647              		.type	initDiffManEncodedArray, %function
 648              	initDiffManEncodedArray:
 649              	.LFB68:
 259:.\main.c      **** }
 260:.\main.c      **** 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 17


 261:.\main.c      **** /*
 262:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the 
 263:.\main.c      **** half bits 01. 
 264:.\main.c      **** Only call when starting to transfer a new string
 265:.\main.c      **** */
 266:.\main.c      **** void initDiffManEncodedArray(){
 650              		.loc 1 266 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654              		@ link register save eliminated.
 655 0000 80B4     		push	{r7}
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 7, -4
 658 0002 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 267:.\main.c      ****     halfBitIndex = 0;
 660              		.loc 1 267 0
 661 0004 0E4B     		ldr	r3, .L42
 662 0006 0022     		movs	r2, #0
 663 0008 1A60     		str	r2, [r3]
 268:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 664              		.loc 1 268 0
 665 000a 0D4B     		ldr	r3, .L42
 666 000c 1B68     		ldr	r3, [r3]
 667 000e 0D4A     		ldr	r2, .L42+4
 668 0010 0021     		movs	r1, #0
 669 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 269:.\main.c      ****     halfBitIndex++;
 670              		.loc 1 269 0
 671 0016 0A4B     		ldr	r3, .L42
 672 0018 1B68     		ldr	r3, [r3]
 673 001a 0133     		adds	r3, r3, #1
 674 001c 084A     		ldr	r2, .L42
 675 001e 1360     		str	r3, [r2]
 270:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 676              		.loc 1 270 0
 677 0020 074B     		ldr	r3, .L42
 678 0022 1B68     		ldr	r3, [r3]
 679 0024 074A     		ldr	r2, .L42+4
 680 0026 0121     		movs	r1, #1
 681 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 271:.\main.c      ****     halfBitIndex++;
 682              		.loc 1 271 0
 683 002c 044B     		ldr	r3, .L42
 684 002e 1B68     		ldr	r3, [r3]
 685 0030 0133     		adds	r3, r3, #1
 686 0032 034A     		ldr	r2, .L42
 687 0034 1360     		str	r3, [r2]
 272:.\main.c      **** }
 688              		.loc 1 272 0
 689 0036 BD46     		mov	sp, r7
 690              		.cfi_def_cfa_register 13
 691              		@ sp needed
 692 0038 5DF8047B 		ldr	r7, [sp], #4
 693              		.cfi_restore 7
 694              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 18


 695 003c 7047     		bx	lr
 696              	.L43:
 697 003e 00BF     		.align	2
 698              	.L42:
 699 0040 00000000 		.word	halfBitIndex
 700 0044 00000000 		.word	diffManEncodedData
 701              		.cfi_endproc
 702              	.LFE68:
 703              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 704              		.section	.text.stringToDiffMan,"ax",%progbits
 705              		.align	2
 706              		.global	stringToDiffMan
 707              		.thumb
 708              		.thumb_func
 709              		.type	stringToDiffMan, %function
 710              	stringToDiffMan:
 711              	.LFB69:
 273:.\main.c      **** 
 274:.\main.c      **** /*
 275:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 276:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 277:.\main.c      **** */
 278:.\main.c      **** void stringToDiffMan(char lineString[], uint8 stringPosition){
 712              		.loc 1 278 0
 713              		.cfi_startproc
 714              		@ args = 0, pretend = 0, frame = 16
 715              		@ frame_needed = 1, uses_anonymous_args = 0
 716 0000 80B5     		push	{r7, lr}
 717              		.cfi_def_cfa_offset 8
 718              		.cfi_offset 7, -8
 719              		.cfi_offset 14, -4
 720 0002 84B0     		sub	sp, sp, #16
 721              		.cfi_def_cfa_offset 24
 722 0004 00AF     		add	r7, sp, #0
 723              		.cfi_def_cfa_register 7
 724 0006 7860     		str	r0, [r7, #4]
 725 0008 0B46     		mov	r3, r1
 726 000a FB70     		strb	r3, [r7, #3]
 279:.\main.c      **** 
 280:.\main.c      ****     unsigned int i = 0;
 727              		.loc 1 280 0
 728 000c 0023     		movs	r3, #0
 729 000e FB60     		str	r3, [r7, #12]
 281:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 730              		.loc 1 281 0
 731 0010 0023     		movs	r3, #0
 732 0012 FB60     		str	r3, [r7, #12]
 733 0014 09E0     		b	.L45
 734              	.L46:
 282:.\main.c      ****         asciiToDiffMan(lineString[i]);
 735              		.loc 1 282 0 discriminator 3
 736 0016 7A68     		ldr	r2, [r7, #4]
 737 0018 FB68     		ldr	r3, [r7, #12]
 738 001a 1344     		add	r3, r3, r2
 739 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 740 001e 1846     		mov	r0, r3
 741 0020 FFF7FEFF 		bl	asciiToDiffMan
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 19


 281:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 742              		.loc 1 281 0 discriminator 3
 743 0024 FB68     		ldr	r3, [r7, #12]
 744 0026 0133     		adds	r3, r3, #1
 745 0028 FB60     		str	r3, [r7, #12]
 746              	.L45:
 281:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 747              		.loc 1 281 0 is_stmt 0 discriminator 1
 748 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 749 002c FB68     		ldr	r3, [r7, #12]
 750 002e 9A42     		cmp	r2, r3
 751 0030 F1D8     		bhi	.L46
 283:.\main.c      ****     }
 284:.\main.c      **** }
 752              		.loc 1 284 0 is_stmt 1
 753 0032 1037     		adds	r7, r7, #16
 754              		.cfi_def_cfa_offset 8
 755 0034 BD46     		mov	sp, r7
 756              		.cfi_def_cfa_register 13
 757              		@ sp needed
 758 0036 80BD     		pop	{r7, pc}
 759              		.cfi_endproc
 760              	.LFE69:
 761              		.size	stringToDiffMan, .-stringToDiffMan
 762              		.section	.text.asciiToDiffMan,"ax",%progbits
 763              		.align	2
 764              		.global	asciiToDiffMan
 765              		.thumb
 766              		.thumb_func
 767              		.type	asciiToDiffMan, %function
 768              	asciiToDiffMan:
 769              	.LFB70:
 285:.\main.c      **** 
 286:.\main.c      **** /*
 287:.\main.c      **** Helper method. Do not call from main.
 288:.\main.c      **** Converts a ascii char to a differental manchester line encoded version
 289:.\main.c      **** */
 290:.\main.c      **** void asciiToDiffMan(char asciiChar)
 291:.\main.c      **** {
 770              		.loc 1 291 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 104
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775 0000 80B4     		push	{r7}
 776              		.cfi_def_cfa_offset 4
 777              		.cfi_offset 7, -4
 778 0002 9BB0     		sub	sp, sp, #108
 779              		.cfi_def_cfa_offset 112
 780 0004 00AF     		add	r7, sp, #0
 781              		.cfi_def_cfa_register 7
 782 0006 0346     		mov	r3, r0
 783 0008 FB71     		strb	r3, [r7, #7]
 292:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 784              		.loc 1 292 0
 785 000a 6C4B     		ldr	r3, .L59
 786 000c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 20


 787 000e 013B     		subs	r3, r3, #1
 788 0010 6B4A     		ldr	r2, .L59+4
 789 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 790 0016 87F86730 		strb	r3, [r7, #103]
 293:.\main.c      ****     //send starting 1 bit (encoded)
 294:.\main.c      ****     if(previousHalfBit == 1){
 791              		.loc 1 294 0
 792 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 793 001e 012B     		cmp	r3, #1
 794 0020 16D1     		bne	.L48
 295:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 795              		.loc 1 295 0
 796 0022 664B     		ldr	r3, .L59
 797 0024 1B68     		ldr	r3, [r3]
 798 0026 664A     		ldr	r2, .L59+4
 799 0028 0121     		movs	r1, #1
 800 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 296:.\main.c      ****         halfBitIndex++;
 801              		.loc 1 296 0
 802 002e 634B     		ldr	r3, .L59
 803 0030 1B68     		ldr	r3, [r3]
 804 0032 0133     		adds	r3, r3, #1
 805 0034 614A     		ldr	r2, .L59
 806 0036 1360     		str	r3, [r2]
 297:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 807              		.loc 1 297 0
 808 0038 604B     		ldr	r3, .L59
 809 003a 1B68     		ldr	r3, [r3]
 810 003c 604A     		ldr	r2, .L59+4
 811 003e 0021     		movs	r1, #0
 812 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 298:.\main.c      ****         halfBitIndex++;
 813              		.loc 1 298 0
 814 0044 5D4B     		ldr	r3, .L59
 815 0046 1B68     		ldr	r3, [r3]
 816 0048 0133     		adds	r3, r3, #1
 817 004a 5C4A     		ldr	r2, .L59
 818 004c 1360     		str	r3, [r2]
 819 004e 15E0     		b	.L49
 820              	.L48:
 299:.\main.c      ****     }else{
 300:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 821              		.loc 1 300 0
 822 0050 5A4B     		ldr	r3, .L59
 823 0052 1B68     		ldr	r3, [r3]
 824 0054 5A4A     		ldr	r2, .L59+4
 825 0056 0021     		movs	r1, #0
 826 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 301:.\main.c      ****         halfBitIndex++;
 827              		.loc 1 301 0
 828 005c 574B     		ldr	r3, .L59
 829 005e 1B68     		ldr	r3, [r3]
 830 0060 0133     		adds	r3, r3, #1
 831 0062 564A     		ldr	r2, .L59
 832 0064 1360     		str	r3, [r2]
 302:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 833              		.loc 1 302 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 21


 834 0066 554B     		ldr	r3, .L59
 835 0068 1B68     		ldr	r3, [r3]
 836 006a 554A     		ldr	r2, .L59+4
 837 006c 0121     		movs	r1, #1
 838 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 303:.\main.c      ****         halfBitIndex++;
 839              		.loc 1 303 0
 840 0072 524B     		ldr	r3, .L59
 841 0074 1B68     		ldr	r3, [r3]
 842 0076 0133     		adds	r3, r3, #1
 843 0078 504A     		ldr	r2, .L59
 844 007a 1360     		str	r3, [r2]
 845              	.L49:
 304:.\main.c      ****     } 
 305:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 846              		.loc 1 305 0
 847 007c 4F4B     		ldr	r3, .L59
 848 007e 1B68     		ldr	r3, [r3]
 849 0080 013B     		subs	r3, r3, #1
 850 0082 4F4A     		ldr	r2, .L59+4
 851 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 852 0088 87F86730 		strb	r3, [r7, #103]
 306:.\main.c      **** 
 307:.\main.c      ****     
 308:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 309:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB 
 310:.\main.c      ****     int i;
 311:.\main.c      ****     for(i=0; asciiChar>0; i++)
 853              		.loc 1 311 0
 854 008c 0023     		movs	r3, #0
 855 008e 3B66     		str	r3, [r7, #96]
 856 0090 0FE0     		b	.L50
 857              	.L51:
 312:.\main.c      ****     { 
 313:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2; 
 858              		.loc 1 313 0 discriminator 3
 859 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 860 0094 03F00102 		and	r2, r3, #1
 861 0098 3B6E     		ldr	r3, [r7, #96]
 862 009a 9B00     		lsls	r3, r3, #2
 863 009c 07F16801 		add	r1, r7, #104
 864 00a0 0B44     		add	r3, r3, r1
 865 00a2 43F85C2C 		str	r2, [r3, #-92]
 314:.\main.c      ****         asciiChar=asciiChar/2;
 866              		.loc 1 314 0 discriminator 3
 867 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 868 00a8 5B08     		lsrs	r3, r3, #1
 869 00aa FB71     		strb	r3, [r7, #7]
 311:.\main.c      ****     { 
 870              		.loc 1 311 0 discriminator 3
 871 00ac 3B6E     		ldr	r3, [r7, #96]
 872 00ae 0133     		adds	r3, r3, #1
 873 00b0 3B66     		str	r3, [r7, #96]
 874              	.L50:
 311:.\main.c      ****     { 
 875              		.loc 1 311 0 is_stmt 0 discriminator 1
 876 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 22


 877 00b4 002B     		cmp	r3, #0
 878 00b6 ECD1     		bne	.L51
 315:.\main.c      ****     }
 316:.\main.c      **** 
 317:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 318:.\main.c      ****     //must start at the end of the array so to encode the MSB first 
 319:.\main.c      ****     int j;
 320:.\main.c      ****     for(j=INDEX_OF_MSB;j>=0;j--) 
 879              		.loc 1 320 0 is_stmt 1
 880 00b8 0623     		movs	r3, #6
 881 00ba FB65     		str	r3, [r7, #92]
 882 00bc 76E0     		b	.L52
 883              	.L58:
 321:.\main.c      ****     {
 322:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 884              		.loc 1 322 0
 885 00be FB6D     		ldr	r3, [r7, #92]
 886 00c0 9B00     		lsls	r3, r3, #2
 887 00c2 07F16802 		add	r2, r7, #104
 888 00c6 1344     		add	r3, r3, r2
 889 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 890 00cc 012B     		cmp	r3, #1
 891 00ce 31D1     		bne	.L53
 323:.\main.c      ****         {
 324:.\main.c      ****             //bit == 1
 325:.\main.c      ****             if(previousHalfBit == 1)
 892              		.loc 1 325 0
 893 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 894 00d4 012B     		cmp	r3, #1
 895 00d6 16D1     		bne	.L54
 326:.\main.c      ****             {
 327:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 896              		.loc 1 327 0
 897 00d8 384B     		ldr	r3, .L59
 898 00da 1B68     		ldr	r3, [r3]
 899 00dc 384A     		ldr	r2, .L59+4
 900 00de 0121     		movs	r1, #1
 901 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 328:.\main.c      ****                 halfBitIndex++;
 902              		.loc 1 328 0
 903 00e4 354B     		ldr	r3, .L59
 904 00e6 1B68     		ldr	r3, [r3]
 905 00e8 0133     		adds	r3, r3, #1
 906 00ea 344A     		ldr	r2, .L59
 907 00ec 1360     		str	r3, [r2]
 329:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 908              		.loc 1 329 0
 909 00ee 334B     		ldr	r3, .L59
 910 00f0 1B68     		ldr	r3, [r3]
 911 00f2 334A     		ldr	r2, .L59+4
 912 00f4 0021     		movs	r1, #0
 913 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 330:.\main.c      ****                 halfBitIndex++;    
 914              		.loc 1 330 0
 915 00fa 304B     		ldr	r3, .L59
 916 00fc 1B68     		ldr	r3, [r3]
 917 00fe 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 23


 918 0100 2E4A     		ldr	r2, .L59
 919 0102 1360     		str	r3, [r2]
 920 0104 47E0     		b	.L56
 921              	.L54:
 331:.\main.c      ****             }
 332:.\main.c      ****             else
 333:.\main.c      ****             {
 334:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 922              		.loc 1 334 0
 923 0106 2D4B     		ldr	r3, .L59
 924 0108 1B68     		ldr	r3, [r3]
 925 010a 2D4A     		ldr	r2, .L59+4
 926 010c 0021     		movs	r1, #0
 927 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 335:.\main.c      ****                 halfBitIndex++;
 928              		.loc 1 335 0
 929 0112 2A4B     		ldr	r3, .L59
 930 0114 1B68     		ldr	r3, [r3]
 931 0116 0133     		adds	r3, r3, #1
 932 0118 284A     		ldr	r2, .L59
 933 011a 1360     		str	r3, [r2]
 336:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 934              		.loc 1 336 0
 935 011c 274B     		ldr	r3, .L59
 936 011e 1B68     		ldr	r3, [r3]
 937 0120 274A     		ldr	r2, .L59+4
 938 0122 0121     		movs	r1, #1
 939 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 337:.\main.c      ****                 halfBitIndex++;
 940              		.loc 1 337 0
 941 0128 244B     		ldr	r3, .L59
 942 012a 1B68     		ldr	r3, [r3]
 943 012c 0133     		adds	r3, r3, #1
 944 012e 234A     		ldr	r2, .L59
 945 0130 1360     		str	r3, [r2]
 946 0132 30E0     		b	.L56
 947              	.L53:
 338:.\main.c      ****             }
 339:.\main.c      ****             
 340:.\main.c      ****         }
 341:.\main.c      ****         else
 342:.\main.c      ****         {
 343:.\main.c      ****             //bit == 0
 344:.\main.c      ****             if(previousHalfBit == 1)
 948              		.loc 1 344 0
 949 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 950 0138 012B     		cmp	r3, #1
 951 013a 16D1     		bne	.L57
 345:.\main.c      ****             {
 346:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 952              		.loc 1 346 0
 953 013c 1F4B     		ldr	r3, .L59
 954 013e 1B68     		ldr	r3, [r3]
 955 0140 1F4A     		ldr	r2, .L59+4
 956 0142 0021     		movs	r1, #0
 957 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 347:.\main.c      ****                 halfBitIndex++;
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 24


 958              		.loc 1 347 0
 959 0148 1C4B     		ldr	r3, .L59
 960 014a 1B68     		ldr	r3, [r3]
 961 014c 0133     		adds	r3, r3, #1
 962 014e 1B4A     		ldr	r2, .L59
 963 0150 1360     		str	r3, [r2]
 348:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 964              		.loc 1 348 0
 965 0152 1A4B     		ldr	r3, .L59
 966 0154 1B68     		ldr	r3, [r3]
 967 0156 1A4A     		ldr	r2, .L59+4
 968 0158 0121     		movs	r1, #1
 969 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 349:.\main.c      ****                 halfBitIndex++;
 970              		.loc 1 349 0
 971 015e 174B     		ldr	r3, .L59
 972 0160 1B68     		ldr	r3, [r3]
 973 0162 0133     		adds	r3, r3, #1
 974 0164 154A     		ldr	r2, .L59
 975 0166 1360     		str	r3, [r2]
 976 0168 15E0     		b	.L56
 977              	.L57:
 350:.\main.c      ****             }
 351:.\main.c      ****             else
 352:.\main.c      ****             {
 353:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 978              		.loc 1 353 0
 979 016a 144B     		ldr	r3, .L59
 980 016c 1B68     		ldr	r3, [r3]
 981 016e 144A     		ldr	r2, .L59+4
 982 0170 0121     		movs	r1, #1
 983 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 354:.\main.c      ****                 halfBitIndex++;
 984              		.loc 1 354 0
 985 0176 114B     		ldr	r3, .L59
 986 0178 1B68     		ldr	r3, [r3]
 987 017a 0133     		adds	r3, r3, #1
 988 017c 0F4A     		ldr	r2, .L59
 989 017e 1360     		str	r3, [r2]
 355:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 990              		.loc 1 355 0
 991 0180 0E4B     		ldr	r3, .L59
 992 0182 1B68     		ldr	r3, [r3]
 993 0184 0E4A     		ldr	r2, .L59+4
 994 0186 0021     		movs	r1, #0
 995 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 356:.\main.c      ****                 halfBitIndex++;
 996              		.loc 1 356 0
 997 018c 0B4B     		ldr	r3, .L59
 998 018e 1B68     		ldr	r3, [r3]
 999 0190 0133     		adds	r3, r3, #1
 1000 0192 0A4A     		ldr	r2, .L59
 1001 0194 1360     		str	r3, [r2]
 1002              	.L56:
 357:.\main.c      ****             }
 358:.\main.c      ****         }
 359:.\main.c      ****         
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 25


 360:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1003              		.loc 1 360 0 discriminator 2
 1004 0196 094B     		ldr	r3, .L59
 1005 0198 1B68     		ldr	r3, [r3]
 1006 019a 013B     		subs	r3, r3, #1
 1007 019c 084A     		ldr	r2, .L59+4
 1008 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1009 01a2 87F86730 		strb	r3, [r7, #103]
 320:.\main.c      ****     {
 1010              		.loc 1 320 0 discriminator 2
 1011 01a6 FB6D     		ldr	r3, [r7, #92]
 1012 01a8 013B     		subs	r3, r3, #1
 1013 01aa FB65     		str	r3, [r7, #92]
 1014              	.L52:
 320:.\main.c      ****     {
 1015              		.loc 1 320 0 is_stmt 0 discriminator 1
 1016 01ac FB6D     		ldr	r3, [r7, #92]
 1017 01ae 002B     		cmp	r3, #0
 1018 01b0 85DA     		bge	.L58
 361:.\main.c      ****     }//end for
 362:.\main.c      ****    
 363:.\main.c      **** }//end function
 1019              		.loc 1 363 0 is_stmt 1
 1020 01b2 6C37     		adds	r7, r7, #108
 1021              		.cfi_def_cfa_offset 4
 1022 01b4 BD46     		mov	sp, r7
 1023              		.cfi_def_cfa_register 13
 1024              		@ sp needed
 1025 01b6 5DF8047B 		ldr	r7, [sp], #4
 1026              		.cfi_restore 7
 1027              		.cfi_def_cfa_offset 0
 1028 01ba 7047     		bx	lr
 1029              	.L60:
 1030              		.align	2
 1031              	.L59:
 1032 01bc 00000000 		.word	halfBitIndex
 1033 01c0 00000000 		.word	diffManEncodedData
 1034              		.cfi_endproc
 1035              	.LFE70:
 1036              		.size	asciiToDiffMan, .-asciiToDiffMan
 1037              		.global	__aeabi_i2d
 1038              		.global	__aeabi_ddiv
 1039              		.global	__aeabi_dmul
 1040              		.global	__aeabi_d2iz
 1041              		.section	.text.transmitData,"ax",%progbits
 1042              		.align	2
 1043              		.global	transmitData
 1044              		.thumb
 1045              		.thumb_func
 1046              		.type	transmitData, %function
 1047              	transmitData:
 1048              	.LFB71:
 364:.\main.c      **** 
 365:.\main.c      **** /*
 366:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 367:.\main.c      **** Checks network state before transmitting.
 368:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 26


 369:.\main.c      **** */
 370:.\main.c      **** void transmitData(){
 1049              		.loc 1 370 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 8
 1052              		@ frame_needed = 1, uses_anonymous_args = 0
 1053 0000 80B5     		push	{r7, lr}
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 0002 82B0     		sub	sp, sp, #8
 1058              		.cfi_def_cfa_offset 16
 1059 0004 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 371:.\main.c      ****     int i;
 372:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
 1061              		.loc 1 372 0
 1062 0006 0023     		movs	r3, #0
 1063 0008 7B60     		str	r3, [r7, #4]
 1064 000a 47E0     		b	.L62
 1065              	.L66:
 373:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 374:.\main.c      ****         //Else break out of transmition and wait random time
 375:.\main.c      ****         if(networkState != idle){
 1066              		.loc 1 375 0
 1067 000c 2B4B     		ldr	r3, .L68
 1068 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 0010 002B     		cmp	r3, #0
 1070 0012 2BD0     		beq	.L63
 376:.\main.c      ****             if(networkState == collision){
 1071              		.loc 1 376 0
 1072 0014 294B     		ldr	r3, .L68
 1073 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1074 0018 022B     		cmp	r3, #2
 1075 001a 27D1     		bne	.L63
 1076              	.LBB2:
 377:.\main.c      ****                 TX_pin_Write(1);
 1077              		.loc 1 377 0
 1078 001c 0120     		movs	r0, #1
 1079 001e FFF7FEFF 		bl	TX_pin_Write
 378:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1080              		.loc 1 378 0
 1081 0022 FFF7FEFF 		bl	getRandomNumber
 1082 0026 0346     		mov	r3, r0
 1083 0028 1846     		mov	r0, r3
 1084 002a FFF7FEFF 		bl	__aeabi_i2d
 1085 002e 0246     		mov	r2, r0
 1086 0030 0B46     		mov	r3, r1
 1087 0032 1046     		mov	r0, r2
 1088 0034 1946     		mov	r1, r3
 1089 0036 4FF00002 		mov	r2, #0
 1090 003a 214B     		ldr	r3, .L68+4
 1091 003c FFF7FEFF 		bl	__aeabi_ddiv
 1092 0040 0246     		mov	r2, r0
 1093 0042 0B46     		mov	r3, r1
 1094 0044 1046     		mov	r0, r2
 1095 0046 1946     		mov	r1, r3
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 27


 1096 0048 4FF00002 		mov	r2, #0
 1097 004c 1D4B     		ldr	r3, .L68+8
 1098 004e FFF7FEFF 		bl	__aeabi_dmul
 1099 0052 0246     		mov	r2, r0
 1100 0054 0B46     		mov	r3, r1
 1101 0056 1046     		mov	r0, r2
 1102 0058 1946     		mov	r1, r3
 1103 005a FFF7FEFF 		bl	__aeabi_d2iz
 1104 005e 0346     		mov	r3, r0
 1105 0060 3B60     		str	r3, [r7]
 379:.\main.c      ****                
 380:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 381:.\main.c      ****                 CyDelay(value);
 1106              		.loc 1 381 0
 1107 0062 3B68     		ldr	r3, [r7]
 1108 0064 1846     		mov	r0, r3
 1109 0066 FFF7FEFF 		bl	CyDelay
 382:.\main.c      ****                 break;
 1110              		.loc 1 382 0
 1111 006a 1CE0     		b	.L64
 1112              	.L63:
 1113              	.LBE2:
 383:.\main.c      ****             }
 384:.\main.c      ****         }
 385:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1114              		.loc 1 385 0
 1115 006c 164A     		ldr	r2, .L68+12
 1116 006e 7B68     		ldr	r3, [r7, #4]
 1117 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1118 0074 DBB2     		uxtb	r3, r3
 1119 0076 1846     		mov	r0, r3
 1120 0078 FFF7FEFF 		bl	TX_pin_Write
 386:.\main.c      ****         Timer_Start();
 1121              		.loc 1 386 0
 1122 007c FFF7FEFF 		bl	Timer_Start
 387:.\main.c      ****         while(!timerExpired); 
 1123              		.loc 1 387 0
 1124 0080 00BF     		nop
 1125              	.L65:
 1126              		.loc 1 387 0 is_stmt 0 discriminator 1
 1127 0082 124B     		ldr	r3, .L68+16
 1128 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1129 0086 83F00103 		eor	r3, r3, #1
 1130 008a DBB2     		uxtb	r3, r3
 1131 008c 002B     		cmp	r3, #0
 1132 008e F8D1     		bne	.L65
 388:.\main.c      ****         timerExpired = false;
 1133              		.loc 1 388 0 is_stmt 1 discriminator 2
 1134 0090 0E4B     		ldr	r3, .L68+16
 1135 0092 0022     		movs	r2, #0
 1136 0094 1A70     		strb	r2, [r3]
 372:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1137              		.loc 1 372 0 discriminator 2
 1138 0096 7B68     		ldr	r3, [r7, #4]
 1139 0098 0133     		adds	r3, r3, #1
 1140 009a 7B60     		str	r3, [r7, #4]
 1141              	.L62:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 28


 372:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data. 
 1142              		.loc 1 372 0 is_stmt 0 discriminator 1
 1143 009c 0C4B     		ldr	r3, .L68+20
 1144 009e 1B68     		ldr	r3, [r3]
 1145 00a0 7A68     		ldr	r2, [r7, #4]
 1146 00a2 9A42     		cmp	r2, r3
 1147 00a4 B2DB     		blt	.L66
 1148              	.L64:
 389:.\main.c      ****     }
 390:.\main.c      ****     
 391:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag 
 392:.\main.c      ****     if(i == halfBitIndex){
 1149              		.loc 1 392 0 is_stmt 1
 1150 00a6 0A4B     		ldr	r3, .L68+20
 1151 00a8 1B68     		ldr	r3, [r3]
 1152 00aa 7A68     		ldr	r2, [r7, #4]
 1153 00ac 9A42     		cmp	r2, r3
 1154 00ae 02D1     		bne	.L61
 393:.\main.c      ****         dataTransmissionComplete = true;
 1155              		.loc 1 393 0
 1156 00b0 084B     		ldr	r3, .L68+24
 1157 00b2 0122     		movs	r2, #1
 1158 00b4 1A70     		strb	r2, [r3]
 1159              	.L61:
 394:.\main.c      ****     }
 395:.\main.c      **** }
 1160              		.loc 1 395 0
 1161 00b6 0837     		adds	r7, r7, #8
 1162              		.cfi_def_cfa_offset 8
 1163 00b8 BD46     		mov	sp, r7
 1164              		.cfi_def_cfa_register 13
 1165              		@ sp needed
 1166 00ba 80BD     		pop	{r7, pc}
 1167              	.L69:
 1168              		.align	2
 1169              	.L68:
 1170 00bc 00000000 		.word	networkState
 1171 00c0 00006040 		.word	1080033280
 1172 00c4 00008940 		.word	1082720256
 1173 00c8 00000000 		.word	diffManEncodedData
 1174 00cc 00000000 		.word	timerExpired
 1175 00d0 00000000 		.word	halfBitIndex
 1176 00d4 00000000 		.word	dataTransmissionComplete
 1177              		.cfi_endproc
 1178              	.LFE71:
 1179              		.size	transmitData, .-transmitData
 1180              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1181              		.align	2
 1182              		.global	setNetworkStateOnLEDs
 1183              		.thumb
 1184              		.thumb_func
 1185              		.type	setNetworkStateOnLEDs, %function
 1186              	setNetworkStateOnLEDs:
 1187              	.LFB72:
 396:.\main.c      **** 
 397:.\main.c      **** void setNetworkStateOnLEDs(){
 1188              		.loc 1 397 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 29


 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192 0000 80B5     		push	{r7, lr}
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 14, -4
 1196 0002 00AF     		add	r7, sp, #0
 1197              		.cfi_def_cfa_register 7
 398:.\main.c      **** 	 switch(networkState){
 1198              		.loc 1 398 0
 1199 0004 134B     		ldr	r3, .L76
 1200 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 0008 012B     		cmp	r3, #1
 1202 000a 04D0     		beq	.L72
 1203 000c 022B     		cmp	r3, #2
 1204 000e 16D0     		beq	.L73
 1205 0010 002B     		cmp	r3, #0
 1206 0012 0AD0     		beq	.L74
 399:.\main.c      ****         case busy:
 400:.\main.c      ****         {
 401:.\main.c      ****             LED4_Write(1);
 402:.\main.c      ****             LED3_Write(0);
 403:.\main.c      ****             LED2_Write(0);
 404:.\main.c      ****             break;
 405:.\main.c      ****         }
 406:.\main.c      ****         case idle:
 407:.\main.c      ****         {
 408:.\main.c      ****             LED3_Write(1);
 409:.\main.c      ****             LED4_Write(0);
 410:.\main.c      ****             LED2_Write(0);
 411:.\main.c      ****             break;
 412:.\main.c      ****         }
 413:.\main.c      ****         case collision:
 414:.\main.c      ****         {
 415:.\main.c      ****             LED2_Write(1);
 416:.\main.c      ****             LED4_Write(0);
 417:.\main.c      ****             LED3_Write(0);
 418:.\main.c      ****             break;
 419:.\main.c      ****         }
 420:.\main.c      ****         default:
 421:.\main.c      ****         {
 422:.\main.c      ****            //error
 423:.\main.c      ****             break;
 1207              		.loc 1 423 0
 1208 0014 1DE0     		b	.L70
 1209              	.L72:
 401:.\main.c      ****             LED3_Write(0);
 1210              		.loc 1 401 0
 1211 0016 0120     		movs	r0, #1
 1212 0018 FFF7FEFF 		bl	LED4_Write
 402:.\main.c      ****             LED2_Write(0);
 1213              		.loc 1 402 0
 1214 001c 0020     		movs	r0, #0
 1215 001e FFF7FEFF 		bl	LED3_Write
 403:.\main.c      ****             break;
 1216              		.loc 1 403 0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 30


 1217 0022 0020     		movs	r0, #0
 1218 0024 FFF7FEFF 		bl	LED2_Write
 404:.\main.c      ****         }
 1219              		.loc 1 404 0
 1220 0028 13E0     		b	.L70
 1221              	.L74:
 408:.\main.c      ****             LED4_Write(0);
 1222              		.loc 1 408 0
 1223 002a 0120     		movs	r0, #1
 1224 002c FFF7FEFF 		bl	LED3_Write
 409:.\main.c      ****             LED2_Write(0);
 1225              		.loc 1 409 0
 1226 0030 0020     		movs	r0, #0
 1227 0032 FFF7FEFF 		bl	LED4_Write
 410:.\main.c      ****             break;
 1228              		.loc 1 410 0
 1229 0036 0020     		movs	r0, #0
 1230 0038 FFF7FEFF 		bl	LED2_Write
 411:.\main.c      ****         }
 1231              		.loc 1 411 0
 1232 003c 09E0     		b	.L70
 1233              	.L73:
 415:.\main.c      ****             LED4_Write(0);
 1234              		.loc 1 415 0
 1235 003e 0120     		movs	r0, #1
 1236 0040 FFF7FEFF 		bl	LED2_Write
 416:.\main.c      ****             LED3_Write(0);
 1237              		.loc 1 416 0
 1238 0044 0020     		movs	r0, #0
 1239 0046 FFF7FEFF 		bl	LED4_Write
 417:.\main.c      ****             break;
 1240              		.loc 1 417 0
 1241 004a 0020     		movs	r0, #0
 1242 004c FFF7FEFF 		bl	LED3_Write
 418:.\main.c      ****         }
 1243              		.loc 1 418 0
 1244 0050 00BF     		nop
 1245              	.L70:
 424:.\main.c      ****         } 
 425:.\main.c      **** 	}
 426:.\main.c      **** }
 1246              		.loc 1 426 0
 1247 0052 80BD     		pop	{r7, pc}
 1248              	.L77:
 1249              		.align	2
 1250              	.L76:
 1251 0054 00000000 		.word	networkState
 1252              		.cfi_endproc
 1253              	.LFE72:
 1254              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1255              		.section	.text.getRandomNumber,"ax",%progbits
 1256              		.align	2
 1257              		.global	getRandomNumber
 1258              		.thumb
 1259              		.thumb_func
 1260              		.type	getRandomNumber, %function
 1261              	getRandomNumber:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 31


 1262              	.LFB73:
 427:.\main.c      **** 
 428:.\main.c      **** /*
 429:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 430:.\main.c      **** */
 431:.\main.c      **** int getRandomNumber()
 432:.\main.c      **** {
 1263              		.loc 1 432 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 16
 1266              		@ frame_needed = 1, uses_anonymous_args = 0
 1267 0000 80B5     		push	{r7, lr}
 1268              		.cfi_def_cfa_offset 8
 1269              		.cfi_offset 7, -8
 1270              		.cfi_offset 14, -4
 1271 0002 84B0     		sub	sp, sp, #16
 1272              		.cfi_def_cfa_offset 24
 1273 0004 00AF     		add	r7, sp, #0
 1274              		.cfi_def_cfa_register 7
 433:.\main.c      ****     const int MIN_N = 1;
 1275              		.loc 1 433 0
 1276 0006 0123     		movs	r3, #1
 1277 0008 FB60     		str	r3, [r7, #12]
 434:.\main.c      ****     const int MAX_N = 128;
 1278              		.loc 1 434 0
 1279 000a 8023     		movs	r3, #128
 1280 000c BB60     		str	r3, [r7, #8]
 435:.\main.c      ****         
 436:.\main.c      ****     int n;
 437:.\main.c      **** /*
 438:.\main.c      ****     Get first and second random numbers.
 439:.\main.c      ****     */
 440:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1281              		.loc 1 440 0
 1282 000e FFF7FEFF 		bl	rand
 1283 0012 0246     		mov	r2, r0
 1284 0014 B968     		ldr	r1, [r7, #8]
 1285 0016 FB68     		ldr	r3, [r7, #12]
 1286 0018 CB1A     		subs	r3, r1, r3
 1287 001a 0133     		adds	r3, r3, #1
 1288 001c 92FBF3F1 		sdiv	r1, r2, r3
 1289 0020 03FB01F3 		mul	r3, r3, r1
 1290 0024 D21A     		subs	r2, r2, r3
 1291 0026 FB68     		ldr	r3, [r7, #12]
 1292 0028 1344     		add	r3, r3, r2
 1293 002a 7B60     		str	r3, [r7, #4]
 441:.\main.c      ****     return n;
 1294              		.loc 1 441 0
 1295 002c 7B68     		ldr	r3, [r7, #4]
 442:.\main.c      **** }
 1296              		.loc 1 442 0
 1297 002e 1846     		mov	r0, r3
 1298 0030 1037     		adds	r7, r7, #16
 1299              		.cfi_def_cfa_offset 8
 1300 0032 BD46     		mov	sp, r7
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 32


 1303 0034 80BD     		pop	{r7, pc}
 1304              		.cfi_endproc
 1305              	.LFE73:
 1306              		.size	getRandomNumber, .-getRandomNumber
 1307 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1308              		.align	2
 1309              		.global	diffManToASCII
 1310              		.thumb
 1311              		.thumb_func
 1312              		.type	diffManToASCII, %function
 1313              	diffManToASCII:
 1314              	.LFB74:
 443:.\main.c      **** 
 444:.\main.c      **** /*
 445:.\main.c      **** Helper method.
 446:.\main.c      **** Convert differental manchester line encoded byte to ascii char
 447:.\main.c      **** 
 448:.\main.c      **** charPtr = pointer to char 
 449:.\main.c      **** */
 450:.\main.c      **** void diffManToASCII()
 451:.\main.c      **** {
 1315              		.loc 1 451 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 8
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320 0000 80B4     		push	{r7}
 1321              		.cfi_def_cfa_offset 4
 1322              		.cfi_offset 7, -4
 1323 0002 83B0     		sub	sp, sp, #12
 1324              		.cfi_def_cfa_offset 16
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 452:.\main.c      ****     int i;
 453:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1327              		.loc 1 453 0
 1328 0006 0023     		movs	r3, #0
 1329 0008 7B60     		str	r3, [r7, #4]
 1330 000a 42E0     		b	.L81
 1331              	.L87:
 1332              	.LBB3:
 454:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1333              		.loc 1 454 0
 1334 000c 254B     		ldr	r3, .L88
 1335 000e 1B68     		ldr	r3, [r3]
 1336 0010 013B     		subs	r3, r3, #1
 1337 0012 254A     		ldr	r2, .L88+4
 1338 0014 D35C     		ldrb	r3, [r2, r3]
 1339 0016 FB70     		strb	r3, [r7, #3]
 455:.\main.c      ****         //send starting 1 bit (encoded)
 456:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1340              		.loc 1 456 0
 1341 0018 224B     		ldr	r3, .L88
 1342 001a 1B68     		ldr	r3, [r3]
 1343 001c 224A     		ldr	r2, .L88+4
 1344 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1345 0020 012B     		cmp	r3, #1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 33


 1346 0022 17D1     		bne	.L82
 457:.\main.c      ****             //current half bit is 1
 458:.\main.c      ****             if(previousHalfBit == 1)
 1347              		.loc 1 458 0
 1348 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1349 0026 012B     		cmp	r3, #1
 1350 0028 0FD1     		bne	.L83
 459:.\main.c      ****             {
 460:.\main.c      ****                 receivedChar |= (1 << (7 - i));      
 1351              		.loc 1 460 0
 1352 002a 7B68     		ldr	r3, [r7, #4]
 1353 002c C3F10703 		rsb	r3, r3, #7
 1354 0030 0122     		movs	r2, #1
 1355 0032 02FA03F3 		lsl	r3, r2, r3
 1356 0036 DAB2     		uxtb	r2, r3
 1357 0038 1C4B     		ldr	r3, .L88+8
 1358 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359 003c DBB2     		uxtb	r3, r3
 1360 003e 1343     		orrs	r3, r3, r2
 1361 0040 DBB2     		uxtb	r3, r3
 1362 0042 DAB2     		uxtb	r2, r3
 1363 0044 194B     		ldr	r3, .L88+8
 1364 0046 1A70     		strb	r2, [r3]
 1365 0048 1BE0     		b	.L85
 1366              	.L83:
 461:.\main.c      ****             }
 462:.\main.c      ****             else
 463:.\main.c      ****             {
 464:.\main.c      ****                 receivedChar |= (0 << (7 - i));    
 1367              		.loc 1 464 0
 1368 004a 184B     		ldr	r3, .L88+8
 1369 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1370 004e 174B     		ldr	r3, .L88+8
 1371 0050 1A70     		strb	r2, [r3]
 1372 0052 16E0     		b	.L85
 1373              	.L82:
 465:.\main.c      ****             }
 466:.\main.c      ****         }
 467:.\main.c      ****         else{
 468:.\main.c      ****             //current half bit is 0
 469:.\main.c      ****             if(previousHalfBit == 1)
 1374              		.loc 1 469 0
 1375 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1376 0056 012B     		cmp	r3, #1
 1377 0058 04D1     		bne	.L86
 470:.\main.c      ****             {
 471:.\main.c      ****                 receivedChar |= (0 << (7 - i));    
 1378              		.loc 1 471 0
 1379 005a 144B     		ldr	r3, .L88+8
 1380 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1381 005e 134B     		ldr	r3, .L88+8
 1382 0060 1A70     		strb	r2, [r3]
 1383 0062 0EE0     		b	.L85
 1384              	.L86:
 472:.\main.c      ****             }
 473:.\main.c      ****             else
 474:.\main.c      ****             {
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 34


 475:.\main.c      ****                 receivedChar |= (1 << (7 - i));    
 1385              		.loc 1 475 0
 1386 0064 7B68     		ldr	r3, [r7, #4]
 1387 0066 C3F10703 		rsb	r3, r3, #7
 1388 006a 0122     		movs	r2, #1
 1389 006c 02FA03F3 		lsl	r3, r2, r3
 1390 0070 DAB2     		uxtb	r2, r3
 1391 0072 0E4B     		ldr	r3, .L88+8
 1392 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1393 0076 DBB2     		uxtb	r3, r3
 1394 0078 1343     		orrs	r3, r3, r2
 1395 007a DBB2     		uxtb	r3, r3
 1396 007c DAB2     		uxtb	r2, r3
 1397 007e 0B4B     		ldr	r3, .L88+8
 1398 0080 1A70     		strb	r2, [r3]
 1399              	.L85:
 476:.\main.c      ****             }
 477:.\main.c      ****         } 
 478:.\main.c      ****         receivedDataIndex += 2;
 1400              		.loc 1 478 0 discriminator 2
 1401 0082 084B     		ldr	r3, .L88
 1402 0084 1B68     		ldr	r3, [r3]
 1403 0086 0233     		adds	r3, r3, #2
 1404 0088 064A     		ldr	r2, .L88
 1405 008a 1360     		str	r3, [r2]
 1406              	.LBE3:
 453:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1407              		.loc 1 453 0 discriminator 2
 1408 008c 7B68     		ldr	r3, [r7, #4]
 1409 008e 0133     		adds	r3, r3, #1
 1410 0090 7B60     		str	r3, [r7, #4]
 1411              	.L81:
 453:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1412              		.loc 1 453 0 is_stmt 0 discriminator 1
 1413 0092 7B68     		ldr	r3, [r7, #4]
 1414 0094 072B     		cmp	r3, #7
 1415 0096 B9DD     		ble	.L87
 479:.\main.c      ****     }//end for loop
 480:.\main.c      **** }
 1416              		.loc 1 480 0 is_stmt 1
 1417 0098 0C37     		adds	r7, r7, #12
 1418              		.cfi_def_cfa_offset 4
 1419 009a BD46     		mov	sp, r7
 1420              		.cfi_def_cfa_register 13
 1421              		@ sp needed
 1422 009c 5DF8047B 		ldr	r7, [sp], #4
 1423              		.cfi_restore 7
 1424              		.cfi_def_cfa_offset 0
 1425 00a0 7047     		bx	lr
 1426              	.L89:
 1427 00a2 00BF     		.align	2
 1428              	.L88:
 1429 00a4 00000000 		.word	receivedDataIndex
 1430 00a8 00000000 		.word	diffManReceivedData
 1431 00ac 00000000 		.word	receivedChar
 1432              		.cfi_endproc
 1433              	.LFE74:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 35


 1434              		.size	diffManToASCII, .-diffManToASCII
 1435              		.section	.text.storeChar,"ax",%progbits
 1436              		.align	2
 1437              		.global	storeChar
 1438              		.thumb
 1439              		.thumb_func
 1440              		.type	storeChar, %function
 1441              	storeChar:
 1442              	.LFB75:
 481:.\main.c      **** 
 482:.\main.c      **** //stores char in receive array
 483:.\main.c      **** void storeChar(){
 1443              		.loc 1 483 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 1, uses_anonymous_args = 0
 1447              		@ link register save eliminated.
 1448 0000 80B4     		push	{r7}
 1449              		.cfi_def_cfa_offset 4
 1450              		.cfi_offset 7, -4
 1451 0002 00AF     		add	r7, sp, #0
 1452              		.cfi_def_cfa_register 7
 484:.\main.c      ****     if(currentRXCharPosition > HEADER_POS){
 1453              		.loc 1 484 0
 1454 0004 0C4B     		ldr	r3, .L92
 1455 0006 1B68     		ldr	r3, [r3]
 1456 0008 072B     		cmp	r3, #7
 1457 000a 06DD     		ble	.L91
 485:.\main.c      **** 	    receivedChar &= ASCII_CHAR_MASK;
 1458              		.loc 1 485 0
 1459 000c 0B4B     		ldr	r3, .L92+4
 1460 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1461 0010 03F07F03 		and	r3, r3, #127
 1462 0014 DAB2     		uxtb	r2, r3
 1463 0016 094B     		ldr	r3, .L92+4
 1464 0018 1A70     		strb	r2, [r3]
 1465              	.L91:
 486:.\main.c      ****     }
 487:.\main.c      **** 	rxChar[currentRXCharPosition] = receivedChar;
 1466              		.loc 1 487 0
 1467 001a 074B     		ldr	r3, .L92
 1468 001c 1B68     		ldr	r3, [r3]
 1469 001e 074A     		ldr	r2, .L92+4
 1470 0020 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1471 0022 074A     		ldr	r2, .L92+8
 1472 0024 D154     		strb	r1, [r2, r3]
 488:.\main.c      **** 	currentRXCharPosition++;
 1473              		.loc 1 488 0
 1474 0026 044B     		ldr	r3, .L92
 1475 0028 1B68     		ldr	r3, [r3]
 1476 002a 0133     		adds	r3, r3, #1
 1477 002c 024A     		ldr	r2, .L92
 1478 002e 1360     		str	r3, [r2]
 489:.\main.c      **** }
 1479              		.loc 1 489 0
 1480 0030 BD46     		mov	sp, r7
 1481              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 36


 1482              		@ sp needed
 1483 0032 5DF8047B 		ldr	r7, [sp], #4
 1484              		.cfi_restore 7
 1485              		.cfi_def_cfa_offset 0
 1486 0036 7047     		bx	lr
 1487              	.L93:
 1488              		.align	2
 1489              	.L92:
 1490 0038 00000000 		.word	currentRXCharPosition
 1491 003c 00000000 		.word	receivedChar
 1492 0040 00000000 		.word	rxChar
 1493              		.cfi_endproc
 1494              	.LFE75:
 1495              		.size	storeChar, .-storeChar
 1496              		.section	.text.printChar,"ax",%progbits
 1497              		.align	2
 1498              		.global	printChar
 1499              		.thumb
 1500              		.thumb_func
 1501              		.type	printChar, %function
 1502              	printChar:
 1503              	.LFB76:
 490:.\main.c      **** 
 491:.\main.c      **** //Grabs all chars and prints to LCD
 492:.\main.c      **** void printChar(){
 1504              		.loc 1 492 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 8
 1507              		@ frame_needed = 1, uses_anonymous_args = 0
 1508 0000 80B5     		push	{r7, lr}
 1509              		.cfi_def_cfa_offset 8
 1510              		.cfi_offset 7, -8
 1511              		.cfi_offset 14, -4
 1512 0002 82B0     		sub	sp, sp, #8
 1513              		.cfi_def_cfa_offset 16
 1514 0004 00AF     		add	r7, sp, #0
 1515              		.cfi_def_cfa_register 7
 493:.\main.c      **** 	int i;//char position after array
 494:.\main.c      ****     for(i = 7; i < messageLength; i++){//we are assuming messageLength from the header is valid and
 1516              		.loc 1 494 0
 1517 0006 0723     		movs	r3, #7
 1518 0008 7B60     		str	r3, [r7, #4]
 1519 000a 09E0     		b	.L95
 1520              	.L96:
 495:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1521              		.loc 1 495 0 discriminator 3
 1522 000c 084A     		ldr	r2, .L97
 1523 000e 7B68     		ldr	r3, [r7, #4]
 1524 0010 1344     		add	r3, r3, r2
 1525 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1526 0014 1846     		mov	r0, r3
 1527 0016 FFF7FEFF 		bl	LCD_PutChar
 494:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1528              		.loc 1 494 0 discriminator 3
 1529 001a 7B68     		ldr	r3, [r7, #4]
 1530 001c 0133     		adds	r3, r3, #1
 1531 001e 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 37


 1532              	.L95:
 494:.\main.c      **** 		LCD_PutChar(rxChar[i]); 
 1533              		.loc 1 494 0 is_stmt 0 discriminator 1
 1534 0020 044B     		ldr	r3, .L97+4
 1535 0022 1B68     		ldr	r3, [r3]
 1536 0024 7A68     		ldr	r2, [r7, #4]
 1537 0026 9A42     		cmp	r2, r3
 1538 0028 F0DB     		blt	.L96
 496:.\main.c      **** 		//TODO: implement USB transmit
 497:.\main.c      ****     }
 498:.\main.c      **** }
 1539              		.loc 1 498 0 is_stmt 1
 1540 002a 0837     		adds	r7, r7, #8
 1541              		.cfi_def_cfa_offset 8
 1542 002c BD46     		mov	sp, r7
 1543              		.cfi_def_cfa_register 13
 1544              		@ sp needed
 1545 002e 80BD     		pop	{r7, pc}
 1546              	.L98:
 1547              		.align	2
 1548              	.L97:
 1549 0030 00000000 		.word	rxChar
 1550 0034 00000000 		.word	messageLength
 1551              		.cfi_endproc
 1552              	.LFE76:
 1553              		.size	printChar, .-printChar
 1554              		.section	.text.headerCheck,"ax",%progbits
 1555              		.align	2
 1556              		.global	headerCheck
 1557              		.thumb
 1558              		.thumb_func
 1559              		.type	headerCheck, %function
 1560              	headerCheck:
 1561              	.LFB77:
 499:.\main.c      **** 
 500:.\main.c      **** //checks received header and strips from array if valid
 501:.\main.c      **** //otherwise, disregard contents
 502:.\main.c      **** bool headerCheck(){
 1562              		.loc 1 502 0
 1563              		.cfi_startproc
 1564              		@ args = 0, pretend = 0, frame = 0
 1565              		@ frame_needed = 1, uses_anonymous_args = 0
 1566 0000 80B5     		push	{r7, lr}
 1567              		.cfi_def_cfa_offset 8
 1568              		.cfi_offset 7, -8
 1569              		.cfi_offset 14, -4
 1570 0002 00AF     		add	r7, sp, #0
 1571              		.cfi_def_cfa_register 7
 503:.\main.c      **** 	//nested if loops are probably the easiest way to check
 504:.\main.c      **** 	if(rxChar[0] == 0x71){
 1572              		.loc 1 504 0
 1573 0004 0E4B     		ldr	r3, .L102
 1574 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1575 0008 712B     		cmp	r3, #113
 1576 000a 16D1     		bne	.L100
 505:.\main.c      **** 		//if(rxChar[3] == 0x00 || rxChar[3] == RX_DESTINATION_ADDRESS){
 506:.\main.c      **** 			//this is as valid as we go (CRC is optional)
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 38


 507:.\main.c      **** 			messageLength = rxChar[4];
 1577              		.loc 1 507 0
 1578 000c 0C4B     		ldr	r3, .L102
 1579 000e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1580 0010 1A46     		mov	r2, r3
 1581 0012 0C4B     		ldr	r3, .L102+4
 1582 0014 1A60     		str	r2, [r3]
 508:.\main.c      ****             LCD_PrintNumber(rxChar[4]); 
 1583              		.loc 1 508 0
 1584 0016 0A4B     		ldr	r3, .L102
 1585 0018 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1586 001a 1846     		mov	r0, r3
 1587 001c FFF7FEFF 		bl	LCD_PrintU32Number
 509:.\main.c      **** 			crcState = rxChar[5];
 1588              		.loc 1 509 0
 1589 0020 074B     		ldr	r3, .L102
 1590 0022 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1591 0024 084B     		ldr	r3, .L102+8
 1592 0026 1A70     		strb	r2, [r3]
 510:.\main.c      **** 			headerCRC = rxChar[6];
 1593              		.loc 1 510 0
 1594 0028 054B     		ldr	r3, .L102
 1595 002a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1596 002c 1A46     		mov	r2, r3
 1597 002e 074B     		ldr	r3, .L102+12
 1598 0030 1A60     		str	r2, [r3]
 511:.\main.c      ****             CyDelay(1000);
 1599              		.loc 1 511 0
 1600 0032 4FF47A70 		mov	r0, #1000
 1601 0036 FFF7FEFF 		bl	CyDelay
 1602              	.L100:
 512:.\main.c      **** 			//return true;
 513:.\main.c      **** 		//}
 514:.\main.c      **** 	}
 515:.\main.c      **** 	return false;
 1603              		.loc 1 515 0
 1604 003a 0023     		movs	r3, #0
 516:.\main.c      **** }
 1605              		.loc 1 516 0
 1606 003c 1846     		mov	r0, r3
 1607 003e 80BD     		pop	{r7, pc}
 1608              	.L103:
 1609              		.align	2
 1610              	.L102:
 1611 0040 00000000 		.word	rxChar
 1612 0044 00000000 		.word	messageLength
 1613 0048 00000000 		.word	crcState
 1614 004c 00000000 		.word	headerCRC
 1615              		.cfi_endproc
 1616              	.LFE77:
 1617              		.size	headerCheck, .-headerCheck
 1618              		.text
 1619              	.Letext0:
 1620              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1621              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1622              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1623              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 39


 1624              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1625              		.section	.debug_info,"",%progbits
 1626              	.Ldebug_info0:
 1627 0000 20050000 		.4byte	0x520
 1628 0004 0400     		.2byte	0x4
 1629 0006 00000000 		.4byte	.Ldebug_abbrev0
 1630 000a 04       		.byte	0x4
 1631 000b 01       		.uleb128 0x1
 1632 000c 51010000 		.4byte	.LASF72
 1633 0010 01       		.byte	0x1
 1634 0011 AB030000 		.4byte	.LASF73
 1635 0015 46000000 		.4byte	.LASF74
 1636 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1637 001d 00000000 		.4byte	0
 1638 0021 00000000 		.4byte	.Ldebug_line0
 1639 0025 02       		.uleb128 0x2
 1640 0026 01       		.byte	0x1
 1641 0027 06       		.byte	0x6
 1642 0028 61020000 		.4byte	.LASF0
 1643 002c 02       		.uleb128 0x2
 1644 002d 01       		.byte	0x1
 1645 002e 08       		.byte	0x8
 1646 002f 0F020000 		.4byte	.LASF1
 1647 0033 02       		.uleb128 0x2
 1648 0034 02       		.byte	0x2
 1649 0035 05       		.byte	0x5
 1650 0036 C0000000 		.4byte	.LASF2
 1651 003a 02       		.uleb128 0x2
 1652 003b 02       		.byte	0x2
 1653 003c 07       		.byte	0x7
 1654 003d 08030000 		.4byte	.LASF3
 1655 0041 03       		.uleb128 0x3
 1656 0042 B4030000 		.4byte	.LASF9
 1657 0046 02       		.byte	0x2
 1658 0047 3F       		.byte	0x3f
 1659 0048 4C000000 		.4byte	0x4c
 1660 004c 02       		.uleb128 0x2
 1661 004d 04       		.byte	0x4
 1662 004e 05       		.byte	0x5
 1663 004f E8020000 		.4byte	.LASF4
 1664 0053 02       		.uleb128 0x2
 1665 0054 04       		.byte	0x4
 1666 0055 07       		.byte	0x7
 1667 0056 AF020000 		.4byte	.LASF5
 1668 005a 02       		.uleb128 0x2
 1669 005b 08       		.byte	0x8
 1670 005c 05       		.byte	0x5
 1671 005d 15010000 		.4byte	.LASF6
 1672 0061 02       		.uleb128 0x2
 1673 0062 08       		.byte	0x8
 1674 0063 07       		.byte	0x7
 1675 0064 23010000 		.4byte	.LASF7
 1676 0068 04       		.uleb128 0x4
 1677 0069 04       		.byte	0x4
 1678 006a 05       		.byte	0x5
 1679 006b 696E7400 		.ascii	"int\000"
 1680 006f 02       		.uleb128 0x2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 40


 1681 0070 04       		.byte	0x4
 1682 0071 07       		.byte	0x7
 1683 0072 90020000 		.4byte	.LASF8
 1684 0076 03       		.uleb128 0x3
 1685 0077 00030000 		.4byte	.LASF10
 1686 007b 03       		.byte	0x3
 1687 007c 2C       		.byte	0x2c
 1688 007d 41000000 		.4byte	0x41
 1689 0081 03       		.uleb128 0x3
 1690 0082 EE000000 		.4byte	.LASF11
 1691 0086 04       		.byte	0x4
 1692 0087 C2       		.byte	0xc2
 1693 0088 2C000000 		.4byte	0x2c
 1694 008c 03       		.uleb128 0x3
 1695 008d DA000000 		.4byte	.LASF12
 1696 0091 04       		.byte	0x4
 1697 0092 C3       		.byte	0xc3
 1698 0093 3A000000 		.4byte	0x3a
 1699 0097 02       		.uleb128 0x2
 1700 0098 04       		.byte	0x4
 1701 0099 04       		.byte	0x4
 1702 009a 0F010000 		.4byte	.LASF13
 1703 009e 02       		.uleb128 0x2
 1704 009f 08       		.byte	0x8
 1705 00a0 04       		.byte	0x4
 1706 00a1 4D030000 		.4byte	.LASF14
 1707 00a5 02       		.uleb128 0x2
 1708 00a6 01       		.byte	0x1
 1709 00a7 08       		.byte	0x8
 1710 00a8 D6020000 		.4byte	.LASF15
 1711 00ac 05       		.uleb128 0x5
 1712 00ad 40030000 		.4byte	.LASF16
 1713 00b1 04       		.byte	0x4
 1714 00b2 6C01     		.2byte	0x16c
 1715 00b4 B8000000 		.4byte	0xb8
 1716 00b8 06       		.uleb128 0x6
 1717 00b9 81000000 		.4byte	0x81
 1718 00bd 02       		.uleb128 0x2
 1719 00be 04       		.byte	0x4
 1720 00bf 07       		.byte	0x7
 1721 00c0 3D000000 		.4byte	.LASF17
 1722 00c4 07       		.uleb128 0x7
 1723 00c5 04       		.byte	0x4
 1724 00c6 A5000000 		.4byte	0xa5
 1725 00ca 03       		.uleb128 0x3
 1726 00cb 42020000 		.4byte	.LASF18
 1727 00cf 05       		.byte	0x5
 1728 00d0 7A       		.byte	0x7a
 1729 00d1 4C000000 		.4byte	0x4c
 1730 00d5 08       		.uleb128 0x8
 1731 00d6 27000000 		.4byte	.LASF22
 1732 00da 01       		.byte	0x1
 1733 00db 01       		.byte	0x1
 1734 00dc 24       		.byte	0x24
 1735 00dd F4000000 		.4byte	0xf4
 1736 00e1 09       		.uleb128 0x9
 1737 00e2 7C020000 		.4byte	.LASF19
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 41


 1738 00e6 00       		.sleb128 0
 1739 00e7 09       		.uleb128 0x9
 1740 00e8 29030000 		.4byte	.LASF20
 1741 00ec 01       		.sleb128 1
 1742 00ed 09       		.uleb128 0x9
 1743 00ee D0000000 		.4byte	.LASF21
 1744 00f2 02       		.sleb128 2
 1745 00f3 00       		.byte	0
 1746 00f4 0A       		.uleb128 0xa
 1747 00f5 63726300 		.ascii	"crc\000"
 1748 00f9 01       		.byte	0x1
 1749 00fa 01       		.byte	0x1
 1750 00fb 25       		.byte	0x25
 1751 00fc 19010000 		.4byte	0x119
 1752 0100 09       		.uleb128 0x9
 1753 0101 BB000000 		.4byte	.LASF23
 1754 0105 00       		.sleb128 0
 1755 0106 09       		.uleb128 0x9
 1756 0107 00000000 		.4byte	.LASF24
 1757 010b 01       		.sleb128 1
 1758 010c 09       		.uleb128 0x9
 1759 010d 45030000 		.4byte	.LASF25
 1760 0111 02       		.sleb128 2
 1761 0112 09       		.uleb128 0x9
 1762 0113 C1020000 		.4byte	.LASF26
 1763 0117 03       		.sleb128 3
 1764 0118 00       		.byte	0
 1765 0119 0B       		.uleb128 0xb
 1766 011a 14000000 		.4byte	.LASF27
 1767 011e 01       		.byte	0x1
 1768 011f 29       		.byte	0x29
 1769 0120 00000000 		.4byte	.LFB63
 1770 0124 28000000 		.4byte	.LFE63-.LFB63
 1771 0128 01       		.uleb128 0x1
 1772 0129 9C       		.byte	0x9c
 1773 012a 0B       		.uleb128 0xb
 1774 012b FF000000 		.4byte	.LASF28
 1775 012f 01       		.byte	0x1
 1776 0130 33       		.byte	0x33
 1777 0131 00000000 		.4byte	.LFB64
 1778 0135 58000000 		.4byte	.LFE64-.LFB64
 1779 0139 01       		.uleb128 0x1
 1780 013a 9C       		.byte	0x9c
 1781 013b 0B       		.uleb128 0xb
 1782 013c 01040000 		.4byte	.LASF29
 1783 0140 01       		.byte	0x1
 1784 0141 44       		.byte	0x44
 1785 0142 00000000 		.4byte	.LFB65
 1786 0146 1C000000 		.4byte	.LFE65-.LFB65
 1787 014a 01       		.uleb128 0x1
 1788 014b 9C       		.byte	0x9c
 1789 014c 0C       		.uleb128 0xc
 1790 014d 89030000 		.4byte	.LASF30
 1791 0151 01       		.byte	0x1
 1792 0152 4B       		.byte	0x4b
 1793 0153 00000000 		.4byte	.LFB66
 1794 0157 38000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 42


 1795 015b 01       		.uleb128 0x1
 1796 015c 9C       		.byte	0x9c
 1797 015d 0D       		.uleb128 0xd
 1798 015e 97000000 		.4byte	.LASF34
 1799 0162 01       		.byte	0x1
 1800 0163 52       		.byte	0x52
 1801 0164 68000000 		.4byte	0x68
 1802 0168 00000000 		.4byte	.LFB67
 1803 016c 7C020000 		.4byte	.LFE67-.LFB67
 1804 0170 01       		.uleb128 0x1
 1805 0171 9C       		.byte	0x9c
 1806 0172 B0010000 		.4byte	0x1b0
 1807 0176 0E       		.uleb128 0xe
 1808 0177 727800   		.ascii	"rx\000"
 1809 017a 01       		.byte	0x1
 1810 017b 54       		.byte	0x54
 1811 017c A5000000 		.4byte	0xa5
 1812 0180 02       		.uleb128 0x2
 1813 0181 91       		.byte	0x91
 1814 0182 76       		.sleb128 -10
 1815 0183 0F       		.uleb128 0xf
 1816 0184 F4000000 		.4byte	.LASF31
 1817 0188 01       		.byte	0x1
 1818 0189 55       		.byte	0x55
 1819 018a B0010000 		.4byte	0x1b0
 1820 018e 03       		.uleb128 0x3
 1821 018f 91       		.byte	0x91
 1822 0190 887F     		.sleb128 -120
 1823 0192 0F       		.uleb128 0xf
 1824 0193 F1020000 		.4byte	.LASF32
 1825 0197 01       		.byte	0x1
 1826 0198 56       		.byte	0x56
 1827 0199 81000000 		.4byte	0x81
 1828 019d 02       		.uleb128 0x2
 1829 019e 91       		.byte	0x91
 1830 019f 77       		.sleb128 -9
 1831 01a0 0F       		.uleb128 0xf
 1832 01a1 1B030000 		.4byte	.LASF33
 1833 01a5 01       		.byte	0x1
 1834 01a6 63       		.byte	0x63
 1835 01a7 CA000000 		.4byte	0xca
 1836 01ab 03       		.uleb128 0x3
 1837 01ac 91       		.byte	0x91
 1838 01ad 847F     		.sleb128 -124
 1839 01af 00       		.byte	0
 1840 01b0 10       		.uleb128 0x10
 1841 01b1 A5000000 		.4byte	0xa5
 1842 01b5 C0010000 		.4byte	0x1c0
 1843 01b9 11       		.uleb128 0x11
 1844 01ba BD000000 		.4byte	0xbd
 1845 01be 6B       		.byte	0x6b
 1846 01bf 00       		.byte	0
 1847 01c0 12       		.uleb128 0x12
 1848 01c1 49020000 		.4byte	.LASF41
 1849 01c5 01       		.byte	0x1
 1850 01c6 0A01     		.2byte	0x10a
 1851 01c8 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 43


 1852 01cc 48000000 		.4byte	.LFE68-.LFB68
 1853 01d0 01       		.uleb128 0x1
 1854 01d1 9C       		.byte	0x9c
 1855 01d2 13       		.uleb128 0x13
 1856 01d3 FF010000 		.4byte	.LASF35
 1857 01d7 01       		.byte	0x1
 1858 01d8 1601     		.2byte	0x116
 1859 01da 00000000 		.4byte	.LFB69
 1860 01de 38000000 		.4byte	.LFE69-.LFB69
 1861 01e2 01       		.uleb128 0x1
 1862 01e3 9C       		.byte	0x9c
 1863 01e4 14020000 		.4byte	0x214
 1864 01e8 14       		.uleb128 0x14
 1865 01e9 F4000000 		.4byte	.LASF31
 1866 01ed 01       		.byte	0x1
 1867 01ee 1601     		.2byte	0x116
 1868 01f0 C4000000 		.4byte	0xc4
 1869 01f4 02       		.uleb128 0x2
 1870 01f5 91       		.byte	0x91
 1871 01f6 6C       		.sleb128 -20
 1872 01f7 14       		.uleb128 0x14
 1873 01f8 F1020000 		.4byte	.LASF32
 1874 01fc 01       		.byte	0x1
 1875 01fd 1601     		.2byte	0x116
 1876 01ff 81000000 		.4byte	0x81
 1877 0203 02       		.uleb128 0x2
 1878 0204 91       		.byte	0x91
 1879 0205 6B       		.sleb128 -21
 1880 0206 15       		.uleb128 0x15
 1881 0207 6900     		.ascii	"i\000"
 1882 0209 01       		.byte	0x1
 1883 020a 1801     		.2byte	0x118
 1884 020c 6F000000 		.4byte	0x6f
 1885 0210 02       		.uleb128 0x2
 1886 0211 91       		.byte	0x91
 1887 0212 74       		.sleb128 -12
 1888 0213 00       		.byte	0
 1889 0214 16       		.uleb128 0x16
 1890 0215 6D020000 		.4byte	.LASF36
 1891 0219 01       		.byte	0x1
 1892 021a 2201     		.2byte	0x122
 1893 021c 00000000 		.4byte	.LFB70
 1894 0220 C4010000 		.4byte	.LFE70-.LFB70
 1895 0224 01       		.uleb128 0x1
 1896 0225 9C       		.byte	0x9c
 1897 0226 74020000 		.4byte	0x274
 1898 022a 14       		.uleb128 0x14
 1899 022b CC020000 		.4byte	.LASF37
 1900 022f 01       		.byte	0x1
 1901 0230 2201     		.2byte	0x122
 1902 0232 A5000000 		.4byte	0xa5
 1903 0236 03       		.uleb128 0x3
 1904 0237 91       		.byte	0x91
 1905 0238 977F     		.sleb128 -105
 1906 023a 17       		.uleb128 0x17
 1907 023b 1B040000 		.4byte	.LASF38
 1908 023f 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 44


 1909 0240 2401     		.2byte	0x124
 1910 0242 81000000 		.4byte	0x81
 1911 0246 02       		.uleb128 0x2
 1912 0247 91       		.byte	0x91
 1913 0248 77       		.sleb128 -9
 1914 0249 17       		.uleb128 0x17
 1915 024a 99030000 		.4byte	.LASF39
 1916 024e 01       		.byte	0x1
 1917 024f 3501     		.2byte	0x135
 1918 0251 74020000 		.4byte	0x274
 1919 0255 03       		.uleb128 0x3
 1920 0256 91       		.byte	0x91
 1921 0257 9C7F     		.sleb128 -100
 1922 0259 15       		.uleb128 0x15
 1923 025a 6900     		.ascii	"i\000"
 1924 025c 01       		.byte	0x1
 1925 025d 3601     		.2byte	0x136
 1926 025f 68000000 		.4byte	0x68
 1927 0263 02       		.uleb128 0x2
 1928 0264 91       		.byte	0x91
 1929 0265 70       		.sleb128 -16
 1930 0266 15       		.uleb128 0x15
 1931 0267 6A00     		.ascii	"j\000"
 1932 0269 01       		.byte	0x1
 1933 026a 3F01     		.2byte	0x13f
 1934 026c 68000000 		.4byte	0x68
 1935 0270 02       		.uleb128 0x2
 1936 0271 91       		.byte	0x91
 1937 0272 6C       		.sleb128 -20
 1938 0273 00       		.byte	0
 1939 0274 10       		.uleb128 0x10
 1940 0275 6F000000 		.4byte	0x6f
 1941 0279 84020000 		.4byte	0x284
 1942 027d 11       		.uleb128 0x11
 1943 027e BD000000 		.4byte	0xbd
 1944 0282 13       		.byte	0x13
 1945 0283 00       		.byte	0
 1946 0284 18       		.uleb128 0x18
 1947 0285 07000000 		.4byte	.LASF46
 1948 0289 01       		.byte	0x1
 1949 028a 7201     		.2byte	0x172
 1950 028c 00000000 		.4byte	.LFB71
 1951 0290 D8000000 		.4byte	.LFE71-.LFB71
 1952 0294 01       		.uleb128 0x1
 1953 0295 9C       		.byte	0x9c
 1954 0296 C1020000 		.4byte	0x2c1
 1955 029a 15       		.uleb128 0x15
 1956 029b 6900     		.ascii	"i\000"
 1957 029d 01       		.byte	0x1
 1958 029e 7301     		.2byte	0x173
 1959 02a0 68000000 		.4byte	0x68
 1960 02a4 02       		.uleb128 0x2
 1961 02a5 91       		.byte	0x91
 1962 02a6 74       		.sleb128 -12
 1963 02a7 19       		.uleb128 0x19
 1964 02a8 1C000000 		.4byte	.LBB2
 1965 02ac 50000000 		.4byte	.LBE2-.LBB2
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 45


 1966 02b0 17       		.uleb128 0x17
 1967 02b1 CA000000 		.4byte	.LASF40
 1968 02b5 01       		.byte	0x1
 1969 02b6 7A01     		.2byte	0x17a
 1970 02b8 68000000 		.4byte	0x68
 1971 02bc 02       		.uleb128 0x2
 1972 02bd 91       		.byte	0x91
 1973 02be 70       		.sleb128 -16
 1974 02bf 00       		.byte	0
 1975 02c0 00       		.byte	0
 1976 02c1 1A       		.uleb128 0x1a
 1977 02c2 DF010000 		.4byte	.LASF42
 1978 02c6 01       		.byte	0x1
 1979 02c7 8D01     		.2byte	0x18d
 1980 02c9 00000000 		.4byte	.LFB72
 1981 02cd 58000000 		.4byte	.LFE72-.LFB72
 1982 02d1 01       		.uleb128 0x1
 1983 02d2 9C       		.byte	0x9c
 1984 02d3 1B       		.uleb128 0x1b
 1985 02d4 2D000000 		.4byte	.LASF43
 1986 02d8 01       		.byte	0x1
 1987 02d9 AF01     		.2byte	0x1af
 1988 02db 68000000 		.4byte	0x68
 1989 02df 00000000 		.4byte	.LFB73
 1990 02e3 36000000 		.4byte	.LFE73-.LFB73
 1991 02e7 01       		.uleb128 0x1
 1992 02e8 9C       		.byte	0x9c
 1993 02e9 19030000 		.4byte	0x319
 1994 02ed 17       		.uleb128 0x17
 1995 02ee C6020000 		.4byte	.LASF44
 1996 02f2 01       		.byte	0x1
 1997 02f3 B101     		.2byte	0x1b1
 1998 02f5 19030000 		.4byte	0x319
 1999 02f9 02       		.uleb128 0x2
 2000 02fa 91       		.byte	0x91
 2001 02fb 74       		.sleb128 -12
 2002 02fc 17       		.uleb128 0x17
 2003 02fd CB030000 		.4byte	.LASF45
 2004 0301 01       		.byte	0x1
 2005 0302 B201     		.2byte	0x1b2
 2006 0304 19030000 		.4byte	0x319
 2007 0308 02       		.uleb128 0x2
 2008 0309 91       		.byte	0x91
 2009 030a 70       		.sleb128 -16
 2010 030b 15       		.uleb128 0x15
 2011 030c 6E00     		.ascii	"n\000"
 2012 030e 01       		.byte	0x1
 2013 030f B401     		.2byte	0x1b4
 2014 0311 68000000 		.4byte	0x68
 2015 0315 02       		.uleb128 0x2
 2016 0316 91       		.byte	0x91
 2017 0317 6C       		.sleb128 -20
 2018 0318 00       		.byte	0
 2019 0319 1C       		.uleb128 0x1c
 2020 031a 68000000 		.4byte	0x68
 2021 031e 1D       		.uleb128 0x1d
 2022 031f 81020000 		.4byte	.LASF47
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 46


 2023 0323 01       		.byte	0x1
 2024 0324 C201     		.2byte	0x1c2
 2025 0326 00000000 		.4byte	.LFB74
 2026 032a B0000000 		.4byte	.LFE74-.LFB74
 2027 032e 01       		.uleb128 0x1
 2028 032f 9C       		.byte	0x9c
 2029 0330 5B030000 		.4byte	0x35b
 2030 0334 15       		.uleb128 0x15
 2031 0335 6900     		.ascii	"i\000"
 2032 0337 01       		.byte	0x1
 2033 0338 C401     		.2byte	0x1c4
 2034 033a 68000000 		.4byte	0x68
 2035 033e 02       		.uleb128 0x2
 2036 033f 91       		.byte	0x91
 2037 0340 74       		.sleb128 -12
 2038 0341 19       		.uleb128 0x19
 2039 0342 0C000000 		.4byte	.LBB3
 2040 0346 80000000 		.4byte	.LBE3-.LBB3
 2041 034a 17       		.uleb128 0x17
 2042 034b 1B040000 		.4byte	.LASF38
 2043 034f 01       		.byte	0x1
 2044 0350 C601     		.2byte	0x1c6
 2045 0352 81000000 		.4byte	0x81
 2046 0356 02       		.uleb128 0x2
 2047 0357 91       		.byte	0x91
 2048 0358 73       		.sleb128 -13
 2049 0359 00       		.byte	0
 2050 035a 00       		.byte	0
 2051 035b 12       		.uleb128 0x12
 2052 035c A8000000 		.4byte	.LASF48
 2053 0360 01       		.byte	0x1
 2054 0361 E301     		.2byte	0x1e3
 2055 0363 00000000 		.4byte	.LFB75
 2056 0367 44000000 		.4byte	.LFE75-.LFB75
 2057 036b 01       		.uleb128 0x1
 2058 036c 9C       		.byte	0x9c
 2059 036d 18       		.uleb128 0x18
 2060 036e F5010000 		.4byte	.LASF49
 2061 0372 01       		.byte	0x1
 2062 0373 EC01     		.2byte	0x1ec
 2063 0375 00000000 		.4byte	.LFB76
 2064 0379 38000000 		.4byte	.LFE76-.LFB76
 2065 037d 01       		.uleb128 0x1
 2066 037e 9C       		.byte	0x9c
 2067 037f 91030000 		.4byte	0x391
 2068 0383 15       		.uleb128 0x15
 2069 0384 6900     		.ascii	"i\000"
 2070 0386 01       		.byte	0x1
 2071 0387 ED01     		.2byte	0x1ed
 2072 0389 68000000 		.4byte	0x68
 2073 038d 02       		.uleb128 0x2
 2074 038e 91       		.byte	0x91
 2075 038f 74       		.sleb128 -12
 2076 0390 00       		.byte	0
 2077 0391 1E       		.uleb128 0x1e
 2078 0392 9C000000 		.4byte	.LASF50
 2079 0396 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 47


 2080 0397 F601     		.2byte	0x1f6
 2081 0399 A7030000 		.4byte	0x3a7
 2082 039d 00000000 		.4byte	.LFB77
 2083 03a1 50000000 		.4byte	.LFE77-.LFB77
 2084 03a5 01       		.uleb128 0x1
 2085 03a6 9C       		.byte	0x9c
 2086 03a7 02       		.uleb128 0x2
 2087 03a8 01       		.byte	0x1
 2088 03a9 02       		.byte	0x2
 2089 03aa 23030000 		.4byte	.LASF51
 2090 03ae 1F       		.uleb128 0x1f
 2091 03af 0E040000 		.4byte	.LASF52
 2092 03b3 06       		.byte	0x6
 2093 03b4 2A06     		.2byte	0x62a
 2094 03b6 BA030000 		.4byte	0x3ba
 2095 03ba 06       		.uleb128 0x6
 2096 03bb 76000000 		.4byte	0x76
 2097 03bf 10       		.uleb128 0x10
 2098 03c0 68000000 		.4byte	0x68
 2099 03c4 D0030000 		.4byte	0x3d0
 2100 03c8 20       		.uleb128 0x20
 2101 03c9 BD000000 		.4byte	0xbd
 2102 03cd 5F03     		.2byte	0x35f
 2103 03cf 00       		.byte	0
 2104 03d0 21       		.uleb128 0x21
 2105 03d1 84000000 		.4byte	.LASF53
 2106 03d5 01       		.byte	0x1
 2107 03d6 1E       		.byte	0x1e
 2108 03d7 BF030000 		.4byte	0x3bf
 2109 03db 05       		.uleb128 0x5
 2110 03dc 03       		.byte	0x3
 2111 03dd 00000000 		.4byte	diffManEncodedData
 2112 03e1 10       		.uleb128 0x10
 2113 03e2 81000000 		.4byte	0x81
 2114 03e6 F1030000 		.4byte	0x3f1
 2115 03ea 11       		.uleb128 0x11
 2116 03eb BD000000 		.4byte	0xbd
 2117 03ef 6B       		.byte	0x6b
 2118 03f0 00       		.byte	0
 2119 03f1 21       		.uleb128 0x21
 2120 03f2 6E030000 		.4byte	.LASF54
 2121 03f6 01       		.byte	0x1
 2122 03f7 1F       		.byte	0x1f
 2123 03f8 E1030000 		.4byte	0x3e1
 2124 03fc 05       		.uleb128 0x5
 2125 03fd 03       		.byte	0x3
 2126 03fe 00000000 		.4byte	diffManReceivedData
 2127 0402 21       		.uleb128 0x21
 2128 0403 82030000 		.4byte	.LASF55
 2129 0407 01       		.byte	0x1
 2130 0408 20       		.byte	0x20
 2131 0409 B0010000 		.4byte	0x1b0
 2132 040d 05       		.uleb128 0x5
 2133 040e 03       		.byte	0x3
 2134 040f 00000000 		.4byte	rxChar
 2135 0413 21       		.uleb128 0x21
 2136 0414 9D020000 		.4byte	.LASF56
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 48


 2137 0418 01       		.byte	0x1
 2138 0419 21       		.byte	0x21
 2139 041a 68000000 		.4byte	0x68
 2140 041e 05       		.uleb128 0x5
 2141 041f 03       		.byte	0x3
 2142 0420 00000000 		.4byte	receivedDataIndex
 2143 0424 21       		.uleb128 0x21
 2144 0425 2E030000 		.4byte	.LASF57
 2145 0429 01       		.byte	0x1
 2146 042a 21       		.byte	0x21
 2147 042b 68000000 		.4byte	0x68
 2148 042f 05       		.uleb128 0x5
 2149 0430 03       		.byte	0x3
 2150 0431 00000000 		.4byte	receivedDataCount
 2151 0435 21       		.uleb128 0x21
 2152 0436 BE030000 		.4byte	.LASF58
 2153 043a 01       		.byte	0x1
 2154 043b 22       		.byte	0x22
 2155 043c 68000000 		.4byte	0x68
 2156 0440 05       		.uleb128 0x5
 2157 0441 03       		.byte	0x3
 2158 0442 00000000 		.4byte	halfBitIndex
 2159 0446 21       		.uleb128 0x21
 2160 0447 1D020000 		.4byte	.LASF59
 2161 044b 01       		.byte	0x1
 2162 044c 22       		.byte	0x22
 2163 044d 68000000 		.4byte	0x68
 2164 0451 05       		.uleb128 0x5
 2165 0452 03       		.byte	0x3
 2166 0453 00000000 		.4byte	currentDataPos
 2167 0457 21       		.uleb128 0x21
 2168 0458 2C020000 		.4byte	.LASF60
 2169 045c 01       		.byte	0x1
 2170 045d 22       		.byte	0x22
 2171 045e 68000000 		.4byte	0x68
 2172 0462 05       		.uleb128 0x5
 2173 0463 03       		.byte	0x3
 2174 0464 00000000 		.4byte	currentRXCharPosition
 2175 0468 21       		.uleb128 0x21
 2176 0469 DB030000 		.4byte	.LASF61
 2177 046d 01       		.byte	0x1
 2178 046e 22       		.byte	0x22
 2179 046f 68000000 		.4byte	0x68
 2180 0473 05       		.uleb128 0x5
 2181 0474 03       		.byte	0x3
 2182 0475 00000000 		.4byte	lengthOfData
 2183 0479 21       		.uleb128 0x21
 2184 047a 60030000 		.4byte	.LASF62
 2185 047e 01       		.byte	0x1
 2186 047f 22       		.byte	0x22
 2187 0480 68000000 		.4byte	0x68
 2188 0484 05       		.uleb128 0x5
 2189 0485 03       		.byte	0x3
 2190 0486 00000000 		.4byte	messageLength
 2191 048a 21       		.uleb128 0x21
 2192 048b D1030000 		.4byte	.LASF63
 2193 048f 01       		.byte	0x1
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 49


 2194 0490 22       		.byte	0x22
 2195 0491 68000000 		.4byte	0x68
 2196 0495 05       		.uleb128 0x5
 2197 0496 03       		.byte	0x3
 2198 0497 00000000 		.4byte	headerCRC
 2199 049b 21       		.uleb128 0x21
 2200 049c 3A010000 		.4byte	.LASF64
 2201 04a0 01       		.byte	0x1
 2202 04a1 22       		.byte	0x22
 2203 04a2 68000000 		.4byte	0x68
 2204 04a6 05       		.uleb128 0x5
 2205 04a7 03       		.byte	0x3
 2206 04a8 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2207 04ac 21       		.uleb128 0x21
 2208 04ad 2B040000 		.4byte	.LASF65
 2209 04b1 01       		.byte	0x1
 2210 04b2 23       		.byte	0x23
 2211 04b3 A7030000 		.4byte	0x3a7
 2212 04b7 05       		.uleb128 0x5
 2213 04b8 03       		.byte	0x3
 2214 04b9 00000000 		.4byte	timerExpired
 2215 04bd 21       		.uleb128 0x21
 2216 04be E8030000 		.4byte	.LASF66
 2217 04c2 01       		.byte	0x1
 2218 04c3 23       		.byte	0x23
 2219 04c4 A7030000 		.4byte	0x3a7
 2220 04c8 05       		.uleb128 0x5
 2221 04c9 03       		.byte	0x3
 2222 04ca 00000000 		.4byte	dataTransmissionComplete
 2223 04ce 21       		.uleb128 0x21
 2224 04cf 38040000 		.4byte	.LASF67
 2225 04d3 01       		.byte	0x1
 2226 04d4 23       		.byte	0x23
 2227 04d5 A7030000 		.4byte	0x3a7
 2228 04d9 05       		.uleb128 0x5
 2229 04da 03       		.byte	0x3
 2230 04db 00000000 		.4byte	powerOnEdge
 2231 04df 21       		.uleb128 0x21
 2232 04e0 54030000 		.4byte	.LASF68
 2233 04e4 01       		.byte	0x1
 2234 04e5 23       		.byte	0x23
 2235 04e6 A7030000 		.4byte	0x3a7
 2236 04ea 05       		.uleb128 0x5
 2237 04eb 03       		.byte	0x3
 2238 04ec 00000000 		.4byte	headerValid
 2239 04f0 21       		.uleb128 0x21
 2240 04f1 E1000000 		.4byte	.LASF69
 2241 04f5 01       		.byte	0x1
 2242 04f6 24       		.byte	0x24
 2243 04f7 D5000000 		.4byte	0xd5
 2244 04fb 05       		.uleb128 0x5
 2245 04fc 03       		.byte	0x3
 2246 04fd 00000000 		.4byte	networkState
 2247 0501 21       		.uleb128 0x21
 2248 0502 B2000000 		.4byte	.LASF70
 2249 0506 01       		.byte	0x1
 2250 0507 25       		.byte	0x25
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 50


 2251 0508 F4000000 		.4byte	0xf4
 2252 050c 05       		.uleb128 0x5
 2253 050d 03       		.byte	0x3
 2254 050e 00000000 		.4byte	crcState
 2255 0512 21       		.uleb128 0x21
 2256 0513 DB020000 		.4byte	.LASF71
 2257 0517 01       		.byte	0x1
 2258 0518 27       		.byte	0x27
 2259 0519 A5000000 		.4byte	0xa5
 2260 051d 05       		.uleb128 0x5
 2261 051e 03       		.byte	0x3
 2262 051f 00000000 		.4byte	receivedChar
 2263 0523 00       		.byte	0
 2264              		.section	.debug_abbrev,"",%progbits
 2265              	.Ldebug_abbrev0:
 2266 0000 01       		.uleb128 0x1
 2267 0001 11       		.uleb128 0x11
 2268 0002 01       		.byte	0x1
 2269 0003 25       		.uleb128 0x25
 2270 0004 0E       		.uleb128 0xe
 2271 0005 13       		.uleb128 0x13
 2272 0006 0B       		.uleb128 0xb
 2273 0007 03       		.uleb128 0x3
 2274 0008 0E       		.uleb128 0xe
 2275 0009 1B       		.uleb128 0x1b
 2276 000a 0E       		.uleb128 0xe
 2277 000b 55       		.uleb128 0x55
 2278 000c 17       		.uleb128 0x17
 2279 000d 11       		.uleb128 0x11
 2280 000e 01       		.uleb128 0x1
 2281 000f 10       		.uleb128 0x10
 2282 0010 17       		.uleb128 0x17
 2283 0011 00       		.byte	0
 2284 0012 00       		.byte	0
 2285 0013 02       		.uleb128 0x2
 2286 0014 24       		.uleb128 0x24
 2287 0015 00       		.byte	0
 2288 0016 0B       		.uleb128 0xb
 2289 0017 0B       		.uleb128 0xb
 2290 0018 3E       		.uleb128 0x3e
 2291 0019 0B       		.uleb128 0xb
 2292 001a 03       		.uleb128 0x3
 2293 001b 0E       		.uleb128 0xe
 2294 001c 00       		.byte	0
 2295 001d 00       		.byte	0
 2296 001e 03       		.uleb128 0x3
 2297 001f 16       		.uleb128 0x16
 2298 0020 00       		.byte	0
 2299 0021 03       		.uleb128 0x3
 2300 0022 0E       		.uleb128 0xe
 2301 0023 3A       		.uleb128 0x3a
 2302 0024 0B       		.uleb128 0xb
 2303 0025 3B       		.uleb128 0x3b
 2304 0026 0B       		.uleb128 0xb
 2305 0027 49       		.uleb128 0x49
 2306 0028 13       		.uleb128 0x13
 2307 0029 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 51


 2308 002a 00       		.byte	0
 2309 002b 04       		.uleb128 0x4
 2310 002c 24       		.uleb128 0x24
 2311 002d 00       		.byte	0
 2312 002e 0B       		.uleb128 0xb
 2313 002f 0B       		.uleb128 0xb
 2314 0030 3E       		.uleb128 0x3e
 2315 0031 0B       		.uleb128 0xb
 2316 0032 03       		.uleb128 0x3
 2317 0033 08       		.uleb128 0x8
 2318 0034 00       		.byte	0
 2319 0035 00       		.byte	0
 2320 0036 05       		.uleb128 0x5
 2321 0037 16       		.uleb128 0x16
 2322 0038 00       		.byte	0
 2323 0039 03       		.uleb128 0x3
 2324 003a 0E       		.uleb128 0xe
 2325 003b 3A       		.uleb128 0x3a
 2326 003c 0B       		.uleb128 0xb
 2327 003d 3B       		.uleb128 0x3b
 2328 003e 05       		.uleb128 0x5
 2329 003f 49       		.uleb128 0x49
 2330 0040 13       		.uleb128 0x13
 2331 0041 00       		.byte	0
 2332 0042 00       		.byte	0
 2333 0043 06       		.uleb128 0x6
 2334 0044 35       		.uleb128 0x35
 2335 0045 00       		.byte	0
 2336 0046 49       		.uleb128 0x49
 2337 0047 13       		.uleb128 0x13
 2338 0048 00       		.byte	0
 2339 0049 00       		.byte	0
 2340 004a 07       		.uleb128 0x7
 2341 004b 0F       		.uleb128 0xf
 2342 004c 00       		.byte	0
 2343 004d 0B       		.uleb128 0xb
 2344 004e 0B       		.uleb128 0xb
 2345 004f 49       		.uleb128 0x49
 2346 0050 13       		.uleb128 0x13
 2347 0051 00       		.byte	0
 2348 0052 00       		.byte	0
 2349 0053 08       		.uleb128 0x8
 2350 0054 04       		.uleb128 0x4
 2351 0055 01       		.byte	0x1
 2352 0056 03       		.uleb128 0x3
 2353 0057 0E       		.uleb128 0xe
 2354 0058 0B       		.uleb128 0xb
 2355 0059 0B       		.uleb128 0xb
 2356 005a 3A       		.uleb128 0x3a
 2357 005b 0B       		.uleb128 0xb
 2358 005c 3B       		.uleb128 0x3b
 2359 005d 0B       		.uleb128 0xb
 2360 005e 01       		.uleb128 0x1
 2361 005f 13       		.uleb128 0x13
 2362 0060 00       		.byte	0
 2363 0061 00       		.byte	0
 2364 0062 09       		.uleb128 0x9
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 52


 2365 0063 28       		.uleb128 0x28
 2366 0064 00       		.byte	0
 2367 0065 03       		.uleb128 0x3
 2368 0066 0E       		.uleb128 0xe
 2369 0067 1C       		.uleb128 0x1c
 2370 0068 0D       		.uleb128 0xd
 2371 0069 00       		.byte	0
 2372 006a 00       		.byte	0
 2373 006b 0A       		.uleb128 0xa
 2374 006c 04       		.uleb128 0x4
 2375 006d 01       		.byte	0x1
 2376 006e 03       		.uleb128 0x3
 2377 006f 08       		.uleb128 0x8
 2378 0070 0B       		.uleb128 0xb
 2379 0071 0B       		.uleb128 0xb
 2380 0072 3A       		.uleb128 0x3a
 2381 0073 0B       		.uleb128 0xb
 2382 0074 3B       		.uleb128 0x3b
 2383 0075 0B       		.uleb128 0xb
 2384 0076 01       		.uleb128 0x1
 2385 0077 13       		.uleb128 0x13
 2386 0078 00       		.byte	0
 2387 0079 00       		.byte	0
 2388 007a 0B       		.uleb128 0xb
 2389 007b 2E       		.uleb128 0x2e
 2390 007c 00       		.byte	0
 2391 007d 3F       		.uleb128 0x3f
 2392 007e 19       		.uleb128 0x19
 2393 007f 03       		.uleb128 0x3
 2394 0080 0E       		.uleb128 0xe
 2395 0081 3A       		.uleb128 0x3a
 2396 0082 0B       		.uleb128 0xb
 2397 0083 3B       		.uleb128 0x3b
 2398 0084 0B       		.uleb128 0xb
 2399 0085 27       		.uleb128 0x27
 2400 0086 19       		.uleb128 0x19
 2401 0087 11       		.uleb128 0x11
 2402 0088 01       		.uleb128 0x1
 2403 0089 12       		.uleb128 0x12
 2404 008a 06       		.uleb128 0x6
 2405 008b 40       		.uleb128 0x40
 2406 008c 18       		.uleb128 0x18
 2407 008d 9642     		.uleb128 0x2116
 2408 008f 19       		.uleb128 0x19
 2409 0090 00       		.byte	0
 2410 0091 00       		.byte	0
 2411 0092 0C       		.uleb128 0xc
 2412 0093 2E       		.uleb128 0x2e
 2413 0094 00       		.byte	0
 2414 0095 3F       		.uleb128 0x3f
 2415 0096 19       		.uleb128 0x19
 2416 0097 03       		.uleb128 0x3
 2417 0098 0E       		.uleb128 0xe
 2418 0099 3A       		.uleb128 0x3a
 2419 009a 0B       		.uleb128 0xb
 2420 009b 3B       		.uleb128 0x3b
 2421 009c 0B       		.uleb128 0xb
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 53


 2422 009d 27       		.uleb128 0x27
 2423 009e 19       		.uleb128 0x19
 2424 009f 11       		.uleb128 0x11
 2425 00a0 01       		.uleb128 0x1
 2426 00a1 12       		.uleb128 0x12
 2427 00a2 06       		.uleb128 0x6
 2428 00a3 40       		.uleb128 0x40
 2429 00a4 18       		.uleb128 0x18
 2430 00a5 9742     		.uleb128 0x2117
 2431 00a7 19       		.uleb128 0x19
 2432 00a8 00       		.byte	0
 2433 00a9 00       		.byte	0
 2434 00aa 0D       		.uleb128 0xd
 2435 00ab 2E       		.uleb128 0x2e
 2436 00ac 01       		.byte	0x1
 2437 00ad 3F       		.uleb128 0x3f
 2438 00ae 19       		.uleb128 0x19
 2439 00af 03       		.uleb128 0x3
 2440 00b0 0E       		.uleb128 0xe
 2441 00b1 3A       		.uleb128 0x3a
 2442 00b2 0B       		.uleb128 0xb
 2443 00b3 3B       		.uleb128 0x3b
 2444 00b4 0B       		.uleb128 0xb
 2445 00b5 49       		.uleb128 0x49
 2446 00b6 13       		.uleb128 0x13
 2447 00b7 11       		.uleb128 0x11
 2448 00b8 01       		.uleb128 0x1
 2449 00b9 12       		.uleb128 0x12
 2450 00ba 06       		.uleb128 0x6
 2451 00bb 40       		.uleb128 0x40
 2452 00bc 18       		.uleb128 0x18
 2453 00bd 9642     		.uleb128 0x2116
 2454 00bf 19       		.uleb128 0x19
 2455 00c0 01       		.uleb128 0x1
 2456 00c1 13       		.uleb128 0x13
 2457 00c2 00       		.byte	0
 2458 00c3 00       		.byte	0
 2459 00c4 0E       		.uleb128 0xe
 2460 00c5 34       		.uleb128 0x34
 2461 00c6 00       		.byte	0
 2462 00c7 03       		.uleb128 0x3
 2463 00c8 08       		.uleb128 0x8
 2464 00c9 3A       		.uleb128 0x3a
 2465 00ca 0B       		.uleb128 0xb
 2466 00cb 3B       		.uleb128 0x3b
 2467 00cc 0B       		.uleb128 0xb
 2468 00cd 49       		.uleb128 0x49
 2469 00ce 13       		.uleb128 0x13
 2470 00cf 02       		.uleb128 0x2
 2471 00d0 18       		.uleb128 0x18
 2472 00d1 00       		.byte	0
 2473 00d2 00       		.byte	0
 2474 00d3 0F       		.uleb128 0xf
 2475 00d4 34       		.uleb128 0x34
 2476 00d5 00       		.byte	0
 2477 00d6 03       		.uleb128 0x3
 2478 00d7 0E       		.uleb128 0xe
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 54


 2479 00d8 3A       		.uleb128 0x3a
 2480 00d9 0B       		.uleb128 0xb
 2481 00da 3B       		.uleb128 0x3b
 2482 00db 0B       		.uleb128 0xb
 2483 00dc 49       		.uleb128 0x49
 2484 00dd 13       		.uleb128 0x13
 2485 00de 02       		.uleb128 0x2
 2486 00df 18       		.uleb128 0x18
 2487 00e0 00       		.byte	0
 2488 00e1 00       		.byte	0
 2489 00e2 10       		.uleb128 0x10
 2490 00e3 01       		.uleb128 0x1
 2491 00e4 01       		.byte	0x1
 2492 00e5 49       		.uleb128 0x49
 2493 00e6 13       		.uleb128 0x13
 2494 00e7 01       		.uleb128 0x1
 2495 00e8 13       		.uleb128 0x13
 2496 00e9 00       		.byte	0
 2497 00ea 00       		.byte	0
 2498 00eb 11       		.uleb128 0x11
 2499 00ec 21       		.uleb128 0x21
 2500 00ed 00       		.byte	0
 2501 00ee 49       		.uleb128 0x49
 2502 00ef 13       		.uleb128 0x13
 2503 00f0 2F       		.uleb128 0x2f
 2504 00f1 0B       		.uleb128 0xb
 2505 00f2 00       		.byte	0
 2506 00f3 00       		.byte	0
 2507 00f4 12       		.uleb128 0x12
 2508 00f5 2E       		.uleb128 0x2e
 2509 00f6 00       		.byte	0
 2510 00f7 3F       		.uleb128 0x3f
 2511 00f8 19       		.uleb128 0x19
 2512 00f9 03       		.uleb128 0x3
 2513 00fa 0E       		.uleb128 0xe
 2514 00fb 3A       		.uleb128 0x3a
 2515 00fc 0B       		.uleb128 0xb
 2516 00fd 3B       		.uleb128 0x3b
 2517 00fe 05       		.uleb128 0x5
 2518 00ff 11       		.uleb128 0x11
 2519 0100 01       		.uleb128 0x1
 2520 0101 12       		.uleb128 0x12
 2521 0102 06       		.uleb128 0x6
 2522 0103 40       		.uleb128 0x40
 2523 0104 18       		.uleb128 0x18
 2524 0105 9742     		.uleb128 0x2117
 2525 0107 19       		.uleb128 0x19
 2526 0108 00       		.byte	0
 2527 0109 00       		.byte	0
 2528 010a 13       		.uleb128 0x13
 2529 010b 2E       		.uleb128 0x2e
 2530 010c 01       		.byte	0x1
 2531 010d 3F       		.uleb128 0x3f
 2532 010e 19       		.uleb128 0x19
 2533 010f 03       		.uleb128 0x3
 2534 0110 0E       		.uleb128 0xe
 2535 0111 3A       		.uleb128 0x3a
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 55


 2536 0112 0B       		.uleb128 0xb
 2537 0113 3B       		.uleb128 0x3b
 2538 0114 05       		.uleb128 0x5
 2539 0115 27       		.uleb128 0x27
 2540 0116 19       		.uleb128 0x19
 2541 0117 11       		.uleb128 0x11
 2542 0118 01       		.uleb128 0x1
 2543 0119 12       		.uleb128 0x12
 2544 011a 06       		.uleb128 0x6
 2545 011b 40       		.uleb128 0x40
 2546 011c 18       		.uleb128 0x18
 2547 011d 9642     		.uleb128 0x2116
 2548 011f 19       		.uleb128 0x19
 2549 0120 01       		.uleb128 0x1
 2550 0121 13       		.uleb128 0x13
 2551 0122 00       		.byte	0
 2552 0123 00       		.byte	0
 2553 0124 14       		.uleb128 0x14
 2554 0125 05       		.uleb128 0x5
 2555 0126 00       		.byte	0
 2556 0127 03       		.uleb128 0x3
 2557 0128 0E       		.uleb128 0xe
 2558 0129 3A       		.uleb128 0x3a
 2559 012a 0B       		.uleb128 0xb
 2560 012b 3B       		.uleb128 0x3b
 2561 012c 05       		.uleb128 0x5
 2562 012d 49       		.uleb128 0x49
 2563 012e 13       		.uleb128 0x13
 2564 012f 02       		.uleb128 0x2
 2565 0130 18       		.uleb128 0x18
 2566 0131 00       		.byte	0
 2567 0132 00       		.byte	0
 2568 0133 15       		.uleb128 0x15
 2569 0134 34       		.uleb128 0x34
 2570 0135 00       		.byte	0
 2571 0136 03       		.uleb128 0x3
 2572 0137 08       		.uleb128 0x8
 2573 0138 3A       		.uleb128 0x3a
 2574 0139 0B       		.uleb128 0xb
 2575 013a 3B       		.uleb128 0x3b
 2576 013b 05       		.uleb128 0x5
 2577 013c 49       		.uleb128 0x49
 2578 013d 13       		.uleb128 0x13
 2579 013e 02       		.uleb128 0x2
 2580 013f 18       		.uleb128 0x18
 2581 0140 00       		.byte	0
 2582 0141 00       		.byte	0
 2583 0142 16       		.uleb128 0x16
 2584 0143 2E       		.uleb128 0x2e
 2585 0144 01       		.byte	0x1
 2586 0145 3F       		.uleb128 0x3f
 2587 0146 19       		.uleb128 0x19
 2588 0147 03       		.uleb128 0x3
 2589 0148 0E       		.uleb128 0xe
 2590 0149 3A       		.uleb128 0x3a
 2591 014a 0B       		.uleb128 0xb
 2592 014b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 56


 2593 014c 05       		.uleb128 0x5
 2594 014d 27       		.uleb128 0x27
 2595 014e 19       		.uleb128 0x19
 2596 014f 11       		.uleb128 0x11
 2597 0150 01       		.uleb128 0x1
 2598 0151 12       		.uleb128 0x12
 2599 0152 06       		.uleb128 0x6
 2600 0153 40       		.uleb128 0x40
 2601 0154 18       		.uleb128 0x18
 2602 0155 9742     		.uleb128 0x2117
 2603 0157 19       		.uleb128 0x19
 2604 0158 01       		.uleb128 0x1
 2605 0159 13       		.uleb128 0x13
 2606 015a 00       		.byte	0
 2607 015b 00       		.byte	0
 2608 015c 17       		.uleb128 0x17
 2609 015d 34       		.uleb128 0x34
 2610 015e 00       		.byte	0
 2611 015f 03       		.uleb128 0x3
 2612 0160 0E       		.uleb128 0xe
 2613 0161 3A       		.uleb128 0x3a
 2614 0162 0B       		.uleb128 0xb
 2615 0163 3B       		.uleb128 0x3b
 2616 0164 05       		.uleb128 0x5
 2617 0165 49       		.uleb128 0x49
 2618 0166 13       		.uleb128 0x13
 2619 0167 02       		.uleb128 0x2
 2620 0168 18       		.uleb128 0x18
 2621 0169 00       		.byte	0
 2622 016a 00       		.byte	0
 2623 016b 18       		.uleb128 0x18
 2624 016c 2E       		.uleb128 0x2e
 2625 016d 01       		.byte	0x1
 2626 016e 3F       		.uleb128 0x3f
 2627 016f 19       		.uleb128 0x19
 2628 0170 03       		.uleb128 0x3
 2629 0171 0E       		.uleb128 0xe
 2630 0172 3A       		.uleb128 0x3a
 2631 0173 0B       		.uleb128 0xb
 2632 0174 3B       		.uleb128 0x3b
 2633 0175 05       		.uleb128 0x5
 2634 0176 11       		.uleb128 0x11
 2635 0177 01       		.uleb128 0x1
 2636 0178 12       		.uleb128 0x12
 2637 0179 06       		.uleb128 0x6
 2638 017a 40       		.uleb128 0x40
 2639 017b 18       		.uleb128 0x18
 2640 017c 9642     		.uleb128 0x2116
 2641 017e 19       		.uleb128 0x19
 2642 017f 01       		.uleb128 0x1
 2643 0180 13       		.uleb128 0x13
 2644 0181 00       		.byte	0
 2645 0182 00       		.byte	0
 2646 0183 19       		.uleb128 0x19
 2647 0184 0B       		.uleb128 0xb
 2648 0185 01       		.byte	0x1
 2649 0186 11       		.uleb128 0x11
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 57


 2650 0187 01       		.uleb128 0x1
 2651 0188 12       		.uleb128 0x12
 2652 0189 06       		.uleb128 0x6
 2653 018a 00       		.byte	0
 2654 018b 00       		.byte	0
 2655 018c 1A       		.uleb128 0x1a
 2656 018d 2E       		.uleb128 0x2e
 2657 018e 00       		.byte	0
 2658 018f 3F       		.uleb128 0x3f
 2659 0190 19       		.uleb128 0x19
 2660 0191 03       		.uleb128 0x3
 2661 0192 0E       		.uleb128 0xe
 2662 0193 3A       		.uleb128 0x3a
 2663 0194 0B       		.uleb128 0xb
 2664 0195 3B       		.uleb128 0x3b
 2665 0196 05       		.uleb128 0x5
 2666 0197 11       		.uleb128 0x11
 2667 0198 01       		.uleb128 0x1
 2668 0199 12       		.uleb128 0x12
 2669 019a 06       		.uleb128 0x6
 2670 019b 40       		.uleb128 0x40
 2671 019c 18       		.uleb128 0x18
 2672 019d 9642     		.uleb128 0x2116
 2673 019f 19       		.uleb128 0x19
 2674 01a0 00       		.byte	0
 2675 01a1 00       		.byte	0
 2676 01a2 1B       		.uleb128 0x1b
 2677 01a3 2E       		.uleb128 0x2e
 2678 01a4 01       		.byte	0x1
 2679 01a5 3F       		.uleb128 0x3f
 2680 01a6 19       		.uleb128 0x19
 2681 01a7 03       		.uleb128 0x3
 2682 01a8 0E       		.uleb128 0xe
 2683 01a9 3A       		.uleb128 0x3a
 2684 01aa 0B       		.uleb128 0xb
 2685 01ab 3B       		.uleb128 0x3b
 2686 01ac 05       		.uleb128 0x5
 2687 01ad 49       		.uleb128 0x49
 2688 01ae 13       		.uleb128 0x13
 2689 01af 11       		.uleb128 0x11
 2690 01b0 01       		.uleb128 0x1
 2691 01b1 12       		.uleb128 0x12
 2692 01b2 06       		.uleb128 0x6
 2693 01b3 40       		.uleb128 0x40
 2694 01b4 18       		.uleb128 0x18
 2695 01b5 9642     		.uleb128 0x2116
 2696 01b7 19       		.uleb128 0x19
 2697 01b8 01       		.uleb128 0x1
 2698 01b9 13       		.uleb128 0x13
 2699 01ba 00       		.byte	0
 2700 01bb 00       		.byte	0
 2701 01bc 1C       		.uleb128 0x1c
 2702 01bd 26       		.uleb128 0x26
 2703 01be 00       		.byte	0
 2704 01bf 49       		.uleb128 0x49
 2705 01c0 13       		.uleb128 0x13
 2706 01c1 00       		.byte	0
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 58


 2707 01c2 00       		.byte	0
 2708 01c3 1D       		.uleb128 0x1d
 2709 01c4 2E       		.uleb128 0x2e
 2710 01c5 01       		.byte	0x1
 2711 01c6 3F       		.uleb128 0x3f
 2712 01c7 19       		.uleb128 0x19
 2713 01c8 03       		.uleb128 0x3
 2714 01c9 0E       		.uleb128 0xe
 2715 01ca 3A       		.uleb128 0x3a
 2716 01cb 0B       		.uleb128 0xb
 2717 01cc 3B       		.uleb128 0x3b
 2718 01cd 05       		.uleb128 0x5
 2719 01ce 11       		.uleb128 0x11
 2720 01cf 01       		.uleb128 0x1
 2721 01d0 12       		.uleb128 0x12
 2722 01d1 06       		.uleb128 0x6
 2723 01d2 40       		.uleb128 0x40
 2724 01d3 18       		.uleb128 0x18
 2725 01d4 9742     		.uleb128 0x2117
 2726 01d6 19       		.uleb128 0x19
 2727 01d7 01       		.uleb128 0x1
 2728 01d8 13       		.uleb128 0x13
 2729 01d9 00       		.byte	0
 2730 01da 00       		.byte	0
 2731 01db 1E       		.uleb128 0x1e
 2732 01dc 2E       		.uleb128 0x2e
 2733 01dd 00       		.byte	0
 2734 01de 3F       		.uleb128 0x3f
 2735 01df 19       		.uleb128 0x19
 2736 01e0 03       		.uleb128 0x3
 2737 01e1 0E       		.uleb128 0xe
 2738 01e2 3A       		.uleb128 0x3a
 2739 01e3 0B       		.uleb128 0xb
 2740 01e4 3B       		.uleb128 0x3b
 2741 01e5 05       		.uleb128 0x5
 2742 01e6 49       		.uleb128 0x49
 2743 01e7 13       		.uleb128 0x13
 2744 01e8 11       		.uleb128 0x11
 2745 01e9 01       		.uleb128 0x1
 2746 01ea 12       		.uleb128 0x12
 2747 01eb 06       		.uleb128 0x6
 2748 01ec 40       		.uleb128 0x40
 2749 01ed 18       		.uleb128 0x18
 2750 01ee 9642     		.uleb128 0x2116
 2751 01f0 19       		.uleb128 0x19
 2752 01f1 00       		.byte	0
 2753 01f2 00       		.byte	0
 2754 01f3 1F       		.uleb128 0x1f
 2755 01f4 34       		.uleb128 0x34
 2756 01f5 00       		.byte	0
 2757 01f6 03       		.uleb128 0x3
 2758 01f7 0E       		.uleb128 0xe
 2759 01f8 3A       		.uleb128 0x3a
 2760 01f9 0B       		.uleb128 0xb
 2761 01fa 3B       		.uleb128 0x3b
 2762 01fb 05       		.uleb128 0x5
 2763 01fc 49       		.uleb128 0x49
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 59


 2764 01fd 13       		.uleb128 0x13
 2765 01fe 3F       		.uleb128 0x3f
 2766 01ff 19       		.uleb128 0x19
 2767 0200 3C       		.uleb128 0x3c
 2768 0201 19       		.uleb128 0x19
 2769 0202 00       		.byte	0
 2770 0203 00       		.byte	0
 2771 0204 20       		.uleb128 0x20
 2772 0205 21       		.uleb128 0x21
 2773 0206 00       		.byte	0
 2774 0207 49       		.uleb128 0x49
 2775 0208 13       		.uleb128 0x13
 2776 0209 2F       		.uleb128 0x2f
 2777 020a 05       		.uleb128 0x5
 2778 020b 00       		.byte	0
 2779 020c 00       		.byte	0
 2780 020d 21       		.uleb128 0x21
 2781 020e 34       		.uleb128 0x34
 2782 020f 00       		.byte	0
 2783 0210 03       		.uleb128 0x3
 2784 0211 0E       		.uleb128 0xe
 2785 0212 3A       		.uleb128 0x3a
 2786 0213 0B       		.uleb128 0xb
 2787 0214 3B       		.uleb128 0x3b
 2788 0215 0B       		.uleb128 0xb
 2789 0216 49       		.uleb128 0x49
 2790 0217 13       		.uleb128 0x13
 2791 0218 3F       		.uleb128 0x3f
 2792 0219 19       		.uleb128 0x19
 2793 021a 02       		.uleb128 0x2
 2794 021b 18       		.uleb128 0x18
 2795 021c 00       		.byte	0
 2796 021d 00       		.byte	0
 2797 021e 00       		.byte	0
 2798              		.section	.debug_aranges,"",%progbits
 2799 0000 8C000000 		.4byte	0x8c
 2800 0004 0200     		.2byte	0x2
 2801 0006 00000000 		.4byte	.Ldebug_info0
 2802 000a 04       		.byte	0x4
 2803 000b 00       		.byte	0
 2804 000c 0000     		.2byte	0
 2805 000e 0000     		.2byte	0
 2806 0010 00000000 		.4byte	.LFB63
 2807 0014 28000000 		.4byte	.LFE63-.LFB63
 2808 0018 00000000 		.4byte	.LFB64
 2809 001c 58000000 		.4byte	.LFE64-.LFB64
 2810 0020 00000000 		.4byte	.LFB65
 2811 0024 1C000000 		.4byte	.LFE65-.LFB65
 2812 0028 00000000 		.4byte	.LFB66
 2813 002c 38000000 		.4byte	.LFE66-.LFB66
 2814 0030 00000000 		.4byte	.LFB67
 2815 0034 7C020000 		.4byte	.LFE67-.LFB67
 2816 0038 00000000 		.4byte	.LFB68
 2817 003c 48000000 		.4byte	.LFE68-.LFB68
 2818 0040 00000000 		.4byte	.LFB69
 2819 0044 38000000 		.4byte	.LFE69-.LFB69
 2820 0048 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 60


 2821 004c C4010000 		.4byte	.LFE70-.LFB70
 2822 0050 00000000 		.4byte	.LFB71
 2823 0054 D8000000 		.4byte	.LFE71-.LFB71
 2824 0058 00000000 		.4byte	.LFB72
 2825 005c 58000000 		.4byte	.LFE72-.LFB72
 2826 0060 00000000 		.4byte	.LFB73
 2827 0064 36000000 		.4byte	.LFE73-.LFB73
 2828 0068 00000000 		.4byte	.LFB74
 2829 006c B0000000 		.4byte	.LFE74-.LFB74
 2830 0070 00000000 		.4byte	.LFB75
 2831 0074 44000000 		.4byte	.LFE75-.LFB75
 2832 0078 00000000 		.4byte	.LFB76
 2833 007c 38000000 		.4byte	.LFE76-.LFB76
 2834 0080 00000000 		.4byte	.LFB77
 2835 0084 50000000 		.4byte	.LFE77-.LFB77
 2836 0088 00000000 		.4byte	0
 2837 008c 00000000 		.4byte	0
 2838              		.section	.debug_ranges,"",%progbits
 2839              	.Ldebug_ranges0:
 2840 0000 00000000 		.4byte	.LFB63
 2841 0004 28000000 		.4byte	.LFE63
 2842 0008 00000000 		.4byte	.LFB64
 2843 000c 58000000 		.4byte	.LFE64
 2844 0010 00000000 		.4byte	.LFB65
 2845 0014 1C000000 		.4byte	.LFE65
 2846 0018 00000000 		.4byte	.LFB66
 2847 001c 38000000 		.4byte	.LFE66
 2848 0020 00000000 		.4byte	.LFB67
 2849 0024 7C020000 		.4byte	.LFE67
 2850 0028 00000000 		.4byte	.LFB68
 2851 002c 48000000 		.4byte	.LFE68
 2852 0030 00000000 		.4byte	.LFB69
 2853 0034 38000000 		.4byte	.LFE69
 2854 0038 00000000 		.4byte	.LFB70
 2855 003c C4010000 		.4byte	.LFE70
 2856 0040 00000000 		.4byte	.LFB71
 2857 0044 D8000000 		.4byte	.LFE71
 2858 0048 00000000 		.4byte	.LFB72
 2859 004c 58000000 		.4byte	.LFE72
 2860 0050 00000000 		.4byte	.LFB73
 2861 0054 36000000 		.4byte	.LFE73
 2862 0058 00000000 		.4byte	.LFB74
 2863 005c B0000000 		.4byte	.LFE74
 2864 0060 00000000 		.4byte	.LFB75
 2865 0064 44000000 		.4byte	.LFE75
 2866 0068 00000000 		.4byte	.LFB76
 2867 006c 38000000 		.4byte	.LFE76
 2868 0070 00000000 		.4byte	.LFB77
 2869 0074 50000000 		.4byte	.LFE77
 2870 0078 00000000 		.4byte	0
 2871 007c 00000000 		.4byte	0
 2872              		.section	.debug_line,"",%progbits
 2873              	.Ldebug_line0:
 2874 0000 35040000 		.section	.debug_str,"MS",%progbits,1
 2874      0200C001 
 2874      00000201 
 2874      FB0E0D00 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 61


 2874      01010101 
 2875              	.LASF24:
 2876 0000 68656164 		.ascii	"header\000"
 2876      657200
 2877              	.LASF46:
 2878 0007 7472616E 		.ascii	"transmitData\000"
 2878      736D6974 
 2878      44617461 
 2878      00
 2879              	.LASF27:
 2880 0014 49646C65 		.ascii	"Idle_Collision_ISR\000"
 2880      5F436F6C 
 2880      6C697369 
 2880      6F6E5F49 
 2880      535200
 2881              	.LASF22:
 2882 0027 73746174 		.ascii	"state\000"
 2882      6500
 2883              	.LASF43:
 2884 002d 67657452 		.ascii	"getRandomNumber\000"
 2884      616E646F 
 2884      6D4E756D 
 2884      62657200 
 2885              	.LASF17:
 2886 003d 73697A65 		.ascii	"sizetype\000"
 2886      74797065 
 2886      00
 2887              	.LASF74:
 2888 0046 5C5C4D61 		.ascii	"\\\\Mac\\Home\\Documents\\PSoC Creator\\USB_UART01\\"
 2888      635C486F 
 2888      6D655C44 
 2888      6F63756D 
 2888      656E7473 
 2889 0073 5553425F 		.ascii	"USB_UART01.cydsn\000"
 2889      55415254 
 2889      30312E63 
 2889      7964736E 
 2889      00
 2890              	.LASF53:
 2891 0084 64696666 		.ascii	"diffManEncodedData\000"
 2891      4D616E45 
 2891      6E636F64 
 2891      65644461 
 2891      746100
 2892              	.LASF34:
 2893 0097 6D61696E 		.ascii	"main\000"
 2893      00
 2894              	.LASF50:
 2895 009c 68656164 		.ascii	"headerCheck\000"
 2895      65724368 
 2895      65636B00 
 2896              	.LASF48:
 2897 00a8 73746F72 		.ascii	"storeChar\000"
 2897      65436861 
 2897      7200
 2898              	.LASF70:
 2899 00b2 63726353 		.ascii	"crcState\000"
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 62


 2899      74617465 
 2899      00
 2900              	.LASF23:
 2901 00bb 6E6F6E65 		.ascii	"none\000"
 2901      00
 2902              	.LASF2:
 2903 00c0 73686F72 		.ascii	"short int\000"
 2903      7420696E 
 2903      7400
 2904              	.LASF40:
 2905 00ca 76616C75 		.ascii	"value\000"
 2905      6500
 2906              	.LASF21:
 2907 00d0 636F6C6C 		.ascii	"collision\000"
 2907      6973696F 
 2907      6E00
 2908              	.LASF12:
 2909 00da 75696E74 		.ascii	"uint16\000"
 2909      313600
 2910              	.LASF69:
 2911 00e1 6E657477 		.ascii	"networkState\000"
 2911      6F726B53 
 2911      74617465 
 2911      00
 2912              	.LASF11:
 2913 00ee 75696E74 		.ascii	"uint8\000"
 2913      3800
 2914              	.LASF31:
 2915 00f4 6C696E65 		.ascii	"lineString\000"
 2915      53747269 
 2915      6E6700
 2916              	.LASF28:
 2917 00ff 45646765 		.ascii	"Edge_detect_ISR\000"
 2917      5F646574 
 2917      6563745F 
 2917      49535200 
 2918              	.LASF13:
 2919 010f 666C6F61 		.ascii	"float\000"
 2919      7400
 2920              	.LASF6:
 2921 0115 6C6F6E67 		.ascii	"long long int\000"
 2921      206C6F6E 
 2921      6720696E 
 2921      7400
 2922              	.LASF7:
 2923 0123 6C6F6E67 		.ascii	"long long unsigned int\000"
 2923      206C6F6E 
 2923      6720756E 
 2923      7369676E 
 2923      65642069 
 2924              	.LASF64:
 2925 013a 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 2925      45535449 
 2925      4E415449 
 2925      4F4E5F41 
 2925      44445245 
 2926              	.LASF72:
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 63


 2927 0151 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2927      4320342E 
 2927      392E3320 
 2927      32303135 
 2927      30333033 
 2928 0184 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2928      20726576 
 2928      6973696F 
 2928      6E203232 
 2928      31323230 
 2929 01b7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2929      66756E63 
 2929      74696F6E 
 2929      2D736563 
 2929      74696F6E 
 2930              	.LASF42:
 2931 01df 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 2931      6574776F 
 2931      726B5374 
 2931      6174654F 
 2931      6E4C4544 
 2932              	.LASF49:
 2933 01f5 7072696E 		.ascii	"printChar\000"
 2933      74436861 
 2933      7200
 2934              	.LASF35:
 2935 01ff 73747269 		.ascii	"stringToDiffMan\000"
 2935      6E67546F 
 2935      44696666 
 2935      4D616E00 
 2936              	.LASF1:
 2937 020f 756E7369 		.ascii	"unsigned char\000"
 2937      676E6564 
 2937      20636861 
 2937      7200
 2938              	.LASF59:
 2939 021d 63757272 		.ascii	"currentDataPos\000"
 2939      656E7444 
 2939      61746150 
 2939      6F7300
 2940              	.LASF60:
 2941 022c 63757272 		.ascii	"currentRXCharPosition\000"
 2941      656E7452 
 2941      58436861 
 2941      72506F73 
 2941      6974696F 
 2942              	.LASF18:
 2943 0242 74696D65 		.ascii	"time_t\000"
 2943      5F7400
 2944              	.LASF41:
 2945 0249 696E6974 		.ascii	"initDiffManEncodedArray\000"
 2945      44696666 
 2945      4D616E45 
 2945      6E636F64 
 2945      65644172 
 2946              	.LASF0:
 2947 0261 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 64


 2947      65642063 
 2947      68617200 
 2948              	.LASF36:
 2949 026d 61736369 		.ascii	"asciiToDiffMan\000"
 2949      69546F44 
 2949      6966664D 
 2949      616E00
 2950              	.LASF19:
 2951 027c 69646C65 		.ascii	"idle\000"
 2951      00
 2952              	.LASF47:
 2953 0281 64696666 		.ascii	"diffManToASCII\000"
 2953      4D616E54 
 2953      6F415343 
 2953      494900
 2954              	.LASF8:
 2955 0290 756E7369 		.ascii	"unsigned int\000"
 2955      676E6564 
 2955      20696E74 
 2955      00
 2956              	.LASF56:
 2957 029d 72656365 		.ascii	"receivedDataIndex\000"
 2957      69766564 
 2957      44617461 
 2957      496E6465 
 2957      7800
 2958              	.LASF5:
 2959 02af 6C6F6E67 		.ascii	"long unsigned int\000"
 2959      20756E73 
 2959      69676E65 
 2959      6420696E 
 2959      7400
 2960              	.LASF26:
 2961 02c1 626F7468 		.ascii	"both\000"
 2961      00
 2962              	.LASF44:
 2963 02c6 4D494E5F 		.ascii	"MIN_N\000"
 2963      4E00
 2964              	.LASF37:
 2965 02cc 61736369 		.ascii	"asciiChar\000"
 2965      69436861 
 2965      7200
 2966              	.LASF15:
 2967 02d6 63686172 		.ascii	"char\000"
 2967      00
 2968              	.LASF71:
 2969 02db 72656365 		.ascii	"receivedChar\000"
 2969      69766564 
 2969      43686172 
 2969      00
 2970              	.LASF4:
 2971 02e8 6C6F6E67 		.ascii	"long int\000"
 2971      20696E74 
 2971      00
 2972              	.LASF32:
 2973 02f1 73747269 		.ascii	"stringPosition\000"
 2973      6E67506F 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 65


 2973      73697469 
 2973      6F6E00
 2974              	.LASF10:
 2975 0300 696E7433 		.ascii	"int32_t\000"
 2975      325F7400 
 2976              	.LASF3:
 2977 0308 73686F72 		.ascii	"short unsigned int\000"
 2977      7420756E 
 2977      7369676E 
 2977      65642069 
 2977      6E7400
 2978              	.LASF33:
 2979 031b 7365636F 		.ascii	"seconds\000"
 2979      6E647300 
 2980              	.LASF51:
 2981 0323 5F426F6F 		.ascii	"_Bool\000"
 2981      6C00
 2982              	.LASF20:
 2983 0329 62757379 		.ascii	"busy\000"
 2983      00
 2984              	.LASF57:
 2985 032e 72656365 		.ascii	"receivedDataCount\000"
 2985      69766564 
 2985      44617461 
 2985      436F756E 
 2985      7400
 2986              	.LASF16:
 2987 0340 72656738 		.ascii	"reg8\000"
 2987      00
 2988              	.LASF25:
 2989 0345 6D657373 		.ascii	"message\000"
 2989      61676500 
 2990              	.LASF14:
 2991 034d 646F7562 		.ascii	"double\000"
 2991      6C6500
 2992              	.LASF68:
 2993 0354 68656164 		.ascii	"headerValid\000"
 2993      65725661 
 2993      6C696400 
 2994              	.LASF62:
 2995 0360 6D657373 		.ascii	"messageLength\000"
 2995      6167654C 
 2995      656E6774 
 2995      6800
 2996              	.LASF54:
 2997 036e 64696666 		.ascii	"diffManReceivedData\000"
 2997      4D616E52 
 2997      65636569 
 2997      76656444 
 2997      61746100 
 2998              	.LASF55:
 2999 0382 72784368 		.ascii	"rxChar\000"
 2999      617200
 3000              	.LASF30:
 3001 0389 52656365 		.ascii	"ReceiveTimerISR\000"
 3001      69766554 
 3001      696D6572 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 66


 3001      49535200 
 3002              	.LASF39:
 3003 0399 62696E61 		.ascii	"binaryValueOfChar\000"
 3003      72795661 
 3003      6C75654F 
 3003      66436861 
 3003      7200
 3004              	.LASF73:
 3005 03ab 2E5C6D61 		.ascii	".\\main.c\000"
 3005      696E2E63 
 3005      00
 3006              	.LASF9:
 3007 03b4 5F5F696E 		.ascii	"__int32_t\000"
 3007      7433325F 
 3007      7400
 3008              	.LASF58:
 3009 03be 68616C66 		.ascii	"halfBitIndex\000"
 3009      42697449 
 3009      6E646578 
 3009      00
 3010              	.LASF45:
 3011 03cb 4D41585F 		.ascii	"MAX_N\000"
 3011      4E00
 3012              	.LASF63:
 3013 03d1 68656164 		.ascii	"headerCRC\000"
 3013      65724352 
 3013      4300
 3014              	.LASF61:
 3015 03db 6C656E67 		.ascii	"lengthOfData\000"
 3015      74684F66 
 3015      44617461 
 3015      00
 3016              	.LASF66:
 3017 03e8 64617461 		.ascii	"dataTransmissionComplete\000"
 3017      5472616E 
 3017      736D6973 
 3017      73696F6E 
 3017      436F6D70 
 3018              	.LASF29:
 3019 0401 54696D65 		.ascii	"TimerHandler\000"
 3019      7248616E 
 3019      646C6572 
 3019      00
 3020              	.LASF52:
 3021 040e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3021      52784275 
 3021      66666572 
 3021      00
 3022              	.LASF38:
 3023 041b 70726576 		.ascii	"previousHalfBit\000"
 3023      696F7573 
 3023      48616C66 
 3023      42697400 
 3024              	.LASF65:
 3025 042b 74696D65 		.ascii	"timerExpired\000"
 3025      72457870 
 3025      69726564 
ARM GAS  C:\Users\gordon\AppData\Local\Temp\cc9IQXD3.s 			page 67


 3025      00
 3026              	.LASF67:
 3027 0438 706F7765 		.ascii	"powerOnEdge\000"
 3027      724F6E45 
 3027      64676500 
 3028              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
