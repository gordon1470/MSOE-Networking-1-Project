ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	diffManEncodedData,3456,4
  19              		.comm	diffManReceivedData,108,4
  20              		.comm	rxChar,108,4
  21              		.comm	receivedDataIndex,4,4
  22              		.comm	receivedDataCount,4,4
  23              		.global	halfBitIndex
  24              		.bss
  25              		.align	2
  26              		.type	halfBitIndex, %object
  27              		.size	halfBitIndex, 4
  28              	halfBitIndex:
  29 0000 00000000 		.space	4
  30              		.global	currentDataPos
  31              		.align	2
  32              		.type	currentDataPos, %object
  33              		.size	currentDataPos, 4
  34              	currentDataPos:
  35 0004 00000000 		.space	4
  36              		.global	currentRXCharPosition
  37              		.align	2
  38              		.type	currentRXCharPosition, %object
  39              		.size	currentRXCharPosition, 4
  40              	currentRXCharPosition:
  41 0008 00000000 		.space	4
  42              		.comm	lengthOfData,4,4
  43              		.comm	messageLength,4,4
  44              		.comm	headerCRC,4,4
  45              		.global	TX_DESTINATION_ADDRESS
  46              		.align	2
  47              		.type	TX_DESTINATION_ADDRESS, %object
  48              		.size	TX_DESTINATION_ADDRESS, 4
  49              	TX_DESTINATION_ADDRESS:
  50 000c 00000000 		.space	4
  51              		.comm	timerExpired,1,1
  52              		.comm	dataTransmissionComplete,1,1
  53              		.comm	powerOnEdge,1,1
  54              		.global	headerValid
  55              		.type	headerValid, %object
  56              		.size	headerValid, 1
  57              	headerValid:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 2


  58 0010 00       		.space	1
  59              		.comm	networkState,1,1
  60              		.comm	crcState,1,1
  61              		.comm	receivedChar,1,1
  62 0011 000000   		.section	.text.Idle_Collision_ISR,"ax",%progbits
  63              		.align	2
  64              		.global	Idle_Collision_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	Idle_Collision_ISR, %function
  68              	Idle_Collision_ISR:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** #define INDEX_OF_MSB_ASCII 6
   2:.\main.c      **** #define INDEX_OF_MSB_HEX 7
   3:.\main.c      **** #define LENGTH_OF_HEADER 7
   4:.\main.c      **** #define HIGH 1
   5:.\main.c      **** #define EIGHT_BITS 8
   6:.\main.c      **** #define START_BIT 2
   7:.\main.c      **** #define ASCII_CHAR_MASK 0x7F
   8:.\main.c      **** #define TX_SOURCE_ADDRESS 0
   9:.\main.c      **** #define RX_DESTINATION_ADDRESS 0//these 2 are supposed to be the same
  10:.\main.c      **** #define VERSION_NUMBER 1
  11:.\main.c      **** 
  12:.\main.c      **** 
  13:.\main.c      **** #include <device.h>
  14:.\main.c      **** #include <stdbool.h>
  15:.\main.c      **** #include <stdlib.h> //For random number generator
  16:.\main.c      **** #include <time.h>
  17:.\main.c      **** #include "stdio.h"
  18:.\main.c      **** 
  19:.\main.c      **** 
  20:.\main.c      **** int getRandomNumber();
  21:.\main.c      **** void initDiffManEncodedArray();
  22:.\main.c      **** void headerToDiffMan(uint8 *);
  23:.\main.c      **** void hexToDiffMan(uint8);
  24:.\main.c      **** void stringToDiffMan(char*, uint8);
  25:.\main.c      **** void asciiToDiffMan(char);
  26:.\main.c      **** void transmitData();
  27:.\main.c      **** void setNetworkStateOnLEDs();
  28:.\main.c      **** void diffManToASCII();
  29:.\main.c      **** void storeChar();
  30:.\main.c      **** void printChar();
  31:.\main.c      **** bool headerCheck();
  32:.\main.c      **** 
  33:.\main.c      **** int diffManEncodedData[864];
  34:.\main.c      **** uint8 diffManReceivedData[108];
  35:.\main.c      **** char rxChar[108];
  36:.\main.c      **** int receivedDataIndex, receivedDataCount;
  37:.\main.c      **** int halfBitIndex = 0, currentDataPos = 0, currentRXCharPosition = 0, lengthOfData, messageLength, h
  38:.\main.c      **** bool timerExpired, dataTransmissionComplete, powerOnEdge, headerValid = false;
  39:.\main.c      **** enum state {idle, busy, collision} networkState;
  40:.\main.c      **** enum crc {none, header, message, both} crcState;
  41:.\main.c      **** 
  42:.\main.c      **** char receivedChar;
  43:.\main.c      **** 
  44:.\main.c      **** CY_ISR(Idle_Collision_ISR){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 3


  71              		.loc 1 44 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  45:.\main.c      ****     networkState = idle;
  81              		.loc 1 45 0
  82 0004 074B     		ldr	r3, .L4
  83 0006 0022     		movs	r2, #0
  84 0008 1A70     		strb	r2, [r3]
  46:.\main.c      ****     if(Receive_Read() == HIGH){
  85              		.loc 1 46 0
  86 000a FFF7FEFF 		bl	Receive_Read
  87 000e 0346     		mov	r3, r0
  88 0010 012B     		cmp	r3, #1
  89 0012 03D1     		bne	.L2
  47:.\main.c      ****         networkState = idle;
  90              		.loc 1 47 0
  91 0014 034B     		ldr	r3, .L4
  92 0016 0022     		movs	r2, #0
  93 0018 1A70     		strb	r2, [r3]
  94 001a 02E0     		b	.L1
  95              	.L2:
  48:.\main.c      ****     }
  49:.\main.c      ****     else{
  50:.\main.c      ****         networkState = collision;
  96              		.loc 1 50 0
  97 001c 014B     		ldr	r3, .L4
  98 001e 0222     		movs	r2, #2
  99 0020 1A70     		strb	r2, [r3]
 100              	.L1:
  51:.\main.c      ****     }
  52:.\main.c      **** }
 101              		.loc 1 52 0
 102 0022 80BD     		pop	{r7, pc}
 103              	.L5:
 104              		.align	2
 105              	.L4:
 106 0024 00000000 		.word	networkState
 107              		.cfi_endproc
 108              	.LFE63:
 109              		.size	Idle_Collision_ISR, .-Idle_Collision_ISR
 110              		.section	.text.Edge_detect_ISR,"ax",%progbits
 111              		.align	2
 112              		.global	Edge_detect_ISR
 113              		.thumb
 114              		.thumb_func
 115              		.type	Edge_detect_ISR, %function
 116              	Edge_detect_ISR:
 117              	.LFB64:
  53:.\main.c      **** 
  54:.\main.c      **** CY_ISR(Edge_detect_ISR){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 4


 118              		.loc 1 54 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122 0000 98B5     		push	{r3, r4, r7, lr}
 123              		.cfi_def_cfa_offset 16
 124              		.cfi_offset 3, -16
 125              		.cfi_offset 4, -12
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
  55:.\main.c      ****     //Note: on edge detect, will trigger receive timer to start (see TopDesign)
  56:.\main.c      ****     Idle_Collision_Timer_Start();
 130              		.loc 1 56 0
 131 0004 FFF7FEFF 		bl	Idle_Collision_Timer_Start
  57:.\main.c      **** 
  58:.\main.c      ****     //Ignore power on edge
  59:.\main.c      ****     if(!powerOnEdge){
 132              		.loc 1 59 0
 133 0008 0F4B     		ldr	r3, .L9
 134 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 135 000c 83F00103 		eor	r3, r3, #1
 136 0010 DBB2     		uxtb	r3, r3
 137 0012 002B     		cmp	r3, #0
 138 0014 0FD0     		beq	.L7
  60:.\main.c      ****         Receive_Timer_Start();
 139              		.loc 1 60 0
 140 0016 FFF7FEFF 		bl	Receive_Timer_Start
  61:.\main.c      ****         diffManReceivedData[receivedDataCount] = Receive_Read();
 141              		.loc 1 61 0
 142 001a 0C4B     		ldr	r3, .L9+4
 143 001c 1C68     		ldr	r4, [r3]
 144 001e FFF7FEFF 		bl	Receive_Read
 145 0022 0346     		mov	r3, r0
 146 0024 1A46     		mov	r2, r3
 147 0026 0A4B     		ldr	r3, .L9+8
 148 0028 1A55     		strb	r2, [r3, r4]
  62:.\main.c      ****         receivedDataCount++;
 149              		.loc 1 62 0
 150 002a 084B     		ldr	r3, .L9+4
 151 002c 1B68     		ldr	r3, [r3]
 152 002e 0133     		adds	r3, r3, #1
 153 0030 064A     		ldr	r2, .L9+4
 154 0032 1360     		str	r3, [r2]
 155 0034 02E0     		b	.L8
 156              	.L7:
  63:.\main.c      ****     }
  64:.\main.c      ****     else{
  65:.\main.c      ****         powerOnEdge = false;
 157              		.loc 1 65 0
 158 0036 044B     		ldr	r3, .L9
 159 0038 0022     		movs	r2, #0
 160 003a 1A70     		strb	r2, [r3]
 161              	.L8:
  66:.\main.c      ****     }
  67:.\main.c      ****     networkState = busy;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 5


 162              		.loc 1 67 0
 163 003c 054B     		ldr	r3, .L9+12
 164 003e 0122     		movs	r2, #1
 165 0040 1A70     		strb	r2, [r3]
  68:.\main.c      ****     Receive_ClearInterrupt();
 166              		.loc 1 68 0
 167 0042 FFF7FEFF 		bl	Receive_ClearInterrupt
  69:.\main.c      **** }
 168              		.loc 1 69 0
 169 0046 98BD     		pop	{r3, r4, r7, pc}
 170              	.L10:
 171              		.align	2
 172              	.L9:
 173 0048 00000000 		.word	powerOnEdge
 174 004c 00000000 		.word	receivedDataCount
 175 0050 00000000 		.word	diffManReceivedData
 176 0054 00000000 		.word	networkState
 177              		.cfi_endproc
 178              	.LFE64:
 179              		.size	Edge_detect_ISR, .-Edge_detect_ISR
 180              		.section	.text.TimerHandler,"ax",%progbits
 181              		.align	2
 182              		.global	TimerHandler
 183              		.thumb
 184              		.thumb_func
 185              		.type	TimerHandler, %function
 186              	TimerHandler:
 187              	.LFB65:
  70:.\main.c      **** 
  71:.\main.c      **** CY_ISR(TimerHandler){
 188              		.loc 1 71 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 00AF     		add	r7, sp, #0
 197              		.cfi_def_cfa_register 7
  72:.\main.c      ****     Timer_Stop();
 198              		.loc 1 72 0
 199 0004 FFF7FEFF 		bl	Timer_Stop
  73:.\main.c      ****     timerExpired = true;
 200              		.loc 1 73 0
 201 0008 024B     		ldr	r3, .L12
 202 000a 0122     		movs	r2, #1
 203 000c 1A70     		strb	r2, [r3]
  74:.\main.c      ****     Timer_STATUS;   //clear the timer interrupt
 204              		.loc 1 74 0
 205 000e 024B     		ldr	r3, .L12+4
 206 0010 1B78     		ldrb	r3, [r3]
  75:.\main.c      **** }
 207              		.loc 1 75 0
 208 0012 80BD     		pop	{r7, pc}
 209              	.L13:
 210              		.align	2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 6


 211              	.L12:
 212 0014 00000000 		.word	timerExpired
 213 0018 6B640040 		.word	1073767531
 214              		.cfi_endproc
 215              	.LFE65:
 216              		.size	TimerHandler, .-TimerHandler
 217              		.section	.text.ReceiveTimerISR,"ax",%progbits
 218              		.align	2
 219              		.global	ReceiveTimerISR
 220              		.thumb
 221              		.thumb_func
 222              		.type	ReceiveTimerISR, %function
 223              	ReceiveTimerISR:
 224              	.LFB66:
  76:.\main.c      **** 
  77:.\main.c      **** //TODO changing from reading to just repeting last data
  78:.\main.c      **** CY_ISR(ReceiveTimerISR){
 225              		.loc 1 78 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              		.cfi_def_cfa_offset 4
 232              		.cfi_offset 7, -4
 233 0002 00AF     		add	r7, sp, #0
 234              		.cfi_def_cfa_register 7
  79:.\main.c      ****     diffManReceivedData[receivedDataCount] = diffManReceivedData[receivedDataCount-1];
 235              		.loc 1 79 0
 236 0004 094B     		ldr	r3, .L15
 237 0006 1B68     		ldr	r3, [r3]
 238 0008 084A     		ldr	r2, .L15
 239 000a 1268     		ldr	r2, [r2]
 240 000c 013A     		subs	r2, r2, #1
 241 000e 0849     		ldr	r1, .L15+4
 242 0010 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 243 0012 074A     		ldr	r2, .L15+4
 244 0014 D154     		strb	r1, [r2, r3]
  80:.\main.c      ****     //or  diffManReceivedData[receivedDataCount] = Receive_Read();
  81:.\main.c      ****     receivedDataCount++;
 245              		.loc 1 81 0
 246 0016 054B     		ldr	r3, .L15
 247 0018 1B68     		ldr	r3, [r3]
 248 001a 0133     		adds	r3, r3, #1
 249 001c 034A     		ldr	r2, .L15
 250 001e 1360     		str	r3, [r2]
  82:.\main.c      ****     Receive_Timer_STATUS;   //clear interrupt
 251              		.loc 1 82 0
 252 0020 044B     		ldr	r3, .L15+8
 253 0022 1B78     		ldrb	r3, [r3]
  83:.\main.c      **** }
 254              		.loc 1 83 0
 255 0024 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 0026 5DF8047B 		ldr	r7, [sp], #4
 259              		.cfi_restore 7
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 7


 260              		.cfi_def_cfa_offset 0
 261 002a 7047     		bx	lr
 262              	.L16:
 263              		.align	2
 264              	.L15:
 265 002c 00000000 		.word	receivedDataCount
 266 0030 00000000 		.word	diffManReceivedData
 267 0034 6F640040 		.word	1073767535
 268              		.cfi_endproc
 269              	.LFE66:
 270              		.size	ReceiveTimerISR, .-ReceiveTimerISR
 271              		.section	.text.main,"ax",%progbits
 272              		.align	2
 273              		.global	main
 274              		.thumb
 275              		.thumb_func
 276              		.type	main, %function
 277              	main:
 278              	.LFB67:
  84:.\main.c      **** 
  85:.\main.c      **** int main()
  86:.\main.c      **** {
 279              		.loc 1 86 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 128
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 A0B0     		sub	sp, sp, #128
 288              		.cfi_def_cfa_offset 136
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  87:.\main.c      ****     char rx;
  88:.\main.c      ****     char lineString[108];
  89:.\main.c      ****     uint8 headerBytes[8];
  90:.\main.c      ****     uint8 stringPosition = 0;//after header
 291              		.loc 1 90 0
 292 0006 0023     		movs	r3, #0
 293 0008 87F87F30 		strb	r3, [r7, #127]
  91:.\main.c      ****     timerExpired = false;
 294              		.loc 1 91 0
 295 000c 8B4B     		ldr	r3, .L39
 296 000e 0022     		movs	r2, #0
 297 0010 1A70     		strb	r2, [r3]
  92:.\main.c      ****     dataTransmissionComplete = false;
 298              		.loc 1 92 0
 299 0012 8B4B     		ldr	r3, .L39+4
 300 0014 0022     		movs	r2, #0
 301 0016 1A70     		strb	r2, [r3]
  93:.\main.c      **** 
  94:.\main.c      **** 	messageLength = 0;
 302              		.loc 1 94 0
 303 0018 8A4B     		ldr	r3, .L39+8
 304 001a 0022     		movs	r2, #0
 305 001c 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 8


  95:.\main.c      **** 
  96:.\main.c      ****     powerOnEdge = true; //When the system powers up, it creates a rising edge.
 306              		.loc 1 96 0
 307 001e 8A4B     		ldr	r3, .L39+12
 308 0020 0122     		movs	r2, #1
 309 0022 1A70     		strb	r2, [r3]
  97:.\main.c      ****     //We want to ignore this edge on the rising edge.
  98:.\main.c      **** 
  99:.\main.c      ****     /*
 100:.\main.c      ****     Get value from system clock and
 101:.\main.c      ****     place in seconds variable.
 102:.\main.c      ****     */
 103:.\main.c      ****     time_t seconds;
 104:.\main.c      ****     time(&seconds);
 310              		.loc 1 104 0
 311 0024 3B1D     		adds	r3, r7, #4
 312 0026 1846     		mov	r0, r3
 313 0028 FFF7FEFF 		bl	time
 105:.\main.c      ****     /*
 106:.\main.c      ****     Convert seconds to a unsigned
 107:.\main.c      ****     integer for seed for random number generator
 108:.\main.c      ****     */
 109:.\main.c      ****     srand((unsigned int) seconds);
 314              		.loc 1 109 0
 315 002c 7B68     		ldr	r3, [r7, #4]
 316 002e 1846     		mov	r0, r3
 317 0030 FFF7FEFF 		bl	srand
 110:.\main.c      **** 
 111:.\main.c      ****     TX_pin_Write(1);  //set TX line to high to start
 318              		.loc 1 111 0
 319 0034 0120     		movs	r0, #1
 320 0036 FFF7FEFF 		bl	TX_pin_Write
 112:.\main.c      **** 
 113:.\main.c      ****     /* Enable Global Interrupts */
 114:.\main.c      ****     CyGlobalIntEnable;
 321              		.loc 1 114 0
 322              	@ 114 ".\main.c" 1
 323 003a 62B6     		CPSIE   i
 324              	@ 0 "" 2
 115:.\main.c      **** 
 116:.\main.c      ****     Receive_ClearInterrupt();//TODO clearing first edge
 325              		.loc 1 116 0
 326              		.thumb
 327 003c FFF7FEFF 		bl	Receive_ClearInterrupt
 117:.\main.c      **** 
 118:.\main.c      ****     LCD_Start();
 328              		.loc 1 118 0
 329 0040 FFF7FEFF 		bl	LCD_Start
 119:.\main.c      **** 
 120:.\main.c      ****     //enable collision detection
 121:.\main.c      ****     Idle_Collision_IRQ_StartEx(Idle_Collision_ISR);
 330              		.loc 1 121 0
 331 0044 8148     		ldr	r0, .L39+16
 332 0046 FFF7FEFF 		bl	Idle_Collision_IRQ_StartEx
 122:.\main.c      ****     Edge_detect_IRQ_StartEx(Edge_detect_ISR);
 333              		.loc 1 122 0
 334 004a 8148     		ldr	r0, .L39+20
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 9


 335 004c FFF7FEFF 		bl	Edge_detect_IRQ_StartEx
 123:.\main.c      ****     Idle_Collision_Timer_Start();
 336              		.loc 1 123 0
 337 0050 FFF7FEFF 		bl	Idle_Collision_Timer_Start
 124:.\main.c      **** 
 125:.\main.c      ****     /* Start USBFS Operation with 3V operation */
 126:.\main.c      ****     USBUART_1_Start(0u, USBUART_1_3V_OPERATION);
 338              		.loc 1 126 0
 339 0054 0020     		movs	r0, #0
 340 0056 0021     		movs	r1, #0
 341 0058 FFF7FEFF 		bl	USBUART_1_Start
 127:.\main.c      **** 
 128:.\main.c      ****     //start transmission timer
 129:.\main.c      ****     TimerISR_StartEx(TimerHandler);
 342              		.loc 1 129 0
 343 005c 7D48     		ldr	r0, .L39+24
 344 005e FFF7FEFF 		bl	TimerISR_StartEx
 130:.\main.c      **** 
 131:.\main.c      ****     ReceiveTimerIRQ_StartEx(ReceiveTimerISR);
 345              		.loc 1 131 0
 346 0062 7D48     		ldr	r0, .L39+28
 347 0064 FFF7FEFF 		bl	ReceiveTimerIRQ_StartEx
 132:.\main.c      **** 
 133:.\main.c      ****     receivedDataCount = 0;
 348              		.loc 1 133 0
 349 0068 7C4B     		ldr	r3, .L39+32
 350 006a 0022     		movs	r2, #0
 351 006c 1A60     		str	r2, [r3]
 134:.\main.c      ****     receivedDataIndex = 0;
 352              		.loc 1 134 0
 353 006e 7C4B     		ldr	r3, .L39+36
 354 0070 0022     		movs	r2, #0
 355 0072 1A60     		str	r2, [r3]
 135:.\main.c      **** 
 136:.\main.c      ****     headerBytes[0] = 0x71;  //Start of header
 356              		.loc 1 136 0
 357 0074 7123     		movs	r3, #113
 358 0076 3B72     		strb	r3, [r7, #8]
 137:.\main.c      **** 	headerBytes[1] = VERSION_NUMBER;    //Always 1
 359              		.loc 1 137 0
 360 0078 0123     		movs	r3, #1
 361 007a 7B72     		strb	r3, [r7, #9]
 138:.\main.c      **** 	headerBytes[2] = TX_SOURCE_ADDRESS; //Tells where messege is from
 362              		.loc 1 138 0
 363 007c 0023     		movs	r3, #0
 364 007e BB72     		strb	r3, [r7, #10]
 139:.\main.c      **** 	headerBytes[3] = TX_DESTINATION_ADDRESS;  //set by user  
 365              		.loc 1 139 0
 366 0080 784B     		ldr	r3, .L39+40
 367 0082 1B68     		ldr	r3, [r3]
 368 0084 DBB2     		uxtb	r3, r3
 369 0086 FB72     		strb	r3, [r7, #11]
 140:.\main.c      ****     headerBytes[4] = 0; //message length, will be set after message is entered
 370              		.loc 1 140 0
 371 0088 0023     		movs	r3, #0
 372 008a 3B73     		strb	r3, [r7, #12]
 141:.\main.c      **** 	headerBytes[5] = 0; //CRC usage: 0 = CRC not being used
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 10


 373              		.loc 1 141 0
 374 008c 0023     		movs	r3, #0
 375 008e 7B73     		strb	r3, [r7, #13]
 142:.\main.c      **** 	headerBytes[6] = 0x75;  //Header CRC
 376              		.loc 1 142 0
 377 0090 7523     		movs	r3, #117
 378 0092 BB73     		strb	r3, [r7, #14]
 379              	.L36:
 143:.\main.c      **** 
 144:.\main.c      ****     /* Main Loop: */
 145:.\main.c      ****     for(;;)
 146:.\main.c      ****     {
 147:.\main.c      ****         setNetworkStateOnLEDs();
 380              		.loc 1 147 0
 381 0094 FFF7FEFF 		bl	setNetworkStateOnLEDs
 148:.\main.c      **** 
 149:.\main.c      ****         /*Receive*/
 150:.\main.c      ****         //Precondidtion: must finished receiving data so channel state machine at idle and wait for
 151:.\main.c      ****         if(networkState == idle && receivedDataCount >= 34){//TODO remove hardcode #
 382              		.loc 1 151 0
 383 0098 734B     		ldr	r3, .L39+44
 384 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 385 009c 002B     		cmp	r3, #0
 386 009e 37D1     		bne	.L18
 387              		.loc 1 151 0 is_stmt 0 discriminator 1
 388 00a0 6E4B     		ldr	r3, .L39+32
 389 00a2 1B68     		ldr	r3, [r3]
 390 00a4 212B     		cmp	r3, #33
 391 00a6 33DD     		ble	.L18
 152:.\main.c      **** 
 153:.\main.c      ****             //Verify that have received start bit (01). Note: ignore first edge from turning system
 154:.\main.c      ****             if(diffManReceivedData[0] == 0 && diffManReceivedData[1] == 1){
 392              		.loc 1 154 0 is_stmt 1
 393 00a8 704B     		ldr	r3, .L39+48
 394 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 395 00ac 002B     		cmp	r3, #0
 396 00ae 26D1     		bne	.L19
 397              		.loc 1 154 0 is_stmt 0 discriminator 1
 398 00b0 6E4B     		ldr	r3, .L39+48
 399 00b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 400 00b4 012B     		cmp	r3, #1
 401 00b6 22D1     		bne	.L19
 155:.\main.c      ****                 receivedDataIndex = 2; //skip start bit (two half bits)
 402              		.loc 1 155 0 is_stmt 1
 403 00b8 694B     		ldr	r3, .L39+36
 404 00ba 0222     		movs	r2, #2
 405 00bc 1A60     		str	r2, [r3]
 156:.\main.c      ****                 while(receivedDataIndex < receivedDataCount-1){     //Note: receivedDataCount-1 b/c
 406              		.loc 1 156 0
 407 00be 06E0     		b	.L20
 408              	.L21:
 157:.\main.c      ****                     diffManToASCII();
 409              		.loc 1 157 0
 410 00c0 FFF7FEFF 		bl	diffManToASCII
 158:.\main.c      **** 					storeChar();
 411              		.loc 1 158 0
 412 00c4 FFF7FEFF 		bl	storeChar
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 11


 159:.\main.c      ****                     receivedChar = 0;       //Reset the char
 413              		.loc 1 159 0
 414 00c8 694B     		ldr	r3, .L39+52
 415 00ca 0022     		movs	r2, #0
 416 00cc 1A70     		strb	r2, [r3]
 417              	.L20:
 156:.\main.c      ****                     diffManToASCII();
 418              		.loc 1 156 0
 419 00ce 634B     		ldr	r3, .L39+32
 420 00d0 1B68     		ldr	r3, [r3]
 421 00d2 5A1E     		subs	r2, r3, #1
 422 00d4 624B     		ldr	r3, .L39+36
 423 00d6 1B68     		ldr	r3, [r3]
 424 00d8 9A42     		cmp	r2, r3
 425 00da F1DC     		bgt	.L21
 160:.\main.c      ****                 }
 161:.\main.c      **** 				if(headerCheck()){
 426              		.loc 1 161 0
 427 00dc FFF7FEFF 		bl	headerCheck
 428 00e0 0346     		mov	r3, r0
 429 00e2 002B     		cmp	r3, #0
 430 00e4 01D0     		beq	.L22
 162:.\main.c      ****                     printChar();
 431              		.loc 1 162 0
 432 00e6 FFF7FEFF 		bl	printChar
 433              	.L22:
 163:.\main.c      ****                 }
 164:.\main.c      **** 
 165:.\main.c      ****                 receivedDataCount = 0;  //Reset count
 434              		.loc 1 165 0
 435 00ea 5C4B     		ldr	r3, .L39+32
 436 00ec 0022     		movs	r2, #0
 437 00ee 1A60     		str	r2, [r3]
 166:.\main.c      ****                 receivedDataIndex = 0;  //Reset index
 438              		.loc 1 166 0
 439 00f0 5B4B     		ldr	r3, .L39+36
 440 00f2 0022     		movs	r2, #0
 441 00f4 1A60     		str	r2, [r3]
 167:.\main.c      ****                 currentRXCharPosition = 0;
 442              		.loc 1 167 0
 443 00f6 5F4B     		ldr	r3, .L39+56
 444 00f8 0022     		movs	r2, #0
 445 00fa 1A60     		str	r2, [r3]
 446 00fc 08E0     		b	.L18
 447              	.L19:
 168:.\main.c      ****             }
 169:.\main.c      ****             else{
 170:.\main.c      ****                 //Receive data did not start with the start bit
 171:.\main.c      ****                 receivedDataCount = 0;
 448              		.loc 1 171 0
 449 00fe 574B     		ldr	r3, .L39+32
 450 0100 0022     		movs	r2, #0
 451 0102 1A60     		str	r2, [r3]
 172:.\main.c      ****                 receivedDataIndex = 0;
 452              		.loc 1 172 0
 453 0104 564B     		ldr	r3, .L39+36
 454 0106 0022     		movs	r2, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 12


 455 0108 1A60     		str	r2, [r3]
 173:.\main.c      ****                 currentRXCharPosition = 0;
 456              		.loc 1 173 0
 457 010a 5A4B     		ldr	r3, .L39+56
 458 010c 0022     		movs	r2, #0
 459 010e 1A60     		str	r2, [r3]
 460              	.L18:
 174:.\main.c      ****             }
 175:.\main.c      ****         }
 176:.\main.c      ****         else
 177:.\main.c      ****         {
 178:.\main.c      ****             //TODO prob remove this else
 179:.\main.c      ****         }
 180:.\main.c      ****         /*End Receive*/
 181:.\main.c      **** 
 182:.\main.c      ****         if(USBUART_1_IsConfigurationChanged() != 0u) /* Host could send double SET_INTERFACE reques
 461              		.loc 1 182 0
 462 0110 FFF7FEFF 		bl	USBUART_1_IsConfigurationChanged
 463 0114 0346     		mov	r3, r0
 464 0116 002B     		cmp	r3, #0
 465 0118 06D0     		beq	.L24
 183:.\main.c      ****         {
 184:.\main.c      ****             if(USBUART_1_GetConfiguration() != 0u)   /* Init IN endpoints when device configured */
 466              		.loc 1 184 0
 467 011a FFF7FEFF 		bl	USBUART_1_GetConfiguration
 468 011e 0346     		mov	r3, r0
 469 0120 002B     		cmp	r3, #0
 470 0122 01D0     		beq	.L24
 185:.\main.c      ****             {
 186:.\main.c      ****                 /* Enumeration is done, enable OUT endpoint for receive data from Host */
 187:.\main.c      ****                 USBUART_1_CDC_Init();
 471              		.loc 1 187 0
 472 0124 FFF7FEFF 		bl	USBUART_1_CDC_Init
 473              	.L24:
 188:.\main.c      ****             }
 189:.\main.c      ****         }
 190:.\main.c      ****         if(USBUART_1_GetConfiguration() != 0u)    /* Service USB CDC when device configured */
 474              		.loc 1 190 0
 475 0128 FFF7FEFF 		bl	USBUART_1_GetConfiguration
 476 012c 0346     		mov	r3, r0
 477 012e 002B     		cmp	r3, #0
 478 0130 00F08280 		beq	.L25
 191:.\main.c      ****         {
 192:.\main.c      ****             if(USBUART_1_DataIsReady() != 0u)               /* Check for input data from PC */
 479              		.loc 1 192 0
 480 0134 FFF7FEFF 		bl	USBUART_1_DataIsReady
 481 0138 0346     		mov	r3, r0
 482 013a 002B     		cmp	r3, #0
 483 013c 7CD0     		beq	.L25
 193:.\main.c      ****             {
 194:.\main.c      ****                 rx = USBUART_1_GetChar();
 484              		.loc 1 194 0
 485 013e FFF7FEFF 		bl	USBUART_1_GetChar
 486 0142 0346     		mov	r3, r0
 487 0144 87F87E30 		strb	r3, [r7, #126]
 195:.\main.c      ****                 switch(rx){
 488              		.loc 1 195 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 13


 489 0148 97F87E30 		ldrb	r3, [r7, #126]	@ zero_extendqisi2
 490 014c 0D2B     		cmp	r3, #13
 491 014e 25D0     		beq	.L27
 492 0150 1B2B     		cmp	r3, #27
 493 0152 70D0     		beq	.L38
 494 0154 082B     		cmp	r3, #8
 495 0156 54D1     		bne	.L37
 196:.\main.c      ****                     case 8://backspace
 197:.\main.c      ****                         if(stringPosition>0){
 496              		.loc 1 197 0
 497 0158 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 498 015c 002B     		cmp	r3, #0
 499 015e 1CD0     		beq	.L30
 198:.\main.c      ****                             stringPosition--;
 500              		.loc 1 198 0
 501 0160 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 502 0164 013B     		subs	r3, r3, #1
 503 0166 87F87F30 		strb	r3, [r7, #127]
 199:.\main.c      ****                             lineString[stringPosition] = '\0';
 504              		.loc 1 199 0
 505 016a 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 506 016e 07F18002 		add	r2, r7, #128
 507 0172 1344     		add	r3, r3, r2
 508 0174 0022     		movs	r2, #0
 509 0176 03F8702C 		strb	r2, [r3, #-112]
 200:.\main.c      ****                             //backspace space backspace
 201:.\main.c      ****                             while(USBUART_1_CDCIsReady() == 0u);
 510              		.loc 1 201 0
 511 017a 00BF     		nop
 512              	.L31:
 513              		.loc 1 201 0 is_stmt 0 discriminator 1
 514 017c FFF7FEFF 		bl	USBUART_1_CDCIsReady
 515 0180 0346     		mov	r3, r0
 516 0182 002B     		cmp	r3, #0
 517 0184 FAD0     		beq	.L31
 202:.\main.c      ****                             USBUART_1_PutChar(8);
 518              		.loc 1 202 0 is_stmt 1
 519 0186 0820     		movs	r0, #8
 520 0188 FFF7FEFF 		bl	USBUART_1_PutChar
 203:.\main.c      ****                             USBUART_1_PutChar(32);
 521              		.loc 1 203 0
 522 018c 2020     		movs	r0, #32
 523 018e FFF7FEFF 		bl	USBUART_1_PutChar
 204:.\main.c      ****                             USBUART_1_PutChar(8);
 524              		.loc 1 204 0
 525 0192 0820     		movs	r0, #8
 526 0194 FFF7FEFF 		bl	USBUART_1_PutChar
 205:.\main.c      ****                         }
 206:.\main.c      ****                         break;
 527              		.loc 1 206 0
 528 0198 4EE0     		b	.L25
 529              	.L30:
 530 019a 4DE0     		b	.L25
 531              	.L27:
 207:.\main.c      ****                     case 13://enter (carriage return)
 208:.\main.c      ****                         initDiffManEncodedArray();
 532              		.loc 1 208 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 14


 533 019c FFF7FEFF 		bl	initDiffManEncodedArray
 209:.\main.c      **** 						headerBytes[4] = stringPosition;//set message length TODO maybe -1?
 534              		.loc 1 209 0
 535 01a0 97F87F30 		ldrb	r3, [r7, #127]
 536 01a4 3B73     		strb	r3, [r7, #12]
 210:.\main.c      ****                         headerToDiffMan(headerBytes);
 537              		.loc 1 210 0
 538 01a6 07F10803 		add	r3, r7, #8
 539 01aa 1846     		mov	r0, r3
 540 01ac FFF7FEFF 		bl	headerToDiffMan
 211:.\main.c      ****                         stringToDiffMan(lineString, stringPosition);
 541              		.loc 1 211 0
 542 01b0 07F11002 		add	r2, r7, #16
 543 01b4 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 544 01b8 1046     		mov	r0, r2
 545 01ba 1946     		mov	r1, r3
 546 01bc FFF7FEFF 		bl	stringToDiffMan
 212:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 547              		.loc 1 212 0
 548 01c0 00BF     		nop
 549              	.L32:
 550              		.loc 1 212 0 is_stmt 0 discriminator 1
 551 01c2 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 552 01c6 0346     		mov	r3, r0
 553 01c8 002B     		cmp	r3, #0
 554 01ca FAD0     		beq	.L32
 213:.\main.c      ****                         USBUART_1_PutCRLF();
 555              		.loc 1 213 0 is_stmt 1
 556 01cc FFF7FEFF 		bl	USBUART_1_PutCRLF
 214:.\main.c      **** 
 215:.\main.c      ****                         //keep looping until data is transmitted
 216:.\main.c      **** 
 217:.\main.c      ****                         while(!dataTransmissionComplete){//header is mostly encoded already, just n
 557              		.loc 1 217 0
 558 01d0 03E0     		b	.L33
 559              	.L34:
 218:.\main.c      **** 
 219:.\main.c      ****                             transmitData();
 560              		.loc 1 219 0
 561 01d2 FFF7FEFF 		bl	transmitData
 220:.\main.c      ****                             setNetworkStateOnLEDs();
 562              		.loc 1 220 0
 563 01d6 FFF7FEFF 		bl	setNetworkStateOnLEDs
 564              	.L33:
 217:.\main.c      **** 
 565              		.loc 1 217 0
 566 01da 194B     		ldr	r3, .L39+4
 567 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 568 01de 83F00103 		eor	r3, r3, #1
 569 01e2 DBB2     		uxtb	r3, r3
 570 01e4 002B     		cmp	r3, #0
 571 01e6 F4D1     		bne	.L34
 221:.\main.c      ****                         }
 222:.\main.c      ****                         dataTransmissionComplete = false;
 572              		.loc 1 222 0
 573 01e8 154B     		ldr	r3, .L39+4
 574 01ea 0022     		movs	r2, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 15


 575 01ec 1A70     		strb	r2, [r3]
 223:.\main.c      ****                         TX_pin_Write(1);    //set line to logic-1 after transmission
 576              		.loc 1 223 0
 577 01ee 0120     		movs	r0, #1
 578 01f0 FFF7FEFF 		bl	TX_pin_Write
 224:.\main.c      ****                         //reset index
 225:.\main.c      ****                         halfBitIndex = 0;
 579              		.loc 1 225 0
 580 01f4 204B     		ldr	r3, .L39+60
 581 01f6 0022     		movs	r2, #0
 582 01f8 1A60     		str	r2, [r3]
 226:.\main.c      ****                         stringPosition = 0;
 583              		.loc 1 226 0
 584 01fa 0023     		movs	r3, #0
 585 01fc 87F87F30 		strb	r3, [r7, #127]
 227:.\main.c      ****                         break;
 586              		.loc 1 227 0
 587 0200 1AE0     		b	.L25
 588              	.L37:
 228:.\main.c      ****                     case 27://escape
 229:.\main.c      ****                         break;
 230:.\main.c      ****                     default://everything else
 231:.\main.c      ****                         lineString[stringPosition] = rx;
 589              		.loc 1 231 0
 590 0202 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 591 0206 07F18002 		add	r2, r7, #128
 592 020a 1344     		add	r3, r3, r2
 593 020c 97F87E20 		ldrb	r2, [r7, #126]
 594 0210 03F8702C 		strb	r2, [r3, #-112]
 232:.\main.c      ****                         stringPosition++;
 595              		.loc 1 232 0
 596 0214 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 597 0218 0133     		adds	r3, r3, #1
 598 021a 87F87F30 		strb	r3, [r7, #127]
 233:.\main.c      ****                         while(USBUART_1_CDCIsReady() == 0u);
 599              		.loc 1 233 0
 600 021e 00BF     		nop
 601              	.L35:
 602              		.loc 1 233 0 is_stmt 0 discriminator 1
 603 0220 FFF7FEFF 		bl	USBUART_1_CDCIsReady
 604 0224 0346     		mov	r3, r0
 605 0226 002B     		cmp	r3, #0
 606 0228 FAD0     		beq	.L35
 234:.\main.c      ****                         USBUART_1_PutChar(rx);       /* Send data back to PC */
 607              		.loc 1 234 0 is_stmt 1
 608 022a 97F87E30 		ldrb	r3, [r7, #126]	@ zero_extendqisi2
 609 022e 1846     		mov	r0, r3
 610 0230 FFF7FEFF 		bl	USBUART_1_PutChar
 235:.\main.c      ****                         break;
 611              		.loc 1 235 0
 612 0234 00E0     		b	.L25
 613              	.L38:
 229:.\main.c      ****                     default://everything else
 614              		.loc 1 229 0
 615 0236 00BF     		nop
 616              	.L25:
 236:.\main.c      ****                 }
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 16


 237:.\main.c      ****             }
 238:.\main.c      ****         }
 239:.\main.c      ****     }
 617              		.loc 1 239 0 discriminator 1
 618 0238 2CE7     		b	.L36
 619              	.L40:
 620 023a 00BF     		.align	2
 621              	.L39:
 622 023c 00000000 		.word	timerExpired
 623 0240 00000000 		.word	dataTransmissionComplete
 624 0244 00000000 		.word	messageLength
 625 0248 00000000 		.word	powerOnEdge
 626 024c 00000000 		.word	Idle_Collision_ISR
 627 0250 00000000 		.word	Edge_detect_ISR
 628 0254 00000000 		.word	TimerHandler
 629 0258 00000000 		.word	ReceiveTimerISR
 630 025c 00000000 		.word	receivedDataCount
 631 0260 00000000 		.word	receivedDataIndex
 632 0264 00000000 		.word	TX_DESTINATION_ADDRESS
 633 0268 00000000 		.word	networkState
 634 026c 00000000 		.word	diffManReceivedData
 635 0270 00000000 		.word	receivedChar
 636 0274 00000000 		.word	currentRXCharPosition
 637 0278 00000000 		.word	halfBitIndex
 638              		.cfi_endproc
 639              	.LFE67:
 640              		.size	main, .-main
 641              		.section	.text.initDiffManEncodedArray,"ax",%progbits
 642              		.align	2
 643              		.global	initDiffManEncodedArray
 644              		.thumb
 645              		.thumb_func
 646              		.type	initDiffManEncodedArray, %function
 647              	initDiffManEncodedArray:
 648              	.LFB68:
 240:.\main.c      **** }
 241:.\main.c      **** 
 242:.\main.c      **** /*
 243:.\main.c      **** init dif man encoded data array with a leading "starting bit". The starting bit is madeup of the
 244:.\main.c      **** half bits 01.
 245:.\main.c      **** Only call when starting to transfer a new string
 246:.\main.c      **** */
 247:.\main.c      **** void initDiffManEncodedArray(){
 649              		.loc 1 247 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654 0000 80B4     		push	{r7}
 655              		.cfi_def_cfa_offset 4
 656              		.cfi_offset 7, -4
 657 0002 00AF     		add	r7, sp, #0
 658              		.cfi_def_cfa_register 7
 248:.\main.c      ****     halfBitIndex = 0;
 659              		.loc 1 248 0
 660 0004 0E4B     		ldr	r3, .L42
 661 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 17


 662 0008 1A60     		str	r2, [r3]
 249:.\main.c      ****     diffManEncodedData[halfBitIndex] = 0;
 663              		.loc 1 249 0
 664 000a 0D4B     		ldr	r3, .L42
 665 000c 1B68     		ldr	r3, [r3]
 666 000e 0D4A     		ldr	r2, .L42+4
 667 0010 0021     		movs	r1, #0
 668 0012 42F82310 		str	r1, [r2, r3, lsl #2]
 250:.\main.c      ****     halfBitIndex++;
 669              		.loc 1 250 0
 670 0016 0A4B     		ldr	r3, .L42
 671 0018 1B68     		ldr	r3, [r3]
 672 001a 0133     		adds	r3, r3, #1
 673 001c 084A     		ldr	r2, .L42
 674 001e 1360     		str	r3, [r2]
 251:.\main.c      ****     diffManEncodedData[halfBitIndex] = 1;
 675              		.loc 1 251 0
 676 0020 074B     		ldr	r3, .L42
 677 0022 1B68     		ldr	r3, [r3]
 678 0024 074A     		ldr	r2, .L42+4
 679 0026 0121     		movs	r1, #1
 680 0028 42F82310 		str	r1, [r2, r3, lsl #2]
 252:.\main.c      ****     halfBitIndex++;
 681              		.loc 1 252 0
 682 002c 044B     		ldr	r3, .L42
 683 002e 1B68     		ldr	r3, [r3]
 684 0030 0133     		adds	r3, r3, #1
 685 0032 034A     		ldr	r2, .L42
 686 0034 1360     		str	r3, [r2]
 253:.\main.c      **** }
 687              		.loc 1 253 0
 688 0036 BD46     		mov	sp, r7
 689              		.cfi_def_cfa_register 13
 690              		@ sp needed
 691 0038 5DF8047B 		ldr	r7, [sp], #4
 692              		.cfi_restore 7
 693              		.cfi_def_cfa_offset 0
 694 003c 7047     		bx	lr
 695              	.L43:
 696 003e 00BF     		.align	2
 697              	.L42:
 698 0040 00000000 		.word	halfBitIndex
 699 0044 00000000 		.word	diffManEncodedData
 700              		.cfi_endproc
 701              	.LFE68:
 702              		.size	initDiffManEncodedArray, .-initDiffManEncodedArray
 703              		.section	.text.headerToDiffMan,"ax",%progbits
 704              		.align	2
 705              		.global	headerToDiffMan
 706              		.thumb
 707              		.thumb_func
 708              		.type	headerToDiffMan, %function
 709              	headerToDiffMan:
 710              	.LFB69:
 254:.\main.c      **** /*
 255:.\main.c      **** Enter key has been pressed, change the 7 header bytes into diff man data.
 256:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 18


 257:.\main.c      **** */
 258:.\main.c      **** void headerToDiffMan(uint8 *headerBytes){
 711              		.loc 1 258 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 16
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 80B5     		push	{r7, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 84B0     		sub	sp, sp, #16
 720              		.cfi_def_cfa_offset 24
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 723 0006 7860     		str	r0, [r7, #4]
 259:.\main.c      **** 
 260:.\main.c      ****     unsigned int i = 0;
 724              		.loc 1 260 0
 725 0008 0023     		movs	r3, #0
 726 000a FB60     		str	r3, [r7, #12]
 261:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 727              		.loc 1 261 0
 728 000c 0023     		movs	r3, #0
 729 000e FB60     		str	r3, [r7, #12]
 730 0010 09E0     		b	.L45
 731              	.L46:
 262:.\main.c      ****         hexToDiffMan(headerBytes[i]);
 732              		.loc 1 262 0 discriminator 3
 733 0012 7A68     		ldr	r2, [r7, #4]
 734 0014 FB68     		ldr	r3, [r7, #12]
 735 0016 1344     		add	r3, r3, r2
 736 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 737 001a 1846     		mov	r0, r3
 738 001c FFF7FEFF 		bl	hexToDiffMan
 261:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 739              		.loc 1 261 0 discriminator 3
 740 0020 FB68     		ldr	r3, [r7, #12]
 741 0022 0133     		adds	r3, r3, #1
 742 0024 FB60     		str	r3, [r7, #12]
 743              	.L45:
 261:.\main.c      ****     for(i = 0; i < LENGTH_OF_HEADER; i++){
 744              		.loc 1 261 0 is_stmt 0 discriminator 1
 745 0026 FB68     		ldr	r3, [r7, #12]
 746 0028 062B     		cmp	r3, #6
 747 002a F2D9     		bls	.L46
 263:.\main.c      ****     }
 264:.\main.c      **** }
 748              		.loc 1 264 0 is_stmt 1
 749 002c 1037     		adds	r7, r7, #16
 750              		.cfi_def_cfa_offset 8
 751 002e BD46     		mov	sp, r7
 752              		.cfi_def_cfa_register 13
 753              		@ sp needed
 754 0030 80BD     		pop	{r7, pc}
 755              		.cfi_endproc
 756              	.LFE69:
 757              		.size	headerToDiffMan, .-headerToDiffMan
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 19


 758 0032 00BF     		.section	.text.hexToDiffMan,"ax",%progbits
 759              		.align	2
 760              		.global	hexToDiffMan
 761              		.thumb
 762              		.thumb_func
 763              		.type	hexToDiffMan, %function
 764              	hexToDiffMan:
 765              	.LFB70:
 265:.\main.c      **** 
 266:.\main.c      **** /*
 267:.\main.c      **** Helper method. Call only from headerToDiffMan
 268:.\main.c      **** Converts a hexadecimal value to a differental manchester line encoded version. 
 269:.\main.c      **** Used for the header b/c does not added a leading 1 like asciiToDiffMan() method.
 270:.\main.c      **** */
 271:.\main.c      **** void hexToDiffMan(uint8 hexValue){
 766              		.loc 1 271 0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 56
 769              		@ frame_needed = 1, uses_anonymous_args = 0
 770              		@ link register save eliminated.
 771 0000 80B4     		push	{r7}
 772              		.cfi_def_cfa_offset 4
 773              		.cfi_offset 7, -4
 774 0002 8FB0     		sub	sp, sp, #60
 775              		.cfi_def_cfa_offset 64
 776 0004 00AF     		add	r7, sp, #0
 777              		.cfi_def_cfa_register 7
 778 0006 0346     		mov	r3, r0
 779 0008 FB71     		strb	r3, [r7, #7]
 272:.\main.c      ****     unsigned int binaryValueOfHex[8];//index zero is LSB
 273:.\main.c      ****     
 274:.\main.c      ****     //Coverts the hexadecimal value into binary
 275:.\main.c      ****     int i;
 276:.\main.c      ****     for (i = 0; i < 8; ++i){
 780              		.loc 1 276 0
 781 000a 0023     		movs	r3, #0
 782 000c 7B63     		str	r3, [r7, #52]
 783 000e 0FE0     		b	.L48
 784              	.L49:
 277:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 785              		.loc 1 277 0 discriminator 3
 786 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 787 0012 7B6B     		ldr	r3, [r7, #52]
 788 0014 42FA03F3 		asr	r3, r2, r3
 789 0018 03F00102 		and	r2, r3, #1
 790 001c 7B6B     		ldr	r3, [r7, #52]
 791 001e 9B00     		lsls	r3, r3, #2
 792 0020 07F13801 		add	r1, r7, #56
 793 0024 0B44     		add	r3, r3, r1
 794 0026 43F82C2C 		str	r2, [r3, #-44]
 276:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
 795              		.loc 1 276 0 discriminator 3
 796 002a 7B6B     		ldr	r3, [r7, #52]
 797 002c 0133     		adds	r3, r3, #1
 798 002e 7B63     		str	r3, [r7, #52]
 799              	.L48:
 276:.\main.c      ****         binaryValueOfHex[i] = (hexValue >> i) & 1;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 20


 800              		.loc 1 276 0 is_stmt 0 discriminator 1
 801 0030 7B6B     		ldr	r3, [r7, #52]
 802 0032 072B     		cmp	r3, #7
 803 0034 ECDD     		ble	.L49
 278:.\main.c      ****     }
 279:.\main.c      ****     
 280:.\main.c      ****     //Differential manchester encodes the 8 bits (the binary version of the hexadecimal value).
 281:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 282:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 804              		.loc 1 282 0 is_stmt 1
 805 0036 454B     		ldr	r3, .L57
 806 0038 1B68     		ldr	r3, [r3]
 807 003a 013B     		subs	r3, r3, #1
 808 003c 444A     		ldr	r2, .L57+4
 809 003e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 810 0042 87F83330 		strb	r3, [r7, #51]
 283:.\main.c      ****     int j;
 284:.\main.c      ****     for(j=INDEX_OF_MSB_HEX;j>=0;j--)
 811              		.loc 1 284 0
 812 0046 0723     		movs	r3, #7
 813 0048 FB62     		str	r3, [r7, #44]
 814 004a 76E0     		b	.L50
 815              	.L56:
 285:.\main.c      ****     {
 286:.\main.c      ****         if(binaryValueOfHex[j] == 1)
 816              		.loc 1 286 0
 817 004c FB6A     		ldr	r3, [r7, #44]
 818 004e 9B00     		lsls	r3, r3, #2
 819 0050 07F13802 		add	r2, r7, #56
 820 0054 1344     		add	r3, r3, r2
 821 0056 53F82C3C 		ldr	r3, [r3, #-44]
 822 005a 012B     		cmp	r3, #1
 823 005c 31D1     		bne	.L51
 287:.\main.c      ****         {
 288:.\main.c      ****             //bit == 1
 289:.\main.c      ****             if(previousHalfBit == 1)
 824              		.loc 1 289 0
 825 005e 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 826 0062 012B     		cmp	r3, #1
 827 0064 16D1     		bne	.L52
 290:.\main.c      ****             {
 291:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 828              		.loc 1 291 0
 829 0066 394B     		ldr	r3, .L57
 830 0068 1B68     		ldr	r3, [r3]
 831 006a 394A     		ldr	r2, .L57+4
 832 006c 0121     		movs	r1, #1
 833 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 292:.\main.c      ****                 halfBitIndex++;
 834              		.loc 1 292 0
 835 0072 364B     		ldr	r3, .L57
 836 0074 1B68     		ldr	r3, [r3]
 837 0076 0133     		adds	r3, r3, #1
 838 0078 344A     		ldr	r2, .L57
 839 007a 1360     		str	r3, [r2]
 293:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 840              		.loc 1 293 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 21


 841 007c 334B     		ldr	r3, .L57
 842 007e 1B68     		ldr	r3, [r3]
 843 0080 334A     		ldr	r2, .L57+4
 844 0082 0021     		movs	r1, #0
 845 0084 42F82310 		str	r1, [r2, r3, lsl #2]
 294:.\main.c      ****                 halfBitIndex++;
 846              		.loc 1 294 0
 847 0088 304B     		ldr	r3, .L57
 848 008a 1B68     		ldr	r3, [r3]
 849 008c 0133     		adds	r3, r3, #1
 850 008e 2F4A     		ldr	r2, .L57
 851 0090 1360     		str	r3, [r2]
 852 0092 47E0     		b	.L54
 853              	.L52:
 295:.\main.c      ****             }
 296:.\main.c      ****             else
 297:.\main.c      ****             {
 298:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 854              		.loc 1 298 0
 855 0094 2D4B     		ldr	r3, .L57
 856 0096 1B68     		ldr	r3, [r3]
 857 0098 2D4A     		ldr	r2, .L57+4
 858 009a 0021     		movs	r1, #0
 859 009c 42F82310 		str	r1, [r2, r3, lsl #2]
 299:.\main.c      ****                 halfBitIndex++;
 860              		.loc 1 299 0
 861 00a0 2A4B     		ldr	r3, .L57
 862 00a2 1B68     		ldr	r3, [r3]
 863 00a4 0133     		adds	r3, r3, #1
 864 00a6 294A     		ldr	r2, .L57
 865 00a8 1360     		str	r3, [r2]
 300:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 866              		.loc 1 300 0
 867 00aa 284B     		ldr	r3, .L57
 868 00ac 1B68     		ldr	r3, [r3]
 869 00ae 284A     		ldr	r2, .L57+4
 870 00b0 0121     		movs	r1, #1
 871 00b2 42F82310 		str	r1, [r2, r3, lsl #2]
 301:.\main.c      ****                 halfBitIndex++;
 872              		.loc 1 301 0
 873 00b6 254B     		ldr	r3, .L57
 874 00b8 1B68     		ldr	r3, [r3]
 875 00ba 0133     		adds	r3, r3, #1
 876 00bc 234A     		ldr	r2, .L57
 877 00be 1360     		str	r3, [r2]
 878 00c0 30E0     		b	.L54
 879              	.L51:
 302:.\main.c      ****             }
 303:.\main.c      **** 
 304:.\main.c      ****         }
 305:.\main.c      ****         else
 306:.\main.c      ****         {
 307:.\main.c      ****             //bit == 0
 308:.\main.c      ****             if(previousHalfBit == 1)
 880              		.loc 1 308 0
 881 00c2 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 882 00c6 012B     		cmp	r3, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 22


 883 00c8 16D1     		bne	.L55
 309:.\main.c      ****             {
 310:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 884              		.loc 1 310 0
 885 00ca 204B     		ldr	r3, .L57
 886 00cc 1B68     		ldr	r3, [r3]
 887 00ce 204A     		ldr	r2, .L57+4
 888 00d0 0021     		movs	r1, #0
 889 00d2 42F82310 		str	r1, [r2, r3, lsl #2]
 311:.\main.c      ****                 halfBitIndex++;
 890              		.loc 1 311 0
 891 00d6 1D4B     		ldr	r3, .L57
 892 00d8 1B68     		ldr	r3, [r3]
 893 00da 0133     		adds	r3, r3, #1
 894 00dc 1B4A     		ldr	r2, .L57
 895 00de 1360     		str	r3, [r2]
 312:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 896              		.loc 1 312 0
 897 00e0 1A4B     		ldr	r3, .L57
 898 00e2 1B68     		ldr	r3, [r3]
 899 00e4 1A4A     		ldr	r2, .L57+4
 900 00e6 0121     		movs	r1, #1
 901 00e8 42F82310 		str	r1, [r2, r3, lsl #2]
 313:.\main.c      ****                 halfBitIndex++;
 902              		.loc 1 313 0
 903 00ec 174B     		ldr	r3, .L57
 904 00ee 1B68     		ldr	r3, [r3]
 905 00f0 0133     		adds	r3, r3, #1
 906 00f2 164A     		ldr	r2, .L57
 907 00f4 1360     		str	r3, [r2]
 908 00f6 15E0     		b	.L54
 909              	.L55:
 314:.\main.c      ****             }
 315:.\main.c      ****             else
 316:.\main.c      ****             {
 317:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 910              		.loc 1 317 0
 911 00f8 144B     		ldr	r3, .L57
 912 00fa 1B68     		ldr	r3, [r3]
 913 00fc 144A     		ldr	r2, .L57+4
 914 00fe 0121     		movs	r1, #1
 915 0100 42F82310 		str	r1, [r2, r3, lsl #2]
 318:.\main.c      ****                 halfBitIndex++;
 916              		.loc 1 318 0
 917 0104 114B     		ldr	r3, .L57
 918 0106 1B68     		ldr	r3, [r3]
 919 0108 0133     		adds	r3, r3, #1
 920 010a 104A     		ldr	r2, .L57
 921 010c 1360     		str	r3, [r2]
 319:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 922              		.loc 1 319 0
 923 010e 0F4B     		ldr	r3, .L57
 924 0110 1B68     		ldr	r3, [r3]
 925 0112 0F4A     		ldr	r2, .L57+4
 926 0114 0021     		movs	r1, #0
 927 0116 42F82310 		str	r1, [r2, r3, lsl #2]
 320:.\main.c      ****                 halfBitIndex++;
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 23


 928              		.loc 1 320 0
 929 011a 0C4B     		ldr	r3, .L57
 930 011c 1B68     		ldr	r3, [r3]
 931 011e 0133     		adds	r3, r3, #1
 932 0120 0A4A     		ldr	r2, .L57
 933 0122 1360     		str	r3, [r2]
 934              	.L54:
 321:.\main.c      ****             }
 322:.\main.c      ****         }
 323:.\main.c      **** 
 324:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 935              		.loc 1 324 0 discriminator 2
 936 0124 094B     		ldr	r3, .L57
 937 0126 1B68     		ldr	r3, [r3]
 938 0128 013B     		subs	r3, r3, #1
 939 012a 094A     		ldr	r2, .L57+4
 940 012c 52F82330 		ldr	r3, [r2, r3, lsl #2]
 941 0130 87F83330 		strb	r3, [r7, #51]
 284:.\main.c      ****     {
 942              		.loc 1 284 0 discriminator 2
 943 0134 FB6A     		ldr	r3, [r7, #44]
 944 0136 013B     		subs	r3, r3, #1
 945 0138 FB62     		str	r3, [r7, #44]
 946              	.L50:
 284:.\main.c      ****     {
 947              		.loc 1 284 0 is_stmt 0 discriminator 1
 948 013a FB6A     		ldr	r3, [r7, #44]
 949 013c 002B     		cmp	r3, #0
 950 013e 85DA     		bge	.L56
 325:.\main.c      ****     }//end for
 326:.\main.c      **** }//end hexToDiffMan function
 951              		.loc 1 326 0 is_stmt 1
 952 0140 3C37     		adds	r7, r7, #60
 953              		.cfi_def_cfa_offset 4
 954 0142 BD46     		mov	sp, r7
 955              		.cfi_def_cfa_register 13
 956              		@ sp needed
 957 0144 5DF8047B 		ldr	r7, [sp], #4
 958              		.cfi_restore 7
 959              		.cfi_def_cfa_offset 0
 960 0148 7047     		bx	lr
 961              	.L58:
 962 014a 00BF     		.align	2
 963              	.L57:
 964 014c 00000000 		.word	halfBitIndex
 965 0150 00000000 		.word	diffManEncodedData
 966              		.cfi_endproc
 967              	.LFE70:
 968              		.size	hexToDiffMan, .-hexToDiffMan
 969              		.section	.text.stringToDiffMan,"ax",%progbits
 970              		.align	2
 971              		.global	stringToDiffMan
 972              		.thumb
 973              		.thumb_func
 974              		.type	stringToDiffMan, %function
 975              	stringToDiffMan:
 976              	.LFB71:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 24


 327:.\main.c      **** 
 328:.\main.c      **** /*
 329:.\main.c      **** Enter key has been pressed, change binary data into diff man data.
 330:.\main.c      **** Call from main. Requires main to access diffManEncodedData array
 331:.\main.c      **** */
 332:.\main.c      **** void stringToDiffMan(char *lineString, uint8 stringPosition){
 977              		.loc 1 332 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 16
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981 0000 80B5     		push	{r7, lr}
 982              		.cfi_def_cfa_offset 8
 983              		.cfi_offset 7, -8
 984              		.cfi_offset 14, -4
 985 0002 84B0     		sub	sp, sp, #16
 986              		.cfi_def_cfa_offset 24
 987 0004 00AF     		add	r7, sp, #0
 988              		.cfi_def_cfa_register 7
 989 0006 7860     		str	r0, [r7, #4]
 990 0008 0B46     		mov	r3, r1
 991 000a FB70     		strb	r3, [r7, #3]
 333:.\main.c      **** 
 334:.\main.c      ****     unsigned int i = 0;
 992              		.loc 1 334 0
 993 000c 0023     		movs	r3, #0
 994 000e FB60     		str	r3, [r7, #12]
 335:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 995              		.loc 1 335 0
 996 0010 0023     		movs	r3, #0
 997 0012 FB60     		str	r3, [r7, #12]
 998 0014 09E0     		b	.L60
 999              	.L61:
 336:.\main.c      ****         asciiToDiffMan(lineString[i]);
 1000              		.loc 1 336 0 discriminator 3
 1001 0016 7A68     		ldr	r2, [r7, #4]
 1002 0018 FB68     		ldr	r3, [r7, #12]
 1003 001a 1344     		add	r3, r3, r2
 1004 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1005 001e 1846     		mov	r0, r3
 1006 0020 FFF7FEFF 		bl	asciiToDiffMan
 335:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1007              		.loc 1 335 0 discriminator 3
 1008 0024 FB68     		ldr	r3, [r7, #12]
 1009 0026 0133     		adds	r3, r3, #1
 1010 0028 FB60     		str	r3, [r7, #12]
 1011              	.L60:
 335:.\main.c      ****     for(i = 0; i < stringPosition; i++){
 1012              		.loc 1 335 0 is_stmt 0 discriminator 1
 1013 002a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1014 002c FB68     		ldr	r3, [r7, #12]
 1015 002e 9A42     		cmp	r2, r3
 1016 0030 F1D8     		bhi	.L61
 337:.\main.c      ****     }
 338:.\main.c      **** }
 1017              		.loc 1 338 0 is_stmt 1
 1018 0032 1037     		adds	r7, r7, #16
 1019              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 25


 1020 0034 BD46     		mov	sp, r7
 1021              		.cfi_def_cfa_register 13
 1022              		@ sp needed
 1023 0036 80BD     		pop	{r7, pc}
 1024              		.cfi_endproc
 1025              	.LFE71:
 1026              		.size	stringToDiffMan, .-stringToDiffMan
 1027              		.section	.text.asciiToDiffMan,"ax",%progbits
 1028              		.align	2
 1029              		.global	asciiToDiffMan
 1030              		.thumb
 1031              		.thumb_func
 1032              		.type	asciiToDiffMan, %function
 1033              	asciiToDiffMan:
 1034              	.LFB72:
 339:.\main.c      **** 
 340:.\main.c      **** /*
 341:.\main.c      **** Helper method. Call only from stringToDiffMan.
 342:.\main.c      **** Converts a ascii char to a differental manchester line encoded version. 
 343:.\main.c      **** Will add leading 1, so only use for characters, not the header.
 344:.\main.c      **** */
 345:.\main.c      **** void asciiToDiffMan(char asciiChar)
 346:.\main.c      **** {
 1035              		.loc 1 346 0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 104
 1038              		@ frame_needed = 1, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 1040 0000 80B4     		push	{r7}
 1041              		.cfi_def_cfa_offset 4
 1042              		.cfi_offset 7, -4
 1043 0002 9BB0     		sub	sp, sp, #108
 1044              		.cfi_def_cfa_offset 112
 1045 0004 00AF     		add	r7, sp, #0
 1046              		.cfi_def_cfa_register 7
 1047 0006 0346     		mov	r3, r0
 1048 0008 FB71     		strb	r3, [r7, #7]
 347:.\main.c      ****     uint8 previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1049              		.loc 1 347 0
 1050 000a 6C4B     		ldr	r3, .L74
 1051 000c 1B68     		ldr	r3, [r3]
 1052 000e 013B     		subs	r3, r3, #1
 1053 0010 6B4A     		ldr	r2, .L74+4
 1054 0012 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1055 0016 87F86730 		strb	r3, [r7, #103]
 348:.\main.c      ****     //send starting 1 bit (encoded)
 349:.\main.c      ****     if(previousHalfBit == 1){
 1056              		.loc 1 349 0
 1057 001a 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1058 001e 012B     		cmp	r3, #1
 1059 0020 16D1     		bne	.L63
 350:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1060              		.loc 1 350 0
 1061 0022 664B     		ldr	r3, .L74
 1062 0024 1B68     		ldr	r3, [r3]
 1063 0026 664A     		ldr	r2, .L74+4
 1064 0028 0121     		movs	r1, #1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 26


 1065 002a 42F82310 		str	r1, [r2, r3, lsl #2]
 351:.\main.c      ****         halfBitIndex++;
 1066              		.loc 1 351 0
 1067 002e 634B     		ldr	r3, .L74
 1068 0030 1B68     		ldr	r3, [r3]
 1069 0032 0133     		adds	r3, r3, #1
 1070 0034 614A     		ldr	r2, .L74
 1071 0036 1360     		str	r3, [r2]
 352:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1072              		.loc 1 352 0
 1073 0038 604B     		ldr	r3, .L74
 1074 003a 1B68     		ldr	r3, [r3]
 1075 003c 604A     		ldr	r2, .L74+4
 1076 003e 0021     		movs	r1, #0
 1077 0040 42F82310 		str	r1, [r2, r3, lsl #2]
 353:.\main.c      ****         halfBitIndex++;
 1078              		.loc 1 353 0
 1079 0044 5D4B     		ldr	r3, .L74
 1080 0046 1B68     		ldr	r3, [r3]
 1081 0048 0133     		adds	r3, r3, #1
 1082 004a 5C4A     		ldr	r2, .L74
 1083 004c 1360     		str	r3, [r2]
 1084 004e 15E0     		b	.L64
 1085              	.L63:
 354:.\main.c      ****     }else{
 355:.\main.c      ****         diffManEncodedData[halfBitIndex] = 0;
 1086              		.loc 1 355 0
 1087 0050 5A4B     		ldr	r3, .L74
 1088 0052 1B68     		ldr	r3, [r3]
 1089 0054 5A4A     		ldr	r2, .L74+4
 1090 0056 0021     		movs	r1, #0
 1091 0058 42F82310 		str	r1, [r2, r3, lsl #2]
 356:.\main.c      ****         halfBitIndex++;
 1092              		.loc 1 356 0
 1093 005c 574B     		ldr	r3, .L74
 1094 005e 1B68     		ldr	r3, [r3]
 1095 0060 0133     		adds	r3, r3, #1
 1096 0062 564A     		ldr	r2, .L74
 1097 0064 1360     		str	r3, [r2]
 357:.\main.c      ****         diffManEncodedData[halfBitIndex] = 1;
 1098              		.loc 1 357 0
 1099 0066 554B     		ldr	r3, .L74
 1100 0068 1B68     		ldr	r3, [r3]
 1101 006a 554A     		ldr	r2, .L74+4
 1102 006c 0121     		movs	r1, #1
 1103 006e 42F82310 		str	r1, [r2, r3, lsl #2]
 358:.\main.c      ****         halfBitIndex++;
 1104              		.loc 1 358 0
 1105 0072 524B     		ldr	r3, .L74
 1106 0074 1B68     		ldr	r3, [r3]
 1107 0076 0133     		adds	r3, r3, #1
 1108 0078 504A     		ldr	r2, .L74
 1109 007a 1360     		str	r3, [r2]
 1110              	.L64:
 359:.\main.c      ****     }
 360:.\main.c      ****     previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1111              		.loc 1 360 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 27


 1112 007c 4F4B     		ldr	r3, .L74
 1113 007e 1B68     		ldr	r3, [r3]
 1114 0080 013B     		subs	r3, r3, #1
 1115 0082 4F4A     		ldr	r2, .L74+4
 1116 0084 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1117 0088 87F86730 		strb	r3, [r7, #103]
 361:.\main.c      **** 
 362:.\main.c      **** 
 363:.\main.c      ****     //convert asciil char to binary value (which will be 7 bits)
 364:.\main.c      ****     unsigned int binaryValueOfChar[20];//index zero is LSB
 365:.\main.c      ****     int i;
 366:.\main.c      ****     for(i=0; asciiChar>0; i++)
 1118              		.loc 1 366 0
 1119 008c 0023     		movs	r3, #0
 1120 008e 3B66     		str	r3, [r7, #96]
 1121 0090 0FE0     		b	.L65
 1122              	.L66:
 367:.\main.c      ****     {
 368:.\main.c      ****         binaryValueOfChar[i]=asciiChar%2;
 1123              		.loc 1 368 0 discriminator 3
 1124 0092 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1125 0094 03F00102 		and	r2, r3, #1
 1126 0098 3B6E     		ldr	r3, [r7, #96]
 1127 009a 9B00     		lsls	r3, r3, #2
 1128 009c 07F16801 		add	r1, r7, #104
 1129 00a0 0B44     		add	r3, r3, r1
 1130 00a2 43F85C2C 		str	r2, [r3, #-92]
 369:.\main.c      ****         asciiChar=asciiChar/2;
 1131              		.loc 1 369 0 discriminator 3
 1132 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1133 00a8 5B08     		lsrs	r3, r3, #1
 1134 00aa FB71     		strb	r3, [r7, #7]
 366:.\main.c      ****     {
 1135              		.loc 1 366 0 discriminator 3
 1136 00ac 3B6E     		ldr	r3, [r7, #96]
 1137 00ae 0133     		adds	r3, r3, #1
 1138 00b0 3B66     		str	r3, [r7, #96]
 1139              	.L65:
 366:.\main.c      ****     {
 1140              		.loc 1 366 0 is_stmt 0 discriminator 1
 1141 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1142 00b4 002B     		cmp	r3, #0
 1143 00b6 ECD1     		bne	.L66
 370:.\main.c      ****     }
 371:.\main.c      ****     
 372:.\main.c      ****     //differential encode the 7 bits (from the binary version of the char)
 373:.\main.c      ****     //must start at the end of the array so to encode the MSB first
 374:.\main.c      ****     int j;
 375:.\main.c      ****     for(j=INDEX_OF_MSB_ASCII;j>=0;j--)
 1144              		.loc 1 375 0 is_stmt 1
 1145 00b8 0623     		movs	r3, #6
 1146 00ba FB65     		str	r3, [r7, #92]
 1147 00bc 76E0     		b	.L67
 1148              	.L73:
 376:.\main.c      ****     {
 377:.\main.c      ****         if(binaryValueOfChar[j] == 1)
 1149              		.loc 1 377 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 28


 1150 00be FB6D     		ldr	r3, [r7, #92]
 1151 00c0 9B00     		lsls	r3, r3, #2
 1152 00c2 07F16802 		add	r2, r7, #104
 1153 00c6 1344     		add	r3, r3, r2
 1154 00c8 53F85C3C 		ldr	r3, [r3, #-92]
 1155 00cc 012B     		cmp	r3, #1
 1156 00ce 31D1     		bne	.L68
 378:.\main.c      ****         {
 379:.\main.c      ****             //bit == 1
 380:.\main.c      ****             if(previousHalfBit == 1)
 1157              		.loc 1 380 0
 1158 00d0 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1159 00d4 012B     		cmp	r3, #1
 1160 00d6 16D1     		bne	.L69
 381:.\main.c      ****             {
 382:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1161              		.loc 1 382 0
 1162 00d8 384B     		ldr	r3, .L74
 1163 00da 1B68     		ldr	r3, [r3]
 1164 00dc 384A     		ldr	r2, .L74+4
 1165 00de 0121     		movs	r1, #1
 1166 00e0 42F82310 		str	r1, [r2, r3, lsl #2]
 383:.\main.c      ****                 halfBitIndex++;
 1167              		.loc 1 383 0
 1168 00e4 354B     		ldr	r3, .L74
 1169 00e6 1B68     		ldr	r3, [r3]
 1170 00e8 0133     		adds	r3, r3, #1
 1171 00ea 344A     		ldr	r2, .L74
 1172 00ec 1360     		str	r3, [r2]
 384:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1173              		.loc 1 384 0
 1174 00ee 334B     		ldr	r3, .L74
 1175 00f0 1B68     		ldr	r3, [r3]
 1176 00f2 334A     		ldr	r2, .L74+4
 1177 00f4 0021     		movs	r1, #0
 1178 00f6 42F82310 		str	r1, [r2, r3, lsl #2]
 385:.\main.c      ****                 halfBitIndex++;
 1179              		.loc 1 385 0
 1180 00fa 304B     		ldr	r3, .L74
 1181 00fc 1B68     		ldr	r3, [r3]
 1182 00fe 0133     		adds	r3, r3, #1
 1183 0100 2E4A     		ldr	r2, .L74
 1184 0102 1360     		str	r3, [r2]
 1185 0104 47E0     		b	.L71
 1186              	.L69:
 386:.\main.c      ****             }
 387:.\main.c      ****             else
 388:.\main.c      ****             {
 389:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1187              		.loc 1 389 0
 1188 0106 2D4B     		ldr	r3, .L74
 1189 0108 1B68     		ldr	r3, [r3]
 1190 010a 2D4A     		ldr	r2, .L74+4
 1191 010c 0021     		movs	r1, #0
 1192 010e 42F82310 		str	r1, [r2, r3, lsl #2]
 390:.\main.c      ****                 halfBitIndex++;
 1193              		.loc 1 390 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 29


 1194 0112 2A4B     		ldr	r3, .L74
 1195 0114 1B68     		ldr	r3, [r3]
 1196 0116 0133     		adds	r3, r3, #1
 1197 0118 284A     		ldr	r2, .L74
 1198 011a 1360     		str	r3, [r2]
 391:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1199              		.loc 1 391 0
 1200 011c 274B     		ldr	r3, .L74
 1201 011e 1B68     		ldr	r3, [r3]
 1202 0120 274A     		ldr	r2, .L74+4
 1203 0122 0121     		movs	r1, #1
 1204 0124 42F82310 		str	r1, [r2, r3, lsl #2]
 392:.\main.c      ****                 halfBitIndex++;
 1205              		.loc 1 392 0
 1206 0128 244B     		ldr	r3, .L74
 1207 012a 1B68     		ldr	r3, [r3]
 1208 012c 0133     		adds	r3, r3, #1
 1209 012e 234A     		ldr	r2, .L74
 1210 0130 1360     		str	r3, [r2]
 1211 0132 30E0     		b	.L71
 1212              	.L68:
 393:.\main.c      ****             }
 394:.\main.c      **** 
 395:.\main.c      ****         }
 396:.\main.c      ****         else
 397:.\main.c      ****         {
 398:.\main.c      ****             //bit == 0
 399:.\main.c      ****             if(previousHalfBit == 1)
 1213              		.loc 1 399 0
 1214 0134 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 1215 0138 012B     		cmp	r3, #1
 1216 013a 16D1     		bne	.L72
 400:.\main.c      ****             {
 401:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1217              		.loc 1 401 0
 1218 013c 1F4B     		ldr	r3, .L74
 1219 013e 1B68     		ldr	r3, [r3]
 1220 0140 1F4A     		ldr	r2, .L74+4
 1221 0142 0021     		movs	r1, #0
 1222 0144 42F82310 		str	r1, [r2, r3, lsl #2]
 402:.\main.c      ****                 halfBitIndex++;
 1223              		.loc 1 402 0
 1224 0148 1C4B     		ldr	r3, .L74
 1225 014a 1B68     		ldr	r3, [r3]
 1226 014c 0133     		adds	r3, r3, #1
 1227 014e 1B4A     		ldr	r2, .L74
 1228 0150 1360     		str	r3, [r2]
 403:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1229              		.loc 1 403 0
 1230 0152 1A4B     		ldr	r3, .L74
 1231 0154 1B68     		ldr	r3, [r3]
 1232 0156 1A4A     		ldr	r2, .L74+4
 1233 0158 0121     		movs	r1, #1
 1234 015a 42F82310 		str	r1, [r2, r3, lsl #2]
 404:.\main.c      ****                 halfBitIndex++;
 1235              		.loc 1 404 0
 1236 015e 174B     		ldr	r3, .L74
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 30


 1237 0160 1B68     		ldr	r3, [r3]
 1238 0162 0133     		adds	r3, r3, #1
 1239 0164 154A     		ldr	r2, .L74
 1240 0166 1360     		str	r3, [r2]
 1241 0168 15E0     		b	.L71
 1242              	.L72:
 405:.\main.c      ****             }
 406:.\main.c      ****             else
 407:.\main.c      ****             {
 408:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 1;
 1243              		.loc 1 408 0
 1244 016a 144B     		ldr	r3, .L74
 1245 016c 1B68     		ldr	r3, [r3]
 1246 016e 144A     		ldr	r2, .L74+4
 1247 0170 0121     		movs	r1, #1
 1248 0172 42F82310 		str	r1, [r2, r3, lsl #2]
 409:.\main.c      ****                 halfBitIndex++;
 1249              		.loc 1 409 0
 1250 0176 114B     		ldr	r3, .L74
 1251 0178 1B68     		ldr	r3, [r3]
 1252 017a 0133     		adds	r3, r3, #1
 1253 017c 0F4A     		ldr	r2, .L74
 1254 017e 1360     		str	r3, [r2]
 410:.\main.c      ****                 diffManEncodedData[halfBitIndex] = 0;
 1255              		.loc 1 410 0
 1256 0180 0E4B     		ldr	r3, .L74
 1257 0182 1B68     		ldr	r3, [r3]
 1258 0184 0E4A     		ldr	r2, .L74+4
 1259 0186 0021     		movs	r1, #0
 1260 0188 42F82310 		str	r1, [r2, r3, lsl #2]
 411:.\main.c      ****                 halfBitIndex++;
 1261              		.loc 1 411 0
 1262 018c 0B4B     		ldr	r3, .L74
 1263 018e 1B68     		ldr	r3, [r3]
 1264 0190 0133     		adds	r3, r3, #1
 1265 0192 0A4A     		ldr	r2, .L74
 1266 0194 1360     		str	r3, [r2]
 1267              	.L71:
 412:.\main.c      ****             }
 413:.\main.c      ****         }
 414:.\main.c      **** 
 415:.\main.c      ****         previousHalfBit = diffManEncodedData[halfBitIndex-1];
 1268              		.loc 1 415 0 discriminator 2
 1269 0196 094B     		ldr	r3, .L74
 1270 0198 1B68     		ldr	r3, [r3]
 1271 019a 013B     		subs	r3, r3, #1
 1272 019c 084A     		ldr	r2, .L74+4
 1273 019e 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1274 01a2 87F86730 		strb	r3, [r7, #103]
 375:.\main.c      ****     {
 1275              		.loc 1 375 0 discriminator 2
 1276 01a6 FB6D     		ldr	r3, [r7, #92]
 1277 01a8 013B     		subs	r3, r3, #1
 1278 01aa FB65     		str	r3, [r7, #92]
 1279              	.L67:
 375:.\main.c      ****     {
 1280              		.loc 1 375 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 31


 1281 01ac FB6D     		ldr	r3, [r7, #92]
 1282 01ae 002B     		cmp	r3, #0
 1283 01b0 85DA     		bge	.L73
 416:.\main.c      ****     }//end for
 417:.\main.c      **** 
 418:.\main.c      **** }//end function
 1284              		.loc 1 418 0 is_stmt 1
 1285 01b2 6C37     		adds	r7, r7, #108
 1286              		.cfi_def_cfa_offset 4
 1287 01b4 BD46     		mov	sp, r7
 1288              		.cfi_def_cfa_register 13
 1289              		@ sp needed
 1290 01b6 5DF8047B 		ldr	r7, [sp], #4
 1291              		.cfi_restore 7
 1292              		.cfi_def_cfa_offset 0
 1293 01ba 7047     		bx	lr
 1294              	.L75:
 1295              		.align	2
 1296              	.L74:
 1297 01bc 00000000 		.word	halfBitIndex
 1298 01c0 00000000 		.word	diffManEncodedData
 1299              		.cfi_endproc
 1300              	.LFE72:
 1301              		.size	asciiToDiffMan, .-asciiToDiffMan
 1302              		.global	__aeabi_i2d
 1303              		.global	__aeabi_ddiv
 1304              		.global	__aeabi_dmul
 1305              		.global	__aeabi_d2iz
 1306              		.section	.text.transmitData,"ax",%progbits
 1307              		.align	2
 1308              		.global	transmitData
 1309              		.thumb
 1310              		.thumb_func
 1311              		.type	transmitData, %function
 1312              	transmitData:
 1313              	.LFB73:
 419:.\main.c      **** 
 420:.\main.c      **** /*
 421:.\main.c      **** Transmits the diff man encoded data. Must have converted string to diff man before calling this met
 422:.\main.c      **** Checks network state before transmitting.
 423:.\main.c      **** Note: halfBitIndex will be equal to the size of the diffManEncodedData array at this point.
 424:.\main.c      **** */
 425:.\main.c      **** void transmitData(){
 1314              		.loc 1 425 0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 8
 1317              		@ frame_needed = 1, uses_anonymous_args = 0
 1318 0000 80B5     		push	{r7, lr}
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 82B0     		sub	sp, sp, #8
 1323              		.cfi_def_cfa_offset 16
 1324 0004 00AF     		add	r7, sp, #0
 1325              		.cfi_def_cfa_register 7
 426:.\main.c      ****     int i;
 427:.\main.c      ****     for(i = 0; i < halfBitIndex; i++){
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 32


 1326              		.loc 1 427 0
 1327 0006 0023     		movs	r3, #0
 1328 0008 7B60     		str	r3, [r7, #4]
 1329 000a 47E0     		b	.L77
 1330              	.L81:
 428:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 429:.\main.c      ****         //Else break out of transmition and wait random time
 430:.\main.c      ****         if(networkState != idle){
 1331              		.loc 1 430 0
 1332 000c 2B4B     		ldr	r3, .L83
 1333 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1334 0010 002B     		cmp	r3, #0
 1335 0012 2BD0     		beq	.L78
 431:.\main.c      ****             if(networkState == collision){
 1336              		.loc 1 431 0
 1337 0014 294B     		ldr	r3, .L83
 1338 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1339 0018 022B     		cmp	r3, #2
 1340 001a 27D1     		bne	.L78
 1341              	.LBB2:
 432:.\main.c      ****                 TX_pin_Write(1);
 1342              		.loc 1 432 0
 1343 001c 0120     		movs	r0, #1
 1344 001e FFF7FEFF 		bl	TX_pin_Write
 433:.\main.c      ****                 int value = (getRandomNumber()/128.0)*800.0;
 1345              		.loc 1 433 0
 1346 0022 FFF7FEFF 		bl	getRandomNumber
 1347 0026 0346     		mov	r3, r0
 1348 0028 1846     		mov	r0, r3
 1349 002a FFF7FEFF 		bl	__aeabi_i2d
 1350 002e 0246     		mov	r2, r0
 1351 0030 0B46     		mov	r3, r1
 1352 0032 1046     		mov	r0, r2
 1353 0034 1946     		mov	r1, r3
 1354 0036 4FF00002 		mov	r2, #0
 1355 003a 214B     		ldr	r3, .L83+4
 1356 003c FFF7FEFF 		bl	__aeabi_ddiv
 1357 0040 0246     		mov	r2, r0
 1358 0042 0B46     		mov	r3, r1
 1359 0044 1046     		mov	r0, r2
 1360 0046 1946     		mov	r1, r3
 1361 0048 4FF00002 		mov	r2, #0
 1362 004c 1D4B     		ldr	r3, .L83+8
 1363 004e FFF7FEFF 		bl	__aeabi_dmul
 1364 0052 0246     		mov	r2, r0
 1365 0054 0B46     		mov	r3, r1
 1366 0056 1046     		mov	r0, r2
 1367 0058 1946     		mov	r1, r3
 1368 005a FFF7FEFF 		bl	__aeabi_d2iz
 1369 005e 0346     		mov	r3, r0
 1370 0060 3B60     		str	r3, [r7]
 434:.\main.c      **** 
 435:.\main.c      ****                 //Back-off a random time between 0 and 0.8 seconds
 436:.\main.c      ****                 CyDelay(value);
 1371              		.loc 1 436 0
 1372 0062 3B68     		ldr	r3, [r7]
 1373 0064 1846     		mov	r0, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 33


 1374 0066 FFF7FEFF 		bl	CyDelay
 437:.\main.c      ****                 break;
 1375              		.loc 1 437 0
 1376 006a 1CE0     		b	.L79
 1377              	.L78:
 1378              	.LBE2:
 438:.\main.c      ****             }
 439:.\main.c      ****         }
 440:.\main.c      ****         TX_pin_Write(diffManEncodedData[i]);
 1379              		.loc 1 440 0
 1380 006c 164A     		ldr	r2, .L83+12
 1381 006e 7B68     		ldr	r3, [r7, #4]
 1382 0070 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1383 0074 DBB2     		uxtb	r3, r3
 1384 0076 1846     		mov	r0, r3
 1385 0078 FFF7FEFF 		bl	TX_pin_Write
 441:.\main.c      ****         Timer_Start();
 1386              		.loc 1 441 0
 1387 007c FFF7FEFF 		bl	Timer_Start
 442:.\main.c      ****         while(!timerExpired);
 1388              		.loc 1 442 0
 1389 0080 00BF     		nop
 1390              	.L80:
 1391              		.loc 1 442 0 is_stmt 0 discriminator 1
 1392 0082 124B     		ldr	r3, .L83+16
 1393 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1394 0086 83F00103 		eor	r3, r3, #1
 1395 008a DBB2     		uxtb	r3, r3
 1396 008c 002B     		cmp	r3, #0
 1397 008e F8D1     		bne	.L80
 443:.\main.c      ****         timerExpired = false;
 1398              		.loc 1 443 0 is_stmt 1 discriminator 2
 1399 0090 0E4B     		ldr	r3, .L83+16
 1400 0092 0022     		movs	r2, #0
 1401 0094 1A70     		strb	r2, [r3]
 427:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1402              		.loc 1 427 0 discriminator 2
 1403 0096 7B68     		ldr	r3, [r7, #4]
 1404 0098 0133     		adds	r3, r3, #1
 1405 009a 7B60     		str	r3, [r7, #4]
 1406              	.L77:
 427:.\main.c      ****         //check for idle, if network is idle, cotinue to transmit data.
 1407              		.loc 1 427 0 is_stmt 0 discriminator 1
 1408 009c 0C4B     		ldr	r3, .L83+20
 1409 009e 1B68     		ldr	r3, [r3]
 1410 00a0 7A68     		ldr	r2, [r7, #4]
 1411 00a2 9A42     		cmp	r2, r3
 1412 00a4 B2DB     		blt	.L81
 1413              	.L79:
 444:.\main.c      ****     }
 445:.\main.c      **** 
 446:.\main.c      ****     //when finished transmitting diff manchester encoded data, set flag
 447:.\main.c      ****     if(i == halfBitIndex){
 1414              		.loc 1 447 0 is_stmt 1
 1415 00a6 0A4B     		ldr	r3, .L83+20
 1416 00a8 1B68     		ldr	r3, [r3]
 1417 00aa 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 34


 1418 00ac 9A42     		cmp	r2, r3
 1419 00ae 02D1     		bne	.L76
 448:.\main.c      ****         dataTransmissionComplete = true;
 1420              		.loc 1 448 0
 1421 00b0 084B     		ldr	r3, .L83+24
 1422 00b2 0122     		movs	r2, #1
 1423 00b4 1A70     		strb	r2, [r3]
 1424              	.L76:
 449:.\main.c      ****     }
 450:.\main.c      **** }
 1425              		.loc 1 450 0
 1426 00b6 0837     		adds	r7, r7, #8
 1427              		.cfi_def_cfa_offset 8
 1428 00b8 BD46     		mov	sp, r7
 1429              		.cfi_def_cfa_register 13
 1430              		@ sp needed
 1431 00ba 80BD     		pop	{r7, pc}
 1432              	.L84:
 1433              		.align	2
 1434              	.L83:
 1435 00bc 00000000 		.word	networkState
 1436 00c0 00006040 		.word	1080033280
 1437 00c4 00008940 		.word	1082720256
 1438 00c8 00000000 		.word	diffManEncodedData
 1439 00cc 00000000 		.word	timerExpired
 1440 00d0 00000000 		.word	halfBitIndex
 1441 00d4 00000000 		.word	dataTransmissionComplete
 1442              		.cfi_endproc
 1443              	.LFE73:
 1444              		.size	transmitData, .-transmitData
 1445              		.section	.text.setNetworkStateOnLEDs,"ax",%progbits
 1446              		.align	2
 1447              		.global	setNetworkStateOnLEDs
 1448              		.thumb
 1449              		.thumb_func
 1450              		.type	setNetworkStateOnLEDs, %function
 1451              	setNetworkStateOnLEDs:
 1452              	.LFB74:
 451:.\main.c      **** 
 452:.\main.c      **** void setNetworkStateOnLEDs(){
 1453              		.loc 1 452 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 0
 1456              		@ frame_needed = 1, uses_anonymous_args = 0
 1457 0000 80B5     		push	{r7, lr}
 1458              		.cfi_def_cfa_offset 8
 1459              		.cfi_offset 7, -8
 1460              		.cfi_offset 14, -4
 1461 0002 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
 453:.\main.c      **** 	 switch(networkState){
 1463              		.loc 1 453 0
 1464 0004 134B     		ldr	r3, .L91
 1465 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1466 0008 012B     		cmp	r3, #1
 1467 000a 04D0     		beq	.L87
 1468 000c 022B     		cmp	r3, #2
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 35


 1469 000e 16D0     		beq	.L88
 1470 0010 002B     		cmp	r3, #0
 1471 0012 0AD0     		beq	.L89
 454:.\main.c      ****         case busy:
 455:.\main.c      ****         {
 456:.\main.c      ****             LED4_Write(1);
 457:.\main.c      ****             LED3_Write(0);
 458:.\main.c      ****             LED2_Write(0);
 459:.\main.c      ****             break;
 460:.\main.c      ****         }
 461:.\main.c      ****         case idle:
 462:.\main.c      ****         {
 463:.\main.c      ****             LED3_Write(1);
 464:.\main.c      ****             LED4_Write(0);
 465:.\main.c      ****             LED2_Write(0);
 466:.\main.c      ****             break;
 467:.\main.c      ****         }
 468:.\main.c      ****         case collision:
 469:.\main.c      ****         {
 470:.\main.c      ****             LED2_Write(1);
 471:.\main.c      ****             LED4_Write(0);
 472:.\main.c      ****             LED3_Write(0);
 473:.\main.c      ****             break;
 474:.\main.c      ****         }
 475:.\main.c      ****         default:
 476:.\main.c      ****         {
 477:.\main.c      ****            //error
 478:.\main.c      ****             break;
 1472              		.loc 1 478 0
 1473 0014 1DE0     		b	.L85
 1474              	.L87:
 456:.\main.c      ****             LED3_Write(0);
 1475              		.loc 1 456 0
 1476 0016 0120     		movs	r0, #1
 1477 0018 FFF7FEFF 		bl	LED4_Write
 457:.\main.c      ****             LED2_Write(0);
 1478              		.loc 1 457 0
 1479 001c 0020     		movs	r0, #0
 1480 001e FFF7FEFF 		bl	LED3_Write
 458:.\main.c      ****             break;
 1481              		.loc 1 458 0
 1482 0022 0020     		movs	r0, #0
 1483 0024 FFF7FEFF 		bl	LED2_Write
 459:.\main.c      ****         }
 1484              		.loc 1 459 0
 1485 0028 13E0     		b	.L85
 1486              	.L89:
 463:.\main.c      ****             LED4_Write(0);
 1487              		.loc 1 463 0
 1488 002a 0120     		movs	r0, #1
 1489 002c FFF7FEFF 		bl	LED3_Write
 464:.\main.c      ****             LED2_Write(0);
 1490              		.loc 1 464 0
 1491 0030 0020     		movs	r0, #0
 1492 0032 FFF7FEFF 		bl	LED4_Write
 465:.\main.c      ****             break;
 1493              		.loc 1 465 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 36


 1494 0036 0020     		movs	r0, #0
 1495 0038 FFF7FEFF 		bl	LED2_Write
 466:.\main.c      ****         }
 1496              		.loc 1 466 0
 1497 003c 09E0     		b	.L85
 1498              	.L88:
 470:.\main.c      ****             LED4_Write(0);
 1499              		.loc 1 470 0
 1500 003e 0120     		movs	r0, #1
 1501 0040 FFF7FEFF 		bl	LED2_Write
 471:.\main.c      ****             LED3_Write(0);
 1502              		.loc 1 471 0
 1503 0044 0020     		movs	r0, #0
 1504 0046 FFF7FEFF 		bl	LED4_Write
 472:.\main.c      ****             break;
 1505              		.loc 1 472 0
 1506 004a 0020     		movs	r0, #0
 1507 004c FFF7FEFF 		bl	LED3_Write
 473:.\main.c      ****         }
 1508              		.loc 1 473 0
 1509 0050 00BF     		nop
 1510              	.L85:
 479:.\main.c      ****         }
 480:.\main.c      **** 	}
 481:.\main.c      **** }
 1511              		.loc 1 481 0
 1512 0052 80BD     		pop	{r7, pc}
 1513              	.L92:
 1514              		.align	2
 1515              	.L91:
 1516 0054 00000000 		.word	networkState
 1517              		.cfi_endproc
 1518              	.LFE74:
 1519              		.size	setNetworkStateOnLEDs, .-setNetworkStateOnLEDs
 1520              		.section	.text.getRandomNumber,"ax",%progbits
 1521              		.align	2
 1522              		.global	getRandomNumber
 1523              		.thumb
 1524              		.thumb_func
 1525              		.type	getRandomNumber, %function
 1526              	getRandomNumber:
 1527              	.LFB75:
 482:.\main.c      **** 
 483:.\main.c      **** /*
 484:.\main.c      **** Generates a random value from 1 to 128. Used in the random backoff time equation: (N/128)(0.800 sec
 485:.\main.c      **** */
 486:.\main.c      **** int getRandomNumber()
 487:.\main.c      **** {
 1528              		.loc 1 487 0
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 16
 1531              		@ frame_needed = 1, uses_anonymous_args = 0
 1532 0000 80B5     		push	{r7, lr}
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 7, -8
 1535              		.cfi_offset 14, -4
 1536 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 37


 1537              		.cfi_def_cfa_offset 24
 1538 0004 00AF     		add	r7, sp, #0
 1539              		.cfi_def_cfa_register 7
 488:.\main.c      ****     const int MIN_N = 1;
 1540              		.loc 1 488 0
 1541 0006 0123     		movs	r3, #1
 1542 0008 FB60     		str	r3, [r7, #12]
 489:.\main.c      ****     const int MAX_N = 128;
 1543              		.loc 1 489 0
 1544 000a 8023     		movs	r3, #128
 1545 000c BB60     		str	r3, [r7, #8]
 490:.\main.c      **** 
 491:.\main.c      ****     int n;
 492:.\main.c      **** /*
 493:.\main.c      ****     Get first and second random numbers.
 494:.\main.c      ****     */
 495:.\main.c      ****     n =rand() % (MAX_N - MIN_N + 1) + MIN_N;
 1546              		.loc 1 495 0
 1547 000e FFF7FEFF 		bl	rand
 1548 0012 0246     		mov	r2, r0
 1549 0014 B968     		ldr	r1, [r7, #8]
 1550 0016 FB68     		ldr	r3, [r7, #12]
 1551 0018 CB1A     		subs	r3, r1, r3
 1552 001a 0133     		adds	r3, r3, #1
 1553 001c 92FBF3F1 		sdiv	r1, r2, r3
 1554 0020 03FB01F3 		mul	r3, r3, r1
 1555 0024 D21A     		subs	r2, r2, r3
 1556 0026 FB68     		ldr	r3, [r7, #12]
 1557 0028 1344     		add	r3, r3, r2
 1558 002a 7B60     		str	r3, [r7, #4]
 496:.\main.c      ****     return n;
 1559              		.loc 1 496 0
 1560 002c 7B68     		ldr	r3, [r7, #4]
 497:.\main.c      **** }
 1561              		.loc 1 497 0
 1562 002e 1846     		mov	r0, r3
 1563 0030 1037     		adds	r7, r7, #16
 1564              		.cfi_def_cfa_offset 8
 1565 0032 BD46     		mov	sp, r7
 1566              		.cfi_def_cfa_register 13
 1567              		@ sp needed
 1568 0034 80BD     		pop	{r7, pc}
 1569              		.cfi_endproc
 1570              	.LFE75:
 1571              		.size	getRandomNumber, .-getRandomNumber
 1572 0036 00BF     		.section	.text.diffManToASCII,"ax",%progbits
 1573              		.align	2
 1574              		.global	diffManToASCII
 1575              		.thumb
 1576              		.thumb_func
 1577              		.type	diffManToASCII, %function
 1578              	diffManToASCII:
 1579              	.LFB76:
 498:.\main.c      **** 
 499:.\main.c      **** /*
 500:.\main.c      **** Helper method.
 501:.\main.c      **** Convert differental manchester line encoded byte to ascii char
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 38


 502:.\main.c      **** */
 503:.\main.c      **** void diffManToASCII()
 504:.\main.c      **** {
 1580              		.loc 1 504 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 8
 1583              		@ frame_needed = 1, uses_anonymous_args = 0
 1584              		@ link register save eliminated.
 1585 0000 80B4     		push	{r7}
 1586              		.cfi_def_cfa_offset 4
 1587              		.cfi_offset 7, -4
 1588 0002 83B0     		sub	sp, sp, #12
 1589              		.cfi_def_cfa_offset 16
 1590 0004 00AF     		add	r7, sp, #0
 1591              		.cfi_def_cfa_register 7
 505:.\main.c      ****     int i;
 506:.\main.c      ****     for(i = 0; i < EIGHT_BITS; i++){
 1592              		.loc 1 506 0
 1593 0006 0023     		movs	r3, #0
 1594 0008 7B60     		str	r3, [r7, #4]
 1595 000a 42E0     		b	.L96
 1596              	.L102:
 1597              	.LBB3:
 507:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1598              		.loc 1 507 0
 1599 000c 254B     		ldr	r3, .L103
 1600 000e 1B68     		ldr	r3, [r3]
 1601 0010 013B     		subs	r3, r3, #1
 1602 0012 254A     		ldr	r2, .L103+4
 1603 0014 D35C     		ldrb	r3, [r2, r3]
 1604 0016 FB70     		strb	r3, [r7, #3]
 508:.\main.c      ****         //send starting 1 bit (encoded)
 509:.\main.c      ****         if(diffManReceivedData[receivedDataIndex] == 1){
 1605              		.loc 1 509 0
 1606 0018 224B     		ldr	r3, .L103
 1607 001a 1B68     		ldr	r3, [r3]
 1608 001c 224A     		ldr	r2, .L103+4
 1609 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1610 0020 012B     		cmp	r3, #1
 1611 0022 17D1     		bne	.L97
 510:.\main.c      ****             //current half bit is 1
 511:.\main.c      ****             if(previousHalfBit == 1)
 1612              		.loc 1 511 0
 1613 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1614 0026 012B     		cmp	r3, #1
 1615 0028 0FD1     		bne	.L98
 512:.\main.c      ****             {
 513:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1616              		.loc 1 513 0
 1617 002a 7B68     		ldr	r3, [r7, #4]
 1618 002c C3F10703 		rsb	r3, r3, #7
 1619 0030 0122     		movs	r2, #1
 1620 0032 02FA03F3 		lsl	r3, r2, r3
 1621 0036 DAB2     		uxtb	r2, r3
 1622 0038 1C4B     		ldr	r3, .L103+8
 1623 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1624 003c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 39


 1625 003e 1343     		orrs	r3, r3, r2
 1626 0040 DBB2     		uxtb	r3, r3
 1627 0042 DAB2     		uxtb	r2, r3
 1628 0044 194B     		ldr	r3, .L103+8
 1629 0046 1A70     		strb	r2, [r3]
 1630 0048 1BE0     		b	.L100
 1631              	.L98:
 514:.\main.c      ****             }
 515:.\main.c      ****             else
 516:.\main.c      ****             {
 517:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1632              		.loc 1 517 0
 1633 004a 184B     		ldr	r3, .L103+8
 1634 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1635 004e 174B     		ldr	r3, .L103+8
 1636 0050 1A70     		strb	r2, [r3]
 1637 0052 16E0     		b	.L100
 1638              	.L97:
 518:.\main.c      ****             }
 519:.\main.c      ****         }
 520:.\main.c      ****         else{
 521:.\main.c      ****             //current half bit is 0
 522:.\main.c      ****             if(previousHalfBit == 1)
 1639              		.loc 1 522 0
 1640 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1641 0056 012B     		cmp	r3, #1
 1642 0058 04D1     		bne	.L101
 523:.\main.c      ****             {
 524:.\main.c      ****                 receivedChar |= (0 << (7 - i));
 1643              		.loc 1 524 0
 1644 005a 144B     		ldr	r3, .L103+8
 1645 005c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1646 005e 134B     		ldr	r3, .L103+8
 1647 0060 1A70     		strb	r2, [r3]
 1648 0062 0EE0     		b	.L100
 1649              	.L101:
 525:.\main.c      ****             }
 526:.\main.c      ****             else
 527:.\main.c      ****             {
 528:.\main.c      ****                 receivedChar |= (1 << (7 - i));
 1650              		.loc 1 528 0
 1651 0064 7B68     		ldr	r3, [r7, #4]
 1652 0066 C3F10703 		rsb	r3, r3, #7
 1653 006a 0122     		movs	r2, #1
 1654 006c 02FA03F3 		lsl	r3, r2, r3
 1655 0070 DAB2     		uxtb	r2, r3
 1656 0072 0E4B     		ldr	r3, .L103+8
 1657 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1658 0076 DBB2     		uxtb	r3, r3
 1659 0078 1343     		orrs	r3, r3, r2
 1660 007a DBB2     		uxtb	r3, r3
 1661 007c DAB2     		uxtb	r2, r3
 1662 007e 0B4B     		ldr	r3, .L103+8
 1663 0080 1A70     		strb	r2, [r3]
 1664              	.L100:
 529:.\main.c      ****             }
 530:.\main.c      ****         }
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 40


 531:.\main.c      ****         receivedDataIndex += 2;
 1665              		.loc 1 531 0 discriminator 2
 1666 0082 084B     		ldr	r3, .L103
 1667 0084 1B68     		ldr	r3, [r3]
 1668 0086 0233     		adds	r3, r3, #2
 1669 0088 064A     		ldr	r2, .L103
 1670 008a 1360     		str	r3, [r2]
 1671              	.LBE3:
 506:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1672              		.loc 1 506 0 discriminator 2
 1673 008c 7B68     		ldr	r3, [r7, #4]
 1674 008e 0133     		adds	r3, r3, #1
 1675 0090 7B60     		str	r3, [r7, #4]
 1676              	.L96:
 506:.\main.c      ****         uint8 previousHalfBit = diffManReceivedData[receivedDataIndex-1];
 1677              		.loc 1 506 0 is_stmt 0 discriminator 1
 1678 0092 7B68     		ldr	r3, [r7, #4]
 1679 0094 072B     		cmp	r3, #7
 1680 0096 B9DD     		ble	.L102
 532:.\main.c      ****     }//end for loop
 533:.\main.c      **** }
 1681              		.loc 1 533 0 is_stmt 1
 1682 0098 0C37     		adds	r7, r7, #12
 1683              		.cfi_def_cfa_offset 4
 1684 009a BD46     		mov	sp, r7
 1685              		.cfi_def_cfa_register 13
 1686              		@ sp needed
 1687 009c 5DF8047B 		ldr	r7, [sp], #4
 1688              		.cfi_restore 7
 1689              		.cfi_def_cfa_offset 0
 1690 00a0 7047     		bx	lr
 1691              	.L104:
 1692 00a2 00BF     		.align	2
 1693              	.L103:
 1694 00a4 00000000 		.word	receivedDataIndex
 1695 00a8 00000000 		.word	diffManReceivedData
 1696 00ac 00000000 		.word	receivedChar
 1697              		.cfi_endproc
 1698              	.LFE76:
 1699              		.size	diffManToASCII, .-diffManToASCII
 1700              		.section	.text.storeChar,"ax",%progbits
 1701              		.align	2
 1702              		.global	storeChar
 1703              		.thumb
 1704              		.thumb_func
 1705              		.type	storeChar, %function
 1706              	storeChar:
 1707              	.LFB77:
 534:.\main.c      **** 
 535:.\main.c      **** //stores char in receive array
 536:.\main.c      **** void storeChar(){
 1708              		.loc 1 536 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 1, uses_anonymous_args = 0
 1712              		@ link register save eliminated.
 1713 0000 80B4     		push	{r7}
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 41


 1714              		.cfi_def_cfa_offset 4
 1715              		.cfi_offset 7, -4
 1716 0002 00AF     		add	r7, sp, #0
 1717              		.cfi_def_cfa_register 7
 537:.\main.c      **** 	receivedChar &= ASCII_CHAR_MASK;
 1718              		.loc 1 537 0
 1719 0004 0A4B     		ldr	r3, .L106
 1720 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1721 0008 03F07F03 		and	r3, r3, #127
 1722 000c DAB2     		uxtb	r2, r3
 1723 000e 084B     		ldr	r3, .L106
 1724 0010 1A70     		strb	r2, [r3]
 538:.\main.c      **** 	rxChar[currentRXCharPosition] = receivedChar;
 1725              		.loc 1 538 0
 1726 0012 084B     		ldr	r3, .L106+4
 1727 0014 1B68     		ldr	r3, [r3]
 1728 0016 064A     		ldr	r2, .L106
 1729 0018 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1730 001a 074A     		ldr	r2, .L106+8
 1731 001c D154     		strb	r1, [r2, r3]
 539:.\main.c      **** 	currentRXCharPosition++;
 1732              		.loc 1 539 0
 1733 001e 054B     		ldr	r3, .L106+4
 1734 0020 1B68     		ldr	r3, [r3]
 1735 0022 0133     		adds	r3, r3, #1
 1736 0024 034A     		ldr	r2, .L106+4
 1737 0026 1360     		str	r3, [r2]
 540:.\main.c      **** }
 1738              		.loc 1 540 0
 1739 0028 BD46     		mov	sp, r7
 1740              		.cfi_def_cfa_register 13
 1741              		@ sp needed
 1742 002a 5DF8047B 		ldr	r7, [sp], #4
 1743              		.cfi_restore 7
 1744              		.cfi_def_cfa_offset 0
 1745 002e 7047     		bx	lr
 1746              	.L107:
 1747              		.align	2
 1748              	.L106:
 1749 0030 00000000 		.word	receivedChar
 1750 0034 00000000 		.word	currentRXCharPosition
 1751 0038 00000000 		.word	rxChar
 1752              		.cfi_endproc
 1753              	.LFE77:
 1754              		.size	storeChar, .-storeChar
 1755              		.section	.text.printChar,"ax",%progbits
 1756              		.align	2
 1757              		.global	printChar
 1758              		.thumb
 1759              		.thumb_func
 1760              		.type	printChar, %function
 1761              	printChar:
 1762              	.LFB78:
 541:.\main.c      **** 
 542:.\main.c      **** //Grabs all chars and prints to LCD
 543:.\main.c      **** void printChar(){
 1763              		.loc 1 543 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 42


 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 8
 1766              		@ frame_needed = 1, uses_anonymous_args = 0
 1767 0000 80B5     		push	{r7, lr}
 1768              		.cfi_def_cfa_offset 8
 1769              		.cfi_offset 7, -8
 1770              		.cfi_offset 14, -4
 1771 0002 82B0     		sub	sp, sp, #8
 1772              		.cfi_def_cfa_offset 16
 1773 0004 00AF     		add	r7, sp, #0
 1774              		.cfi_def_cfa_register 7
 544:.\main.c      **** 	int i;//char position after array
 545:.\main.c      ****     for(i = 7; i < messageLength; i++){//we are assuming messageLength from the header is valid and
 1775              		.loc 1 545 0
 1776 0006 0723     		movs	r3, #7
 1777 0008 7B60     		str	r3, [r7, #4]
 1778 000a 09E0     		b	.L109
 1779              	.L110:
 546:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1780              		.loc 1 546 0 discriminator 3
 1781 000c 084A     		ldr	r2, .L111
 1782 000e 7B68     		ldr	r3, [r7, #4]
 1783 0010 1344     		add	r3, r3, r2
 1784 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1785 0014 1846     		mov	r0, r3
 1786 0016 FFF7FEFF 		bl	LCD_PutChar
 545:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1787              		.loc 1 545 0 discriminator 3
 1788 001a 7B68     		ldr	r3, [r7, #4]
 1789 001c 0133     		adds	r3, r3, #1
 1790 001e 7B60     		str	r3, [r7, #4]
 1791              	.L109:
 545:.\main.c      **** 		LCD_PutChar(rxChar[i]);
 1792              		.loc 1 545 0 is_stmt 0 discriminator 1
 1793 0020 044B     		ldr	r3, .L111+4
 1794 0022 1B68     		ldr	r3, [r3]
 1795 0024 7A68     		ldr	r2, [r7, #4]
 1796 0026 9A42     		cmp	r2, r3
 1797 0028 F0DB     		blt	.L110
 547:.\main.c      **** 		//TODO: implement USB transmit
 548:.\main.c      ****     }
 549:.\main.c      **** }
 1798              		.loc 1 549 0 is_stmt 1
 1799 002a 0837     		adds	r7, r7, #8
 1800              		.cfi_def_cfa_offset 8
 1801 002c BD46     		mov	sp, r7
 1802              		.cfi_def_cfa_register 13
 1803              		@ sp needed
 1804 002e 80BD     		pop	{r7, pc}
 1805              	.L112:
 1806              		.align	2
 1807              	.L111:
 1808 0030 00000000 		.word	rxChar
 1809 0034 00000000 		.word	messageLength
 1810              		.cfi_endproc
 1811              	.LFE78:
 1812              		.size	printChar, .-printChar
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 43


 1813              		.section	.text.headerCheck,"ax",%progbits
 1814              		.align	2
 1815              		.global	headerCheck
 1816              		.thumb
 1817              		.thumb_func
 1818              		.type	headerCheck, %function
 1819              	headerCheck:
 1820              	.LFB79:
 550:.\main.c      **** 
 551:.\main.c      **** //checks received header and strips from array if valid
 552:.\main.c      **** //otherwise, disregard contents
 553:.\main.c      **** bool headerCheck(){
 1821              		.loc 1 553 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 0
 1824              		@ frame_needed = 1, uses_anonymous_args = 0
 1825 0000 80B5     		push	{r7, lr}
 1826              		.cfi_def_cfa_offset 8
 1827              		.cfi_offset 7, -8
 1828              		.cfi_offset 14, -4
 1829 0002 00AF     		add	r7, sp, #0
 1830              		.cfi_def_cfa_register 7
 554:.\main.c      ****     //nested if loops are probably the easiest way to check
 555:.\main.c      **** 	if(rxChar[0] == 'q'){
 1831              		.loc 1 555 0
 1832 0004 124B     		ldr	r3, .L117
 1833 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1834 0008 712B     		cmp	r3, #113
 1835 000a 1ED1     		bne	.L114
 556:.\main.c      **** 		if(rxChar[3] == 0x00 || rxChar[3] == RX_DESTINATION_ADDRESS){
 1836              		.loc 1 556 0
 1837 000c 104B     		ldr	r3, .L117
 1838 000e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1839 0010 002B     		cmp	r3, #0
 1840 0012 03D0     		beq	.L115
 1841              		.loc 1 556 0 is_stmt 0 discriminator 1
 1842 0014 0E4B     		ldr	r3, .L117
 1843 0016 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1844 0018 002B     		cmp	r3, #0
 1845 001a 16D1     		bne	.L114
 1846              	.L115:
 557:.\main.c      **** 			//this is as valid as we go (CRC is optional)
 558:.\main.c      **** 			messageLength = rxChar[4];
 1847              		.loc 1 558 0 is_stmt 1
 1848 001c 0C4B     		ldr	r3, .L117
 1849 001e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1850 0020 1A46     		mov	r2, r3
 1851 0022 0C4B     		ldr	r3, .L117+4
 1852 0024 1A60     		str	r2, [r3]
 559:.\main.c      ****             LCD_PrintNumber(rxChar[4]);
 1853              		.loc 1 559 0
 1854 0026 0A4B     		ldr	r3, .L117
 1855 0028 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1856 002a 1846     		mov	r0, r3
 1857 002c FFF7FEFF 		bl	LCD_PrintU32Number
 560:.\main.c      **** 			crcState = rxChar[5];
 1858              		.loc 1 560 0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 44


 1859 0030 074B     		ldr	r3, .L117
 1860 0032 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 1861 0034 084B     		ldr	r3, .L117+8
 1862 0036 1A70     		strb	r2, [r3]
 561:.\main.c      **** 			headerCRC = rxChar[6];
 1863              		.loc 1 561 0
 1864 0038 054B     		ldr	r3, .L117
 1865 003a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1866 003c 1A46     		mov	r2, r3
 1867 003e 074B     		ldr	r3, .L117+12
 1868 0040 1A60     		str	r2, [r3]
 562:.\main.c      ****             CyDelay(1000);
 1869              		.loc 1 562 0
 1870 0042 4FF47A70 		mov	r0, #1000
 1871 0046 FFF7FEFF 		bl	CyDelay
 1872              	.L114:
 563:.\main.c      **** 			//return true;
 564:.\main.c      **** 		}
 565:.\main.c      **** 	}
 566:.\main.c      **** 	return false;
 1873              		.loc 1 566 0
 1874 004a 0023     		movs	r3, #0
 567:.\main.c      **** }
 1875              		.loc 1 567 0
 1876 004c 1846     		mov	r0, r3
 1877 004e 80BD     		pop	{r7, pc}
 1878              	.L118:
 1879              		.align	2
 1880              	.L117:
 1881 0050 00000000 		.word	rxChar
 1882 0054 00000000 		.word	messageLength
 1883 0058 00000000 		.word	crcState
 1884 005c 00000000 		.word	headerCRC
 1885              		.cfi_endproc
 1886              	.LFE79:
 1887              		.size	headerCheck, .-headerCheck
 1888              		.text
 1889              	.Letext0:
 1890              		.file 2 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1891              		.file 3 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1892              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1893              		.file 5 "d:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\arm
 1894              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 1895              		.section	.debug_info,"",%progbits
 1896              	.Ldebug_info0:
 1897 0000 E5050000 		.4byte	0x5e5
 1898 0004 0400     		.2byte	0x4
 1899 0006 00000000 		.4byte	.Ldebug_abbrev0
 1900 000a 04       		.byte	0x4
 1901 000b 01       		.uleb128 0x1
 1902 000c 6C010000 		.4byte	.LASF77
 1903 0010 01       		.byte	0x1
 1904 0011 D6030000 		.4byte	.LASF78
 1905 0015 EA000000 		.4byte	.LASF79
 1906 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1907 001d 00000000 		.4byte	0
 1908 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 45


 1909 0025 02       		.uleb128 0x2
 1910 0026 01       		.byte	0x1
 1911 0027 06       		.byte	0x6
 1912 0028 8C020000 		.4byte	.LASF0
 1913 002c 02       		.uleb128 0x2
 1914 002d 01       		.byte	0x1
 1915 002e 08       		.byte	0x8
 1916 002f 3A020000 		.4byte	.LASF1
 1917 0033 02       		.uleb128 0x2
 1918 0034 02       		.byte	0x2
 1919 0035 05       		.byte	0x5
 1920 0036 8E000000 		.4byte	.LASF2
 1921 003a 02       		.uleb128 0x2
 1922 003b 02       		.byte	0x2
 1923 003c 07       		.byte	0x7
 1924 003d 33030000 		.4byte	.LASF3
 1925 0041 03       		.uleb128 0x3
 1926 0042 DF030000 		.4byte	.LASF9
 1927 0046 02       		.byte	0x2
 1928 0047 3F       		.byte	0x3f
 1929 0048 4C000000 		.4byte	0x4c
 1930 004c 02       		.uleb128 0x2
 1931 004d 04       		.byte	0x4
 1932 004e 05       		.byte	0x5
 1933 004f 13030000 		.4byte	.LASF4
 1934 0053 02       		.uleb128 0x2
 1935 0054 04       		.byte	0x4
 1936 0055 07       		.byte	0x7
 1937 0056 DA020000 		.4byte	.LASF5
 1938 005a 02       		.uleb128 0x2
 1939 005b 08       		.byte	0x8
 1940 005c 05       		.byte	0x5
 1941 005d 30010000 		.4byte	.LASF6
 1942 0061 02       		.uleb128 0x2
 1943 0062 08       		.byte	0x8
 1944 0063 07       		.byte	0x7
 1945 0064 3E010000 		.4byte	.LASF7
 1946 0068 04       		.uleb128 0x4
 1947 0069 04       		.byte	0x4
 1948 006a 05       		.byte	0x5
 1949 006b 696E7400 		.ascii	"int\000"
 1950 006f 02       		.uleb128 0x2
 1951 0070 04       		.byte	0x4
 1952 0071 07       		.byte	0x7
 1953 0072 BB020000 		.4byte	.LASF8
 1954 0076 03       		.uleb128 0x3
 1955 0077 2B030000 		.4byte	.LASF10
 1956 007b 03       		.byte	0x3
 1957 007c 2C       		.byte	0x2c
 1958 007d 41000000 		.4byte	0x41
 1959 0081 03       		.uleb128 0x3
 1960 0082 C9000000 		.4byte	.LASF11
 1961 0086 04       		.byte	0x4
 1962 0087 C2       		.byte	0xc2
 1963 0088 2C000000 		.4byte	0x2c
 1964 008c 03       		.uleb128 0x3
 1965 008d A8000000 		.4byte	.LASF12
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 46


 1966 0091 04       		.byte	0x4
 1967 0092 C3       		.byte	0xc3
 1968 0093 3A000000 		.4byte	0x3a
 1969 0097 02       		.uleb128 0x2
 1970 0098 04       		.byte	0x4
 1971 0099 04       		.byte	0x4
 1972 009a 21010000 		.4byte	.LASF13
 1973 009e 02       		.uleb128 0x2
 1974 009f 08       		.byte	0x8
 1975 00a0 04       		.byte	0x4
 1976 00a1 78030000 		.4byte	.LASF14
 1977 00a5 02       		.uleb128 0x2
 1978 00a6 01       		.byte	0x1
 1979 00a7 08       		.byte	0x8
 1980 00a8 01030000 		.4byte	.LASF15
 1981 00ac 05       		.uleb128 0x5
 1982 00ad 6B030000 		.4byte	.LASF16
 1983 00b1 04       		.byte	0x4
 1984 00b2 6C01     		.2byte	0x16c
 1985 00b4 B8000000 		.4byte	0xb8
 1986 00b8 06       		.uleb128 0x6
 1987 00b9 81000000 		.4byte	0x81
 1988 00bd 02       		.uleb128 0x2
 1989 00be 04       		.byte	0x4
 1990 00bf 07       		.byte	0x7
 1991 00c0 49000000 		.4byte	.LASF17
 1992 00c4 07       		.uleb128 0x7
 1993 00c5 04       		.byte	0x4
 1994 00c6 A5000000 		.4byte	0xa5
 1995 00ca 03       		.uleb128 0x3
 1996 00cb 6D020000 		.4byte	.LASF18
 1997 00cf 05       		.byte	0x5
 1998 00d0 7A       		.byte	0x7a
 1999 00d1 4C000000 		.4byte	0x4c
 2000 00d5 08       		.uleb128 0x8
 2001 00d6 33000000 		.4byte	.LASF22
 2002 00da 01       		.byte	0x1
 2003 00db 01       		.byte	0x1
 2004 00dc 27       		.byte	0x27
 2005 00dd F4000000 		.4byte	0xf4
 2006 00e1 09       		.uleb128 0x9
 2007 00e2 A7020000 		.4byte	.LASF19
 2008 00e6 00       		.sleb128 0
 2009 00e7 09       		.uleb128 0x9
 2010 00e8 54030000 		.4byte	.LASF20
 2011 00ec 01       		.sleb128 1
 2012 00ed 09       		.uleb128 0x9
 2013 00ee 9E000000 		.4byte	.LASF21
 2014 00f2 02       		.sleb128 2
 2015 00f3 00       		.byte	0
 2016 00f4 0A       		.uleb128 0xa
 2017 00f5 63726300 		.ascii	"crc\000"
 2018 00f9 01       		.byte	0x1
 2019 00fa 01       		.byte	0x1
 2020 00fb 28       		.byte	0x28
 2021 00fc 19010000 		.4byte	0x119
 2022 0100 09       		.uleb128 0x9
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 47


 2023 0101 89000000 		.4byte	.LASF23
 2024 0105 00       		.sleb128 0
 2025 0106 09       		.uleb128 0x9
 2026 0107 00000000 		.4byte	.LASF24
 2027 010b 01       		.sleb128 1
 2028 010c 09       		.uleb128 0x9
 2029 010d 70030000 		.4byte	.LASF25
 2030 0111 02       		.sleb128 2
 2031 0112 09       		.uleb128 0x9
 2032 0113 EC020000 		.4byte	.LASF26
 2033 0117 03       		.sleb128 3
 2034 0118 00       		.byte	0
 2035 0119 0B       		.uleb128 0xb
 2036 011a 20000000 		.4byte	.LASF27
 2037 011e 01       		.byte	0x1
 2038 011f 2C       		.byte	0x2c
 2039 0120 00000000 		.4byte	.LFB63
 2040 0124 28000000 		.4byte	.LFE63-.LFB63
 2041 0128 01       		.uleb128 0x1
 2042 0129 9C       		.byte	0x9c
 2043 012a 0B       		.uleb128 0xb
 2044 012b DA000000 		.4byte	.LASF28
 2045 012f 01       		.byte	0x1
 2046 0130 36       		.byte	0x36
 2047 0131 00000000 		.4byte	.LFB64
 2048 0135 58000000 		.4byte	.LFE64-.LFB64
 2049 0139 01       		.uleb128 0x1
 2050 013a 9C       		.byte	0x9c
 2051 013b 0B       		.uleb128 0xb
 2052 013c 2C040000 		.4byte	.LASF29
 2053 0140 01       		.byte	0x1
 2054 0141 47       		.byte	0x47
 2055 0142 00000000 		.4byte	.LFB65
 2056 0146 1C000000 		.4byte	.LFE65-.LFB65
 2057 014a 01       		.uleb128 0x1
 2058 014b 9C       		.byte	0x9c
 2059 014c 0C       		.uleb128 0xc
 2060 014d B4030000 		.4byte	.LASF30
 2061 0151 01       		.byte	0x1
 2062 0152 4E       		.byte	0x4e
 2063 0153 00000000 		.4byte	.LFB66
 2064 0157 38000000 		.4byte	.LFE66-.LFB66
 2065 015b 01       		.uleb128 0x1
 2066 015c 9C       		.byte	0x9c
 2067 015d 0D       		.uleb128 0xd
 2068 015e 65000000 		.4byte	.LASF35
 2069 0162 01       		.byte	0x1
 2070 0163 55       		.byte	0x55
 2071 0164 68000000 		.4byte	0x68
 2072 0168 00000000 		.4byte	.LFB67
 2073 016c 7C020000 		.4byte	.LFE67-.LFB67
 2074 0170 01       		.uleb128 0x1
 2075 0171 9C       		.byte	0x9c
 2076 0172 BF010000 		.4byte	0x1bf
 2077 0176 0E       		.uleb128 0xe
 2078 0177 727800   		.ascii	"rx\000"
 2079 017a 01       		.byte	0x1
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 48


 2080 017b 57       		.byte	0x57
 2081 017c A5000000 		.4byte	0xa5
 2082 0180 02       		.uleb128 0x2
 2083 0181 91       		.byte	0x91
 2084 0182 76       		.sleb128 -10
 2085 0183 0F       		.uleb128 0xf
 2086 0184 CF000000 		.4byte	.LASF31
 2087 0188 01       		.byte	0x1
 2088 0189 58       		.byte	0x58
 2089 018a BF010000 		.4byte	0x1bf
 2090 018e 03       		.uleb128 0x3
 2091 018f 91       		.byte	0x91
 2092 0190 887F     		.sleb128 -120
 2093 0192 0F       		.uleb128 0xf
 2094 0193 14000000 		.4byte	.LASF32
 2095 0197 01       		.byte	0x1
 2096 0198 59       		.byte	0x59
 2097 0199 CF010000 		.4byte	0x1cf
 2098 019d 03       		.uleb128 0x3
 2099 019e 91       		.byte	0x91
 2100 019f 807F     		.sleb128 -128
 2101 01a1 0F       		.uleb128 0xf
 2102 01a2 1C030000 		.4byte	.LASF33
 2103 01a6 01       		.byte	0x1
 2104 01a7 5A       		.byte	0x5a
 2105 01a8 81000000 		.4byte	0x81
 2106 01ac 02       		.uleb128 0x2
 2107 01ad 91       		.byte	0x91
 2108 01ae 77       		.sleb128 -9
 2109 01af 0F       		.uleb128 0xf
 2110 01b0 46030000 		.4byte	.LASF34
 2111 01b4 01       		.byte	0x1
 2112 01b5 67       		.byte	0x67
 2113 01b6 CA000000 		.4byte	0xca
 2114 01ba 03       		.uleb128 0x3
 2115 01bb 91       		.byte	0x91
 2116 01bc FC7E     		.sleb128 -132
 2117 01be 00       		.byte	0
 2118 01bf 10       		.uleb128 0x10
 2119 01c0 A5000000 		.4byte	0xa5
 2120 01c4 CF010000 		.4byte	0x1cf
 2121 01c8 11       		.uleb128 0x11
 2122 01c9 BD000000 		.4byte	0xbd
 2123 01cd 6B       		.byte	0x6b
 2124 01ce 00       		.byte	0
 2125 01cf 10       		.uleb128 0x10
 2126 01d0 81000000 		.4byte	0x81
 2127 01d4 DF010000 		.4byte	0x1df
 2128 01d8 11       		.uleb128 0x11
 2129 01d9 BD000000 		.4byte	0xbd
 2130 01dd 07       		.byte	0x7
 2131 01de 00       		.byte	0
 2132 01df 12       		.uleb128 0x12
 2133 01e0 74020000 		.4byte	.LASF46
 2134 01e4 01       		.byte	0x1
 2135 01e5 F7       		.byte	0xf7
 2136 01e6 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 49


 2137 01ea 48000000 		.4byte	.LFE68-.LFB68
 2138 01ee 01       		.uleb128 0x1
 2139 01ef 9C       		.byte	0x9c
 2140 01f0 13       		.uleb128 0x13
 2141 01f1 10020000 		.4byte	.LASF36
 2142 01f5 01       		.byte	0x1
 2143 01f6 0201     		.2byte	0x102
 2144 01f8 00000000 		.4byte	.LFB69
 2145 01fc 32000000 		.4byte	.LFE69-.LFB69
 2146 0200 01       		.uleb128 0x1
 2147 0201 9C       		.byte	0x9c
 2148 0202 23020000 		.4byte	0x223
 2149 0206 14       		.uleb128 0x14
 2150 0207 14000000 		.4byte	.LASF32
 2151 020b 01       		.byte	0x1
 2152 020c 0201     		.2byte	0x102
 2153 020e 23020000 		.4byte	0x223
 2154 0212 02       		.uleb128 0x2
 2155 0213 91       		.byte	0x91
 2156 0214 6C       		.sleb128 -20
 2157 0215 15       		.uleb128 0x15
 2158 0216 6900     		.ascii	"i\000"
 2159 0218 01       		.byte	0x1
 2160 0219 0401     		.2byte	0x104
 2161 021b 6F000000 		.4byte	0x6f
 2162 021f 02       		.uleb128 0x2
 2163 0220 91       		.byte	0x91
 2164 0221 74       		.sleb128 -12
 2165 0222 00       		.byte	0
 2166 0223 07       		.uleb128 0x7
 2167 0224 04       		.byte	0x4
 2168 0225 81000000 		.4byte	0x81
 2169 0229 16       		.uleb128 0x16
 2170 022a BC000000 		.4byte	.LASF37
 2171 022e 01       		.byte	0x1
 2172 022f 0F01     		.2byte	0x10f
 2173 0231 00000000 		.4byte	.LFB70
 2174 0235 54010000 		.4byte	.LFE70-.LFB70
 2175 0239 01       		.uleb128 0x1
 2176 023a 9C       		.byte	0x9c
 2177 023b 87020000 		.4byte	0x287
 2178 023f 14       		.uleb128 0x14
 2179 0240 27010000 		.4byte	.LASF38
 2180 0244 01       		.byte	0x1
 2181 0245 0F01     		.2byte	0x10f
 2182 0247 81000000 		.4byte	0x81
 2183 024b 02       		.uleb128 0x2
 2184 024c 91       		.byte	0x91
 2185 024d 47       		.sleb128 -57
 2186 024e 17       		.uleb128 0x17
 2187 024f 56040000 		.4byte	.LASF39
 2188 0253 01       		.byte	0x1
 2189 0254 1001     		.2byte	0x110
 2190 0256 87020000 		.4byte	0x287
 2191 025a 02       		.uleb128 0x2
 2192 025b 91       		.byte	0x91
 2193 025c 4C       		.sleb128 -52
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 50


 2194 025d 15       		.uleb128 0x15
 2195 025e 6900     		.ascii	"i\000"
 2196 0260 01       		.byte	0x1
 2197 0261 1301     		.2byte	0x113
 2198 0263 68000000 		.4byte	0x68
 2199 0267 02       		.uleb128 0x2
 2200 0268 91       		.byte	0x91
 2201 0269 74       		.sleb128 -12
 2202 026a 17       		.uleb128 0x17
 2203 026b 46040000 		.4byte	.LASF40
 2204 026f 01       		.byte	0x1
 2205 0270 1A01     		.2byte	0x11a
 2206 0272 81000000 		.4byte	0x81
 2207 0276 02       		.uleb128 0x2
 2208 0277 91       		.byte	0x91
 2209 0278 73       		.sleb128 -13
 2210 0279 15       		.uleb128 0x15
 2211 027a 6A00     		.ascii	"j\000"
 2212 027c 01       		.byte	0x1
 2213 027d 1B01     		.2byte	0x11b
 2214 027f 68000000 		.4byte	0x68
 2215 0283 02       		.uleb128 0x2
 2216 0284 91       		.byte	0x91
 2217 0285 6C       		.sleb128 -20
 2218 0286 00       		.byte	0
 2219 0287 10       		.uleb128 0x10
 2220 0288 6F000000 		.4byte	0x6f
 2221 028c 97020000 		.4byte	0x297
 2222 0290 11       		.uleb128 0x11
 2223 0291 BD000000 		.4byte	0xbd
 2224 0295 07       		.byte	0x7
 2225 0296 00       		.byte	0
 2226 0297 13       		.uleb128 0x13
 2227 0298 2A020000 		.4byte	.LASF41
 2228 029c 01       		.byte	0x1
 2229 029d 4C01     		.2byte	0x14c
 2230 029f 00000000 		.4byte	.LFB71
 2231 02a3 38000000 		.4byte	.LFE71-.LFB71
 2232 02a7 01       		.uleb128 0x1
 2233 02a8 9C       		.byte	0x9c
 2234 02a9 D9020000 		.4byte	0x2d9
 2235 02ad 14       		.uleb128 0x14
 2236 02ae CF000000 		.4byte	.LASF31
 2237 02b2 01       		.byte	0x1
 2238 02b3 4C01     		.2byte	0x14c
 2239 02b5 C4000000 		.4byte	0xc4
 2240 02b9 02       		.uleb128 0x2
 2241 02ba 91       		.byte	0x91
 2242 02bb 6C       		.sleb128 -20
 2243 02bc 14       		.uleb128 0x14
 2244 02bd 1C030000 		.4byte	.LASF33
 2245 02c1 01       		.byte	0x1
 2246 02c2 4C01     		.2byte	0x14c
 2247 02c4 81000000 		.4byte	0x81
 2248 02c8 02       		.uleb128 0x2
 2249 02c9 91       		.byte	0x91
 2250 02ca 6B       		.sleb128 -21
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 51


 2251 02cb 15       		.uleb128 0x15
 2252 02cc 6900     		.ascii	"i\000"
 2253 02ce 01       		.byte	0x1
 2254 02cf 4E01     		.2byte	0x14e
 2255 02d1 6F000000 		.4byte	0x6f
 2256 02d5 02       		.uleb128 0x2
 2257 02d6 91       		.byte	0x91
 2258 02d7 74       		.sleb128 -12
 2259 02d8 00       		.byte	0
 2260 02d9 16       		.uleb128 0x16
 2261 02da 98020000 		.4byte	.LASF42
 2262 02de 01       		.byte	0x1
 2263 02df 5901     		.2byte	0x159
 2264 02e1 00000000 		.4byte	.LFB72
 2265 02e5 C4010000 		.4byte	.LFE72-.LFB72
 2266 02e9 01       		.uleb128 0x1
 2267 02ea 9C       		.byte	0x9c
 2268 02eb 39030000 		.4byte	0x339
 2269 02ef 14       		.uleb128 0x14
 2270 02f0 F7020000 		.4byte	.LASF43
 2271 02f4 01       		.byte	0x1
 2272 02f5 5901     		.2byte	0x159
 2273 02f7 A5000000 		.4byte	0xa5
 2274 02fb 03       		.uleb128 0x3
 2275 02fc 91       		.byte	0x91
 2276 02fd 977F     		.sleb128 -105
 2277 02ff 17       		.uleb128 0x17
 2278 0300 46040000 		.4byte	.LASF40
 2279 0304 01       		.byte	0x1
 2280 0305 5B01     		.2byte	0x15b
 2281 0307 81000000 		.4byte	0x81
 2282 030b 02       		.uleb128 0x2
 2283 030c 91       		.byte	0x91
 2284 030d 77       		.sleb128 -9
 2285 030e 17       		.uleb128 0x17
 2286 030f C4030000 		.4byte	.LASF44
 2287 0313 01       		.byte	0x1
 2288 0314 6C01     		.2byte	0x16c
 2289 0316 39030000 		.4byte	0x339
 2290 031a 03       		.uleb128 0x3
 2291 031b 91       		.byte	0x91
 2292 031c 9C7F     		.sleb128 -100
 2293 031e 15       		.uleb128 0x15
 2294 031f 6900     		.ascii	"i\000"
 2295 0321 01       		.byte	0x1
 2296 0322 6D01     		.2byte	0x16d
 2297 0324 68000000 		.4byte	0x68
 2298 0328 02       		.uleb128 0x2
 2299 0329 91       		.byte	0x91
 2300 032a 70       		.sleb128 -16
 2301 032b 15       		.uleb128 0x15
 2302 032c 6A00     		.ascii	"j\000"
 2303 032e 01       		.byte	0x1
 2304 032f 7601     		.2byte	0x176
 2305 0331 68000000 		.4byte	0x68
 2306 0335 02       		.uleb128 0x2
 2307 0336 91       		.byte	0x91
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 52


 2308 0337 6C       		.sleb128 -20
 2309 0338 00       		.byte	0
 2310 0339 10       		.uleb128 0x10
 2311 033a 6F000000 		.4byte	0x6f
 2312 033e 49030000 		.4byte	0x349
 2313 0342 11       		.uleb128 0x11
 2314 0343 BD000000 		.4byte	0xbd
 2315 0347 13       		.byte	0x13
 2316 0348 00       		.byte	0
 2317 0349 18       		.uleb128 0x18
 2318 034a 07000000 		.4byte	.LASF51
 2319 034e 01       		.byte	0x1
 2320 034f A901     		.2byte	0x1a9
 2321 0351 00000000 		.4byte	.LFB73
 2322 0355 D8000000 		.4byte	.LFE73-.LFB73
 2323 0359 01       		.uleb128 0x1
 2324 035a 9C       		.byte	0x9c
 2325 035b 86030000 		.4byte	0x386
 2326 035f 15       		.uleb128 0x15
 2327 0360 6900     		.ascii	"i\000"
 2328 0362 01       		.byte	0x1
 2329 0363 AA01     		.2byte	0x1aa
 2330 0365 68000000 		.4byte	0x68
 2331 0369 02       		.uleb128 0x2
 2332 036a 91       		.byte	0x91
 2333 036b 74       		.sleb128 -12
 2334 036c 19       		.uleb128 0x19
 2335 036d 1C000000 		.4byte	.LBB2
 2336 0371 50000000 		.4byte	.LBE2-.LBB2
 2337 0375 17       		.uleb128 0x17
 2338 0376 98000000 		.4byte	.LASF45
 2339 037a 01       		.byte	0x1
 2340 037b B101     		.2byte	0x1b1
 2341 037d 68000000 		.4byte	0x68
 2342 0381 02       		.uleb128 0x2
 2343 0382 91       		.byte	0x91
 2344 0383 70       		.sleb128 -16
 2345 0384 00       		.byte	0
 2346 0385 00       		.byte	0
 2347 0386 1A       		.uleb128 0x1a
 2348 0387 FA010000 		.4byte	.LASF47
 2349 038b 01       		.byte	0x1
 2350 038c C401     		.2byte	0x1c4
 2351 038e 00000000 		.4byte	.LFB74
 2352 0392 58000000 		.4byte	.LFE74-.LFB74
 2353 0396 01       		.uleb128 0x1
 2354 0397 9C       		.byte	0x9c
 2355 0398 1B       		.uleb128 0x1b
 2356 0399 39000000 		.4byte	.LASF48
 2357 039d 01       		.byte	0x1
 2358 039e E601     		.2byte	0x1e6
 2359 03a0 68000000 		.4byte	0x68
 2360 03a4 00000000 		.4byte	.LFB75
 2361 03a8 36000000 		.4byte	.LFE75-.LFB75
 2362 03ac 01       		.uleb128 0x1
 2363 03ad 9C       		.byte	0x9c
 2364 03ae DE030000 		.4byte	0x3de
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 53


 2365 03b2 17       		.uleb128 0x17
 2366 03b3 F1020000 		.4byte	.LASF49
 2367 03b7 01       		.byte	0x1
 2368 03b8 E801     		.2byte	0x1e8
 2369 03ba DE030000 		.4byte	0x3de
 2370 03be 02       		.uleb128 0x2
 2371 03bf 91       		.byte	0x91
 2372 03c0 74       		.sleb128 -12
 2373 03c1 17       		.uleb128 0x17
 2374 03c2 F6030000 		.4byte	.LASF50
 2375 03c6 01       		.byte	0x1
 2376 03c7 E901     		.2byte	0x1e9
 2377 03c9 DE030000 		.4byte	0x3de
 2378 03cd 02       		.uleb128 0x2
 2379 03ce 91       		.byte	0x91
 2380 03cf 70       		.sleb128 -16
 2381 03d0 15       		.uleb128 0x15
 2382 03d1 6E00     		.ascii	"n\000"
 2383 03d3 01       		.byte	0x1
 2384 03d4 EB01     		.2byte	0x1eb
 2385 03d6 68000000 		.4byte	0x68
 2386 03da 02       		.uleb128 0x2
 2387 03db 91       		.byte	0x91
 2388 03dc 6C       		.sleb128 -20
 2389 03dd 00       		.byte	0
 2390 03de 1C       		.uleb128 0x1c
 2391 03df 68000000 		.4byte	0x68
 2392 03e3 1D       		.uleb128 0x1d
 2393 03e4 AC020000 		.4byte	.LASF52
 2394 03e8 01       		.byte	0x1
 2395 03e9 F701     		.2byte	0x1f7
 2396 03eb 00000000 		.4byte	.LFB76
 2397 03ef B0000000 		.4byte	.LFE76-.LFB76
 2398 03f3 01       		.uleb128 0x1
 2399 03f4 9C       		.byte	0x9c
 2400 03f5 20040000 		.4byte	0x420
 2401 03f9 15       		.uleb128 0x15
 2402 03fa 6900     		.ascii	"i\000"
 2403 03fc 01       		.byte	0x1
 2404 03fd F901     		.2byte	0x1f9
 2405 03ff 68000000 		.4byte	0x68
 2406 0403 02       		.uleb128 0x2
 2407 0404 91       		.byte	0x91
 2408 0405 74       		.sleb128 -12
 2409 0406 19       		.uleb128 0x19
 2410 0407 0C000000 		.4byte	.LBB3
 2411 040b 80000000 		.4byte	.LBE3-.LBB3
 2412 040f 17       		.uleb128 0x17
 2413 0410 46040000 		.4byte	.LASF40
 2414 0414 01       		.byte	0x1
 2415 0415 FB01     		.2byte	0x1fb
 2416 0417 81000000 		.4byte	0x81
 2417 041b 02       		.uleb128 0x2
 2418 041c 91       		.byte	0x91
 2419 041d 73       		.sleb128 -13
 2420 041e 00       		.byte	0
 2421 041f 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 54


 2422 0420 1E       		.uleb128 0x1e
 2423 0421 76000000 		.4byte	.LASF53
 2424 0425 01       		.byte	0x1
 2425 0426 1802     		.2byte	0x218
 2426 0428 00000000 		.4byte	.LFB77
 2427 042c 3C000000 		.4byte	.LFE77-.LFB77
 2428 0430 01       		.uleb128 0x1
 2429 0431 9C       		.byte	0x9c
 2430 0432 18       		.uleb128 0x18
 2431 0433 20020000 		.4byte	.LASF54
 2432 0437 01       		.byte	0x1
 2433 0438 1F02     		.2byte	0x21f
 2434 043a 00000000 		.4byte	.LFB78
 2435 043e 38000000 		.4byte	.LFE78-.LFB78
 2436 0442 01       		.uleb128 0x1
 2437 0443 9C       		.byte	0x9c
 2438 0444 56040000 		.4byte	0x456
 2439 0448 15       		.uleb128 0x15
 2440 0449 6900     		.ascii	"i\000"
 2441 044b 01       		.byte	0x1
 2442 044c 2002     		.2byte	0x220
 2443 044e 68000000 		.4byte	0x68
 2444 0452 02       		.uleb128 0x2
 2445 0453 91       		.byte	0x91
 2446 0454 74       		.sleb128 -12
 2447 0455 00       		.byte	0
 2448 0456 1F       		.uleb128 0x1f
 2449 0457 6A000000 		.4byte	.LASF55
 2450 045b 01       		.byte	0x1
 2451 045c 2902     		.2byte	0x229
 2452 045e 6C040000 		.4byte	0x46c
 2453 0462 00000000 		.4byte	.LFB79
 2454 0466 60000000 		.4byte	.LFE79-.LFB79
 2455 046a 01       		.uleb128 0x1
 2456 046b 9C       		.byte	0x9c
 2457 046c 02       		.uleb128 0x2
 2458 046d 01       		.byte	0x1
 2459 046e 02       		.byte	0x2
 2460 046f 4E030000 		.4byte	.LASF56
 2461 0473 20       		.uleb128 0x20
 2462 0474 39040000 		.4byte	.LASF57
 2463 0478 06       		.byte	0x6
 2464 0479 2A06     		.2byte	0x62a
 2465 047b 7F040000 		.4byte	0x47f
 2466 047f 06       		.uleb128 0x6
 2467 0480 76000000 		.4byte	0x76
 2468 0484 10       		.uleb128 0x10
 2469 0485 68000000 		.4byte	0x68
 2470 0489 95040000 		.4byte	0x495
 2471 048d 21       		.uleb128 0x21
 2472 048e BD000000 		.4byte	0xbd
 2473 0492 5F03     		.2byte	0x35f
 2474 0494 00       		.byte	0
 2475 0495 22       		.uleb128 0x22
 2476 0496 52000000 		.4byte	.LASF58
 2477 049a 01       		.byte	0x1
 2478 049b 21       		.byte	0x21
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 55


 2479 049c 84040000 		.4byte	0x484
 2480 04a0 05       		.uleb128 0x5
 2481 04a1 03       		.byte	0x3
 2482 04a2 00000000 		.4byte	diffManEncodedData
 2483 04a6 10       		.uleb128 0x10
 2484 04a7 81000000 		.4byte	0x81
 2485 04ab B6040000 		.4byte	0x4b6
 2486 04af 11       		.uleb128 0x11
 2487 04b0 BD000000 		.4byte	0xbd
 2488 04b4 6B       		.byte	0x6b
 2489 04b5 00       		.byte	0
 2490 04b6 22       		.uleb128 0x22
 2491 04b7 99030000 		.4byte	.LASF59
 2492 04bb 01       		.byte	0x1
 2493 04bc 22       		.byte	0x22
 2494 04bd A6040000 		.4byte	0x4a6
 2495 04c1 05       		.uleb128 0x5
 2496 04c2 03       		.byte	0x3
 2497 04c3 00000000 		.4byte	diffManReceivedData
 2498 04c7 22       		.uleb128 0x22
 2499 04c8 AD030000 		.4byte	.LASF60
 2500 04cc 01       		.byte	0x1
 2501 04cd 23       		.byte	0x23
 2502 04ce BF010000 		.4byte	0x1bf
 2503 04d2 05       		.uleb128 0x5
 2504 04d3 03       		.byte	0x3
 2505 04d4 00000000 		.4byte	rxChar
 2506 04d8 22       		.uleb128 0x22
 2507 04d9 C8020000 		.4byte	.LASF61
 2508 04dd 01       		.byte	0x1
 2509 04de 24       		.byte	0x24
 2510 04df 68000000 		.4byte	0x68
 2511 04e3 05       		.uleb128 0x5
 2512 04e4 03       		.byte	0x3
 2513 04e5 00000000 		.4byte	receivedDataIndex
 2514 04e9 22       		.uleb128 0x22
 2515 04ea 59030000 		.4byte	.LASF62
 2516 04ee 01       		.byte	0x1
 2517 04ef 24       		.byte	0x24
 2518 04f0 68000000 		.4byte	0x68
 2519 04f4 05       		.uleb128 0x5
 2520 04f5 03       		.byte	0x3
 2521 04f6 00000000 		.4byte	receivedDataCount
 2522 04fa 22       		.uleb128 0x22
 2523 04fb E9030000 		.4byte	.LASF63
 2524 04ff 01       		.byte	0x1
 2525 0500 25       		.byte	0x25
 2526 0501 68000000 		.4byte	0x68
 2527 0505 05       		.uleb128 0x5
 2528 0506 03       		.byte	0x3
 2529 0507 00000000 		.4byte	halfBitIndex
 2530 050b 22       		.uleb128 0x22
 2531 050c 48020000 		.4byte	.LASF64
 2532 0510 01       		.byte	0x1
 2533 0511 25       		.byte	0x25
 2534 0512 68000000 		.4byte	0x68
 2535 0516 05       		.uleb128 0x5
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 56


 2536 0517 03       		.byte	0x3
 2537 0518 00000000 		.4byte	currentDataPos
 2538 051c 22       		.uleb128 0x22
 2539 051d 57020000 		.4byte	.LASF65
 2540 0521 01       		.byte	0x1
 2541 0522 25       		.byte	0x25
 2542 0523 68000000 		.4byte	0x68
 2543 0527 05       		.uleb128 0x5
 2544 0528 03       		.byte	0x3
 2545 0529 00000000 		.4byte	currentRXCharPosition
 2546 052d 22       		.uleb128 0x22
 2547 052e 06040000 		.4byte	.LASF66
 2548 0532 01       		.byte	0x1
 2549 0533 25       		.byte	0x25
 2550 0534 68000000 		.4byte	0x68
 2551 0538 05       		.uleb128 0x5
 2552 0539 03       		.byte	0x3
 2553 053a 00000000 		.4byte	lengthOfData
 2554 053e 22       		.uleb128 0x22
 2555 053f 8B030000 		.4byte	.LASF67
 2556 0543 01       		.byte	0x1
 2557 0544 25       		.byte	0x25
 2558 0545 68000000 		.4byte	0x68
 2559 0549 05       		.uleb128 0x5
 2560 054a 03       		.byte	0x3
 2561 054b 00000000 		.4byte	messageLength
 2562 054f 22       		.uleb128 0x22
 2563 0550 FC030000 		.4byte	.LASF68
 2564 0554 01       		.byte	0x1
 2565 0555 25       		.byte	0x25
 2566 0556 68000000 		.4byte	0x68
 2567 055a 05       		.uleb128 0x5
 2568 055b 03       		.byte	0x3
 2569 055c 00000000 		.4byte	headerCRC
 2570 0560 22       		.uleb128 0x22
 2571 0561 55010000 		.4byte	.LASF69
 2572 0565 01       		.byte	0x1
 2573 0566 25       		.byte	0x25
 2574 0567 68000000 		.4byte	0x68
 2575 056b 05       		.uleb128 0x5
 2576 056c 03       		.byte	0x3
 2577 056d 00000000 		.4byte	TX_DESTINATION_ADDRESS
 2578 0571 22       		.uleb128 0x22
 2579 0572 67040000 		.4byte	.LASF70
 2580 0576 01       		.byte	0x1
 2581 0577 26       		.byte	0x26
 2582 0578 6C040000 		.4byte	0x46c
 2583 057c 05       		.uleb128 0x5
 2584 057d 03       		.byte	0x3
 2585 057e 00000000 		.4byte	timerExpired
 2586 0582 22       		.uleb128 0x22
 2587 0583 13040000 		.4byte	.LASF71
 2588 0587 01       		.byte	0x1
 2589 0588 26       		.byte	0x26
 2590 0589 6C040000 		.4byte	0x46c
 2591 058d 05       		.uleb128 0x5
 2592 058e 03       		.byte	0x3
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 57


 2593 058f 00000000 		.4byte	dataTransmissionComplete
 2594 0593 22       		.uleb128 0x22
 2595 0594 74040000 		.4byte	.LASF72
 2596 0598 01       		.byte	0x1
 2597 0599 26       		.byte	0x26
 2598 059a 6C040000 		.4byte	0x46c
 2599 059e 05       		.uleb128 0x5
 2600 059f 03       		.byte	0x3
 2601 05a0 00000000 		.4byte	powerOnEdge
 2602 05a4 22       		.uleb128 0x22
 2603 05a5 7F030000 		.4byte	.LASF73
 2604 05a9 01       		.byte	0x1
 2605 05aa 26       		.byte	0x26
 2606 05ab 6C040000 		.4byte	0x46c
 2607 05af 05       		.uleb128 0x5
 2608 05b0 03       		.byte	0x3
 2609 05b1 00000000 		.4byte	headerValid
 2610 05b5 22       		.uleb128 0x22
 2611 05b6 AF000000 		.4byte	.LASF74
 2612 05ba 01       		.byte	0x1
 2613 05bb 27       		.byte	0x27
 2614 05bc D5000000 		.4byte	0xd5
 2615 05c0 05       		.uleb128 0x5
 2616 05c1 03       		.byte	0x3
 2617 05c2 00000000 		.4byte	networkState
 2618 05c6 22       		.uleb128 0x22
 2619 05c7 80000000 		.4byte	.LASF75
 2620 05cb 01       		.byte	0x1
 2621 05cc 28       		.byte	0x28
 2622 05cd F4000000 		.4byte	0xf4
 2623 05d1 05       		.uleb128 0x5
 2624 05d2 03       		.byte	0x3
 2625 05d3 00000000 		.4byte	crcState
 2626 05d7 22       		.uleb128 0x22
 2627 05d8 06030000 		.4byte	.LASF76
 2628 05dc 01       		.byte	0x1
 2629 05dd 2A       		.byte	0x2a
 2630 05de A5000000 		.4byte	0xa5
 2631 05e2 05       		.uleb128 0x5
 2632 05e3 03       		.byte	0x3
 2633 05e4 00000000 		.4byte	receivedChar
 2634 05e8 00       		.byte	0
 2635              		.section	.debug_abbrev,"",%progbits
 2636              	.Ldebug_abbrev0:
 2637 0000 01       		.uleb128 0x1
 2638 0001 11       		.uleb128 0x11
 2639 0002 01       		.byte	0x1
 2640 0003 25       		.uleb128 0x25
 2641 0004 0E       		.uleb128 0xe
 2642 0005 13       		.uleb128 0x13
 2643 0006 0B       		.uleb128 0xb
 2644 0007 03       		.uleb128 0x3
 2645 0008 0E       		.uleb128 0xe
 2646 0009 1B       		.uleb128 0x1b
 2647 000a 0E       		.uleb128 0xe
 2648 000b 55       		.uleb128 0x55
 2649 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 58


 2650 000d 11       		.uleb128 0x11
 2651 000e 01       		.uleb128 0x1
 2652 000f 10       		.uleb128 0x10
 2653 0010 17       		.uleb128 0x17
 2654 0011 00       		.byte	0
 2655 0012 00       		.byte	0
 2656 0013 02       		.uleb128 0x2
 2657 0014 24       		.uleb128 0x24
 2658 0015 00       		.byte	0
 2659 0016 0B       		.uleb128 0xb
 2660 0017 0B       		.uleb128 0xb
 2661 0018 3E       		.uleb128 0x3e
 2662 0019 0B       		.uleb128 0xb
 2663 001a 03       		.uleb128 0x3
 2664 001b 0E       		.uleb128 0xe
 2665 001c 00       		.byte	0
 2666 001d 00       		.byte	0
 2667 001e 03       		.uleb128 0x3
 2668 001f 16       		.uleb128 0x16
 2669 0020 00       		.byte	0
 2670 0021 03       		.uleb128 0x3
 2671 0022 0E       		.uleb128 0xe
 2672 0023 3A       		.uleb128 0x3a
 2673 0024 0B       		.uleb128 0xb
 2674 0025 3B       		.uleb128 0x3b
 2675 0026 0B       		.uleb128 0xb
 2676 0027 49       		.uleb128 0x49
 2677 0028 13       		.uleb128 0x13
 2678 0029 00       		.byte	0
 2679 002a 00       		.byte	0
 2680 002b 04       		.uleb128 0x4
 2681 002c 24       		.uleb128 0x24
 2682 002d 00       		.byte	0
 2683 002e 0B       		.uleb128 0xb
 2684 002f 0B       		.uleb128 0xb
 2685 0030 3E       		.uleb128 0x3e
 2686 0031 0B       		.uleb128 0xb
 2687 0032 03       		.uleb128 0x3
 2688 0033 08       		.uleb128 0x8
 2689 0034 00       		.byte	0
 2690 0035 00       		.byte	0
 2691 0036 05       		.uleb128 0x5
 2692 0037 16       		.uleb128 0x16
 2693 0038 00       		.byte	0
 2694 0039 03       		.uleb128 0x3
 2695 003a 0E       		.uleb128 0xe
 2696 003b 3A       		.uleb128 0x3a
 2697 003c 0B       		.uleb128 0xb
 2698 003d 3B       		.uleb128 0x3b
 2699 003e 05       		.uleb128 0x5
 2700 003f 49       		.uleb128 0x49
 2701 0040 13       		.uleb128 0x13
 2702 0041 00       		.byte	0
 2703 0042 00       		.byte	0
 2704 0043 06       		.uleb128 0x6
 2705 0044 35       		.uleb128 0x35
 2706 0045 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 59


 2707 0046 49       		.uleb128 0x49
 2708 0047 13       		.uleb128 0x13
 2709 0048 00       		.byte	0
 2710 0049 00       		.byte	0
 2711 004a 07       		.uleb128 0x7
 2712 004b 0F       		.uleb128 0xf
 2713 004c 00       		.byte	0
 2714 004d 0B       		.uleb128 0xb
 2715 004e 0B       		.uleb128 0xb
 2716 004f 49       		.uleb128 0x49
 2717 0050 13       		.uleb128 0x13
 2718 0051 00       		.byte	0
 2719 0052 00       		.byte	0
 2720 0053 08       		.uleb128 0x8
 2721 0054 04       		.uleb128 0x4
 2722 0055 01       		.byte	0x1
 2723 0056 03       		.uleb128 0x3
 2724 0057 0E       		.uleb128 0xe
 2725 0058 0B       		.uleb128 0xb
 2726 0059 0B       		.uleb128 0xb
 2727 005a 3A       		.uleb128 0x3a
 2728 005b 0B       		.uleb128 0xb
 2729 005c 3B       		.uleb128 0x3b
 2730 005d 0B       		.uleb128 0xb
 2731 005e 01       		.uleb128 0x1
 2732 005f 13       		.uleb128 0x13
 2733 0060 00       		.byte	0
 2734 0061 00       		.byte	0
 2735 0062 09       		.uleb128 0x9
 2736 0063 28       		.uleb128 0x28
 2737 0064 00       		.byte	0
 2738 0065 03       		.uleb128 0x3
 2739 0066 0E       		.uleb128 0xe
 2740 0067 1C       		.uleb128 0x1c
 2741 0068 0D       		.uleb128 0xd
 2742 0069 00       		.byte	0
 2743 006a 00       		.byte	0
 2744 006b 0A       		.uleb128 0xa
 2745 006c 04       		.uleb128 0x4
 2746 006d 01       		.byte	0x1
 2747 006e 03       		.uleb128 0x3
 2748 006f 08       		.uleb128 0x8
 2749 0070 0B       		.uleb128 0xb
 2750 0071 0B       		.uleb128 0xb
 2751 0072 3A       		.uleb128 0x3a
 2752 0073 0B       		.uleb128 0xb
 2753 0074 3B       		.uleb128 0x3b
 2754 0075 0B       		.uleb128 0xb
 2755 0076 01       		.uleb128 0x1
 2756 0077 13       		.uleb128 0x13
 2757 0078 00       		.byte	0
 2758 0079 00       		.byte	0
 2759 007a 0B       		.uleb128 0xb
 2760 007b 2E       		.uleb128 0x2e
 2761 007c 00       		.byte	0
 2762 007d 3F       		.uleb128 0x3f
 2763 007e 19       		.uleb128 0x19
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 60


 2764 007f 03       		.uleb128 0x3
 2765 0080 0E       		.uleb128 0xe
 2766 0081 3A       		.uleb128 0x3a
 2767 0082 0B       		.uleb128 0xb
 2768 0083 3B       		.uleb128 0x3b
 2769 0084 0B       		.uleb128 0xb
 2770 0085 27       		.uleb128 0x27
 2771 0086 19       		.uleb128 0x19
 2772 0087 11       		.uleb128 0x11
 2773 0088 01       		.uleb128 0x1
 2774 0089 12       		.uleb128 0x12
 2775 008a 06       		.uleb128 0x6
 2776 008b 40       		.uleb128 0x40
 2777 008c 18       		.uleb128 0x18
 2778 008d 9642     		.uleb128 0x2116
 2779 008f 19       		.uleb128 0x19
 2780 0090 00       		.byte	0
 2781 0091 00       		.byte	0
 2782 0092 0C       		.uleb128 0xc
 2783 0093 2E       		.uleb128 0x2e
 2784 0094 00       		.byte	0
 2785 0095 3F       		.uleb128 0x3f
 2786 0096 19       		.uleb128 0x19
 2787 0097 03       		.uleb128 0x3
 2788 0098 0E       		.uleb128 0xe
 2789 0099 3A       		.uleb128 0x3a
 2790 009a 0B       		.uleb128 0xb
 2791 009b 3B       		.uleb128 0x3b
 2792 009c 0B       		.uleb128 0xb
 2793 009d 27       		.uleb128 0x27
 2794 009e 19       		.uleb128 0x19
 2795 009f 11       		.uleb128 0x11
 2796 00a0 01       		.uleb128 0x1
 2797 00a1 12       		.uleb128 0x12
 2798 00a2 06       		.uleb128 0x6
 2799 00a3 40       		.uleb128 0x40
 2800 00a4 18       		.uleb128 0x18
 2801 00a5 9742     		.uleb128 0x2117
 2802 00a7 19       		.uleb128 0x19
 2803 00a8 00       		.byte	0
 2804 00a9 00       		.byte	0
 2805 00aa 0D       		.uleb128 0xd
 2806 00ab 2E       		.uleb128 0x2e
 2807 00ac 01       		.byte	0x1
 2808 00ad 3F       		.uleb128 0x3f
 2809 00ae 19       		.uleb128 0x19
 2810 00af 03       		.uleb128 0x3
 2811 00b0 0E       		.uleb128 0xe
 2812 00b1 3A       		.uleb128 0x3a
 2813 00b2 0B       		.uleb128 0xb
 2814 00b3 3B       		.uleb128 0x3b
 2815 00b4 0B       		.uleb128 0xb
 2816 00b5 49       		.uleb128 0x49
 2817 00b6 13       		.uleb128 0x13
 2818 00b7 11       		.uleb128 0x11
 2819 00b8 01       		.uleb128 0x1
 2820 00b9 12       		.uleb128 0x12
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 61


 2821 00ba 06       		.uleb128 0x6
 2822 00bb 40       		.uleb128 0x40
 2823 00bc 18       		.uleb128 0x18
 2824 00bd 9642     		.uleb128 0x2116
 2825 00bf 19       		.uleb128 0x19
 2826 00c0 01       		.uleb128 0x1
 2827 00c1 13       		.uleb128 0x13
 2828 00c2 00       		.byte	0
 2829 00c3 00       		.byte	0
 2830 00c4 0E       		.uleb128 0xe
 2831 00c5 34       		.uleb128 0x34
 2832 00c6 00       		.byte	0
 2833 00c7 03       		.uleb128 0x3
 2834 00c8 08       		.uleb128 0x8
 2835 00c9 3A       		.uleb128 0x3a
 2836 00ca 0B       		.uleb128 0xb
 2837 00cb 3B       		.uleb128 0x3b
 2838 00cc 0B       		.uleb128 0xb
 2839 00cd 49       		.uleb128 0x49
 2840 00ce 13       		.uleb128 0x13
 2841 00cf 02       		.uleb128 0x2
 2842 00d0 18       		.uleb128 0x18
 2843 00d1 00       		.byte	0
 2844 00d2 00       		.byte	0
 2845 00d3 0F       		.uleb128 0xf
 2846 00d4 34       		.uleb128 0x34
 2847 00d5 00       		.byte	0
 2848 00d6 03       		.uleb128 0x3
 2849 00d7 0E       		.uleb128 0xe
 2850 00d8 3A       		.uleb128 0x3a
 2851 00d9 0B       		.uleb128 0xb
 2852 00da 3B       		.uleb128 0x3b
 2853 00db 0B       		.uleb128 0xb
 2854 00dc 49       		.uleb128 0x49
 2855 00dd 13       		.uleb128 0x13
 2856 00de 02       		.uleb128 0x2
 2857 00df 18       		.uleb128 0x18
 2858 00e0 00       		.byte	0
 2859 00e1 00       		.byte	0
 2860 00e2 10       		.uleb128 0x10
 2861 00e3 01       		.uleb128 0x1
 2862 00e4 01       		.byte	0x1
 2863 00e5 49       		.uleb128 0x49
 2864 00e6 13       		.uleb128 0x13
 2865 00e7 01       		.uleb128 0x1
 2866 00e8 13       		.uleb128 0x13
 2867 00e9 00       		.byte	0
 2868 00ea 00       		.byte	0
 2869 00eb 11       		.uleb128 0x11
 2870 00ec 21       		.uleb128 0x21
 2871 00ed 00       		.byte	0
 2872 00ee 49       		.uleb128 0x49
 2873 00ef 13       		.uleb128 0x13
 2874 00f0 2F       		.uleb128 0x2f
 2875 00f1 0B       		.uleb128 0xb
 2876 00f2 00       		.byte	0
 2877 00f3 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 62


 2878 00f4 12       		.uleb128 0x12
 2879 00f5 2E       		.uleb128 0x2e
 2880 00f6 00       		.byte	0
 2881 00f7 3F       		.uleb128 0x3f
 2882 00f8 19       		.uleb128 0x19
 2883 00f9 03       		.uleb128 0x3
 2884 00fa 0E       		.uleb128 0xe
 2885 00fb 3A       		.uleb128 0x3a
 2886 00fc 0B       		.uleb128 0xb
 2887 00fd 3B       		.uleb128 0x3b
 2888 00fe 0B       		.uleb128 0xb
 2889 00ff 11       		.uleb128 0x11
 2890 0100 01       		.uleb128 0x1
 2891 0101 12       		.uleb128 0x12
 2892 0102 06       		.uleb128 0x6
 2893 0103 40       		.uleb128 0x40
 2894 0104 18       		.uleb128 0x18
 2895 0105 9742     		.uleb128 0x2117
 2896 0107 19       		.uleb128 0x19
 2897 0108 00       		.byte	0
 2898 0109 00       		.byte	0
 2899 010a 13       		.uleb128 0x13
 2900 010b 2E       		.uleb128 0x2e
 2901 010c 01       		.byte	0x1
 2902 010d 3F       		.uleb128 0x3f
 2903 010e 19       		.uleb128 0x19
 2904 010f 03       		.uleb128 0x3
 2905 0110 0E       		.uleb128 0xe
 2906 0111 3A       		.uleb128 0x3a
 2907 0112 0B       		.uleb128 0xb
 2908 0113 3B       		.uleb128 0x3b
 2909 0114 05       		.uleb128 0x5
 2910 0115 27       		.uleb128 0x27
 2911 0116 19       		.uleb128 0x19
 2912 0117 11       		.uleb128 0x11
 2913 0118 01       		.uleb128 0x1
 2914 0119 12       		.uleb128 0x12
 2915 011a 06       		.uleb128 0x6
 2916 011b 40       		.uleb128 0x40
 2917 011c 18       		.uleb128 0x18
 2918 011d 9642     		.uleb128 0x2116
 2919 011f 19       		.uleb128 0x19
 2920 0120 01       		.uleb128 0x1
 2921 0121 13       		.uleb128 0x13
 2922 0122 00       		.byte	0
 2923 0123 00       		.byte	0
 2924 0124 14       		.uleb128 0x14
 2925 0125 05       		.uleb128 0x5
 2926 0126 00       		.byte	0
 2927 0127 03       		.uleb128 0x3
 2928 0128 0E       		.uleb128 0xe
 2929 0129 3A       		.uleb128 0x3a
 2930 012a 0B       		.uleb128 0xb
 2931 012b 3B       		.uleb128 0x3b
 2932 012c 05       		.uleb128 0x5
 2933 012d 49       		.uleb128 0x49
 2934 012e 13       		.uleb128 0x13
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 63


 2935 012f 02       		.uleb128 0x2
 2936 0130 18       		.uleb128 0x18
 2937 0131 00       		.byte	0
 2938 0132 00       		.byte	0
 2939 0133 15       		.uleb128 0x15
 2940 0134 34       		.uleb128 0x34
 2941 0135 00       		.byte	0
 2942 0136 03       		.uleb128 0x3
 2943 0137 08       		.uleb128 0x8
 2944 0138 3A       		.uleb128 0x3a
 2945 0139 0B       		.uleb128 0xb
 2946 013a 3B       		.uleb128 0x3b
 2947 013b 05       		.uleb128 0x5
 2948 013c 49       		.uleb128 0x49
 2949 013d 13       		.uleb128 0x13
 2950 013e 02       		.uleb128 0x2
 2951 013f 18       		.uleb128 0x18
 2952 0140 00       		.byte	0
 2953 0141 00       		.byte	0
 2954 0142 16       		.uleb128 0x16
 2955 0143 2E       		.uleb128 0x2e
 2956 0144 01       		.byte	0x1
 2957 0145 3F       		.uleb128 0x3f
 2958 0146 19       		.uleb128 0x19
 2959 0147 03       		.uleb128 0x3
 2960 0148 0E       		.uleb128 0xe
 2961 0149 3A       		.uleb128 0x3a
 2962 014a 0B       		.uleb128 0xb
 2963 014b 3B       		.uleb128 0x3b
 2964 014c 05       		.uleb128 0x5
 2965 014d 27       		.uleb128 0x27
 2966 014e 19       		.uleb128 0x19
 2967 014f 11       		.uleb128 0x11
 2968 0150 01       		.uleb128 0x1
 2969 0151 12       		.uleb128 0x12
 2970 0152 06       		.uleb128 0x6
 2971 0153 40       		.uleb128 0x40
 2972 0154 18       		.uleb128 0x18
 2973 0155 9742     		.uleb128 0x2117
 2974 0157 19       		.uleb128 0x19
 2975 0158 01       		.uleb128 0x1
 2976 0159 13       		.uleb128 0x13
 2977 015a 00       		.byte	0
 2978 015b 00       		.byte	0
 2979 015c 17       		.uleb128 0x17
 2980 015d 34       		.uleb128 0x34
 2981 015e 00       		.byte	0
 2982 015f 03       		.uleb128 0x3
 2983 0160 0E       		.uleb128 0xe
 2984 0161 3A       		.uleb128 0x3a
 2985 0162 0B       		.uleb128 0xb
 2986 0163 3B       		.uleb128 0x3b
 2987 0164 05       		.uleb128 0x5
 2988 0165 49       		.uleb128 0x49
 2989 0166 13       		.uleb128 0x13
 2990 0167 02       		.uleb128 0x2
 2991 0168 18       		.uleb128 0x18
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 64


 2992 0169 00       		.byte	0
 2993 016a 00       		.byte	0
 2994 016b 18       		.uleb128 0x18
 2995 016c 2E       		.uleb128 0x2e
 2996 016d 01       		.byte	0x1
 2997 016e 3F       		.uleb128 0x3f
 2998 016f 19       		.uleb128 0x19
 2999 0170 03       		.uleb128 0x3
 3000 0171 0E       		.uleb128 0xe
 3001 0172 3A       		.uleb128 0x3a
 3002 0173 0B       		.uleb128 0xb
 3003 0174 3B       		.uleb128 0x3b
 3004 0175 05       		.uleb128 0x5
 3005 0176 11       		.uleb128 0x11
 3006 0177 01       		.uleb128 0x1
 3007 0178 12       		.uleb128 0x12
 3008 0179 06       		.uleb128 0x6
 3009 017a 40       		.uleb128 0x40
 3010 017b 18       		.uleb128 0x18
 3011 017c 9642     		.uleb128 0x2116
 3012 017e 19       		.uleb128 0x19
 3013 017f 01       		.uleb128 0x1
 3014 0180 13       		.uleb128 0x13
 3015 0181 00       		.byte	0
 3016 0182 00       		.byte	0
 3017 0183 19       		.uleb128 0x19
 3018 0184 0B       		.uleb128 0xb
 3019 0185 01       		.byte	0x1
 3020 0186 11       		.uleb128 0x11
 3021 0187 01       		.uleb128 0x1
 3022 0188 12       		.uleb128 0x12
 3023 0189 06       		.uleb128 0x6
 3024 018a 00       		.byte	0
 3025 018b 00       		.byte	0
 3026 018c 1A       		.uleb128 0x1a
 3027 018d 2E       		.uleb128 0x2e
 3028 018e 00       		.byte	0
 3029 018f 3F       		.uleb128 0x3f
 3030 0190 19       		.uleb128 0x19
 3031 0191 03       		.uleb128 0x3
 3032 0192 0E       		.uleb128 0xe
 3033 0193 3A       		.uleb128 0x3a
 3034 0194 0B       		.uleb128 0xb
 3035 0195 3B       		.uleb128 0x3b
 3036 0196 05       		.uleb128 0x5
 3037 0197 11       		.uleb128 0x11
 3038 0198 01       		.uleb128 0x1
 3039 0199 12       		.uleb128 0x12
 3040 019a 06       		.uleb128 0x6
 3041 019b 40       		.uleb128 0x40
 3042 019c 18       		.uleb128 0x18
 3043 019d 9642     		.uleb128 0x2116
 3044 019f 19       		.uleb128 0x19
 3045 01a0 00       		.byte	0
 3046 01a1 00       		.byte	0
 3047 01a2 1B       		.uleb128 0x1b
 3048 01a3 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 65


 3049 01a4 01       		.byte	0x1
 3050 01a5 3F       		.uleb128 0x3f
 3051 01a6 19       		.uleb128 0x19
 3052 01a7 03       		.uleb128 0x3
 3053 01a8 0E       		.uleb128 0xe
 3054 01a9 3A       		.uleb128 0x3a
 3055 01aa 0B       		.uleb128 0xb
 3056 01ab 3B       		.uleb128 0x3b
 3057 01ac 05       		.uleb128 0x5
 3058 01ad 49       		.uleb128 0x49
 3059 01ae 13       		.uleb128 0x13
 3060 01af 11       		.uleb128 0x11
 3061 01b0 01       		.uleb128 0x1
 3062 01b1 12       		.uleb128 0x12
 3063 01b2 06       		.uleb128 0x6
 3064 01b3 40       		.uleb128 0x40
 3065 01b4 18       		.uleb128 0x18
 3066 01b5 9642     		.uleb128 0x2116
 3067 01b7 19       		.uleb128 0x19
 3068 01b8 01       		.uleb128 0x1
 3069 01b9 13       		.uleb128 0x13
 3070 01ba 00       		.byte	0
 3071 01bb 00       		.byte	0
 3072 01bc 1C       		.uleb128 0x1c
 3073 01bd 26       		.uleb128 0x26
 3074 01be 00       		.byte	0
 3075 01bf 49       		.uleb128 0x49
 3076 01c0 13       		.uleb128 0x13
 3077 01c1 00       		.byte	0
 3078 01c2 00       		.byte	0
 3079 01c3 1D       		.uleb128 0x1d
 3080 01c4 2E       		.uleb128 0x2e
 3081 01c5 01       		.byte	0x1
 3082 01c6 3F       		.uleb128 0x3f
 3083 01c7 19       		.uleb128 0x19
 3084 01c8 03       		.uleb128 0x3
 3085 01c9 0E       		.uleb128 0xe
 3086 01ca 3A       		.uleb128 0x3a
 3087 01cb 0B       		.uleb128 0xb
 3088 01cc 3B       		.uleb128 0x3b
 3089 01cd 05       		.uleb128 0x5
 3090 01ce 11       		.uleb128 0x11
 3091 01cf 01       		.uleb128 0x1
 3092 01d0 12       		.uleb128 0x12
 3093 01d1 06       		.uleb128 0x6
 3094 01d2 40       		.uleb128 0x40
 3095 01d3 18       		.uleb128 0x18
 3096 01d4 9742     		.uleb128 0x2117
 3097 01d6 19       		.uleb128 0x19
 3098 01d7 01       		.uleb128 0x1
 3099 01d8 13       		.uleb128 0x13
 3100 01d9 00       		.byte	0
 3101 01da 00       		.byte	0
 3102 01db 1E       		.uleb128 0x1e
 3103 01dc 2E       		.uleb128 0x2e
 3104 01dd 00       		.byte	0
 3105 01de 3F       		.uleb128 0x3f
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 66


 3106 01df 19       		.uleb128 0x19
 3107 01e0 03       		.uleb128 0x3
 3108 01e1 0E       		.uleb128 0xe
 3109 01e2 3A       		.uleb128 0x3a
 3110 01e3 0B       		.uleb128 0xb
 3111 01e4 3B       		.uleb128 0x3b
 3112 01e5 05       		.uleb128 0x5
 3113 01e6 11       		.uleb128 0x11
 3114 01e7 01       		.uleb128 0x1
 3115 01e8 12       		.uleb128 0x12
 3116 01e9 06       		.uleb128 0x6
 3117 01ea 40       		.uleb128 0x40
 3118 01eb 18       		.uleb128 0x18
 3119 01ec 9742     		.uleb128 0x2117
 3120 01ee 19       		.uleb128 0x19
 3121 01ef 00       		.byte	0
 3122 01f0 00       		.byte	0
 3123 01f1 1F       		.uleb128 0x1f
 3124 01f2 2E       		.uleb128 0x2e
 3125 01f3 00       		.byte	0
 3126 01f4 3F       		.uleb128 0x3f
 3127 01f5 19       		.uleb128 0x19
 3128 01f6 03       		.uleb128 0x3
 3129 01f7 0E       		.uleb128 0xe
 3130 01f8 3A       		.uleb128 0x3a
 3131 01f9 0B       		.uleb128 0xb
 3132 01fa 3B       		.uleb128 0x3b
 3133 01fb 05       		.uleb128 0x5
 3134 01fc 49       		.uleb128 0x49
 3135 01fd 13       		.uleb128 0x13
 3136 01fe 11       		.uleb128 0x11
 3137 01ff 01       		.uleb128 0x1
 3138 0200 12       		.uleb128 0x12
 3139 0201 06       		.uleb128 0x6
 3140 0202 40       		.uleb128 0x40
 3141 0203 18       		.uleb128 0x18
 3142 0204 9642     		.uleb128 0x2116
 3143 0206 19       		.uleb128 0x19
 3144 0207 00       		.byte	0
 3145 0208 00       		.byte	0
 3146 0209 20       		.uleb128 0x20
 3147 020a 34       		.uleb128 0x34
 3148 020b 00       		.byte	0
 3149 020c 03       		.uleb128 0x3
 3150 020d 0E       		.uleb128 0xe
 3151 020e 3A       		.uleb128 0x3a
 3152 020f 0B       		.uleb128 0xb
 3153 0210 3B       		.uleb128 0x3b
 3154 0211 05       		.uleb128 0x5
 3155 0212 49       		.uleb128 0x49
 3156 0213 13       		.uleb128 0x13
 3157 0214 3F       		.uleb128 0x3f
 3158 0215 19       		.uleb128 0x19
 3159 0216 3C       		.uleb128 0x3c
 3160 0217 19       		.uleb128 0x19
 3161 0218 00       		.byte	0
 3162 0219 00       		.byte	0
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 67


 3163 021a 21       		.uleb128 0x21
 3164 021b 21       		.uleb128 0x21
 3165 021c 00       		.byte	0
 3166 021d 49       		.uleb128 0x49
 3167 021e 13       		.uleb128 0x13
 3168 021f 2F       		.uleb128 0x2f
 3169 0220 05       		.uleb128 0x5
 3170 0221 00       		.byte	0
 3171 0222 00       		.byte	0
 3172 0223 22       		.uleb128 0x22
 3173 0224 34       		.uleb128 0x34
 3174 0225 00       		.byte	0
 3175 0226 03       		.uleb128 0x3
 3176 0227 0E       		.uleb128 0xe
 3177 0228 3A       		.uleb128 0x3a
 3178 0229 0B       		.uleb128 0xb
 3179 022a 3B       		.uleb128 0x3b
 3180 022b 0B       		.uleb128 0xb
 3181 022c 49       		.uleb128 0x49
 3182 022d 13       		.uleb128 0x13
 3183 022e 3F       		.uleb128 0x3f
 3184 022f 19       		.uleb128 0x19
 3185 0230 02       		.uleb128 0x2
 3186 0231 18       		.uleb128 0x18
 3187 0232 00       		.byte	0
 3188 0233 00       		.byte	0
 3189 0234 00       		.byte	0
 3190              		.section	.debug_aranges,"",%progbits
 3191 0000 9C000000 		.4byte	0x9c
 3192 0004 0200     		.2byte	0x2
 3193 0006 00000000 		.4byte	.Ldebug_info0
 3194 000a 04       		.byte	0x4
 3195 000b 00       		.byte	0
 3196 000c 0000     		.2byte	0
 3197 000e 0000     		.2byte	0
 3198 0010 00000000 		.4byte	.LFB63
 3199 0014 28000000 		.4byte	.LFE63-.LFB63
 3200 0018 00000000 		.4byte	.LFB64
 3201 001c 58000000 		.4byte	.LFE64-.LFB64
 3202 0020 00000000 		.4byte	.LFB65
 3203 0024 1C000000 		.4byte	.LFE65-.LFB65
 3204 0028 00000000 		.4byte	.LFB66
 3205 002c 38000000 		.4byte	.LFE66-.LFB66
 3206 0030 00000000 		.4byte	.LFB67
 3207 0034 7C020000 		.4byte	.LFE67-.LFB67
 3208 0038 00000000 		.4byte	.LFB68
 3209 003c 48000000 		.4byte	.LFE68-.LFB68
 3210 0040 00000000 		.4byte	.LFB69
 3211 0044 32000000 		.4byte	.LFE69-.LFB69
 3212 0048 00000000 		.4byte	.LFB70
 3213 004c 54010000 		.4byte	.LFE70-.LFB70
 3214 0050 00000000 		.4byte	.LFB71
 3215 0054 38000000 		.4byte	.LFE71-.LFB71
 3216 0058 00000000 		.4byte	.LFB72
 3217 005c C4010000 		.4byte	.LFE72-.LFB72
 3218 0060 00000000 		.4byte	.LFB73
 3219 0064 D8000000 		.4byte	.LFE73-.LFB73
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 68


 3220 0068 00000000 		.4byte	.LFB74
 3221 006c 58000000 		.4byte	.LFE74-.LFB74
 3222 0070 00000000 		.4byte	.LFB75
 3223 0074 36000000 		.4byte	.LFE75-.LFB75
 3224 0078 00000000 		.4byte	.LFB76
 3225 007c B0000000 		.4byte	.LFE76-.LFB76
 3226 0080 00000000 		.4byte	.LFB77
 3227 0084 3C000000 		.4byte	.LFE77-.LFB77
 3228 0088 00000000 		.4byte	.LFB78
 3229 008c 38000000 		.4byte	.LFE78-.LFB78
 3230 0090 00000000 		.4byte	.LFB79
 3231 0094 60000000 		.4byte	.LFE79-.LFB79
 3232 0098 00000000 		.4byte	0
 3233 009c 00000000 		.4byte	0
 3234              		.section	.debug_ranges,"",%progbits
 3235              	.Ldebug_ranges0:
 3236 0000 00000000 		.4byte	.LFB63
 3237 0004 28000000 		.4byte	.LFE63
 3238 0008 00000000 		.4byte	.LFB64
 3239 000c 58000000 		.4byte	.LFE64
 3240 0010 00000000 		.4byte	.LFB65
 3241 0014 1C000000 		.4byte	.LFE65
 3242 0018 00000000 		.4byte	.LFB66
 3243 001c 38000000 		.4byte	.LFE66
 3244 0020 00000000 		.4byte	.LFB67
 3245 0024 7C020000 		.4byte	.LFE67
 3246 0028 00000000 		.4byte	.LFB68
 3247 002c 48000000 		.4byte	.LFE68
 3248 0030 00000000 		.4byte	.LFB69
 3249 0034 32000000 		.4byte	.LFE69
 3250 0038 00000000 		.4byte	.LFB70
 3251 003c 54010000 		.4byte	.LFE70
 3252 0040 00000000 		.4byte	.LFB71
 3253 0044 38000000 		.4byte	.LFE71
 3254 0048 00000000 		.4byte	.LFB72
 3255 004c C4010000 		.4byte	.LFE72
 3256 0050 00000000 		.4byte	.LFB73
 3257 0054 D8000000 		.4byte	.LFE73
 3258 0058 00000000 		.4byte	.LFB74
 3259 005c 58000000 		.4byte	.LFE74
 3260 0060 00000000 		.4byte	.LFB75
 3261 0064 36000000 		.4byte	.LFE75
 3262 0068 00000000 		.4byte	.LFB76
 3263 006c B0000000 		.4byte	.LFE76
 3264 0070 00000000 		.4byte	.LFB77
 3265 0074 3C000000 		.4byte	.LFE77
 3266 0078 00000000 		.4byte	.LFB78
 3267 007c 38000000 		.4byte	.LFE78
 3268 0080 00000000 		.4byte	.LFB79
 3269 0084 60000000 		.4byte	.LFE79
 3270 0088 00000000 		.4byte	0
 3271 008c 00000000 		.4byte	0
 3272              		.section	.debug_line,"",%progbits
 3273              	.Ldebug_line0:
 3274 0000 95040000 		.section	.debug_str,"MS",%progbits,1
 3274      0200AE01 
 3274      00000201 
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 69


 3274      FB0E0D00 
 3274      01010101 
 3275              	.LASF24:
 3276 0000 68656164 		.ascii	"header\000"
 3276      657200
 3277              	.LASF51:
 3278 0007 7472616E 		.ascii	"transmitData\000"
 3278      736D6974 
 3278      44617461 
 3278      00
 3279              	.LASF32:
 3280 0014 68656164 		.ascii	"headerBytes\000"
 3280      65724279 
 3280      74657300 
 3281              	.LASF27:
 3282 0020 49646C65 		.ascii	"Idle_Collision_ISR\000"
 3282      5F436F6C 
 3282      6C697369 
 3282      6F6E5F49 
 3282      535200
 3283              	.LASF22:
 3284 0033 73746174 		.ascii	"state\000"
 3284      6500
 3285              	.LASF48:
 3286 0039 67657452 		.ascii	"getRandomNumber\000"
 3286      616E646F 
 3286      6D4E756D 
 3286      62657200 
 3287              	.LASF17:
 3288 0049 73697A65 		.ascii	"sizetype\000"
 3288      74797065 
 3288      00
 3289              	.LASF58:
 3290 0052 64696666 		.ascii	"diffManEncodedData\000"
 3290      4D616E45 
 3290      6E636F64 
 3290      65644461 
 3290      746100
 3291              	.LASF35:
 3292 0065 6D61696E 		.ascii	"main\000"
 3292      00
 3293              	.LASF55:
 3294 006a 68656164 		.ascii	"headerCheck\000"
 3294      65724368 
 3294      65636B00 
 3295              	.LASF53:
 3296 0076 73746F72 		.ascii	"storeChar\000"
 3296      65436861 
 3296      7200
 3297              	.LASF75:
 3298 0080 63726353 		.ascii	"crcState\000"
 3298      74617465 
 3298      00
 3299              	.LASF23:
 3300 0089 6E6F6E65 		.ascii	"none\000"
 3300      00
 3301              	.LASF2:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 70


 3302 008e 73686F72 		.ascii	"short int\000"
 3302      7420696E 
 3302      7400
 3303              	.LASF45:
 3304 0098 76616C75 		.ascii	"value\000"
 3304      6500
 3305              	.LASF21:
 3306 009e 636F6C6C 		.ascii	"collision\000"
 3306      6973696F 
 3306      6E00
 3307              	.LASF12:
 3308 00a8 75696E74 		.ascii	"uint16\000"
 3308      313600
 3309              	.LASF74:
 3310 00af 6E657477 		.ascii	"networkState\000"
 3310      6F726B53 
 3310      74617465 
 3310      00
 3311              	.LASF37:
 3312 00bc 68657854 		.ascii	"hexToDiffMan\000"
 3312      6F446966 
 3312      664D616E 
 3312      00
 3313              	.LASF11:
 3314 00c9 75696E74 		.ascii	"uint8\000"
 3314      3800
 3315              	.LASF31:
 3316 00cf 6C696E65 		.ascii	"lineString\000"
 3316      53747269 
 3316      6E6700
 3317              	.LASF28:
 3318 00da 45646765 		.ascii	"Edge_detect_ISR\000"
 3318      5F646574 
 3318      6563745F 
 3318      49535200 
 3319              	.LASF79:
 3320 00ea 443A5C4D 		.ascii	"D:\\MyDocs\\Documents\\CE4950\\USB_UART01\\USB_UART"
 3320      79446F63 
 3320      735C446F 
 3320      63756D65 
 3320      6E74735C 
 3321 0118 30312E63 		.ascii	"01.cydsn\000"
 3321      7964736E 
 3321      00
 3322              	.LASF13:
 3323 0121 666C6F61 		.ascii	"float\000"
 3323      7400
 3324              	.LASF38:
 3325 0127 68657856 		.ascii	"hexValue\000"
 3325      616C7565 
 3325      00
 3326              	.LASF6:
 3327 0130 6C6F6E67 		.ascii	"long long int\000"
 3327      206C6F6E 
 3327      6720696E 
 3327      7400
 3328              	.LASF7:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 71


 3329 013e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3329      206C6F6E 
 3329      6720756E 
 3329      7369676E 
 3329      65642069 
 3330              	.LASF69:
 3331 0155 54585F44 		.ascii	"TX_DESTINATION_ADDRESS\000"
 3331      45535449 
 3331      4E415449 
 3331      4F4E5F41 
 3331      44445245 
 3332              	.LASF77:
 3333 016c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3333      4320342E 
 3333      392E3320 
 3333      32303135 
 3333      30333033 
 3334 019f 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3334      20726576 
 3334      6973696F 
 3334      6E203232 
 3334      31323230 
 3335 01d2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3335      66756E63 
 3335      74696F6E 
 3335      2D736563 
 3335      74696F6E 
 3336              	.LASF47:
 3337 01fa 7365744E 		.ascii	"setNetworkStateOnLEDs\000"
 3337      6574776F 
 3337      726B5374 
 3337      6174654F 
 3337      6E4C4544 
 3338              	.LASF36:
 3339 0210 68656164 		.ascii	"headerToDiffMan\000"
 3339      6572546F 
 3339      44696666 
 3339      4D616E00 
 3340              	.LASF54:
 3341 0220 7072696E 		.ascii	"printChar\000"
 3341      74436861 
 3341      7200
 3342              	.LASF41:
 3343 022a 73747269 		.ascii	"stringToDiffMan\000"
 3343      6E67546F 
 3343      44696666 
 3343      4D616E00 
 3344              	.LASF1:
 3345 023a 756E7369 		.ascii	"unsigned char\000"
 3345      676E6564 
 3345      20636861 
 3345      7200
 3346              	.LASF64:
 3347 0248 63757272 		.ascii	"currentDataPos\000"
 3347      656E7444 
 3347      61746150 
 3347      6F7300
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 72


 3348              	.LASF65:
 3349 0257 63757272 		.ascii	"currentRXCharPosition\000"
 3349      656E7452 
 3349      58436861 
 3349      72506F73 
 3349      6974696F 
 3350              	.LASF18:
 3351 026d 74696D65 		.ascii	"time_t\000"
 3351      5F7400
 3352              	.LASF46:
 3353 0274 696E6974 		.ascii	"initDiffManEncodedArray\000"
 3353      44696666 
 3353      4D616E45 
 3353      6E636F64 
 3353      65644172 
 3354              	.LASF0:
 3355 028c 7369676E 		.ascii	"signed char\000"
 3355      65642063 
 3355      68617200 
 3356              	.LASF42:
 3357 0298 61736369 		.ascii	"asciiToDiffMan\000"
 3357      69546F44 
 3357      6966664D 
 3357      616E00
 3358              	.LASF19:
 3359 02a7 69646C65 		.ascii	"idle\000"
 3359      00
 3360              	.LASF52:
 3361 02ac 64696666 		.ascii	"diffManToASCII\000"
 3361      4D616E54 
 3361      6F415343 
 3361      494900
 3362              	.LASF8:
 3363 02bb 756E7369 		.ascii	"unsigned int\000"
 3363      676E6564 
 3363      20696E74 
 3363      00
 3364              	.LASF61:
 3365 02c8 72656365 		.ascii	"receivedDataIndex\000"
 3365      69766564 
 3365      44617461 
 3365      496E6465 
 3365      7800
 3366              	.LASF5:
 3367 02da 6C6F6E67 		.ascii	"long unsigned int\000"
 3367      20756E73 
 3367      69676E65 
 3367      6420696E 
 3367      7400
 3368              	.LASF26:
 3369 02ec 626F7468 		.ascii	"both\000"
 3369      00
 3370              	.LASF49:
 3371 02f1 4D494E5F 		.ascii	"MIN_N\000"
 3371      4E00
 3372              	.LASF43:
 3373 02f7 61736369 		.ascii	"asciiChar\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 73


 3373      69436861 
 3373      7200
 3374              	.LASF15:
 3375 0301 63686172 		.ascii	"char\000"
 3375      00
 3376              	.LASF76:
 3377 0306 72656365 		.ascii	"receivedChar\000"
 3377      69766564 
 3377      43686172 
 3377      00
 3378              	.LASF4:
 3379 0313 6C6F6E67 		.ascii	"long int\000"
 3379      20696E74 
 3379      00
 3380              	.LASF33:
 3381 031c 73747269 		.ascii	"stringPosition\000"
 3381      6E67506F 
 3381      73697469 
 3381      6F6E00
 3382              	.LASF10:
 3383 032b 696E7433 		.ascii	"int32_t\000"
 3383      325F7400 
 3384              	.LASF3:
 3385 0333 73686F72 		.ascii	"short unsigned int\000"
 3385      7420756E 
 3385      7369676E 
 3385      65642069 
 3385      6E7400
 3386              	.LASF34:
 3387 0346 7365636F 		.ascii	"seconds\000"
 3387      6E647300 
 3388              	.LASF56:
 3389 034e 5F426F6F 		.ascii	"_Bool\000"
 3389      6C00
 3390              	.LASF20:
 3391 0354 62757379 		.ascii	"busy\000"
 3391      00
 3392              	.LASF62:
 3393 0359 72656365 		.ascii	"receivedDataCount\000"
 3393      69766564 
 3393      44617461 
 3393      436F756E 
 3393      7400
 3394              	.LASF16:
 3395 036b 72656738 		.ascii	"reg8\000"
 3395      00
 3396              	.LASF25:
 3397 0370 6D657373 		.ascii	"message\000"
 3397      61676500 
 3398              	.LASF14:
 3399 0378 646F7562 		.ascii	"double\000"
 3399      6C6500
 3400              	.LASF73:
 3401 037f 68656164 		.ascii	"headerValid\000"
 3401      65725661 
 3401      6C696400 
 3402              	.LASF67:
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 74


 3403 038b 6D657373 		.ascii	"messageLength\000"
 3403      6167654C 
 3403      656E6774 
 3403      6800
 3404              	.LASF59:
 3405 0399 64696666 		.ascii	"diffManReceivedData\000"
 3405      4D616E52 
 3405      65636569 
 3405      76656444 
 3405      61746100 
 3406              	.LASF60:
 3407 03ad 72784368 		.ascii	"rxChar\000"
 3407      617200
 3408              	.LASF30:
 3409 03b4 52656365 		.ascii	"ReceiveTimerISR\000"
 3409      69766554 
 3409      696D6572 
 3409      49535200 
 3410              	.LASF44:
 3411 03c4 62696E61 		.ascii	"binaryValueOfChar\000"
 3411      72795661 
 3411      6C75654F 
 3411      66436861 
 3411      7200
 3412              	.LASF78:
 3413 03d6 2E5C6D61 		.ascii	".\\main.c\000"
 3413      696E2E63 
 3413      00
 3414              	.LASF9:
 3415 03df 5F5F696E 		.ascii	"__int32_t\000"
 3415      7433325F 
 3415      7400
 3416              	.LASF63:
 3417 03e9 68616C66 		.ascii	"halfBitIndex\000"
 3417      42697449 
 3417      6E646578 
 3417      00
 3418              	.LASF50:
 3419 03f6 4D41585F 		.ascii	"MAX_N\000"
 3419      4E00
 3420              	.LASF68:
 3421 03fc 68656164 		.ascii	"headerCRC\000"
 3421      65724352 
 3421      4300
 3422              	.LASF66:
 3423 0406 6C656E67 		.ascii	"lengthOfData\000"
 3423      74684F66 
 3423      44617461 
 3423      00
 3424              	.LASF71:
 3425 0413 64617461 		.ascii	"dataTransmissionComplete\000"
 3425      5472616E 
 3425      736D6973 
 3425      73696F6E 
 3425      436F6D70 
 3426              	.LASF29:
 3427 042c 54696D65 		.ascii	"TimerHandler\000"
ARM GAS  C:\Users\mrowiecn\AppData\Local\Temp\ccXcbrlv.s 			page 75


 3427      7248616E 
 3427      646C6572 
 3427      00
 3428              	.LASF57:
 3429 0439 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3429      52784275 
 3429      66666572 
 3429      00
 3430              	.LASF40:
 3431 0446 70726576 		.ascii	"previousHalfBit\000"
 3431      696F7573 
 3431      48616C66 
 3431      42697400 
 3432              	.LASF39:
 3433 0456 62696E61 		.ascii	"binaryValueOfHex\000"
 3433      72795661 
 3433      6C75654F 
 3433      66486578 
 3433      00
 3434              	.LASF70:
 3435 0467 74696D65 		.ascii	"timerExpired\000"
 3435      72457870 
 3435      69726564 
 3435      00
 3436              	.LASF72:
 3437 0474 706F7765 		.ascii	"powerOnEdge\000"
 3437      724F6E45 
 3437      64676500 
 3438              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
